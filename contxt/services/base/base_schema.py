import sgqlc.types
import sgqlc.types.datetime
import sgqlc.types.relay


base = sgqlc.types.Schema()


# Unexport Node/PageInfo, let schema re-declare them
base -= sgqlc.types.relay.Node
base -= sgqlc.types.relay.PageInfo


__docformat__ = 'markdown'


########################################################################
# Scalars and Enumerations
########################################################################
class AggregateWarehouseUtilByCustomerRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering
    `AggregateWarehouseUtilByCustomerRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `SNAPSHOT_DATE_ASC`None
    * `SNAPSHOT_DATE_DESC`None
    * `TOTAL_FILLED_PALLET_LOCATIONS_ASC`None
    * `TOTAL_FILLED_PALLET_LOCATIONS_DESC`None
    * `TOTAL_PALLETS_ON_HAND_ASC`None
    * `TOTAL_PALLETS_ON_HAND_DESC`None
    * `PARENT_AGGREGATE_WAREHOUSE_UTIL_ID_ASC`None
    * `PARENT_AGGREGATE_WAREHOUSE_UTIL_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PARENT_AGGREGATE_WAREHOUSE_UTIL_ID_ASC', 'PARENT_AGGREGATE_WAREHOUSE_UTIL_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SNAPSHOT_DATE_ASC', 'SNAPSHOT_DATE_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TOTAL_FILLED_PALLET_LOCATIONS_ASC', 'TOTAL_FILLED_PALLET_LOCATIONS_DESC', 'TOTAL_PALLETS_ON_HAND_ASC', 'TOTAL_PALLETS_ON_HAND_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class AggregateWarehouseUtilRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `AggregateWarehouseUtilRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `SNAPSHOT_DATE_ASC`None
    * `SNAPSHOT_DATE_DESC`None
    * `TOTAL_PALLET_LOCATIONS_ASC`None
    * `TOTAL_PALLET_LOCATIONS_DESC`None
    * `TOTAL_FILLED_PALLET_LOCATIONS_ASC`None
    * `TOTAL_FILLED_PALLET_LOCATIONS_DESC`None
    * `TOTAL_PALLETS_ON_HAND_ASC`None
    * `TOTAL_PALLETS_ON_HAND_DESC`None
    * `HAS_CUSTOMER_AGGREGATES_ASC`None
    * `HAS_CUSTOMER_AGGREGATES_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'HAS_CUSTOMER_AGGREGATES_ASC', 'HAS_CUSTOMER_AGGREGATES_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SNAPSHOT_DATE_ASC', 'SNAPSHOT_DATE_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TOTAL_FILLED_PALLET_LOCATIONS_ASC', 'TOTAL_FILLED_PALLET_LOCATIONS_DESC', 'TOTAL_PALLETS_ON_HAND_ASC', 'TOTAL_PALLETS_ON_HAND_DESC', 'TOTAL_PALLET_LOCATIONS_ASC', 'TOTAL_PALLET_LOCATIONS_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class AggregateWarehouseVolumeByCustomerRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering
    `AggregateWarehouseVolumeByCustomerRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `FINISHED_DATE_ASC`None
    * `FINISHED_DATE_DESC`None
    * `INBOUND_GROSS_WEIGHT_ASC`None
    * `INBOUND_GROSS_WEIGHT_DESC`None
    * `INBOUND_NET_WEIGHT_ASC`None
    * `INBOUND_NET_WEIGHT_DESC`None
    * `INBOUND_CASE_QUANTITY_ASC`None
    * `INBOUND_CASE_QUANTITY_DESC`None
    * `INBOUND_PALLETS_ASC`None
    * `INBOUND_PALLETS_DESC`None
    * `INBOUND_LOADS_ASC`None
    * `INBOUND_LOADS_DESC`None
    * `OUTBOUND_GROSS_WEIGHT_ASC`None
    * `OUTBOUND_GROSS_WEIGHT_DESC`None
    * `OUTBOUND_NET_WEIGHT_ASC`None
    * `OUTBOUND_NET_WEIGHT_DESC`None
    * `OUTBOUND_CASE_QUANTITY_ASC`None
    * `OUTBOUND_CASE_QUANTITY_DESC`None
    * `OUTBOUND_PALLETS_ASC`None
    * `OUTBOUND_PALLETS_DESC`None
    * `OUTBOUND_LOADS_ASC`None
    * `OUTBOUND_LOADS_DESC`None
    * `NUMBER_OF_PICKS_ASC`None
    * `NUMBER_OF_PICKS_DESC`None
    * `NUMBER_OF_CASES_PICKED_ASC`None
    * `NUMBER_OF_CASES_PICKED_DESC`None
    * `PARENT_AGGREGATE_WAREHOUSE_VOLUME_ID_ASC`None
    * `PARENT_AGGREGATE_WAREHOUSE_VOLUME_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FINISHED_DATE_ASC', 'FINISHED_DATE_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_CASE_QUANTITY_ASC', 'INBOUND_CASE_QUANTITY_DESC', 'INBOUND_GROSS_WEIGHT_ASC', 'INBOUND_GROSS_WEIGHT_DESC', 'INBOUND_LOADS_ASC', 'INBOUND_LOADS_DESC', 'INBOUND_NET_WEIGHT_ASC', 'INBOUND_NET_WEIGHT_DESC', 'INBOUND_PALLETS_ASC', 'INBOUND_PALLETS_DESC', 'NATURAL', 'NUMBER_OF_CASES_PICKED_ASC', 'NUMBER_OF_CASES_PICKED_DESC', 'NUMBER_OF_PICKS_ASC', 'NUMBER_OF_PICKS_DESC', 'OUTBOUND_CASE_QUANTITY_ASC', 'OUTBOUND_CASE_QUANTITY_DESC', 'OUTBOUND_GROSS_WEIGHT_ASC', 'OUTBOUND_GROSS_WEIGHT_DESC', 'OUTBOUND_LOADS_ASC', 'OUTBOUND_LOADS_DESC', 'OUTBOUND_NET_WEIGHT_ASC', 'OUTBOUND_NET_WEIGHT_DESC', 'OUTBOUND_PALLETS_ASC', 'OUTBOUND_PALLETS_DESC', 'PARENT_AGGREGATE_WAREHOUSE_VOLUME_ID_ASC', 'PARENT_AGGREGATE_WAREHOUSE_VOLUME_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class AggregateWarehouseVolumeRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `AggregateWarehouseVolumeRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `FINISHED_DATE_ASC`None
    * `FINISHED_DATE_DESC`None
    * `INBOUND_GROSS_WEIGHT_ASC`None
    * `INBOUND_GROSS_WEIGHT_DESC`None
    * `INBOUND_NET_WEIGHT_ASC`None
    * `INBOUND_NET_WEIGHT_DESC`None
    * `INBOUND_CASE_QUANTITY_ASC`None
    * `INBOUND_CASE_QUANTITY_DESC`None
    * `INBOUND_PALLETS_ASC`None
    * `INBOUND_PALLETS_DESC`None
    * `INBOUND_LOADS_ASC`None
    * `INBOUND_LOADS_DESC`None
    * `OUTBOUND_GROSS_WEIGHT_ASC`None
    * `OUTBOUND_GROSS_WEIGHT_DESC`None
    * `OUTBOUND_NET_WEIGHT_ASC`None
    * `OUTBOUND_NET_WEIGHT_DESC`None
    * `OUTBOUND_CASE_QUANTITY_ASC`None
    * `OUTBOUND_CASE_QUANTITY_DESC`None
    * `OUTBOUND_PALLETS_ASC`None
    * `OUTBOUND_PALLETS_DESC`None
    * `OUTBOUND_LOADS_ASC`None
    * `OUTBOUND_LOADS_DESC`None
    * `NUMBER_OF_PICKS_ASC`None
    * `NUMBER_OF_PICKS_DESC`None
    * `NUMBER_OF_CASES_PICKED_ASC`None
    * `NUMBER_OF_CASES_PICKED_DESC`None
    * `HAS_CUSTOMER_AGGREGATES_ASC`None
    * `HAS_CUSTOMER_AGGREGATES_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FINISHED_DATE_ASC', 'FINISHED_DATE_DESC', 'HAS_CUSTOMER_AGGREGATES_ASC', 'HAS_CUSTOMER_AGGREGATES_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_CASE_QUANTITY_ASC', 'INBOUND_CASE_QUANTITY_DESC', 'INBOUND_GROSS_WEIGHT_ASC', 'INBOUND_GROSS_WEIGHT_DESC', 'INBOUND_LOADS_ASC', 'INBOUND_LOADS_DESC', 'INBOUND_NET_WEIGHT_ASC', 'INBOUND_NET_WEIGHT_DESC', 'INBOUND_PALLETS_ASC', 'INBOUND_PALLETS_DESC', 'NATURAL', 'NUMBER_OF_CASES_PICKED_ASC', 'NUMBER_OF_CASES_PICKED_DESC', 'NUMBER_OF_PICKS_ASC', 'NUMBER_OF_PICKS_DESC', 'OUTBOUND_CASE_QUANTITY_ASC', 'OUTBOUND_CASE_QUANTITY_DESC', 'OUTBOUND_GROSS_WEIGHT_ASC', 'OUTBOUND_GROSS_WEIGHT_DESC', 'OUTBOUND_LOADS_ASC', 'OUTBOUND_LOADS_DESC', 'OUTBOUND_NET_WEIGHT_ASC', 'OUTBOUND_NET_WEIGHT_DESC', 'OUTBOUND_PALLETS_ASC', 'OUTBOUND_PALLETS_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class BigFloat(sgqlc.types.Scalar):
    '''A floating point number that requires more precision than IEEE 754
    binary 64
    '''
    __schema__ = base


class BigInt(sgqlc.types.Scalar):
    '''A signed eight-byte integer. The upper big integer values are
    greater than the max value for a JavaScript number. Therefore all
    big integers will be output as strings and not numbers.
    '''
    __schema__ = base


class BillingHistoriesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BillingHistory`.

    Enumeration Choices:

    * `NATURAL`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CHARGE_CODE_ASC`None
    * `CHARGE_CODE_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `INVOICE_ASC`None
    * `INVOICE_DESC`None
    * `INVOICE_DATE_ASC`None
    * `INVOICE_DATE_DESC`None
    * `BILL_FROM_DATE_ASC`None
    * `BILL_FROM_DATE_DESC`None
    * `RATE_CHARGED_ASC`None
    * `RATE_CHARGED_DESC`None
    * `UNIT_OF_MEASUREMENT_ASC`None
    * `UNIT_OF_MEASUREMENT_DESC`None
    * `BILLED_QUANTITY_ASC`None
    * `BILLED_QUANTITY_DESC`None
    * `BILLED_WEIGHT_ASC`None
    * `BILLED_WEIGHT_DESC`None
    * `BASIS_ASC`None
    * `BASIS_DESC`None
    * `BILLED_PALLET_COUNT_ASC`None
    * `BILLED_PALLET_COUNT_DESC`None
    * `BILLED_CUBE_COUNT_ASC`None
    * `BILLED_CUBE_COUNT_DESC`None
    * `DEBIT_AMOUNT_ASC`None
    * `DEBIT_AMOUNT_DESC`None
    * `CREDIT_AMOUNT_ASC`None
    * `CREDIT_AMOUNT_DESC`None
    * `RENEWAL_PERIOD_ASC`None
    * `RENEWAL_PERIOD_DESC`None
    * `ORIGINAL_AMOUNT_ASC`None
    * `ORIGINAL_AMOUNT_DESC`None
    * `BILL_ID_ASC`None
    * `BILL_ID_DESC`None
    * `BILLED_BY_ASC`None
    * `BILLED_BY_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `NUM_DAYS_ASC`None
    * `NUM_DAYS_DESC`None
    * `BILL_TYPE_ASC`None
    * `BILL_TYPE_DESC`None
    * `BREAK_FACTOR_ASC`None
    * `BREAK_FACTOR_DESC`None
    * `LINE_BILLED_BY_ASC`None
    * `LINE_BILLED_BY_DESC`None
    * `POSTED_BY_ASC`None
    * `POSTED_BY_DESC`None
    * `POSTED_DATETIME_ASC`None
    * `POSTED_DATETIME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BASIS_ASC', 'BASIS_DESC', 'BILLED_BY_ASC', 'BILLED_BY_DESC', 'BILLED_CUBE_COUNT_ASC', 'BILLED_CUBE_COUNT_DESC', 'BILLED_PALLET_COUNT_ASC', 'BILLED_PALLET_COUNT_DESC', 'BILLED_QUANTITY_ASC', 'BILLED_QUANTITY_DESC', 'BILLED_WEIGHT_ASC', 'BILLED_WEIGHT_DESC', 'BILL_FROM_DATE_ASC', 'BILL_FROM_DATE_DESC', 'BILL_ID_ASC', 'BILL_ID_DESC', 'BILL_TYPE_ASC', 'BILL_TYPE_DESC', 'BREAK_FACTOR_ASC', 'BREAK_FACTOR_DESC', 'CHARGE_CODE_ASC', 'CHARGE_CODE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CREDIT_AMOUNT_ASC', 'CREDIT_AMOUNT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DEBIT_AMOUNT_ASC', 'DEBIT_AMOUNT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'ID_ASC', 'ID_DESC', 'INVOICE_ASC', 'INVOICE_DATE_ASC', 'INVOICE_DATE_DESC', 'INVOICE_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'LINE_BILLED_BY_ASC', 'LINE_BILLED_BY_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'NATURAL', 'NOTES_ASC', 'NOTES_DESC', 'NUM_DAYS_ASC', 'NUM_DAYS_DESC', 'ORIGINAL_AMOUNT_ASC', 'ORIGINAL_AMOUNT_DESC', 'POSTED_BY_ASC', 'POSTED_BY_DESC', 'POSTED_DATETIME_ASC', 'POSTED_DATETIME_DESC', 'RATE_CHARGED_ASC', 'RATE_CHARGED_DESC', 'RENEWAL_PERIOD_ASC', 'RENEWAL_PERIOD_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UNIT_OF_MEASUREMENT_ASC', 'UNIT_OF_MEASUREMENT_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class BillingHistoryRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BillingHistoryRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CHARGE_CODE_ASC`None
    * `CHARGE_CODE_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `INVOICE_ASC`None
    * `INVOICE_DESC`None
    * `INVOICE_DATE_ASC`None
    * `INVOICE_DATE_DESC`None
    * `BILL_FROM_DATE_ASC`None
    * `BILL_FROM_DATE_DESC`None
    * `RATE_CHARGED_ASC`None
    * `RATE_CHARGED_DESC`None
    * `UNIT_OF_MEASUREMENT_ASC`None
    * `UNIT_OF_MEASUREMENT_DESC`None
    * `BILLED_QUANTITY_ASC`None
    * `BILLED_QUANTITY_DESC`None
    * `BILLED_WEIGHT_ASC`None
    * `BILLED_WEIGHT_DESC`None
    * `BASIS_ASC`None
    * `BASIS_DESC`None
    * `BILLED_PALLET_COUNT_ASC`None
    * `BILLED_PALLET_COUNT_DESC`None
    * `BILLED_CUBE_COUNT_ASC`None
    * `BILLED_CUBE_COUNT_DESC`None
    * `DEBIT_AMOUNT_ASC`None
    * `DEBIT_AMOUNT_DESC`None
    * `CREDIT_AMOUNT_ASC`None
    * `CREDIT_AMOUNT_DESC`None
    * `RENEWAL_PERIOD_ASC`None
    * `RENEWAL_PERIOD_DESC`None
    * `ORIGINAL_AMOUNT_ASC`None
    * `ORIGINAL_AMOUNT_DESC`None
    * `BILL_ID_ASC`None
    * `BILL_ID_DESC`None
    * `BILLED_BY_ASC`None
    * `BILLED_BY_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `NUM_DAYS_ASC`None
    * `NUM_DAYS_DESC`None
    * `BILL_TYPE_ASC`None
    * `BILL_TYPE_DESC`None
    * `BREAK_FACTOR_ASC`None
    * `BREAK_FACTOR_DESC`None
    * `LINE_BILLED_BY_ASC`None
    * `LINE_BILLED_BY_DESC`None
    * `POSTED_BY_ASC`None
    * `POSTED_BY_DESC`None
    * `POSTED_DATETIME_ASC`None
    * `POSTED_DATETIME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `ORIGINAL_CUSTOMER_ASC`None
    * `ORIGINAL_CUSTOMER_DESC`None
    * `LAST_BILL_ASC`None
    * `LAST_BILL_DESC`None
    * `WEIGHT_TYPE_ASC`None
    * `WEIGHT_TYPE_DESC`None
    * `PRICE_CODE_ASC`None
    * `PRICE_CODE_DESC`None
    * `BREAK_CODE_ASC`None
    * `BREAK_CODE_DESC`None
    * `MISC_CODE_ASC`None
    * `MISC_CODE_DESC`None
    * `AR_BATCH_ASC`None
    * `AR_BATCH_DESC`None
    * `GROUP_CODE_ASC`None
    * `GROUP_CODE_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `ORDER_ID_ASC`None
    * `ORDER_ID_DESC`None
    * `INBOUND_OUTBOUND_FLAG_ASC`None
    * `INBOUND_OUTBOUND_FLAG_DESC`None
    * `PRODUCT_CODE_ASC`None
    * `PRODUCT_CODE_DESC`None
    * `OWNER_CUSTOMER_CODE_ASC`None
    * `OWNER_CUSTOMER_CODE_DESC`None
    * `ITEM_CATEGORY_ASC`None
    * `ITEM_CATEGORY_DESC`None
    * `SUPPLIER_PRODUCT_CODE_ASC`None
    * `SUPPLIER_PRODUCT_CODE_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('AR_BATCH_ASC', 'AR_BATCH_DESC', 'BASIS_ASC', 'BASIS_DESC', 'BILLED_BY_ASC', 'BILLED_BY_DESC', 'BILLED_CUBE_COUNT_ASC', 'BILLED_CUBE_COUNT_DESC', 'BILLED_PALLET_COUNT_ASC', 'BILLED_PALLET_COUNT_DESC', 'BILLED_QUANTITY_ASC', 'BILLED_QUANTITY_DESC', 'BILLED_WEIGHT_ASC', 'BILLED_WEIGHT_DESC', 'BILL_FROM_DATE_ASC', 'BILL_FROM_DATE_DESC', 'BILL_ID_ASC', 'BILL_ID_DESC', 'BILL_TYPE_ASC', 'BILL_TYPE_DESC', 'BREAK_CODE_ASC', 'BREAK_CODE_DESC', 'BREAK_FACTOR_ASC', 'BREAK_FACTOR_DESC', 'CHARGE_CODE_ASC', 'CHARGE_CODE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CREDIT_AMOUNT_ASC', 'CREDIT_AMOUNT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DEBIT_AMOUNT_ASC', 'DEBIT_AMOUNT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'GROUP_CODE_ASC', 'GROUP_CODE_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_OUTBOUND_FLAG_ASC', 'INBOUND_OUTBOUND_FLAG_DESC', 'INVOICE_ASC', 'INVOICE_DATE_ASC', 'INVOICE_DATE_DESC', 'INVOICE_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CATEGORY_ASC', 'ITEM_CATEGORY_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LAST_BILL_ASC', 'LAST_BILL_DESC', 'LINE_BILLED_BY_ASC', 'LINE_BILLED_BY_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'MISC_CODE_ASC', 'MISC_CODE_DESC', 'NATURAL', 'NOTES_ASC', 'NOTES_DESC', 'NUM_DAYS_ASC', 'NUM_DAYS_DESC', 'ORDER_ID_ASC', 'ORDER_ID_DESC', 'ORIGINAL_AMOUNT_ASC', 'ORIGINAL_AMOUNT_DESC', 'ORIGINAL_CUSTOMER_ASC', 'ORIGINAL_CUSTOMER_DESC', 'OWNER_CUSTOMER_CODE_ASC', 'OWNER_CUSTOMER_CODE_DESC', 'POSTED_BY_ASC', 'POSTED_BY_DESC', 'POSTED_DATETIME_ASC', 'POSTED_DATETIME_DESC', 'PRICE_CODE_ASC', 'PRICE_CODE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PRODUCT_CODE_ASC', 'PRODUCT_CODE_DESC', 'RATE_CHARGED_ASC', 'RATE_CHARGED_DESC', 'RENEWAL_PERIOD_ASC', 'RENEWAL_PERIOD_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'SUPPLIER_PRODUCT_CODE_ASC', 'SUPPLIER_PRODUCT_CODE_DESC', 'UNIT_OF_MEASUREMENT_ASC', 'UNIT_OF_MEASUREMENT_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_TYPE_ASC', 'WEIGHT_TYPE_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class BlastCellTypesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BlastCellType`.

    Enumeration Choices:

    * `NATURAL`None
    * `SLUG_ASC`None
    * `SLUG_DESC`None
    * `DESCRIPTION_ASC`None
    * `DESCRIPTION_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DESCRIPTION_ASC', 'DESCRIPTION_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SLUG_ASC', 'SLUG_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class BlastCellWmsPalletLocationsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BlastCellWmsPalletLocation`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `BLAST_CELL_ID_ASC`None
    * `BLAST_CELL_ID_DESC`None
    * `WMS_PALLET_LOCATION_ID_ASC`None
    * `WMS_PALLET_LOCATION_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BLAST_CELL_ID_ASC', 'BLAST_CELL_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WMS_PALLET_LOCATION_ID_ASC', 'WMS_PALLET_LOCATION_ID_DESC')


class BlastCellWmsPalletsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BlastCellWmsPallet`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `BLAST_CELL_ID_ASC`None
    * `BLAST_CELL_ID_DESC`None
    * `WMS_PALLET_ID_ASC`None
    * `WMS_PALLET_ID_DESC`None
    * `PALLET_DROPPED_DATETIME_ASC`None
    * `PALLET_DROPPED_DATETIME_DESC`None
    * `PALLET_PICKED_DATETIME_ASC`None
    * `PALLET_PICKED_DATETIME_DESC`None
    * `BLAST_CYCLE_ID_ASC`None
    * `BLAST_CYCLE_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BLAST_CELL_ID_ASC', 'BLAST_CELL_ID_DESC', 'BLAST_CYCLE_ID_ASC', 'BLAST_CYCLE_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PALLET_DROPPED_DATETIME_ASC', 'PALLET_DROPPED_DATETIME_DESC', 'PALLET_PICKED_DATETIME_ASC', 'PALLET_PICKED_DATETIME_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WMS_PALLET_ID_ASC', 'WMS_PALLET_ID_DESC')


class BlastCellsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BlastCell`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SLUG_ASC`None
    * `SLUG_DESC`None
    * `LABEL_ASC`None
    * `LABEL_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `BLAST_CELL_TYPE_ID_ASC`None
    * `BLAST_CELL_TYPE_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BLAST_CELL_TYPE_ID_ASC', 'BLAST_CELL_TYPE_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'ID_ASC', 'ID_DESC', 'LABEL_ASC', 'LABEL_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SLUG_ASC', 'SLUG_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class BlastCycleEventsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BlastCycleEvent`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `BLAST_CYCLE_ID_ASC`None
    * `BLAST_CYCLE_ID_DESC`None
    * `DESCRIPTION_ASC`None
    * `DESCRIPTION_DESC`None
    * `TYPE_ASC`None
    * `TYPE_DESC`None
    * `EVENT_TIME_ASC`None
    * `EVENT_TIME_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BLAST_CYCLE_ID_ASC', 'BLAST_CYCLE_ID_DESC', 'DESCRIPTION_ASC', 'DESCRIPTION_DESC', 'EVENT_TIME_ASC', 'EVENT_TIME_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'TYPE_ASC', 'TYPE_DESC')


class BlastCycleWmsPalletsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BlastCycleWmsPallet`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `BLAST_CYCLE_ID_ASC`None
    * `BLAST_CYCLE_ID_DESC`None
    * `WMS_PALLET_ID_ASC`None
    * `WMS_PALLET_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BLAST_CYCLE_ID_ASC', 'BLAST_CYCLE_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WMS_PALLET_ID_ASC', 'WMS_PALLET_ID_DESC')


class BlastCyclesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BlastCycle`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `BLAST_CELL_ID_ASC`None
    * `BLAST_CELL_ID_DESC`None
    * `OVERALL_START_TIME_ASC`None
    * `OVERALL_START_TIME_DESC`None
    * `OVERALL_FINISH_TIME_ASC`None
    * `OVERALL_FINISH_TIME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `CURRENT_STATUS_ASC`None
    * `CURRENT_STATUS_DESC`None
    * `EVENT_PROPOSAL_ID_ASC`None
    * `EVENT_PROPOSAL_ID_DESC`None
    * `ESTIMATED_FREEZING_HOURS_ASC`None
    * `ESTIMATED_FREEZING_HOURS_DESC`None
    * `PLANNED_PALLET_FREEZING_HOURS_ASC`None
    * `PLANNED_PALLET_FREEZING_HOURS_DESC`None
    * `IDEAL_PALLET_FREEZING_HOURS_ASC`None
    * `IDEAL_PALLET_FREEZING_HOURS_DESC`None
    * `LOAD_START_TIME_ASC`None
    * `LOAD_START_TIME_DESC`None
    * `LOAD_FINISH_TIME_ASC`None
    * `LOAD_FINISH_TIME_DESC`None
    * `REFRIGERATION_START_TIME_ASC`None
    * `REFRIGERATION_START_TIME_DESC`None
    * `REFRIGERATION_FINISH_TIME_ASC`None
    * `REFRIGERATION_FINISH_TIME_DESC`None
    * `UNLOAD_START_TIME_ASC`None
    * `UNLOAD_START_TIME_DESC`None
    * `UNLOAD_FINISH_TIME_ASC`None
    * `UNLOAD_FINISH_TIME_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BLAST_CELL_ID_ASC', 'BLAST_CELL_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CURRENT_STATUS_ASC', 'CURRENT_STATUS_DESC', 'ESTIMATED_FREEZING_HOURS_ASC', 'ESTIMATED_FREEZING_HOURS_DESC', 'EVENT_PROPOSAL_ID_ASC', 'EVENT_PROPOSAL_ID_DESC', 'IDEAL_PALLET_FREEZING_HOURS_ASC', 'IDEAL_PALLET_FREEZING_HOURS_DESC', 'ID_ASC', 'ID_DESC', 'LOAD_FINISH_TIME_ASC', 'LOAD_FINISH_TIME_DESC', 'LOAD_START_TIME_ASC', 'LOAD_START_TIME_DESC', 'NATURAL', 'OVERALL_FINISH_TIME_ASC', 'OVERALL_FINISH_TIME_DESC', 'OVERALL_START_TIME_ASC', 'OVERALL_START_TIME_DESC', 'PLANNED_PALLET_FREEZING_HOURS_ASC', 'PLANNED_PALLET_FREEZING_HOURS_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'REFRIGERATION_FINISH_TIME_ASC', 'REFRIGERATION_FINISH_TIME_DESC', 'REFRIGERATION_START_TIME_ASC', 'REFRIGERATION_START_TIME_DESC', 'UNLOAD_FINISH_TIME_ASC', 'UNLOAD_FINISH_TIME_DESC', 'UNLOAD_START_TIME_ASC', 'UNLOAD_START_TIME_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class BlastPlanPalletsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BlastPlanPallet`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `BLAST_PLAN_ID_ASC`None
    * `BLAST_PLAN_ID_DESC`None
    * `WMS_PALLET_ID_ASC`None
    * `WMS_PALLET_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BLAST_PLAN_ID_ASC', 'BLAST_PLAN_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WMS_PALLET_ID_ASC', 'WMS_PALLET_ID_DESC')


class BlastPlanType(sgqlc.types.Enum):
    '''Enumeration Choices:

    * `MANUAL`None
    * `RECOMMENDED`None
    '''
    __schema__ = base
    __choices__ = ('MANUAL', 'RECOMMENDED')


class BlastPlansOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BlastPlan`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `ASSIGNMENT_TIME_ASC`None
    * `ASSIGNMENT_TIME_DESC`None
    * `ASSIGNED_BY_ASC`None
    * `ASSIGNED_BY_DESC`None
    * `TYPE_ASC`None
    * `TYPE_DESC`None
    * `ASSIGNED_BLAST_CELL_ID_ASC`None
    * `ASSIGNED_BLAST_CELL_ID_DESC`None
    * `IS_COMMITTED_ASC`None
    * `IS_COMMITTED_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ASSIGNED_BLAST_CELL_ID_ASC', 'ASSIGNED_BLAST_CELL_ID_DESC', 'ASSIGNED_BY_ASC', 'ASSIGNED_BY_DESC', 'ASSIGNMENT_TIME_ASC', 'ASSIGNMENT_TIME_DESC', 'ID_ASC', 'ID_DESC', 'IS_COMMITTED_ASC', 'IS_COMMITTED_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'TYPE_ASC', 'TYPE_DESC')


class BolConstantsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BolConstantsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CHEP_PALLET_WEIGHT_ASC`None
    * `CHEP_PALLET_WEIGHT_DESC`None
    * `CPC_PALLET_WEIGHT_ASC`None
    * `CPC_PALLET_WEIGHT_DESC`None
    * `IGPS_PALLET_WEIGHT_ASC`None
    * `IGPS_PALLET_WEIGHT_DESC`None
    * `IS_PRINT_ASC`None
    * `IS_PRINT_DESC`None
    * `WHITEWOOD_PALLET_WEIGHT_ASC`None
    * `WHITEWOOD_PALLET_WEIGHT_DESC`None
    * `CUSTOMER_ADDRESS_LINE1_ASC`None
    * `CUSTOMER_ADDRESS_LINE1_DESC`None
    * `CUSTOMER_ADDRESS_LINE2_ASC`None
    * `CUSTOMER_ADDRESS_LINE2_DESC`None
    * `CUSTOMER_CITY_STATE_ZIP_ASC`None
    * `CUSTOMER_CITY_STATE_ZIP_DESC`None
    * `SHIPPER_NAME_ASC`None
    * `SHIPPER_NAME_DESC`None
    * `WAREHOUSE_ADDRESS_LINE1_ASC`None
    * `WAREHOUSE_ADDRESS_LINE1_DESC`None
    * `WAREHOUSE_ADDRESS_LINE2_ASC`None
    * `WAREHOUSE_ADDRESS_LINE2_DESC`None
    * `WAREHOUSE_ADDRESS_LINE3_ASC`None
    * `WAREHOUSE_ADDRESS_LINE3_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CHEP_PALLET_WEIGHT_ASC', 'CHEP_PALLET_WEIGHT_DESC', 'CPC_PALLET_WEIGHT_ASC', 'CPC_PALLET_WEIGHT_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_ADDRESS_LINE1_ASC', 'CUSTOMER_ADDRESS_LINE1_DESC', 'CUSTOMER_ADDRESS_LINE2_ASC', 'CUSTOMER_ADDRESS_LINE2_DESC', 'CUSTOMER_CITY_STATE_ZIP_ASC', 'CUSTOMER_CITY_STATE_ZIP_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IGPS_PALLET_WEIGHT_ASC', 'IGPS_PALLET_WEIGHT_DESC', 'IS_PRINT_ASC', 'IS_PRINT_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SHIPPER_NAME_ASC', 'SHIPPER_NAME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_ADDRESS_LINE1_ASC', 'WAREHOUSE_ADDRESS_LINE1_DESC', 'WAREHOUSE_ADDRESS_LINE2_ASC', 'WAREHOUSE_ADDRESS_LINE2_DESC', 'WAREHOUSE_ADDRESS_LINE3_ASC', 'WAREHOUSE_ADDRESS_LINE3_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', 'WHITEWOOD_PALLET_WEIGHT_ASC', 'WHITEWOOD_PALLET_WEIGHT_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


Boolean = sgqlc.types.Boolean

class BrokerOwnersRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `BrokerOwnersRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `BROKER_CUSTOMER_CODE_ASC`None
    * `BROKER_CUSTOMER_CODE_DESC`None
    * `BROKER_CUSTOMER_ID_ASC`None
    * `BROKER_CUSTOMER_ID_DESC`None
    * `OWNER_CODE_ASC`None
    * `OWNER_CODE_DESC`None
    * `OWNER_NAME_ASC`None
    * `OWNER_NAME_DESC`None
    * `OWNER_CUSTOMER_CODE_ASC`None
    * `OWNER_CUSTOMER_CODE_DESC`None
    * `OWNER_CUSTOMER_ID_ASC`None
    * `OWNER_CUSTOMER_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BROKER_CUSTOMER_CODE_ASC', 'BROKER_CUSTOMER_CODE_DESC', 'BROKER_CUSTOMER_ID_ASC', 'BROKER_CUSTOMER_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'OWNER_CODE_ASC', 'OWNER_CODE_DESC', 'OWNER_CUSTOMER_CODE_ASC', 'OWNER_CUSTOMER_CODE_DESC', 'OWNER_CUSTOMER_ID_ASC', 'OWNER_CUSTOMER_ID_DESC', 'OWNER_NAME_ASC', 'OWNER_NAME_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class CarriersOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `Carrier`.

    Enumeration Choices:

    * `NATURAL`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `CARRIER_CODE_ASC`None
    * `CARRIER_CODE_DESC`None
    * `EXTERNAL_SYSTEM_ID_ASC`None
    * `EXTERNAL_SYSTEM_ID_DESC`None
    * `EXTERNAL_SYSTEM_NAME_ASC`None
    * `EXTERNAL_SYSTEM_NAME_DESC`None
    * `CARRIER_NAME_ASC`None
    * `CARRIER_NAME_DESC`None
    * `MCN_ASC`None
    * `MCN_DESC`None
    * `DOT_ASC`None
    * `DOT_DESC`None
    * `CONTACT_FIRST_NAME_ASC`None
    * `CONTACT_FIRST_NAME_DESC`None
    * `CONTACT_LAST_NAME_ASC`None
    * `CONTACT_LAST_NAME_DESC`None
    * `ADDRESS_1_ASC`None
    * `ADDRESS_1_DESC`None
    * `ADDRESS_2_ASC`None
    * `ADDRESS_2_DESC`None
    * `ADDRESS_3_ASC`None
    * `ADDRESS_3_DESC`None
    * `CITY_ASC`None
    * `CITY_DESC`None
    * `STATE_ASC`None
    * `STATE_DESC`None
    * `ZIP_ASC`None
    * `ZIP_DESC`None
    * `COUNTRY_ASC`None
    * `COUNTRY_DESC`None
    * `EFFECTIVE_DATE_ASC`None
    * `EFFECTIVE_DATE_DESC`None
    * `PHONE_ASC`None
    * `PHONE_DESC`None
    * `FAX_ASC`None
    * `FAX_DESC`None
    * `EMAIL_ADDRESS_ASC`None
    * `EMAIL_ADDRESS_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ADDRESS_1_ASC', 'ADDRESS_1_DESC', 'ADDRESS_2_ASC', 'ADDRESS_2_DESC', 'ADDRESS_3_ASC', 'ADDRESS_3_DESC', 'CARRIER_CODE_ASC', 'CARRIER_CODE_DESC', 'CARRIER_NAME_ASC', 'CARRIER_NAME_DESC', 'CITY_ASC', 'CITY_DESC', 'CONTACT_FIRST_NAME_ASC', 'CONTACT_FIRST_NAME_DESC', 'CONTACT_LAST_NAME_ASC', 'CONTACT_LAST_NAME_DESC', 'COUNTRY_ASC', 'COUNTRY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DOT_ASC', 'DOT_DESC', 'EFFECTIVE_DATE_ASC', 'EFFECTIVE_DATE_DESC', 'EMAIL_ADDRESS_ASC', 'EMAIL_ADDRESS_DESC', 'EXTERNAL_SYSTEM_ID_ASC', 'EXTERNAL_SYSTEM_ID_DESC', 'EXTERNAL_SYSTEM_NAME_ASC', 'EXTERNAL_SYSTEM_NAME_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'FAX_ASC', 'FAX_DESC', 'ID_ASC', 'ID_DESC', 'MCN_ASC', 'MCN_DESC', 'NATURAL', 'PHONE_ASC', 'PHONE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'STATE_ASC', 'STATE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'ZIP_ASC', 'ZIP_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class CarriersRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `CarriersRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `CARRIER_CODE_ASC`None
    * `CARRIER_CODE_DESC`None
    * `EXTERNAL_SYSTEM_ID_ASC`None
    * `EXTERNAL_SYSTEM_ID_DESC`None
    * `EXTERNAL_SYSTEM_NAME_ASC`None
    * `EXTERNAL_SYSTEM_NAME_DESC`None
    * `CARRIER_NAME_ASC`None
    * `CARRIER_NAME_DESC`None
    * `MCN_ASC`None
    * `MCN_DESC`None
    * `DOT_ASC`None
    * `DOT_DESC`None
    * `CONTACT_FIRST_NAME_ASC`None
    * `CONTACT_FIRST_NAME_DESC`None
    * `CONTACT_LAST_NAME_ASC`None
    * `CONTACT_LAST_NAME_DESC`None
    * `ADDRESS_1_ASC`None
    * `ADDRESS_1_DESC`None
    * `ADDRESS_2_ASC`None
    * `ADDRESS_2_DESC`None
    * `ADDRESS_3_ASC`None
    * `ADDRESS_3_DESC`None
    * `CITY_ASC`None
    * `CITY_DESC`None
    * `STATE_ASC`None
    * `STATE_DESC`None
    * `ZIP_ASC`None
    * `ZIP_DESC`None
    * `COUNTRY_ASC`None
    * `COUNTRY_DESC`None
    * `EFFECTIVE_DATE_ASC`None
    * `EFFECTIVE_DATE_DESC`None
    * `PHONE_ASC`None
    * `PHONE_DESC`None
    * `FAX_ASC`None
    * `FAX_DESC`None
    * `EMAIL_ADDRESS_ASC`None
    * `EMAIL_ADDRESS_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ADDRESS_1_ASC', 'ADDRESS_1_DESC', 'ADDRESS_2_ASC', 'ADDRESS_2_DESC', 'ADDRESS_3_ASC', 'ADDRESS_3_DESC', 'CARRIER_CODE_ASC', 'CARRIER_CODE_DESC', 'CARRIER_NAME_ASC', 'CARRIER_NAME_DESC', 'CITY_ASC', 'CITY_DESC', 'CONTACT_FIRST_NAME_ASC', 'CONTACT_FIRST_NAME_DESC', 'CONTACT_LAST_NAME_ASC', 'CONTACT_LAST_NAME_DESC', 'COUNTRY_ASC', 'COUNTRY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DOT_ASC', 'DOT_DESC', 'EFFECTIVE_DATE_ASC', 'EFFECTIVE_DATE_DESC', 'EMAIL_ADDRESS_ASC', 'EMAIL_ADDRESS_DESC', 'EXTERNAL_SYSTEM_ID_ASC', 'EXTERNAL_SYSTEM_ID_DESC', 'EXTERNAL_SYSTEM_NAME_ASC', 'EXTERNAL_SYSTEM_NAME_DESC', 'FAX_ASC', 'FAX_DESC', 'ID_ASC', 'ID_DESC', 'MCN_ASC', 'MCN_DESC', 'NATURAL', 'PHONE_ASC', 'PHONE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'STATE_ASC', 'STATE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'ZIP_ASC', 'ZIP_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class CasePicksRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `CasePicksRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CASE_PICK_DATE_ASC`None
    * `CASE_PICK_DATE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `PICK_TYPE_ASC`None
    * `PICK_TYPE_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `OPERATOR_ID_ASC`None
    * `OPERATOR_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CASE_PICK_DATE_ASC', 'CASE_PICK_DATE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'NATURAL', 'OPERATOR_ID_ASC', 'OPERATOR_ID_DESC', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'PICK_TYPE_ASC', 'PICK_TYPE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class CostCenterCompanyLookupsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `CostCenterCompanyLookup`.

    Enumeration Choices:

    * `NATURAL`None
    * `COST_CENTER_ID_ASC`None
    * `COST_CENTER_ID_DESC`None
    * `COMPANY_ASC`None
    * `COMPANY_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `CREATED_BY_ASC`None
    * `CREATED_BY_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `UPDATED_BY_ASC`None
    * `UPDATED_BY_DESC`None
    * `COMPANY_CODE_ASC`None
    * `COMPANY_CODE_DESC`None
    * `INCLUDE_IN_FACILITY_FINANCIALS_ASC`None
    * `INCLUDE_IN_FACILITY_FINANCIALS_DESC`None
    * `INCLUDE_IN_ROLLUP_FINANCIALS_ASC`None
    * `INCLUDE_IN_ROLLUP_FINANCIALS_DESC`None
    '''
    __schema__ = base
    __choices__ = ('COMPANY_ASC', 'COMPANY_CODE_ASC', 'COMPANY_CODE_DESC', 'COMPANY_DESC', 'COST_CENTER_ID_ASC', 'COST_CENTER_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CREATED_BY_ASC', 'CREATED_BY_DESC', 'INCLUDE_IN_FACILITY_FINANCIALS_ASC', 'INCLUDE_IN_FACILITY_FINANCIALS_DESC', 'INCLUDE_IN_ROLLUP_FINANCIALS_ASC', 'INCLUDE_IN_ROLLUP_FINANCIALS_DESC', 'NATURAL', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'UPDATED_BY_ASC', 'UPDATED_BY_DESC')


class Cursor(sgqlc.types.Scalar):
    '''A location in a connection that can be used for resuming
    pagination.
    '''
    __schema__ = base


class CursorHistoriesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `CursorHistory`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SLUG_ASC`None
    * `SOURCE_SLUG_DESC`None
    * `SOURCE_CHANNEL_NAME_ASC`None
    * `SOURCE_CHANNEL_NAME_DESC`None
    * `CURSOR_ASC`None
    * `CURSOR_DESC`None
    * `SNAPSHOT_TIME_ASC`None
    * `SNAPSHOT_TIME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CURSOR_ASC', 'CURSOR_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SNAPSHOT_TIME_ASC', 'SNAPSHOT_TIME_DESC', 'SOURCE_CHANNEL_NAME_ASC', 'SOURCE_CHANNEL_NAME_DESC', 'SOURCE_SLUG_ASC', 'SOURCE_SLUG_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class CustomerFacilityLinksOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `CustomerFacilityLink`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'NATURAL', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC')


class CustomerHierarchiesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `CustomerHierarchy`.

    Enumeration Choices:

    * `NATURAL`None
    * `PID_ASC`None
    * `PID_DESC`None
    * `P_ENTERPRISE_ID_ASC`None
    * `P_ENTERPRISE_ID_DESC`None
    * `P_CUSTOMER_NAME_ASC`None
    * `P_CUSTOMER_NAME_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `C_ENTERPRISE_ID_ASC`None
    * `C_ENTERPRISE_ID_DESC`None
    * `C_CUSTOMER_NAME_ASC`None
    * `C_CUSTOMER_NAME_DESC`None
    * `LINK_LENGTH_ASC`None
    * `LINK_LENGTH_DESC`None
    * `C_LEVEL_ASC`None
    * `C_LEVEL_DESC`None
    * `P_LEVEL_ASC`None
    * `P_LEVEL_DESC`None
    '''
    __schema__ = base
    __choices__ = ('C_CUSTOMER_NAME_ASC', 'C_CUSTOMER_NAME_DESC', 'C_ENTERPRISE_ID_ASC', 'C_ENTERPRISE_ID_DESC', 'C_LEVEL_ASC', 'C_LEVEL_DESC', 'ID_ASC', 'ID_DESC', 'LINK_LENGTH_ASC', 'LINK_LENGTH_DESC', 'NATURAL', 'PID_ASC', 'PID_DESC', 'P_CUSTOMER_NAME_ASC', 'P_CUSTOMER_NAME_DESC', 'P_ENTERPRISE_ID_ASC', 'P_ENTERPRISE_ID_DESC', 'P_LEVEL_ASC', 'P_LEVEL_DESC')


class CustomerHierarchyMapsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `CustomerHierarchyMap`.

    Enumeration Choices:

    * `NATURAL`None
    * `PID_ASC`None
    * `PID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `LINK_LENGTH_ASC`None
    * `LINK_LENGTH_DESC`None
    * `C_LEVEL_ASC`None
    * `C_LEVEL_DESC`None
    * `P_LEVEL_ASC`None
    * `P_LEVEL_DESC`None
    * `ENTERPRISE_ID_ASC`None
    * `ENTERPRISE_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('C_LEVEL_ASC', 'C_LEVEL_DESC', 'ENTERPRISE_ID_ASC', 'ENTERPRISE_ID_DESC', 'ID_ASC', 'ID_DESC', 'LINK_LENGTH_ASC', 'LINK_LENGTH_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PID_ASC', 'PID_DESC', 'P_LEVEL_ASC', 'P_LEVEL_DESC')


class CutsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `CutsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `PALLET_ID_ASC`None
    * `PALLET_ID_DESC`None
    * `SHIPPED_DATE_ASC`None
    * `SHIPPED_DATE_DESC`None
    * `CUT_QUANTITY_ASC`None
    * `CUT_QUANTITY_DESC`None
    * `REASON_ASC`None
    * `REASON_DESC`None
    * `CUT_DESCRIPTION_ASC`None
    * `CUT_DESCRIPTION_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `WMS_LAST_MODIFIED_BY_ASC`None
    * `WMS_LAST_MODIFIED_BY_DESC`None
    * `WMS_LAST_MODIFIED_DATETIME_ASC`None
    * `WMS_LAST_MODIFIED_DATETIME_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUT_DESCRIPTION_ASC', 'CUT_DESCRIPTION_DESC', 'CUT_QUANTITY_ASC', 'CUT_QUANTITY_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PALLET_ID_ASC', 'PALLET_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'REASON_ASC', 'REASON_DESC', 'SHIPPED_DATE_ASC', 'SHIPPED_DATE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WMS_LAST_MODIFIED_BY_ASC', 'WMS_LAST_MODIFIED_BY_DESC', 'WMS_LAST_MODIFIED_DATETIME_ASC', 'WMS_LAST_MODIFIED_DATETIME_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


Date = sgqlc.types.datetime.Date

class Datetime(sgqlc.types.Scalar):
    '''A point in time as described by the [ISO
    8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may
    not include a timezone.
    '''
    __schema__ = base


class DriversMastersOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `DriversMaster`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `TURVO_DRIVER_ID_ASC`None
    * `TURVO_DRIVER_ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `PHONE_NUMBER_ASC`None
    * `PHONE_NUMBER_DESC`None
    * `LICENSE_NUMBER_ASC`None
    * `LICENSE_NUMBER_DESC`None
    * `LICENSE_STATE_OF_ISSUE_ASC`None
    * `LICENSE_STATE_OF_ISSUE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'ID_ASC', 'ID_DESC', 'LICENSE_NUMBER_ASC', 'LICENSE_NUMBER_DESC', 'LICENSE_STATE_OF_ISSUE_ASC', 'LICENSE_STATE_OF_ISSUE_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PHONE_NUMBER_ASC', 'PHONE_NUMBER_DESC', 'TURVO_DRIVER_ID_ASC', 'TURVO_DRIVER_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class DriversOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `Driver`.

    Enumeration Choices:

    * `NATURAL`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `PHONE_NUMBER_ASC`None
    * `PHONE_NUMBER_DESC`None
    * `LICENSE_NUMBER_ASC`None
    * `LICENSE_NUMBER_DESC`None
    * `LICENSE_STATE_OF_ISSUE_ASC`None
    * `LICENSE_STATE_OF_ISSUE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'ID_ASC', 'ID_DESC', 'LICENSE_NUMBER_ASC', 'LICENSE_NUMBER_DESC', 'LICENSE_STATE_OF_ISSUE_ASC', 'LICENSE_STATE_OF_ISSUE_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PHONE_NUMBER_ASC', 'PHONE_NUMBER_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class DriversRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `DriversRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `PHONE_NUMBER_ASC`None
    * `PHONE_NUMBER_DESC`None
    * `LICENSE_NUMBER_ASC`None
    * `LICENSE_NUMBER_DESC`None
    * `LICENSE_STATE_OF_ISSUE_ASC`None
    * `LICENSE_STATE_OF_ISSUE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'LICENSE_NUMBER_ASC', 'LICENSE_NUMBER_DESC', 'LICENSE_STATE_OF_ISSUE_ASC', 'LICENSE_STATE_OF_ISSUE_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PHONE_NUMBER_ASC', 'PHONE_NUMBER_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class EdgeNodeSourceChannelAccessesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `EdgeNodeSourceChannelAccess`.

    Enumeration Choices:

    * `NATURAL`None
    * `EDGE_NODE_CLIENT_ID_ASC`None
    * `EDGE_NODE_CLIENT_ID_DESC`None
    * `SOURCE_CHANNEL_NAME_ASC`None
    * `SOURCE_CHANNEL_NAME_DESC`None
    * `ACTION_ASC`None
    * `ACTION_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ACTION_ASC', 'ACTION_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'EDGE_NODE_CLIENT_ID_ASC', 'EDGE_NODE_CLIENT_ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_CHANNEL_NAME_ASC', 'SOURCE_CHANNEL_NAME_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class EdgeNodesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `EdgeNode`.

    Enumeration Choices:

    * `NATURAL`None
    * `CLIENT_ID_ASC`None
    * `CLIENT_ID_DESC`None
    * `DESCRIPTION_ASC`None
    * `DESCRIPTION_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `ORGANIZATION_ID_ASC`None
    * `ORGANIZATION_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CLIENT_ID_ASC', 'CLIENT_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DESCRIPTION_ASC', 'DESCRIPTION_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'ORGANIZATION_ID_ASC', 'ORGANIZATION_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class EnumEdgeNodeSourceChannelAccessAction(sgqlc.types.Enum):
    '''Enumeration Choices:

    * `SUBSCRIBE`None
    * `PUBLISH`None
    '''
    __schema__ = base
    __choices__ = ('PUBLISH', 'SUBSCRIBE')


class ExpectedInboundOrderDetailsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ExpectedInboundOrderDetail`.

    Enumeration Choices:

    * `NATURAL`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `EXPIRATION_DATE_ASC`None
    * `EXPIRATION_DATE_DESC`None
    * `CODE_DATE_ASC`None
    * `CODE_DATE_DESC`None
    * `BEST_BY_DATE_ASC`None
    * `BEST_BY_DATE_DESC`None
    * `PRODUCTION_DATE_ASC`None
    * `PRODUCTION_DATE_DESC`None
    * `SLAUGHTER_DATE_ASC`None
    * `SLAUGHTER_DATE_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `CUSTOMER_LINE_REFERENCE_ASC`None
    * `CUSTOMER_LINE_REFERENCE_DESC`None
    * `COUNTRY_OF_ORIGIN_ASC`None
    * `COUNTRY_OF_ORIGIN_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `CUSTOMER_LINE_NUMBER_ASC`None
    * `CUSTOMER_LINE_NUMBER_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `CUSTOMER_LOT_REFERENCE_ASC`None
    * `CUSTOMER_LOT_REFERENCE_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BEST_BY_DATE_ASC', 'BEST_BY_DATE_DESC', 'CODE_DATE_ASC', 'CODE_DATE_DESC', 'COUNTRY_OF_ORIGIN_ASC', 'COUNTRY_OF_ORIGIN_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_LINE_NUMBER_ASC', 'CUSTOMER_LINE_NUMBER_DESC', 'CUSTOMER_LINE_REFERENCE_ASC', 'CUSTOMER_LINE_REFERENCE_DESC', 'CUSTOMER_LOT_REFERENCE_ASC', 'CUSTOMER_LOT_REFERENCE_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EXPIRATION_DATE_ASC', 'EXPIRATION_DATE_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'NOTES_ASC', 'NOTES_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PRODUCTION_DATE_ASC', 'PRODUCTION_DATE_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SLAUGHTER_DATE_ASC', 'SLAUGHTER_DATE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class ExpectedInboundOrderDetailsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ExpectedInboundOrderDetailsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `EXPIRATION_DATE_ASC`None
    * `EXPIRATION_DATE_DESC`None
    * `CODE_DATE_ASC`None
    * `CODE_DATE_DESC`None
    * `BEST_BY_DATE_ASC`None
    * `BEST_BY_DATE_DESC`None
    * `PRODUCTION_DATE_ASC`None
    * `PRODUCTION_DATE_DESC`None
    * `SLAUGHTER_DATE_ASC`None
    * `SLAUGHTER_DATE_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `CUSTOMER_LINE_REFERENCE_ASC`None
    * `CUSTOMER_LINE_REFERENCE_DESC`None
    * `COUNTRY_OF_ORIGIN_ASC`None
    * `COUNTRY_OF_ORIGIN_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `CUSTOMER_LINE_NUMBER_ASC`None
    * `CUSTOMER_LINE_NUMBER_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `CUSTOMER_LOT_REFERENCE_ASC`None
    * `CUSTOMER_LOT_REFERENCE_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BEST_BY_DATE_ASC', 'BEST_BY_DATE_DESC', 'CODE_DATE_ASC', 'CODE_DATE_DESC', 'COUNTRY_OF_ORIGIN_ASC', 'COUNTRY_OF_ORIGIN_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LINE_NUMBER_ASC', 'CUSTOMER_LINE_NUMBER_DESC', 'CUSTOMER_LINE_REFERENCE_ASC', 'CUSTOMER_LINE_REFERENCE_DESC', 'CUSTOMER_LOT_REFERENCE_ASC', 'CUSTOMER_LOT_REFERENCE_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EXPIRATION_DATE_ASC', 'EXPIRATION_DATE_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'NOTES_ASC', 'NOTES_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PRODUCTION_DATE_ASC', 'PRODUCTION_DATE_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SLAUGHTER_DATE_ASC', 'SLAUGHTER_DATE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class ExpectedInboundOrdersRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ExpectedInboundOrdersRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `EXPECTED_RECEIVE_DATETIME_ASC`None
    * `EXPECTED_RECEIVE_DATETIME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EXPECTED_RECEIVE_DATETIME_ASC', 'EXPECTED_RECEIVE_DATETIME_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class ExpectedOutboundOrderDetailsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ExpectedOutboundOrderDetail`.

    Enumeration Choices:

    * `NATURAL`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CUSTOMER_LINE_NUMBER_ASC`None
    * `CUSTOMER_LINE_NUMBER_DESC`None
    * `TI_OVERRIDE_ASC`None
    * `TI_OVERRIDE_DESC`None
    * `HIGH_OVERRIDE_ASC`None
    * `HIGH_OVERRIDE_DESC`None
    * `CUSTOMER_LINE_REFERENCE_ASC`None
    * `CUSTOMER_LINE_REFERENCE_DESC`None
    * `SHELF_LIFE_DATE_ASC`None
    * `SHELF_LIFE_DATE_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `POSITION_IN_TRUCK_ASC`None
    * `POSITION_IN_TRUCK_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `PICK_CODE_ASC`None
    * `PICK_CODE_DESC`None
    * `LABEL_NUMBER_ASC`None
    * `LABEL_NUMBER_DESC`None
    * `STICKER_NUMBER_ASC`None
    * `STICKER_NUMBER_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `CUSTOMER_LOT_REFERENCE_ASC`None
    * `CUSTOMER_LOT_REFERENCE_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_LINE_NUMBER_ASC', 'CUSTOMER_LINE_NUMBER_DESC', 'CUSTOMER_LINE_REFERENCE_ASC', 'CUSTOMER_LINE_REFERENCE_DESC', 'CUSTOMER_LOT_REFERENCE_ASC', 'CUSTOMER_LOT_REFERENCE_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'HIGH_OVERRIDE_ASC', 'HIGH_OVERRIDE_DESC', 'ID_ASC', 'ID_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LABEL_NUMBER_ASC', 'LABEL_NUMBER_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'NOTES_ASC', 'NOTES_DESC', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PICK_CODE_ASC', 'PICK_CODE_DESC', 'POSITION_IN_TRUCK_ASC', 'POSITION_IN_TRUCK_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SHELF_LIFE_DATE_ASC', 'SHELF_LIFE_DATE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'STICKER_NUMBER_ASC', 'STICKER_NUMBER_DESC', 'TI_OVERRIDE_ASC', 'TI_OVERRIDE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class ExpectedOutboundOrderDetailsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ExpectedOutboundOrderDetailsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CUSTOMER_LINE_NUMBER_ASC`None
    * `CUSTOMER_LINE_NUMBER_DESC`None
    * `TI_OVERRIDE_ASC`None
    * `TI_OVERRIDE_DESC`None
    * `HIGH_OVERRIDE_ASC`None
    * `HIGH_OVERRIDE_DESC`None
    * `CUSTOMER_LINE_REFERENCE_ASC`None
    * `CUSTOMER_LINE_REFERENCE_DESC`None
    * `SHELF_LIFE_DATE_ASC`None
    * `SHELF_LIFE_DATE_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `POSITION_IN_TRUCK_ASC`None
    * `POSITION_IN_TRUCK_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `PICK_CODE_ASC`None
    * `PICK_CODE_DESC`None
    * `LABEL_NUMBER_ASC`None
    * `LABEL_NUMBER_DESC`None
    * `STICKER_NUMBER_ASC`None
    * `STICKER_NUMBER_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CODE_DATE_ASC`None
    * `CODE_DATE_DESC`None
    * `BEST_BY_DATE_ASC`None
    * `BEST_BY_DATE_DESC`None
    * `REQUESTED_ROOM_CODE_ASC`None
    * `REQUESTED_ROOM_CODE_DESC`None
    * `CUSTOMER_LOT_REFERENCE_ASC`None
    * `CUSTOMER_LOT_REFERENCE_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BEST_BY_DATE_ASC', 'BEST_BY_DATE_DESC', 'CODE_DATE_ASC', 'CODE_DATE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LINE_NUMBER_ASC', 'CUSTOMER_LINE_NUMBER_DESC', 'CUSTOMER_LINE_REFERENCE_ASC', 'CUSTOMER_LINE_REFERENCE_DESC', 'CUSTOMER_LOT_REFERENCE_ASC', 'CUSTOMER_LOT_REFERENCE_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'HIGH_OVERRIDE_ASC', 'HIGH_OVERRIDE_DESC', 'ID_ASC', 'ID_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LABEL_NUMBER_ASC', 'LABEL_NUMBER_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'NOTES_ASC', 'NOTES_DESC', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PICK_CODE_ASC', 'PICK_CODE_DESC', 'POSITION_IN_TRUCK_ASC', 'POSITION_IN_TRUCK_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'REQUESTED_ROOM_CODE_ASC', 'REQUESTED_ROOM_CODE_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SHELF_LIFE_DATE_ASC', 'SHELF_LIFE_DATE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'STICKER_NUMBER_ASC', 'STICKER_NUMBER_DESC', 'TI_OVERRIDE_ASC', 'TI_OVERRIDE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class ExpectedOutboundOrdersOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ExpectedOutboundOrder`.

    Enumeration Choices:

    * `NATURAL`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `REQUESTED_PICKUP_DATETIME_ASC`None
    * `REQUESTED_PICKUP_DATETIME_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'REQUESTED_PICKUP_DATETIME_ASC', 'REQUESTED_PICKUP_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class ExpectedOutboundOrdersRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ExpectedOutboundOrdersRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `REQUESTED_PICKUP_DATETIME_ASC`None
    * `REQUESTED_PICKUP_DATETIME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'REQUESTED_PICKUP_DATETIME_ASC', 'REQUESTED_PICKUP_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class ExpectedPalletsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ExpectedPalletsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `EXPECTED_PALLET_COUNT_ASC`None
    * `EXPECTED_PALLET_COUNT_DESC`None
    * `EXPECTED_QUANTITY_ASC`None
    * `EXPECTED_QUANTITY_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EXPECTED_PALLET_COUNT_ASC', 'EXPECTED_PALLET_COUNT_DESC', 'EXPECTED_QUANTITY_ASC', 'EXPECTED_QUANTITY_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class FacilitiesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `Facility`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `CITY_ASC`None
    * `CITY_DESC`None
    * `STATE_ASC`None
    * `STATE_DESC`None
    * `ZIP_ASC`None
    * `ZIP_DESC`None
    * `TIMEZONE_ASC`None
    * `TIMEZONE_DESC`None
    * `ORGANIZATION_ID_ASC`None
    * `ORGANIZATION_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `ADDRESS1_ASC`None
    * `ADDRESS1_DESC`None
    * `ADDRESS2_ASC`None
    * `ADDRESS2_DESC`None
    * `WEATHER_LOCATION_ID_ASC`None
    * `WEATHER_LOCATION_ID_DESC`None
    * `LOCATION_ID_ASC`None
    * `LOCATION_ID_DESC`None
    * `WH_ID_ASC`None
    * `WH_ID_DESC`None
    * `SOURCE_SYSTEM_ASC`None
    * `SOURCE_SYSTEM_DESC`None
    * `REGION_ASC`None
    * `REGION_DESC`None
    * `SUB_REGION_ASC`None
    * `SUB_REGION_DESC`None
    * `COMPANY_NAME_ASC`None
    * `COMPANY_NAME_DESC`None
    * `GEN_MANAGER_ASC`None
    * `GEN_MANAGER_DESC`None
    * `TEMPERATURE_ASC`None
    * `TEMPERATURE_DESC`None
    * `EFFECTIVE_DATE_ASC`None
    * `EFFECTIVE_DATE_DESC`None
    * `IS_LINEAGE_MANAGED_SITE_ASC`None
    * `IS_LINEAGE_MANAGED_SITE_DESC`None
    * `INCLUDE_LTR_IN_BONUS_ASC`None
    * `INCLUDE_LTR_IN_BONUS_DESC`None
    * `INCLUDE_IN_CAP_UTIL_SNAPSHOTS_ASC`None
    * `INCLUDE_IN_CAP_UTIL_SNAPSHOTS_DESC`None
    * `BUSINESS_UNIT_ASC`None
    * `BUSINESS_UNIT_DESC`None
    * `COMMODITY_ASC`None
    * `COMMODITY_DESC`None
    * `PROPERTY_TYPE_ASC`None
    * `PROPERTY_TYPE_DESC`None
    * `IS_TEST_FACILITY_ASC`None
    * `IS_TEST_FACILITY_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ADDRESS1_ASC', 'ADDRESS1_DESC', 'ADDRESS2_ASC', 'ADDRESS2_DESC', 'BUSINESS_UNIT_ASC', 'BUSINESS_UNIT_DESC', 'CITY_ASC', 'CITY_DESC', 'COMMODITY_ASC', 'COMMODITY_DESC', 'COMPANY_NAME_ASC', 'COMPANY_NAME_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EFFECTIVE_DATE_ASC', 'EFFECTIVE_DATE_DESC', 'GEN_MANAGER_ASC', 'GEN_MANAGER_DESC', 'ID_ASC', 'ID_DESC', 'INCLUDE_IN_CAP_UTIL_SNAPSHOTS_ASC', 'INCLUDE_IN_CAP_UTIL_SNAPSHOTS_DESC', 'INCLUDE_LTR_IN_BONUS_ASC', 'INCLUDE_LTR_IN_BONUS_DESC', 'IS_LINEAGE_MANAGED_SITE_ASC', 'IS_LINEAGE_MANAGED_SITE_DESC', 'IS_TEST_FACILITY_ASC', 'IS_TEST_FACILITY_DESC', 'LOCATION_ID_ASC', 'LOCATION_ID_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'ORGANIZATION_ID_ASC', 'ORGANIZATION_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PROPERTY_TYPE_ASC', 'PROPERTY_TYPE_DESC', 'REGION_ASC', 'REGION_DESC', 'SOURCE_SYSTEM_ASC', 'SOURCE_SYSTEM_DESC', 'STATE_ASC', 'STATE_DESC', 'SUB_REGION_ASC', 'SUB_REGION_DESC', 'TEMPERATURE_ASC', 'TEMPERATURE_DESC', 'TIMEZONE_ASC', 'TIMEZONE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WEATHER_LOCATION_ID_ASC', 'WEATHER_LOCATION_ID_DESC', 'WH_ID_ASC', 'WH_ID_DESC', 'ZIP_ASC', 'ZIP_DESC')


class FacilitiesTestsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `FacilitiesTest`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `CITY_ASC`None
    * `CITY_DESC`None
    * `STATE_ASC`None
    * `STATE_DESC`None
    * `ZIP_ASC`None
    * `ZIP_DESC`None
    * `TIMEZONE_ASC`None
    * `TIMEZONE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `ADDRESS1_ASC`None
    * `ADDRESS1_DESC`None
    * `ADDRESS2_ASC`None
    * `ADDRESS2_DESC`None
    * `LOCATION_ID_ASC`None
    * `LOCATION_ID_DESC`None
    * `REGION_ASC`None
    * `REGION_DESC`None
    * `SUB_REGION_ASC`None
    * `SUB_REGION_DESC`None
    * `EFFECTIVE_DATE_ASC`None
    * `EFFECTIVE_DATE_DESC`None
    * `IS_LINEAGE_MANAGED_SITE_ASC`None
    * `IS_LINEAGE_MANAGED_SITE_DESC`None
    * `INCLUDE_IN_CAP_UTIL_SNAPSHOTS_ASC`None
    * `INCLUDE_IN_CAP_UTIL_SNAPSHOTS_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ADDRESS1_ASC', 'ADDRESS1_DESC', 'ADDRESS2_ASC', 'ADDRESS2_DESC', 'CITY_ASC', 'CITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EFFECTIVE_DATE_ASC', 'EFFECTIVE_DATE_DESC', 'ID_ASC', 'ID_DESC', 'INCLUDE_IN_CAP_UTIL_SNAPSHOTS_ASC', 'INCLUDE_IN_CAP_UTIL_SNAPSHOTS_DESC', 'IS_LINEAGE_MANAGED_SITE_ASC', 'IS_LINEAGE_MANAGED_SITE_DESC', 'LOCATION_ID_ASC', 'LOCATION_ID_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'REGION_ASC', 'REGION_DESC', 'STATE_ASC', 'STATE_DESC', 'SUB_REGION_ASC', 'SUB_REGION_DESC', 'TIMEZONE_ASC', 'TIMEZONE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'ZIP_ASC', 'ZIP_DESC')


class FacilityGroupingsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `FacilityGrouping`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `DESCRIPTION_ASC`None
    * `DESCRIPTION_DESC`None
    * `PATH_ASC`None
    * `PATH_DESC`None
    * `FACILITY_IDS_ASC`None
    * `FACILITY_IDS_DESC`None
    * `PARENT_ID_ASC`None
    * `PARENT_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DESCRIPTION_ASC', 'DESCRIPTION_DESC', 'FACILITY_IDS_ASC', 'FACILITY_IDS_DESC', 'ID_ASC', 'ID_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PARENT_ID_ASC', 'PARENT_ID_DESC', 'PATH_ASC', 'PATH_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class FacilityWarehouseLinksOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `FacilityWarehouseLink`.

    Enumeration Choices:

    * `NATURAL`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WMS_SYSTEM_ID_ASC`None
    * `WMS_SYSTEM_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `SALESFORCE_WAREHOUSE_CODE_ASC`None
    * `SALESFORCE_WAREHOUSE_CODE_DESC`None
    '''
    __schema__ = base
    __choices__ = ('FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'NATURAL', 'SALESFORCE_WAREHOUSE_CODE_ASC', 'SALESFORCE_WAREHOUSE_CODE_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WMS_SYSTEM_ID_ASC', 'WMS_SYSTEM_ID_DESC')


class FacilityWorkdayCostCentersOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `FacilityWorkdayCostCenter`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `COST_CENTER_ID_ASC`None
    * `COST_CENTER_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('COST_CENTER_ID_ASC', 'COST_CENTER_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


Float = sgqlc.types.Float

class HoldCodesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `HoldCode`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `HOLD_CODE_DESCRIPTION_ASC`None
    * `HOLD_CODE_DESCRIPTION_DESC`None
    * `IS_FACILITY_HOLD_CODE_ASC`None
    * `IS_FACILITY_HOLD_CODE_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'HOLD_CODE_DESCRIPTION_ASC', 'HOLD_CODE_DESCRIPTION_DESC', 'ID_ASC', 'ID_DESC', 'IS_FACILITY_HOLD_CODE_ASC', 'IS_FACILITY_HOLD_CODE_DESC', 'NATURAL', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class HoldCodesPerCustomersOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `HoldCodesPerCustomer`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `HOLD_CODE_DESCRIPTION_ASC`None
    * `HOLD_CODE_DESCRIPTION_DESC`None
    * `IS_FACILITY_HOLD_CODE_ASC`None
    * `IS_FACILITY_HOLD_CODE_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'HOLD_CODE_DESCRIPTION_ASC', 'HOLD_CODE_DESCRIPTION_DESC', 'ID_ASC', 'ID_DESC', 'IS_FACILITY_HOLD_CODE_ASC', 'IS_FACILITY_HOLD_CODE_DESC', 'NATURAL', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC')


class HoldCodesRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `HoldCodesRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `HOLD_CODE_DESCRIPTION_ASC`None
    * `HOLD_CODE_DESCRIPTION_DESC`None
    * `IS_FACILITY_HOLD_CODE_ASC`None
    * `IS_FACILITY_HOLD_CODE_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'HOLD_CODE_DESCRIPTION_ASC', 'HOLD_CODE_DESCRIPTION_DESC', 'ID_ASC', 'ID_DESC', 'IS_FACILITY_HOLD_CODE_ASC', 'IS_FACILITY_HOLD_CODE_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class HppRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `HppRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `SORT_DATE_ASC`None
    * `SORT_DATE_DESC`None
    * `TRANSACTION_DATETIME_ASC`None
    * `TRANSACTION_DATETIME_DESC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_ASC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `IS_IN_HPP_MACHINE_ASC`None
    * `IS_IN_HPP_MACHINE_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IS_IN_HPP_MACHINE_ASC', 'IS_IN_HPP_MACHINE_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'SORT_DATE_ASC', 'SORT_DATE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TRANSACTION_DATETIME_ASC', 'TRANSACTION_DATETIME_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_ASC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


ID = sgqlc.types.ID

class InboundCatchWeightRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundCatchWeightRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_ASC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `SERIAL_NUMBER_ASC`None
    * `SERIAL_NUMBER_DESC`None
    * `CATCH_WEIGHT_ASC`None
    * `CATCH_WEIGHT_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CATCH_WEIGHT_ASC', 'CATCH_WEIGHT_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SERIAL_NUMBER_ASC', 'SERIAL_NUMBER_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_ASC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundLoadsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundLoad`.

    Enumeration Choices:

    * `NATURAL`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `LOAD_REFERENCE_NUMBER_ASC`None
    * `LOAD_REFERENCE_NUMBER_DESC`None
    * `PRIMARY_REFERENCE_NUMBER_ASC`None
    * `PRIMARY_REFERENCE_NUMBER_DESC`None
    * `TRAILER_NUMBER_ASC`None
    * `TRAILER_NUMBER_DESC`None
    * `TRAILER_LOAD_TYPE_ASC`None
    * `TRAILER_LOAD_TYPE_DESC`None
    * `CUSTOMER_LOAD_NUMBER_ASC`None
    * `CUSTOMER_LOAD_NUMBER_DESC`None
    * `ACTUAL_CARRIER_CODE_ASC`None
    * `ACTUAL_CARRIER_CODE_DESC`None
    * `TENDER_CARRIER_CODE_ASC`None
    * `TENDER_CARRIER_CODE_DESC`None
    * `RECEIVED_DATETIME_ASC`None
    * `RECEIVED_DATETIME_DESC`None
    * `ARRIVAL_DATETIME_ASC`None
    * `ARRIVAL_DATETIME_DESC`None
    * `DOCK_IN_DATETIME_ASC`None
    * `DOCK_IN_DATETIME_DESC`None
    * `LOAD_START_DATETIME_ASC`None
    * `LOAD_START_DATETIME_DESC`None
    * `LOAD_FINISH_DATETIME_ASC`None
    * `LOAD_FINISH_DATETIME_DESC`None
    * `SIGNIN_DATETIME_ASC`None
    * `SIGNIN_DATETIME_DESC`None
    * `SIGNOUT_DATETIME_ASC`None
    * `SIGNOUT_DATETIME_DESC`None
    * `DOCK_OUT_DATETIME_ASC`None
    * `DOCK_OUT_DATETIME_DESC`None
    * `DEPARTURE_DATETIME_ASC`None
    * `DEPARTURE_DATETIME_DESC`None
    * `EXPECTED_RECEIVE_DATETIME_START_ASC`None
    * `EXPECTED_RECEIVE_DATETIME_START_DESC`None
    * `EXPECTED_RECEIVE_DATETIME_END_ASC`None
    * `EXPECTED_RECEIVE_DATETIME_END_DESC`None
    * `FRONT_TEMPERATURE_ASC`None
    * `FRONT_TEMPERATURE_DESC`None
    * `MIDDLE_TEMPERATURE_ASC`None
    * `MIDDLE_TEMPERATURE_DESC`None
    * `BACK_TEMPERATURE_ASC`None
    * `BACK_TEMPERATURE_DESC`None
    * `NUMBER_OF_STOPS_ASC`None
    * `NUMBER_OF_STOPS_DESC`None
    * `IS_PLANNED_LINEAGE_ASC`None
    * `IS_PLANNED_LINEAGE_DESC`None
    * `DRIVER_NAME_ASC`None
    * `DRIVER_NAME_DESC`None
    * `DRIVER_PHONE_NUMBER_ASC`None
    * `DRIVER_PHONE_NUMBER_DESC`None
    * `APPOINTMENT_NUMBER_ASC`None
    * `APPOINTMENT_NUMBER_DESC`None
    * `CONFIRMATION_DATETIME_ASC`None
    * `CONFIRMATION_DATETIME_DESC`None
    * `CONFIRMED_BY_ASC`None
    * `CONFIRMED_BY_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `DOCK_DOOR_NUMBER_ASC`None
    * `DOCK_DOOR_NUMBER_DESC`None
    * `ORIGINAL_SCHEDULED_DATETIME_ASC`None
    * `ORIGINAL_SCHEDULED_DATETIME_DESC`None
    * `SCHEDULED_START_DATETIME_ASC`None
    * `SCHEDULED_START_DATETIME_DESC`None
    * `SCHEDULED_END_DATETIME_ASC`None
    * `SCHEDULED_END_DATETIME_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `APPOINTMENT_COMMENT_ASC`None
    * `APPOINTMENT_COMMENT_DESC`None
    * `PURCHASE_ORDER_NUMBER_ASC`None
    * `PURCHASE_ORDER_NUMBER_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ACTUAL_CARRIER_CODE_ASC', 'ACTUAL_CARRIER_CODE_DESC', 'APPOINTMENT_COMMENT_ASC', 'APPOINTMENT_COMMENT_DESC', 'APPOINTMENT_NUMBER_ASC', 'APPOINTMENT_NUMBER_DESC', 'ARRIVAL_DATETIME_ASC', 'ARRIVAL_DATETIME_DESC', 'BACK_TEMPERATURE_ASC', 'BACK_TEMPERATURE_DESC', 'CONFIRMATION_DATETIME_ASC', 'CONFIRMATION_DATETIME_DESC', 'CONFIRMED_BY_ASC', 'CONFIRMED_BY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LOAD_NUMBER_ASC', 'CUSTOMER_LOAD_NUMBER_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPARTURE_DATETIME_ASC', 'DEPARTURE_DATETIME_DESC', 'DOCK_DOOR_NUMBER_ASC', 'DOCK_DOOR_NUMBER_DESC', 'DOCK_IN_DATETIME_ASC', 'DOCK_IN_DATETIME_DESC', 'DOCK_OUT_DATETIME_ASC', 'DOCK_OUT_DATETIME_DESC', 'DRIVER_NAME_ASC', 'DRIVER_NAME_DESC', 'DRIVER_PHONE_NUMBER_ASC', 'DRIVER_PHONE_NUMBER_DESC', 'EXPECTED_RECEIVE_DATETIME_END_ASC', 'EXPECTED_RECEIVE_DATETIME_END_DESC', 'EXPECTED_RECEIVE_DATETIME_START_ASC', 'EXPECTED_RECEIVE_DATETIME_START_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'FRONT_TEMPERATURE_ASC', 'FRONT_TEMPERATURE_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'IS_PLANNED_LINEAGE_ASC', 'IS_PLANNED_LINEAGE_DESC', 'LOAD_FINISH_DATETIME_ASC', 'LOAD_FINISH_DATETIME_DESC', 'LOAD_REFERENCE_NUMBER_ASC', 'LOAD_REFERENCE_NUMBER_DESC', 'LOAD_START_DATETIME_ASC', 'LOAD_START_DATETIME_DESC', 'MIDDLE_TEMPERATURE_ASC', 'MIDDLE_TEMPERATURE_DESC', 'NATURAL', 'NUMBER_OF_STOPS_ASC', 'NUMBER_OF_STOPS_DESC', 'ORIGINAL_SCHEDULED_DATETIME_ASC', 'ORIGINAL_SCHEDULED_DATETIME_DESC', 'PRIMARY_REFERENCE_NUMBER_ASC', 'PRIMARY_REFERENCE_NUMBER_DESC', 'PURCHASE_ORDER_NUMBER_ASC', 'PURCHASE_ORDER_NUMBER_DESC', 'RECEIVED_DATETIME_ASC', 'RECEIVED_DATETIME_DESC', 'SCHEDULED_END_DATETIME_ASC', 'SCHEDULED_END_DATETIME_DESC', 'SCHEDULED_START_DATETIME_ASC', 'SCHEDULED_START_DATETIME_DESC', 'SIGNIN_DATETIME_ASC', 'SIGNIN_DATETIME_DESC', 'SIGNOUT_DATETIME_ASC', 'SIGNOUT_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TENDER_CARRIER_CODE_ASC', 'TENDER_CARRIER_CODE_DESC', 'TRAILER_LOAD_TYPE_ASC', 'TRAILER_LOAD_TYPE_DESC', 'TRAILER_NUMBER_ASC', 'TRAILER_NUMBER_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundLoadsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundLoadsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `LOAD_REFERENCE_NUMBER_ASC`None
    * `LOAD_REFERENCE_NUMBER_DESC`None
    * `TRAILER_NUMBER_ASC`None
    * `TRAILER_NUMBER_DESC`None
    * `TRAILER_LOAD_TYPE_ASC`None
    * `TRAILER_LOAD_TYPE_DESC`None
    * `CUSTOMER_LOAD_NUMBER_ASC`None
    * `CUSTOMER_LOAD_NUMBER_DESC`None
    * `ACTUAL_CARRIER_CODE_ASC`None
    * `ACTUAL_CARRIER_CODE_DESC`None
    * `TENDER_CARRIER_CODE_ASC`None
    * `TENDER_CARRIER_CODE_DESC`None
    * `RECEIVED_DATETIME_ASC`None
    * `RECEIVED_DATETIME_DESC`None
    * `ARRIVAL_DATETIME_ASC`None
    * `ARRIVAL_DATETIME_DESC`None
    * `DOCK_IN_DATETIME_ASC`None
    * `DOCK_IN_DATETIME_DESC`None
    * `LOAD_START_DATETIME_ASC`None
    * `LOAD_START_DATETIME_DESC`None
    * `LOAD_FINISH_DATETIME_ASC`None
    * `LOAD_FINISH_DATETIME_DESC`None
    * `SIGNIN_DATETIME_ASC`None
    * `SIGNIN_DATETIME_DESC`None
    * `SIGNOUT_DATETIME_ASC`None
    * `SIGNOUT_DATETIME_DESC`None
    * `DOCK_OUT_DATETIME_ASC`None
    * `DOCK_OUT_DATETIME_DESC`None
    * `DEPARTURE_DATETIME_ASC`None
    * `DEPARTURE_DATETIME_DESC`None
    * `EXPECTED_RECEIVE_DATETIME_START_ASC`None
    * `EXPECTED_RECEIVE_DATETIME_START_DESC`None
    * `EXPECTED_RECEIVE_DATETIME_END_ASC`None
    * `EXPECTED_RECEIVE_DATETIME_END_DESC`None
    * `FRONT_TEMPERATURE_ASC`None
    * `FRONT_TEMPERATURE_DESC`None
    * `MIDDLE_TEMPERATURE_ASC`None
    * `MIDDLE_TEMPERATURE_DESC`None
    * `BACK_TEMPERATURE_ASC`None
    * `BACK_TEMPERATURE_DESC`None
    * `NUMBER_OF_STOPS_ASC`None
    * `NUMBER_OF_STOPS_DESC`None
    * `IS_PLANNED_LINEAGE_ASC`None
    * `IS_PLANNED_LINEAGE_DESC`None
    * `DRIVER_NAME_ASC`None
    * `DRIVER_NAME_DESC`None
    * `DRIVER_PHONE_NUMBER_ASC`None
    * `DRIVER_PHONE_NUMBER_DESC`None
    * `APPOINTMENT_NUMBER_ASC`None
    * `APPOINTMENT_NUMBER_DESC`None
    * `CONFIRMATION_DATETIME_ASC`None
    * `CONFIRMATION_DATETIME_DESC`None
    * `CONFIRMED_BY_ASC`None
    * `CONFIRMED_BY_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `DOCK_DOOR_NUMBER_ASC`None
    * `DOCK_DOOR_NUMBER_DESC`None
    * `ORIGINAL_SCHEDULED_DATETIME_ASC`None
    * `ORIGINAL_SCHEDULED_DATETIME_DESC`None
    * `SCHEDULED_START_DATETIME_ASC`None
    * `SCHEDULED_START_DATETIME_DESC`None
    * `SCHEDULED_END_DATETIME_ASC`None
    * `SCHEDULED_END_DATETIME_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `APPOINTMENT_COMMENT_ASC`None
    * `APPOINTMENT_COMMENT_DESC`None
    * `PURCHASE_ORDER_NUMBER_ASC`None
    * `PURCHASE_ORDER_NUMBER_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `PRIMARY_REFERENCE_NUMBER_ASC`None
    * `PRIMARY_REFERENCE_NUMBER_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `LADING_TYPE_ASC`None
    * `LADING_TYPE_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ACTUAL_CARRIER_CODE_ASC', 'ACTUAL_CARRIER_CODE_DESC', 'APPOINTMENT_COMMENT_ASC', 'APPOINTMENT_COMMENT_DESC', 'APPOINTMENT_NUMBER_ASC', 'APPOINTMENT_NUMBER_DESC', 'ARRIVAL_DATETIME_ASC', 'ARRIVAL_DATETIME_DESC', 'BACK_TEMPERATURE_ASC', 'BACK_TEMPERATURE_DESC', 'CONFIRMATION_DATETIME_ASC', 'CONFIRMATION_DATETIME_DESC', 'CONFIRMED_BY_ASC', 'CONFIRMED_BY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LOAD_NUMBER_ASC', 'CUSTOMER_LOAD_NUMBER_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPARTURE_DATETIME_ASC', 'DEPARTURE_DATETIME_DESC', 'DOCK_DOOR_NUMBER_ASC', 'DOCK_DOOR_NUMBER_DESC', 'DOCK_IN_DATETIME_ASC', 'DOCK_IN_DATETIME_DESC', 'DOCK_OUT_DATETIME_ASC', 'DOCK_OUT_DATETIME_DESC', 'DRIVER_NAME_ASC', 'DRIVER_NAME_DESC', 'DRIVER_PHONE_NUMBER_ASC', 'DRIVER_PHONE_NUMBER_DESC', 'EXPECTED_RECEIVE_DATETIME_END_ASC', 'EXPECTED_RECEIVE_DATETIME_END_DESC', 'EXPECTED_RECEIVE_DATETIME_START_ASC', 'EXPECTED_RECEIVE_DATETIME_START_DESC', 'FRONT_TEMPERATURE_ASC', 'FRONT_TEMPERATURE_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'IS_PLANNED_LINEAGE_ASC', 'IS_PLANNED_LINEAGE_DESC', 'LADING_TYPE_ASC', 'LADING_TYPE_DESC', 'LOAD_FINISH_DATETIME_ASC', 'LOAD_FINISH_DATETIME_DESC', 'LOAD_REFERENCE_NUMBER_ASC', 'LOAD_REFERENCE_NUMBER_DESC', 'LOAD_START_DATETIME_ASC', 'LOAD_START_DATETIME_DESC', 'MIDDLE_TEMPERATURE_ASC', 'MIDDLE_TEMPERATURE_DESC', 'NATURAL', 'NUMBER_OF_STOPS_ASC', 'NUMBER_OF_STOPS_DESC', 'ORIGINAL_SCHEDULED_DATETIME_ASC', 'ORIGINAL_SCHEDULED_DATETIME_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PRIMARY_REFERENCE_NUMBER_ASC', 'PRIMARY_REFERENCE_NUMBER_DESC', 'PURCHASE_ORDER_NUMBER_ASC', 'PURCHASE_ORDER_NUMBER_DESC', 'RECEIVED_DATETIME_ASC', 'RECEIVED_DATETIME_DESC', 'SCHEDULED_END_DATETIME_ASC', 'SCHEDULED_END_DATETIME_DESC', 'SCHEDULED_START_DATETIME_ASC', 'SCHEDULED_START_DATETIME_DESC', 'SIGNIN_DATETIME_ASC', 'SIGNIN_DATETIME_DESC', 'SIGNOUT_DATETIME_ASC', 'SIGNOUT_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TENDER_CARRIER_CODE_ASC', 'TENDER_CARRIER_CODE_DESC', 'TRAILER_LOAD_TYPE_ASC', 'TRAILER_LOAD_TYPE_DESC', 'TRAILER_NUMBER_ASC', 'TRAILER_NUMBER_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundOrderCommentsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundOrderCommentsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `COMMENT_ASC`None
    * `COMMENT_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `COMMENT_DATETIME_ASC`None
    * `COMMENT_DATETIME_DESC`None
    * `COMMENT_SEQUENCE_ASC`None
    * `COMMENT_SEQUENCE_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('COMMENT_ASC', 'COMMENT_DATETIME_ASC', 'COMMENT_DATETIME_DESC', 'COMMENT_DESC', 'COMMENT_SEQUENCE_ASC', 'COMMENT_SEQUENCE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundOrderDetailReferenceCodesRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering
    `InboundOrderDetailReferenceCodesRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `INBOUND_ORDER_DETAIL_ID_ASC`None
    * `INBOUND_ORDER_DETAIL_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `IMPORT_MARK_ASC`None
    * `IMPORT_MARK_DESC`None
    * `PLANT_CODE_ASC`None
    * `PLANT_CODE_DESC`None
    * `PRODUCTION_LINE_HOUR_ASC`None
    * `PRODUCTION_LINE_HOUR_DESC`None
    * `USDA_STAMP_ASC`None
    * `USDA_STAMP_DESC`None
    * `ALTERNATE_LOT_NUMBER_ASC`None
    * `ALTERNATE_LOT_NUMBER_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ALTERNATE_LOT_NUMBER_ASC', 'ALTERNATE_LOT_NUMBER_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IMPORT_MARK_ASC', 'IMPORT_MARK_DESC', 'INBOUND_ORDER_DETAIL_ID_ASC', 'INBOUND_ORDER_DETAIL_ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'NATURAL', 'PLANT_CODE_ASC', 'PLANT_CODE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PRODUCTION_LINE_HOUR_ASC', 'PRODUCTION_LINE_HOUR_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'USDA_STAMP_ASC', 'USDA_STAMP_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundOrderDetailsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundOrderDetail`.

    Enumeration Choices:

    * `NATURAL`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `EXPIRATION_DATE_ASC`None
    * `EXPIRATION_DATE_DESC`None
    * `CODE_DATE_ASC`None
    * `CODE_DATE_DESC`None
    * `BEST_BY_DATE_ASC`None
    * `BEST_BY_DATE_DESC`None
    * `PRODUCTION_DATE_ASC`None
    * `PRODUCTION_DATE_DESC`None
    * `SLAUGHTER_DATE_ASC`None
    * `SLAUGHTER_DATE_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `CUSTOMER_LINE_REFERENCE_ASC`None
    * `CUSTOMER_LINE_REFERENCE_DESC`None
    * `COUNTRY_OF_ORIGIN_ASC`None
    * `COUNTRY_OF_ORIGIN_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `CUSTOMER_LINE_NUMBER_ASC`None
    * `CUSTOMER_LINE_NUMBER_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `CUSTOMER_LOT_REFERENCE_ASC`None
    * `CUSTOMER_LOT_REFERENCE_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BEST_BY_DATE_ASC', 'BEST_BY_DATE_DESC', 'CODE_DATE_ASC', 'CODE_DATE_DESC', 'COUNTRY_OF_ORIGIN_ASC', 'COUNTRY_OF_ORIGIN_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_LINE_NUMBER_ASC', 'CUSTOMER_LINE_NUMBER_DESC', 'CUSTOMER_LINE_REFERENCE_ASC', 'CUSTOMER_LINE_REFERENCE_DESC', 'CUSTOMER_LOT_REFERENCE_ASC', 'CUSTOMER_LOT_REFERENCE_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EXPIRATION_DATE_ASC', 'EXPIRATION_DATE_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'NOTES_ASC', 'NOTES_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PRODUCTION_DATE_ASC', 'PRODUCTION_DATE_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SLAUGHTER_DATE_ASC', 'SLAUGHTER_DATE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundOrderDetailsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundOrderDetailsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `EXPIRATION_DATE_ASC`None
    * `EXPIRATION_DATE_DESC`None
    * `CODE_DATE_ASC`None
    * `CODE_DATE_DESC`None
    * `BEST_BY_DATE_ASC`None
    * `BEST_BY_DATE_DESC`None
    * `PRODUCTION_DATE_ASC`None
    * `PRODUCTION_DATE_DESC`None
    * `SLAUGHTER_DATE_ASC`None
    * `SLAUGHTER_DATE_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `CUSTOMER_LINE_REFERENCE_ASC`None
    * `CUSTOMER_LINE_REFERENCE_DESC`None
    * `COUNTRY_OF_ORIGIN_ASC`None
    * `COUNTRY_OF_ORIGIN_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `CUSTOMER_LINE_NUMBER_ASC`None
    * `CUSTOMER_LINE_NUMBER_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `CUSTOMER_LOT_REFERENCE_ASC`None
    * `CUSTOMER_LOT_REFERENCE_DESC`None
    * `SHELF_LIFE_DAYS_OVERRIDE_ASC`None
    * `SHELF_LIFE_DAYS_OVERRIDE_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BEST_BY_DATE_ASC', 'BEST_BY_DATE_DESC', 'CODE_DATE_ASC', 'CODE_DATE_DESC', 'COUNTRY_OF_ORIGIN_ASC', 'COUNTRY_OF_ORIGIN_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LINE_NUMBER_ASC', 'CUSTOMER_LINE_NUMBER_DESC', 'CUSTOMER_LINE_REFERENCE_ASC', 'CUSTOMER_LINE_REFERENCE_DESC', 'CUSTOMER_LOT_REFERENCE_ASC', 'CUSTOMER_LOT_REFERENCE_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EXPIRATION_DATE_ASC', 'EXPIRATION_DATE_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'NOTES_ASC', 'NOTES_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PRODUCTION_DATE_ASC', 'PRODUCTION_DATE_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SHELF_LIFE_DAYS_OVERRIDE_ASC', 'SHELF_LIFE_DAYS_OVERRIDE_DESC', 'SLAUGHTER_DATE_ASC', 'SLAUGHTER_DATE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundOrderReferenceCodesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundOrderReferenceCode`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `REFERENCE_TYPE_ASC`None
    * `REFERENCE_TYPE_DESC`None
    * `REFERENCE_VALUE_ASC`None
    * `REFERENCE_VALUE_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'NATURAL', 'REFERENCE_TYPE_ASC', 'REFERENCE_TYPE_DESC', 'REFERENCE_VALUE_ASC', 'REFERENCE_VALUE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundOrderReferenceCodesRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundOrderReferenceCodesRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `REFERENCE_TYPE_ASC`None
    * `REFERENCE_TYPE_DESC`None
    * `REFERENCE_VALUE_ASC`None
    * `REFERENCE_VALUE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'REFERENCE_TYPE_ASC', 'REFERENCE_TYPE_DESC', 'REFERENCE_VALUE_ASC', 'REFERENCE_VALUE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundOrdersExecutionRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundOrdersExecutionRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `FRONT_TEMPERATURE_ASC`None
    * `FRONT_TEMPERATURE_DESC`None
    * `MIDDLE_TEMPERATURE_ASC`None
    * `MIDDLE_TEMPERATURE_DESC`None
    * `BACK_TEMPERATURE_ASC`None
    * `BACK_TEMPERATURE_DESC`None
    * `TEMPERATURE_UOM_ASC`None
    * `TEMPERATURE_UOM_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BACK_TEMPERATURE_ASC', 'BACK_TEMPERATURE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FRONT_TEMPERATURE_ASC', 'FRONT_TEMPERATURE_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'MIDDLE_TEMPERATURE_ASC', 'MIDDLE_TEMPERATURE_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TEMPERATURE_UOM_ASC', 'TEMPERATURE_UOM_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundOrdersOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundOrder`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `CARRIER_ID_ASC`None
    * `CARRIER_ID_DESC`None
    * `ORIGIN_PARTY_ID_ASC`None
    * `ORIGIN_PARTY_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `SUPPLIER_ID_ASC`None
    * `SUPPLIER_ID_DESC`None
    * `INBOUND_LOAD_ID_ASC`None
    * `INBOUND_LOAD_ID_DESC`None
    * `LOAD_REFERENCE_NUMBER_ASC`None
    * `LOAD_REFERENCE_NUMBER_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CARRIER_CODE_ASC`None
    * `CARRIER_CODE_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `WAREHOUSE_GROSS_WEIGHT_ASC`None
    * `WAREHOUSE_GROSS_WEIGHT_DESC`None
    * `ORIGIN_PARTY_CODE_ASC`None
    * `ORIGIN_PARTY_CODE_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `IS_QUICK_RECEIVE_ASC`None
    * `IS_QUICK_RECEIVE_DESC`None
    * `ORDER_CONFIRMATION_DATETIME_ASC`None
    * `ORDER_CONFIRMATION_DATETIME_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `PURCHASE_ORDER_NUMBER_ASC`None
    * `PURCHASE_ORDER_NUMBER_DESC`None
    * `RECEIVED_DATETIME_ASC`None
    * `RECEIVED_DATETIME_DESC`None
    * `SCAN_FINISH_DATETIME_ASC`None
    * `SCAN_FINISH_DATETIME_DESC`None
    * `SCAN_START_DATETIME_ASC`None
    * `SCAN_START_DATETIME_DESC`None
    * `SUPPLIER_CODE_ASC`None
    * `SUPPLIER_CODE_DESC`None
    * `TRANSPORTATION_METHOD_ASC`None
    * `TRANSPORTATION_METHOD_DESC`None
    * `EDI_TYPE_ASC`None
    * `EDI_TYPE_DESC`None
    * `VERSION_NUMBER_ASC`None
    * `VERSION_NUMBER_DESC`None
    * `FINISH_DATETIME_ASC`None
    * `FINISH_DATETIME_DESC`None
    * `COMMENTS_ASC`None
    * `COMMENTS_DESC`None
    * `EXPECTED_RECEIVE_DATETIME_START_ASC`None
    * `EXPECTED_RECEIVE_DATETIME_START_DESC`None
    * `EXPECTED_RECEIVE_DATETIME_END_ASC`None
    * `EXPECTED_RECEIVE_DATETIME_END_DESC`None
    * `SIGNIN_DATETIME_ASC`None
    * `SIGNIN_DATETIME_DESC`None
    * `SIGNOUT_DATETIME_ASC`None
    * `SIGNOUT_DATETIME_DESC`None
    * `START_DATETIME_ASC`None
    * `START_DATETIME_DESC`None
    * `ORIGIN_LOCATION_CODE_ASC`None
    * `ORIGIN_LOCATION_CODE_DESC`None
    * `ORIGIN_LOCATION_NAME_ASC`None
    * `ORIGIN_LOCATION_NAME_DESC`None
    * `ORIGIN_ADDRESS_LINE1_ASC`None
    * `ORIGIN_ADDRESS_LINE1_DESC`None
    * `ORIGIN_ADDRESS_LINE2_ASC`None
    * `ORIGIN_ADDRESS_LINE2_DESC`None
    * `ORIGIN_ADDRESS_LINE3_ASC`None
    * `ORIGIN_ADDRESS_LINE3_DESC`None
    * `ORIGIN_CITY_ASC`None
    * `ORIGIN_CITY_DESC`None
    * `ORIGIN_STATE_ASC`None
    * `ORIGIN_STATE_DESC`None
    * `ORIGIN_COUNTRY_ASC`None
    * `ORIGIN_COUNTRY_DESC`None
    * `ORIGIN_ZIP_ASC`None
    * `ORIGIN_ZIP_DESC`None
    * `ORIGIN_EMAIL_ASC`None
    * `ORIGIN_EMAIL_DESC`None
    * `ORIGIN_PHONE_ASC`None
    * `ORIGIN_PHONE_DESC`None
    * `ORIGIN_FAX_ASC`None
    * `ORIGIN_FAX_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `IS_CANCELED_ASC`None
    * `IS_CANCELED_DESC`None
    * `IS_TRANSFER_ORDER_ASC`None
    * `IS_TRANSFER_ORDER_DESC`None
    * `TRANSFER_WAREHOUSE_CUSTOMER_ID_ASC`None
    * `TRANSFER_WAREHOUSE_CUSTOMER_ID_DESC`None
    * `TRANSFER_CUSTOMER_ID_ASC`None
    * `TRANSFER_CUSTOMER_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CARRIER_CODE_ASC', 'CARRIER_CODE_DESC', 'CARRIER_ID_ASC', 'CARRIER_ID_DESC', 'COMMENTS_ASC', 'COMMENTS_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EDI_TYPE_ASC', 'EDI_TYPE_DESC', 'EXPECTED_RECEIVE_DATETIME_END_ASC', 'EXPECTED_RECEIVE_DATETIME_END_DESC', 'EXPECTED_RECEIVE_DATETIME_START_ASC', 'EXPECTED_RECEIVE_DATETIME_START_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'FINISH_DATETIME_ASC', 'FINISH_DATETIME_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_LOAD_ID_ASC', 'INBOUND_LOAD_ID_DESC', 'IS_CANCELED_ASC', 'IS_CANCELED_DESC', 'IS_QUICK_RECEIVE_ASC', 'IS_QUICK_RECEIVE_DESC', 'IS_TRANSFER_ORDER_ASC', 'IS_TRANSFER_ORDER_DESC', 'LOAD_REFERENCE_NUMBER_ASC', 'LOAD_REFERENCE_NUMBER_DESC', 'NATURAL', 'NOTES_ASC', 'NOTES_DESC', 'ORDER_CONFIRMATION_DATETIME_ASC', 'ORDER_CONFIRMATION_DATETIME_DESC', 'ORIGIN_ADDRESS_LINE1_ASC', 'ORIGIN_ADDRESS_LINE1_DESC', 'ORIGIN_ADDRESS_LINE2_ASC', 'ORIGIN_ADDRESS_LINE2_DESC', 'ORIGIN_ADDRESS_LINE3_ASC', 'ORIGIN_ADDRESS_LINE3_DESC', 'ORIGIN_CITY_ASC', 'ORIGIN_CITY_DESC', 'ORIGIN_COUNTRY_ASC', 'ORIGIN_COUNTRY_DESC', 'ORIGIN_EMAIL_ASC', 'ORIGIN_EMAIL_DESC', 'ORIGIN_FAX_ASC', 'ORIGIN_FAX_DESC', 'ORIGIN_LOCATION_CODE_ASC', 'ORIGIN_LOCATION_CODE_DESC', 'ORIGIN_LOCATION_NAME_ASC', 'ORIGIN_LOCATION_NAME_DESC', 'ORIGIN_PARTY_CODE_ASC', 'ORIGIN_PARTY_CODE_DESC', 'ORIGIN_PARTY_ID_ASC', 'ORIGIN_PARTY_ID_DESC', 'ORIGIN_PHONE_ASC', 'ORIGIN_PHONE_DESC', 'ORIGIN_STATE_ASC', 'ORIGIN_STATE_DESC', 'ORIGIN_ZIP_ASC', 'ORIGIN_ZIP_DESC', 'PURCHASE_ORDER_NUMBER_ASC', 'PURCHASE_ORDER_NUMBER_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'RECEIVED_DATETIME_ASC', 'RECEIVED_DATETIME_DESC', 'SCAN_FINISH_DATETIME_ASC', 'SCAN_FINISH_DATETIME_DESC', 'SCAN_START_DATETIME_ASC', 'SCAN_START_DATETIME_DESC', 'SIGNIN_DATETIME_ASC', 'SIGNIN_DATETIME_DESC', 'SIGNOUT_DATETIME_ASC', 'SIGNOUT_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'START_DATETIME_ASC', 'START_DATETIME_DESC', 'SUPPLIER_CODE_ASC', 'SUPPLIER_CODE_DESC', 'SUPPLIER_ID_ASC', 'SUPPLIER_ID_DESC', 'TRANSFER_CUSTOMER_ID_ASC', 'TRANSFER_CUSTOMER_ID_DESC', 'TRANSFER_WAREHOUSE_CUSTOMER_ID_ASC', 'TRANSFER_WAREHOUSE_CUSTOMER_ID_DESC', 'TRANSPORTATION_METHOD_ASC', 'TRANSPORTATION_METHOD_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'VERSION_NUMBER_ASC', 'VERSION_NUMBER_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_GROSS_WEIGHT_ASC', 'WAREHOUSE_GROSS_WEIGHT_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundOrdersRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundOrdersRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CARRIER_CODE_ASC`None
    * `CARRIER_CODE_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `WAREHOUSE_GROSS_WEIGHT_ASC`None
    * `WAREHOUSE_GROSS_WEIGHT_DESC`None
    * `ORIGIN_PARTY_CODE_ASC`None
    * `ORIGIN_PARTY_CODE_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `IS_QUICK_RECEIVE_ASC`None
    * `IS_QUICK_RECEIVE_DESC`None
    * `ORDER_CONFIRMATION_DATETIME_ASC`None
    * `ORDER_CONFIRMATION_DATETIME_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `PURCHASE_ORDER_NUMBER_ASC`None
    * `PURCHASE_ORDER_NUMBER_DESC`None
    * `RECEIVED_DATETIME_ASC`None
    * `RECEIVED_DATETIME_DESC`None
    * `SCAN_FINISH_DATETIME_ASC`None
    * `SCAN_FINISH_DATETIME_DESC`None
    * `SCAN_START_DATETIME_ASC`None
    * `SCAN_START_DATETIME_DESC`None
    * `SUPPLIER_CODE_ASC`None
    * `SUPPLIER_CODE_DESC`None
    * `TRANSPORTATION_METHOD_ASC`None
    * `TRANSPORTATION_METHOD_DESC`None
    * `EDI_TYPE_ASC`None
    * `EDI_TYPE_DESC`None
    * `VERSION_NUMBER_ASC`None
    * `VERSION_NUMBER_DESC`None
    * `FINISH_DATETIME_ASC`None
    * `FINISH_DATETIME_DESC`None
    * `COMMENTS_ASC`None
    * `COMMENTS_DESC`None
    * `EXPECTED_RECEIVE_DATETIME_START_ASC`None
    * `EXPECTED_RECEIVE_DATETIME_START_DESC`None
    * `EXPECTED_RECEIVE_DATETIME_END_ASC`None
    * `EXPECTED_RECEIVE_DATETIME_END_DESC`None
    * `SIGNIN_DATETIME_ASC`None
    * `SIGNIN_DATETIME_DESC`None
    * `SIGNOUT_DATETIME_ASC`None
    * `SIGNOUT_DATETIME_DESC`None
    * `START_DATETIME_ASC`None
    * `START_DATETIME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `ORIGIN_LOCATION_CODE_ASC`None
    * `ORIGIN_LOCATION_CODE_DESC`None
    * `ORIGIN_LOCATION_NAME_ASC`None
    * `ORIGIN_LOCATION_NAME_DESC`None
    * `ORIGIN_ADDRESS_LINE1_ASC`None
    * `ORIGIN_ADDRESS_LINE1_DESC`None
    * `ORIGIN_ADDRESS_LINE2_ASC`None
    * `ORIGIN_ADDRESS_LINE2_DESC`None
    * `ORIGIN_ADDRESS_LINE3_ASC`None
    * `ORIGIN_ADDRESS_LINE3_DESC`None
    * `ORIGIN_CITY_ASC`None
    * `ORIGIN_CITY_DESC`None
    * `ORIGIN_STATE_ASC`None
    * `ORIGIN_STATE_DESC`None
    * `ORIGIN_COUNTRY_ASC`None
    * `ORIGIN_COUNTRY_DESC`None
    * `ORIGIN_ZIP_ASC`None
    * `ORIGIN_ZIP_DESC`None
    * `ORIGIN_EMAIL_ASC`None
    * `ORIGIN_EMAIL_DESC`None
    * `ORIGIN_PHONE_ASC`None
    * `ORIGIN_PHONE_DESC`None
    * `ORIGIN_FAX_ASC`None
    * `ORIGIN_FAX_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `LOAD_REFERENCE_NUMBER_ASC`None
    * `LOAD_REFERENCE_NUMBER_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `IS_CANCELED_ASC`None
    * `IS_CANCELED_DESC`None
    * `TRANSFER_CUSTOMER_CODE_ASC`None
    * `TRANSFER_CUSTOMER_CODE_DESC`None
    * `IS_TRANSFER_ORDER_ASC`None
    * `IS_TRANSFER_ORDER_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `INBOUND_LOAD_ID_ASC`None
    * `INBOUND_LOAD_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `TRANSFER_CUSTOMER_ID_ASC`None
    * `TRANSFER_CUSTOMER_ID_DESC`None
    * `AVERAGE_TEMPERATURE_ASC`None
    * `AVERAGE_TEMPERATURE_DESC`None
    * `FRONT_TEMPERATURE_ASC`None
    * `FRONT_TEMPERATURE_DESC`None
    * `MIDDLE_TEMPERATURE_ASC`None
    * `MIDDLE_TEMPERATURE_DESC`None
    * `BACK_TEMPERATURE_ASC`None
    * `BACK_TEMPERATURE_DESC`None
    * `WMS_LAST_UPDATED_BY_ASC`None
    * `WMS_LAST_UPDATED_BY_DESC`None
    * `WMS_LAST_UPDATED_DATETIME_ASC`None
    * `WMS_LAST_UPDATED_DATETIME_DESC`None
    * `SUPPLIER_NAME_ASC`None
    * `SUPPLIER_NAME_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('AVERAGE_TEMPERATURE_ASC', 'AVERAGE_TEMPERATURE_DESC', 'BACK_TEMPERATURE_ASC', 'BACK_TEMPERATURE_DESC', 'CARRIER_CODE_ASC', 'CARRIER_CODE_DESC', 'COMMENTS_ASC', 'COMMENTS_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EDI_TYPE_ASC', 'EDI_TYPE_DESC', 'EXPECTED_RECEIVE_DATETIME_END_ASC', 'EXPECTED_RECEIVE_DATETIME_END_DESC', 'EXPECTED_RECEIVE_DATETIME_START_ASC', 'EXPECTED_RECEIVE_DATETIME_START_DESC', 'FINISH_DATETIME_ASC', 'FINISH_DATETIME_DESC', 'FRONT_TEMPERATURE_ASC', 'FRONT_TEMPERATURE_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_LOAD_ID_ASC', 'INBOUND_LOAD_ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'IS_CANCELED_ASC', 'IS_CANCELED_DESC', 'IS_QUICK_RECEIVE_ASC', 'IS_QUICK_RECEIVE_DESC', 'IS_TRANSFER_ORDER_ASC', 'IS_TRANSFER_ORDER_DESC', 'LOAD_REFERENCE_NUMBER_ASC', 'LOAD_REFERENCE_NUMBER_DESC', 'MIDDLE_TEMPERATURE_ASC', 'MIDDLE_TEMPERATURE_DESC', 'NATURAL', 'NOTES_ASC', 'NOTES_DESC', 'ORDER_CONFIRMATION_DATETIME_ASC', 'ORDER_CONFIRMATION_DATETIME_DESC', 'ORIGIN_ADDRESS_LINE1_ASC', 'ORIGIN_ADDRESS_LINE1_DESC', 'ORIGIN_ADDRESS_LINE2_ASC', 'ORIGIN_ADDRESS_LINE2_DESC', 'ORIGIN_ADDRESS_LINE3_ASC', 'ORIGIN_ADDRESS_LINE3_DESC', 'ORIGIN_CITY_ASC', 'ORIGIN_CITY_DESC', 'ORIGIN_COUNTRY_ASC', 'ORIGIN_COUNTRY_DESC', 'ORIGIN_EMAIL_ASC', 'ORIGIN_EMAIL_DESC', 'ORIGIN_FAX_ASC', 'ORIGIN_FAX_DESC', 'ORIGIN_LOCATION_CODE_ASC', 'ORIGIN_LOCATION_CODE_DESC', 'ORIGIN_LOCATION_NAME_ASC', 'ORIGIN_LOCATION_NAME_DESC', 'ORIGIN_PARTY_CODE_ASC', 'ORIGIN_PARTY_CODE_DESC', 'ORIGIN_PHONE_ASC', 'ORIGIN_PHONE_DESC', 'ORIGIN_STATE_ASC', 'ORIGIN_STATE_DESC', 'ORIGIN_ZIP_ASC', 'ORIGIN_ZIP_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PURCHASE_ORDER_NUMBER_ASC', 'PURCHASE_ORDER_NUMBER_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'RECEIVED_DATETIME_ASC', 'RECEIVED_DATETIME_DESC', 'SCAN_FINISH_DATETIME_ASC', 'SCAN_FINISH_DATETIME_DESC', 'SCAN_START_DATETIME_ASC', 'SCAN_START_DATETIME_DESC', 'SIGNIN_DATETIME_ASC', 'SIGNIN_DATETIME_DESC', 'SIGNOUT_DATETIME_ASC', 'SIGNOUT_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'START_DATETIME_ASC', 'START_DATETIME_DESC', 'SUPPLIER_CODE_ASC', 'SUPPLIER_CODE_DESC', 'SUPPLIER_NAME_ASC', 'SUPPLIER_NAME_DESC', 'TRANSFER_CUSTOMER_CODE_ASC', 'TRANSFER_CUSTOMER_CODE_DESC', 'TRANSFER_CUSTOMER_ID_ASC', 'TRANSFER_CUSTOMER_ID_DESC', 'TRANSPORTATION_METHOD_ASC', 'TRANSPORTATION_METHOD_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'VERSION_NUMBER_ASC', 'VERSION_NUMBER_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_GROSS_WEIGHT_ASC', 'WAREHOUSE_GROSS_WEIGHT_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', 'WMS_LAST_UPDATED_BY_ASC', 'WMS_LAST_UPDATED_BY_DESC', 'WMS_LAST_UPDATED_DATETIME_ASC', 'WMS_LAST_UPDATED_DATETIME_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundPalletsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundPalletsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `WAREHOUSE_PALLET_CODE_ASC`None
    * `WAREHOUSE_PALLET_CODE_DESC`None
    * `CASE_QUANTITY_ASC`None
    * `CASE_QUANTITY_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CASE_QUANTITY_ASC', 'CASE_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WAREHOUSE_PALLET_CODE_ASC', 'WAREHOUSE_PALLET_CODE_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InboundTruckLogRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InboundTruckLogRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `COOLER_QUANTITY_ASC`None
    * `COOLER_QUANTITY_DESC`None
    * `COOLER_SHORTAGE_QUANTITY_ASC`None
    * `COOLER_SHORTAGE_QUANTITY_DESC`None
    * `COOLER_DAMAGED_QUANTITY_ASC`None
    * `COOLER_DAMAGED_QUANTITY_DESC`None
    * `COOLER_OVER_QUANTITY_ASC`None
    * `COOLER_OVER_QUANTITY_DESC`None
    * `COOLER_OTHER_QUANTITY_ASC`None
    * `COOLER_OTHER_QUANTITY_DESC`None
    * `COOLER_COMMENT_ASC`None
    * `COOLER_COMMENT_DESC`None
    * `FREEZER_QUANTITY_ASC`None
    * `FREEZER_QUANTITY_DESC`None
    * `FREEZER_SHORTAGE_QUANTITY_ASC`None
    * `FREEZER_SHORTAGE_QUANTITY_DESC`None
    * `FREEZER_DAMAGED_QUANTITY_ASC`None
    * `FREEZER_DAMAGED_QUANTITY_DESC`None
    * `FREEZER_OVER_QUANTITY_ASC`None
    * `FREEZER_OVER_QUANTITY_DESC`None
    * `FREEZER_OTHER_QUANTITY_ASC`None
    * `FREEZER_OTHER_QUANTITY_DESC`None
    * `FREEZER_COMMENT_ASC`None
    * `FREEZER_COMMENT_DESC`None
    * `DRY_QUANTITY_ASC`None
    * `DRY_QUANTITY_DESC`None
    * `DRY_SHORTAGE_QUANTITY_ASC`None
    * `DRY_SHORTAGE_QUANTITY_DESC`None
    * `DRY_DAMAGED_QUANTITY_ASC`None
    * `DRY_DAMAGED_QUANTITY_DESC`None
    * `DRY_OVER_QUANTITY_ASC`None
    * `DRY_OVER_QUANTITY_DESC`None
    * `DRY_OTHER_QUANTITY_ASC`None
    * `DRY_OTHER_QUANTITY_DESC`None
    * `DRY_COMMENT_ASC`None
    * `DRY_COMMENT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('COOLER_COMMENT_ASC', 'COOLER_COMMENT_DESC', 'COOLER_DAMAGED_QUANTITY_ASC', 'COOLER_DAMAGED_QUANTITY_DESC', 'COOLER_OTHER_QUANTITY_ASC', 'COOLER_OTHER_QUANTITY_DESC', 'COOLER_OVER_QUANTITY_ASC', 'COOLER_OVER_QUANTITY_DESC', 'COOLER_QUANTITY_ASC', 'COOLER_QUANTITY_DESC', 'COOLER_SHORTAGE_QUANTITY_ASC', 'COOLER_SHORTAGE_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DRY_COMMENT_ASC', 'DRY_COMMENT_DESC', 'DRY_DAMAGED_QUANTITY_ASC', 'DRY_DAMAGED_QUANTITY_DESC', 'DRY_OTHER_QUANTITY_ASC', 'DRY_OTHER_QUANTITY_DESC', 'DRY_OVER_QUANTITY_ASC', 'DRY_OVER_QUANTITY_DESC', 'DRY_QUANTITY_ASC', 'DRY_QUANTITY_DESC', 'DRY_SHORTAGE_QUANTITY_ASC', 'DRY_SHORTAGE_QUANTITY_DESC', 'FREEZER_COMMENT_ASC', 'FREEZER_COMMENT_DESC', 'FREEZER_DAMAGED_QUANTITY_ASC', 'FREEZER_DAMAGED_QUANTITY_DESC', 'FREEZER_OTHER_QUANTITY_ASC', 'FREEZER_OTHER_QUANTITY_DESC', 'FREEZER_OVER_QUANTITY_ASC', 'FREEZER_OVER_QUANTITY_DESC', 'FREEZER_QUANTITY_ASC', 'FREEZER_QUANTITY_DESC', 'FREEZER_SHORTAGE_QUANTITY_ASC', 'FREEZER_SHORTAGE_QUANTITY_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


Int = sgqlc.types.Int

class InventoryAdjustmentsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InventoryAdjustment`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `ADJUSTMENT_NUMBER_ASC`None
    * `ADJUSTMENT_NUMBER_DESC`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `TRANSACTION_TYPE_ASC`None
    * `TRANSACTION_TYPE_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `ADJUSTMENT_DATE_ASC`None
    * `ADJUSTMENT_DATE_DESC`None
    * `ADJUSTMENT_TYPE_ASC`None
    * `ADJUSTMENT_TYPE_DESC`None
    * `ADJUSTMENT_TYPE_DESCRIPTION_ASC`None
    * `ADJUSTMENT_TYPE_DESCRIPTION_DESC`None
    * `PALLET_COUNT_DELTA_ASC`None
    * `PALLET_COUNT_DELTA_DESC`None
    * `QUANTITY_DELTA_ASC`None
    * `QUANTITY_DELTA_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `GROSS_WEIGHT_DELTA_ASC`None
    * `GROSS_WEIGHT_DELTA_DESC`None
    * `NET_WEIGHT_DELTA_ASC`None
    * `NET_WEIGHT_DELTA_DESC`None
    * `COMMENT_ASC`None
    * `COMMENT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `LOT_DEPLETED_DATE_ASC`None
    * `LOT_DEPLETED_DATE_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ADJUSTMENT_DATE_ASC', 'ADJUSTMENT_DATE_DESC', 'ADJUSTMENT_NUMBER_ASC', 'ADJUSTMENT_NUMBER_DESC', 'ADJUSTMENT_TYPE_ASC', 'ADJUSTMENT_TYPE_DESC', 'ADJUSTMENT_TYPE_DESCRIPTION_ASC', 'ADJUSTMENT_TYPE_DESCRIPTION_DESC', 'COMMENT_ASC', 'COMMENT_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'GROSS_WEIGHT_DELTA_ASC', 'GROSS_WEIGHT_DELTA_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LOT_DEPLETED_DATE_ASC', 'LOT_DEPLETED_DATE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'NATURAL', 'NET_WEIGHT_DELTA_ASC', 'NET_WEIGHT_DELTA_DESC', 'PALLET_COUNT_DELTA_ASC', 'PALLET_COUNT_DELTA_DESC', 'QUANTITY_DELTA_ASC', 'QUANTITY_DELTA_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TRANSACTION_TYPE_ASC', 'TRANSACTION_TYPE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InventoryAdjustmentsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InventoryAdjustmentsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `ADJUSTMENT_NUMBER_ASC`None
    * `ADJUSTMENT_NUMBER_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `TRANSACTION_TYPE_ASC`None
    * `TRANSACTION_TYPE_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `NET_PALLETS_ASC`None
    * `NET_PALLETS_DESC`None
    * `ADJUSTMENT_DATE_ASC`None
    * `ADJUSTMENT_DATE_DESC`None
    * `ADJUSTED_QUANTITY_ASC`None
    * `ADJUSTED_QUANTITY_DESC`None
    * `ADJUSTMENT_TYPE_ASC`None
    * `ADJUSTMENT_TYPE_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `COMMENT_ASC`None
    * `COMMENT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `ADJUSTMENT_TYPE_DESCRIPTION_ASC`None
    * `ADJUSTMENT_TYPE_DESCRIPTION_DESC`None
    * `NET_WEIGHT_DELTA_ASC`None
    * `NET_WEIGHT_DELTA_DESC`None
    * `GROSS_WEIGHT_DELTA_ASC`None
    * `GROSS_WEIGHT_DELTA_DESC`None
    * `PALLET_COUNT_DELTA_ASC`None
    * `PALLET_COUNT_DELTA_DESC`None
    * `QUANTITY_DELTA_ASC`None
    * `QUANTITY_DELTA_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ADJUSTED_QUANTITY_ASC', 'ADJUSTED_QUANTITY_DESC', 'ADJUSTMENT_DATE_ASC', 'ADJUSTMENT_DATE_DESC', 'ADJUSTMENT_NUMBER_ASC', 'ADJUSTMENT_NUMBER_DESC', 'ADJUSTMENT_TYPE_ASC', 'ADJUSTMENT_TYPE_DESC', 'ADJUSTMENT_TYPE_DESCRIPTION_ASC', 'ADJUSTMENT_TYPE_DESCRIPTION_DESC', 'COMMENT_ASC', 'COMMENT_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DELTA_ASC', 'GROSS_WEIGHT_DELTA_DESC', 'GROSS_WEIGHT_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'NATURAL', 'NET_PALLETS_ASC', 'NET_PALLETS_DESC', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DELTA_ASC', 'NET_WEIGHT_DELTA_DESC', 'NET_WEIGHT_DESC', 'PALLET_COUNT_DELTA_ASC', 'PALLET_COUNT_DELTA_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'QUANTITY_DELTA_ASC', 'QUANTITY_DELTA_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TRANSACTION_TYPE_ASC', 'TRANSACTION_TYPE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InventoryControlRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InventoryControlRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `EXCEPTION_ID_ASC`None
    * `EXCEPTION_ID_DESC`None
    * `OPERATOR_ID_ASC`None
    * `OPERATOR_ID_DESC`None
    * `PROBLEM_TIME_ASC`None
    * `PROBLEM_TIME_DESC`None
    * `WORK_TYPE_ASC`None
    * `WORK_TYPE_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `PROBLEM_DESCRIPTION_ASC`None
    * `PROBLEM_DESCRIPTION_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `ASSIGN_LOCATION_ASC`None
    * `ASSIGN_LOCATION_DESC`None
    * `SCAN_LOCATION_ASC`None
    * `SCAN_LOCATION_DESC`None
    * `LOCATION_AUDIT_ASC`None
    * `LOCATION_AUDIT_DESC`None
    * `PRODUCT_AUDIT_ASC`None
    * `PRODUCT_AUDIT_DESC`None
    * `PALLET_AUDIT_ASC`None
    * `PALLET_AUDIT_DESC`None
    * `LOT_AUDIT_ASC`None
    * `LOT_AUDIT_DESC`None
    * `IS_RESOLVED_ASC`None
    * `IS_RESOLVED_DESC`None
    * `RESOLVED_TIME_ASC`None
    * `RESOLVED_TIME_DESC`None
    * `IS_WORKING_ASC`None
    * `IS_WORKING_DESC`None
    * `BOL_NUMBER_ASC`None
    * `BOL_NUMBER_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `AUDIT_QUANTITY_ASC`None
    * `AUDIT_QUANTITY_DESC`None
    * `IS_AUDITED_ASC`None
    * `IS_AUDITED_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ASSIGN_LOCATION_ASC', 'ASSIGN_LOCATION_DESC', 'AUDIT_QUANTITY_ASC', 'AUDIT_QUANTITY_DESC', 'BOL_NUMBER_ASC', 'BOL_NUMBER_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EXCEPTION_ID_ASC', 'EXCEPTION_ID_DESC', 'ID_ASC', 'ID_DESC', 'IS_AUDITED_ASC', 'IS_AUDITED_DESC', 'IS_RESOLVED_ASC', 'IS_RESOLVED_DESC', 'IS_WORKING_ASC', 'IS_WORKING_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOCATION_AUDIT_ASC', 'LOCATION_AUDIT_DESC', 'LOT_AUDIT_ASC', 'LOT_AUDIT_DESC', 'NATURAL', 'OPERATOR_ID_ASC', 'OPERATOR_ID_DESC', 'PALLET_AUDIT_ASC', 'PALLET_AUDIT_DESC', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PROBLEM_DESCRIPTION_ASC', 'PROBLEM_DESCRIPTION_DESC', 'PROBLEM_TIME_ASC', 'PROBLEM_TIME_DESC', 'PRODUCT_AUDIT_ASC', 'PRODUCT_AUDIT_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'RESOLVED_TIME_ASC', 'RESOLVED_TIME_DESC', 'SCAN_LOCATION_ASC', 'SCAN_LOCATION_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WORK_TYPE_ASC', 'WORK_TYPE_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InventoryControlsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InventoryControl`.

    Enumeration Choices:

    * `NATURAL`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `EXCEPTION_ID_ASC`None
    * `EXCEPTION_ID_DESC`None
    * `OPERATOR_ID_ASC`None
    * `OPERATOR_ID_DESC`None
    * `PROBLEM_TIME_ASC`None
    * `PROBLEM_TIME_DESC`None
    * `WORK_TYPE_ASC`None
    * `WORK_TYPE_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `PROBLEM_DESCRIPTION_ASC`None
    * `PROBLEM_DESCRIPTION_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `ASSIGN_LOCATION_ASC`None
    * `ASSIGN_LOCATION_DESC`None
    * `SCAN_LOCATION_ASC`None
    * `SCAN_LOCATION_DESC`None
    * `LOCATION_AUDIT_ASC`None
    * `LOCATION_AUDIT_DESC`None
    * `PRODUCT_AUDIT_ASC`None
    * `PRODUCT_AUDIT_DESC`None
    * `PALLET_AUDIT_ASC`None
    * `PALLET_AUDIT_DESC`None
    * `LOT_AUDIT_ASC`None
    * `LOT_AUDIT_DESC`None
    * `IS_RESOLVED_ASC`None
    * `IS_RESOLVED_DESC`None
    * `RESOLVED_TIME_ASC`None
    * `RESOLVED_TIME_DESC`None
    * `IS_WORKING_ASC`None
    * `IS_WORKING_DESC`None
    * `BOL_NUMBER_ASC`None
    * `BOL_NUMBER_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `AUDIT_QUANTITY_ASC`None
    * `AUDIT_QUANTITY_DESC`None
    * `IS_AUDITED_ASC`None
    * `IS_AUDITED_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ASSIGN_LOCATION_ASC', 'ASSIGN_LOCATION_DESC', 'AUDIT_QUANTITY_ASC', 'AUDIT_QUANTITY_DESC', 'BOL_NUMBER_ASC', 'BOL_NUMBER_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EXCEPTION_ID_ASC', 'EXCEPTION_ID_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'ID_ASC', 'ID_DESC', 'IS_AUDITED_ASC', 'IS_AUDITED_DESC', 'IS_RESOLVED_ASC', 'IS_RESOLVED_DESC', 'IS_WORKING_ASC', 'IS_WORKING_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOCATION_AUDIT_ASC', 'LOCATION_AUDIT_DESC', 'LOT_AUDIT_ASC', 'LOT_AUDIT_DESC', 'NATURAL', 'OPERATOR_ID_ASC', 'OPERATOR_ID_DESC', 'PALLET_AUDIT_ASC', 'PALLET_AUDIT_DESC', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'PROBLEM_DESCRIPTION_ASC', 'PROBLEM_DESCRIPTION_DESC', 'PROBLEM_TIME_ASC', 'PROBLEM_TIME_DESC', 'PRODUCT_AUDIT_ASC', 'PRODUCT_AUDIT_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'RESOLVED_TIME_ASC', 'RESOLVED_TIME_DESC', 'SCAN_LOCATION_ASC', 'SCAN_LOCATION_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WORK_TYPE_ASC', 'WORK_TYPE_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class InventoryHoldHistoryRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `InventoryHoldHistoryRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_ASC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_DESC`None
    * `INVENTORY_HOLD_DATE_ASC`None
    * `INVENTORY_HOLD_DATE_DESC`None
    * `INVENTORY_TYPE_ASC`None
    * `INVENTORY_TYPE_DESC`None
    * `PREVIOUS_HOLD_CODE_ASC`None
    * `PREVIOUS_HOLD_CODE_DESC`None
    * `CHANGED_HOLD_CODE_ASC`None
    * `CHANGED_HOLD_CODE_DESC`None
    * `COMMENT_ASC`None
    * `COMMENT_DESC`None
    * `UPDATED_BY_ASC`None
    * `UPDATED_BY_DESC`None
    * `OWNER_CUSTOMER_CODE_ASC`None
    * `OWNER_CUSTOMER_CODE_DESC`None
    * `OWNER_CUSTOMER_ID_ASC`None
    * `OWNER_CUSTOMER_ID_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `COMMITTED_QUANTITY_ASC`None
    * `COMMITTED_QUANTITY_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CHANGED_HOLD_CODE_ASC', 'CHANGED_HOLD_CODE_DESC', 'COMMENT_ASC', 'COMMENT_DESC', 'COMMITTED_QUANTITY_ASC', 'COMMITTED_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'INVENTORY_HOLD_DATE_ASC', 'INVENTORY_HOLD_DATE_DESC', 'INVENTORY_TYPE_ASC', 'INVENTORY_TYPE_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'NATURAL', 'OWNER_CUSTOMER_CODE_ASC', 'OWNER_CUSTOMER_CODE_DESC', 'OWNER_CUSTOMER_ID_ASC', 'OWNER_CUSTOMER_ID_DESC', 'PREVIOUS_HOLD_CODE_ASC', 'PREVIOUS_HOLD_CODE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'UPDATED_BY_ASC', 'UPDATED_BY_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_ASC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class ItemFreezeTimesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ItemFreezeTime`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `WMS_ITEM_ID_ASC`None
    * `WMS_ITEM_ID_DESC`None
    * `FREEZE_HOURS_ASC`None
    * `FREEZE_HOURS_DESC`None
    * `FOR_BLAST_CELL_TYPE_ID_ASC`None
    * `FOR_BLAST_CELL_TYPE_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'FOR_BLAST_CELL_TYPE_ID_ASC', 'FOR_BLAST_CELL_TYPE_ID_DESC', 'FREEZE_HOURS_ASC', 'FREEZE_HOURS_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WMS_ITEM_ID_ASC', 'WMS_ITEM_ID_DESC')


class ItemReferenceCodesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ItemReferenceCode`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `REFERENCE_TYPE_ASC`None
    * `REFERENCE_TYPE_DESC`None
    * `REFERENCE_VALUE_ASC`None
    * `REFERENCE_VALUE_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'NATURAL', 'REFERENCE_TYPE_ASC', 'REFERENCE_TYPE_DESC', 'REFERENCE_VALUE_ASC', 'REFERENCE_VALUE_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class ItemReferenceCodesRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ItemReferenceCodesRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `REFERENCE_TYPE_ASC`None
    * `REFERENCE_TYPE_DESC`None
    * `REFERENCE_VALUE_ASC`None
    * `REFERENCE_VALUE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'REFERENCE_TYPE_ASC', 'REFERENCE_TYPE_DESC', 'REFERENCE_VALUE_ASC', 'REFERENCE_VALUE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class ItemShortCategoryNamesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ItemShortCategoryName`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `WMS_ITEM_ID_ASC`None
    * `WMS_ITEM_ID_DESC`None
    * `LABEL_ASC`None
    * `LABEL_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'ID_ASC', 'ID_DESC', 'LABEL_ASC', 'LABEL_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WMS_ITEM_ID_ASC', 'WMS_ITEM_ID_DESC')


class ItemsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `Item`.

    Enumeration Choices:

    * `NATURAL`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `BILLING_WAREHOUSE_CUSTOMER_ID_ASC`None
    * `BILLING_WAREHOUSE_CUSTOMER_ID_DESC`None
    * `OWNER_WAREHOUSE_CUSTOMER_ID_ASC`None
    * `OWNER_WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `BILLING_CUSTOMER_ID_ASC`None
    * `BILLING_CUSTOMER_ID_DESC`None
    * `OWNER_CUSTOMER_ID_ASC`None
    * `OWNER_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `IS_ACTIVE_ASC`None
    * `IS_ACTIVE_DESC`None
    * `CATCH_WEIGHT_TYPE_ASC`None
    * `CATCH_WEIGHT_TYPE_DESC`None
    * `CASE_DIMENSIONS_UOM_ASC`None
    * `CASE_DIMENSIONS_UOM_DESC`None
    * `CASE_HEIGHT_ASC`None
    * `CASE_HEIGHT_DESC`None
    * `CASE_LENGTH_ASC`None
    * `CASE_LENGTH_DESC`None
    * `CASE_WIDTH_ASC`None
    * `CASE_WIDTH_DESC`None
    * `ITEM_CATEGORY_ASC`None
    * `ITEM_CATEGORY_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `DESCRIPTION_ASC`None
    * `DESCRIPTION_DESC`None
    * `HIGH_ASC`None
    * `HIGH_DESC`None
    * `MAX_ACCEPTABLE_TEMPERATURE_ASC`None
    * `MAX_ACCEPTABLE_TEMPERATURE_DESC`None
    * `TEMPERATURE_UOM_ASC`None
    * `TEMPERATURE_UOM_DESC`None
    * `IS_STACKABLE_ASC`None
    * `IS_STACKABLE_DESC`None
    * `MAX_STACK_COUNT_ASC`None
    * `MAX_STACK_COUNT_DESC`None
    * `MIN_ACCEPTABLE_TEMPERATURE_ASC`None
    * `MIN_ACCEPTABLE_TEMPERATURE_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `IS_ODOR_SENSITIVE_ASC`None
    * `IS_ODOR_SENSITIVE_DESC`None
    * `BILLING_CUSTOMER_CODE_ASC`None
    * `BILLING_CUSTOMER_CODE_DESC`None
    * `OWNER_CUSTOMER_CODE_ASC`None
    * `OWNER_CUSTOMER_CODE_DESC`None
    * `RECEIVE_ON_HOLD_CODE_ASC`None
    * `RECEIVE_ON_HOLD_CODE_DESC`None
    * `ROTATION_TYPE_ASC`None
    * `ROTATION_TYPE_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `PACKAGE_TARE_WEIGHT_ASC`None
    * `PACKAGE_TARE_WEIGHT_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `TI_ASC`None
    * `TI_DESC`None
    * `ITEM_UOM_ASC`None
    * `ITEM_UOM_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PRODUCT_CODE_ASC`None
    * `PRODUCT_CODE_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `IS_PRODUCT_ASC`None
    * `IS_PRODUCT_DESC`None
    * `ROOM_TYPE_ASC`None
    * `ROOM_TYPE_DESC`None
    * `FREIGHT_TYPE_ASC`None
    * `FREIGHT_TYPE_DESC`None
    * `TONNAGE_GROUP_ASC`None
    * `TONNAGE_GROUP_DESC`None
    * `SHELF_LIFE_ON_DELIVERY_DAYS_ASC`None
    * `SHELF_LIFE_ON_DELIVERY_DAYS_DESC`None
    * `IS_WAREHOUSE_SUPPLY_ASC`None
    * `IS_WAREHOUSE_SUPPLY_DESC`None
    * `QUANTITY_PER_PALLET_ASC`None
    * `QUANTITY_PER_PALLET_DESC`None
    * `SUPPLIER_PRODUCT_CODE_ASC`None
    * `SUPPLIER_PRODUCT_CODE_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BILLING_CUSTOMER_CODE_ASC', 'BILLING_CUSTOMER_CODE_DESC', 'BILLING_CUSTOMER_ID_ASC', 'BILLING_CUSTOMER_ID_DESC', 'BILLING_WAREHOUSE_CUSTOMER_ID_ASC', 'BILLING_WAREHOUSE_CUSTOMER_ID_DESC', 'CASE_DIMENSIONS_UOM_ASC', 'CASE_DIMENSIONS_UOM_DESC', 'CASE_HEIGHT_ASC', 'CASE_HEIGHT_DESC', 'CASE_LENGTH_ASC', 'CASE_LENGTH_DESC', 'CASE_WIDTH_ASC', 'CASE_WIDTH_DESC', 'CATCH_WEIGHT_TYPE_ASC', 'CATCH_WEIGHT_TYPE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DESCRIPTION_ASC', 'DESCRIPTION_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'FREIGHT_TYPE_ASC', 'FREIGHT_TYPE_DESC', 'HIGH_ASC', 'HIGH_DESC', 'ID_ASC', 'ID_DESC', 'IS_ACTIVE_ASC', 'IS_ACTIVE_DESC', 'IS_ODOR_SENSITIVE_ASC', 'IS_ODOR_SENSITIVE_DESC', 'IS_PRODUCT_ASC', 'IS_PRODUCT_DESC', 'IS_STACKABLE_ASC', 'IS_STACKABLE_DESC', 'IS_WAREHOUSE_SUPPLY_ASC', 'IS_WAREHOUSE_SUPPLY_DESC', 'ITEM_CATEGORY_ASC', 'ITEM_CATEGORY_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_UOM_ASC', 'ITEM_UOM_DESC', 'MAX_ACCEPTABLE_TEMPERATURE_ASC', 'MAX_ACCEPTABLE_TEMPERATURE_DESC', 'MAX_STACK_COUNT_ASC', 'MAX_STACK_COUNT_DESC', 'MIN_ACCEPTABLE_TEMPERATURE_ASC', 'MIN_ACCEPTABLE_TEMPERATURE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'OWNER_CUSTOMER_CODE_ASC', 'OWNER_CUSTOMER_CODE_DESC', 'OWNER_CUSTOMER_ID_ASC', 'OWNER_CUSTOMER_ID_DESC', 'OWNER_WAREHOUSE_CUSTOMER_ID_ASC', 'OWNER_WAREHOUSE_CUSTOMER_ID_DESC', 'PACKAGE_TARE_WEIGHT_ASC', 'PACKAGE_TARE_WEIGHT_DESC', 'PRODUCT_CODE_ASC', 'PRODUCT_CODE_DESC', 'QUANTITY_PER_PALLET_ASC', 'QUANTITY_PER_PALLET_DESC', 'RECEIVE_ON_HOLD_CODE_ASC', 'RECEIVE_ON_HOLD_CODE_DESC', 'ROOM_TYPE_ASC', 'ROOM_TYPE_DESC', 'ROTATION_TYPE_ASC', 'ROTATION_TYPE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SHELF_LIFE_ON_DELIVERY_DAYS_ASC', 'SHELF_LIFE_ON_DELIVERY_DAYS_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'SUPPLIER_PRODUCT_CODE_ASC', 'SUPPLIER_PRODUCT_CODE_DESC', 'TEMPERATURE_UOM_ASC', 'TEMPERATURE_UOM_DESC', 'TI_ASC', 'TI_DESC', 'TONNAGE_GROUP_ASC', 'TONNAGE_GROUP_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class ItemsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `ItemsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `IS_ACTIVE_ASC`None
    * `IS_ACTIVE_DESC`None
    * `CATCH_WEIGHT_TYPE_ASC`None
    * `CATCH_WEIGHT_TYPE_DESC`None
    * `CASE_DIMENSIONS_UOM_ASC`None
    * `CASE_DIMENSIONS_UOM_DESC`None
    * `CASE_HEIGHT_ASC`None
    * `CASE_HEIGHT_DESC`None
    * `CASE_LENGTH_ASC`None
    * `CASE_LENGTH_DESC`None
    * `CASE_WIDTH_ASC`None
    * `CASE_WIDTH_DESC`None
    * `ITEM_CATEGORY_ASC`None
    * `ITEM_CATEGORY_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `DESCRIPTION_ASC`None
    * `DESCRIPTION_DESC`None
    * `HIGH_ASC`None
    * `HIGH_DESC`None
    * `MAX_ACCEPTABLE_TEMPERATURE_ASC`None
    * `MAX_ACCEPTABLE_TEMPERATURE_DESC`None
    * `TEMPERATURE_UOM_ASC`None
    * `TEMPERATURE_UOM_DESC`None
    * `IS_STACKABLE_ASC`None
    * `IS_STACKABLE_DESC`None
    * `MAX_STACK_COUNT_ASC`None
    * `MAX_STACK_COUNT_DESC`None
    * `MIN_ACCEPTABLE_TEMPERATURE_ASC`None
    * `MIN_ACCEPTABLE_TEMPERATURE_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `IS_ODOR_SENSITIVE_ASC`None
    * `IS_ODOR_SENSITIVE_DESC`None
    * `BILLING_CUSTOMER_CODE_ASC`None
    * `BILLING_CUSTOMER_CODE_DESC`None
    * `OWNER_CUSTOMER_CODE_ASC`None
    * `OWNER_CUSTOMER_CODE_DESC`None
    * `RECEIVE_ON_HOLD_CODE_ASC`None
    * `RECEIVE_ON_HOLD_CODE_DESC`None
    * `ROTATION_TYPE_ASC`None
    * `ROTATION_TYPE_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `PACKAGE_TARE_WEIGHT_ASC`None
    * `PACKAGE_TARE_WEIGHT_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `TI_ASC`None
    * `TI_DESC`None
    * `ITEM_UOM_ASC`None
    * `ITEM_UOM_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PRODUCT_CODE_ASC`None
    * `PRODUCT_CODE_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `IS_PRODUCT_ASC`None
    * `IS_PRODUCT_DESC`None
    * `ROOM_TYPE_ASC`None
    * `ROOM_TYPE_DESC`None
    * `FREIGHT_TYPE_ASC`None
    * `FREIGHT_TYPE_DESC`None
    * `TONNAGE_GROUP_ASC`None
    * `TONNAGE_GROUP_DESC`None
    * `SHELF_LIFE_AFTER_DELIVERY_OVERRIDE_ASC`None
    * `SHELF_LIFE_AFTER_DELIVERY_OVERRIDE_DESC`None
    * `SHELF_LIFE_ON_DELIVERY_DAYS_ASC`None
    * `SHELF_LIFE_ON_DELIVERY_DAYS_DESC`None
    * `IS_WAREHOUSE_SUPPLY_ASC`None
    * `IS_WAREHOUSE_SUPPLY_DESC`None
    * `QUANTITY_PER_PALLET_ASC`None
    * `QUANTITY_PER_PALLET_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `BILLING_CUSTOMER_ID_ASC`None
    * `BILLING_CUSTOMER_ID_DESC`None
    * `OWNER_CUSTOMER_ID_ASC`None
    * `OWNER_CUSTOMER_ID_DESC`None
    * `BEST_BY_DATE_TYPE_ASC`None
    * `BEST_BY_DATE_TYPE_DESC`None
    * `CODE_DATE_TYPE_ASC`None
    * `CODE_DATE_TYPE_DESC`None
    * `CASE_CUBE_ASC`None
    * `CASE_CUBE_DESC`None
    * `ITEM_CATEGORY_DESCRIPTION_ASC`None
    * `ITEM_CATEGORY_DESCRIPTION_DESC`None
    * `IS_EXPIRY_DATE_CONTROL_ASC`None
    * `IS_EXPIRY_DATE_CONTROL_DESC`None
    * `IS_CAPTURE_PRODUCTION_DATE_ASC`None
    * `IS_CAPTURE_PRODUCTION_DATE_DESC`None
    * `UNIVERSAL_PRODUCT_CODE_ASC`None
    * `UNIVERSAL_PRODUCT_CODE_DESC`None
    * `SUPPLIER_PRODUCT_CODE_ASC`None
    * `SUPPLIER_PRODUCT_CODE_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BEST_BY_DATE_TYPE_ASC', 'BEST_BY_DATE_TYPE_DESC', 'BILLING_CUSTOMER_CODE_ASC', 'BILLING_CUSTOMER_CODE_DESC', 'BILLING_CUSTOMER_ID_ASC', 'BILLING_CUSTOMER_ID_DESC', 'CASE_CUBE_ASC', 'CASE_CUBE_DESC', 'CASE_DIMENSIONS_UOM_ASC', 'CASE_DIMENSIONS_UOM_DESC', 'CASE_HEIGHT_ASC', 'CASE_HEIGHT_DESC', 'CASE_LENGTH_ASC', 'CASE_LENGTH_DESC', 'CASE_WIDTH_ASC', 'CASE_WIDTH_DESC', 'CATCH_WEIGHT_TYPE_ASC', 'CATCH_WEIGHT_TYPE_DESC', 'CODE_DATE_TYPE_ASC', 'CODE_DATE_TYPE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DESCRIPTION_ASC', 'DESCRIPTION_DESC', 'FREIGHT_TYPE_ASC', 'FREIGHT_TYPE_DESC', 'HIGH_ASC', 'HIGH_DESC', 'ID_ASC', 'ID_DESC', 'IS_ACTIVE_ASC', 'IS_ACTIVE_DESC', 'IS_CAPTURE_PRODUCTION_DATE_ASC', 'IS_CAPTURE_PRODUCTION_DATE_DESC', 'IS_EXPIRY_DATE_CONTROL_ASC', 'IS_EXPIRY_DATE_CONTROL_DESC', 'IS_ODOR_SENSITIVE_ASC', 'IS_ODOR_SENSITIVE_DESC', 'IS_PRODUCT_ASC', 'IS_PRODUCT_DESC', 'IS_STACKABLE_ASC', 'IS_STACKABLE_DESC', 'IS_WAREHOUSE_SUPPLY_ASC', 'IS_WAREHOUSE_SUPPLY_DESC', 'ITEM_CATEGORY_ASC', 'ITEM_CATEGORY_DESC', 'ITEM_CATEGORY_DESCRIPTION_ASC', 'ITEM_CATEGORY_DESCRIPTION_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_UOM_ASC', 'ITEM_UOM_DESC', 'MAX_ACCEPTABLE_TEMPERATURE_ASC', 'MAX_ACCEPTABLE_TEMPERATURE_DESC', 'MAX_STACK_COUNT_ASC', 'MAX_STACK_COUNT_DESC', 'MIN_ACCEPTABLE_TEMPERATURE_ASC', 'MIN_ACCEPTABLE_TEMPERATURE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'OWNER_CUSTOMER_CODE_ASC', 'OWNER_CUSTOMER_CODE_DESC', 'OWNER_CUSTOMER_ID_ASC', 'OWNER_CUSTOMER_ID_DESC', 'PACKAGE_TARE_WEIGHT_ASC', 'PACKAGE_TARE_WEIGHT_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PRODUCT_CODE_ASC', 'PRODUCT_CODE_DESC', 'QUANTITY_PER_PALLET_ASC', 'QUANTITY_PER_PALLET_DESC', 'RECEIVE_ON_HOLD_CODE_ASC', 'RECEIVE_ON_HOLD_CODE_DESC', 'ROOM_TYPE_ASC', 'ROOM_TYPE_DESC', 'ROTATION_TYPE_ASC', 'ROTATION_TYPE_DESC', 'SHELF_LIFE_AFTER_DELIVERY_OVERRIDE_ASC', 'SHELF_LIFE_AFTER_DELIVERY_OVERRIDE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SHELF_LIFE_ON_DELIVERY_DAYS_ASC', 'SHELF_LIFE_ON_DELIVERY_DAYS_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'SUPPLIER_PRODUCT_CODE_ASC', 'SUPPLIER_PRODUCT_CODE_DESC', 'TEMPERATURE_UOM_ASC', 'TEMPERATURE_UOM_DESC', 'TI_ASC', 'TI_DESC', 'TONNAGE_GROUP_ASC', 'TONNAGE_GROUP_DESC', 'UNIVERSAL_PRODUCT_CODE_ASC', 'UNIVERSAL_PRODUCT_CODE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class JSON(sgqlc.types.Scalar):
    '''The `JSON` scalar type represents JSON values as specified by
    [ECMA-404](http://www.ecma-
    international.org/publications/files/ECMA-ST/ECMA-404.pdf).
    '''
    __schema__ = base


class LotReferenceCodesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `LotReferenceCode`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `REFERENCE_TYPE_ASC`None
    * `REFERENCE_TYPE_DESC`None
    * `REFERENCE_VALUE_ASC`None
    * `REFERENCE_VALUE_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'NATURAL', 'REFERENCE_TYPE_ASC', 'REFERENCE_TYPE_DESC', 'REFERENCE_VALUE_ASC', 'REFERENCE_VALUE_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class LotReferenceCodesRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `LotReferenceCodesRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `REFERENCE_TYPE_ASC`None
    * `REFERENCE_TYPE_DESC`None
    * `REFERENCE_VALUE_ASC`None
    * `REFERENCE_VALUE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'REFERENCE_TYPE_ASC', 'REFERENCE_TYPE_DESC', 'REFERENCE_VALUE_ASC', 'REFERENCE_VALUE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class LotTransactionsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `LotTransactionsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `TRANSACTION_STATUS_ASC`None
    * `TRANSACTION_STATUS_DESC`None
    * `TRANSACTION_STATUS_DESCRIPTION_ASC`None
    * `TRANSACTION_STATUS_DESCRIPTION_DESC`None
    * `LOT_TRANSACTION_DATE_ASC`None
    * `LOT_TRANSACTION_DATE_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `ADJUSTED_REASON_ASC`None
    * `ADJUSTED_REASON_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `ADJUSTMENT_NUMBER_ASC`None
    * `ADJUSTMENT_NUMBER_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ADJUSTED_REASON_ASC', 'ADJUSTED_REASON_DESC', 'ADJUSTMENT_NUMBER_ASC', 'ADJUSTMENT_NUMBER_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'ID_ASC', 'ID_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_TRANSACTION_DATE_ASC', 'LOT_TRANSACTION_DATE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TRANSACTION_STATUS_ASC', 'TRANSACTION_STATUS_DESC', 'TRANSACTION_STATUS_DESCRIPTION_ASC', 'TRANSACTION_STATUS_DESCRIPTION_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class LotsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `Lot`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `IS_DEPLETED_ASC`None
    * `IS_DEPLETED_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `INVENTORY_STATUS_ASC`None
    * `INVENTORY_STATUS_DESC`None
    * `CUSTOMER_LOT_REFERENCE_ASC`None
    * `CUSTOMER_LOT_REFERENCE_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `ORIGINAL_GROSS_WEIGHT_ASC`None
    * `ORIGINAL_GROSS_WEIGHT_DESC`None
    * `ORIGINAL_NET_WEIGHT_ASC`None
    * `ORIGINAL_NET_WEIGHT_DESC`None
    * `ORIGINAL_PALLET_COUNT_ASC`None
    * `ORIGINAL_PALLET_COUNT_DESC`None
    * `ORIGINAL_QUANTITY_ASC`None
    * `ORIGINAL_QUANTITY_DESC`None
    * `AVAILABLE_GROSS_WEIGHT_ASC`None
    * `AVAILABLE_GROSS_WEIGHT_DESC`None
    * `AVAILABLE_NET_WEIGHT_ASC`None
    * `AVAILABLE_NET_WEIGHT_DESC`None
    * `AVAILABLE_PALLET_COUNT_ASC`None
    * `AVAILABLE_PALLET_COUNT_DESC`None
    * `AVAILABLE_QUANTITY_ASC`None
    * `AVAILABLE_QUANTITY_DESC`None
    * `EXPECTED_GROSS_WEIGHT_ASC`None
    * `EXPECTED_GROSS_WEIGHT_DESC`None
    * `EXPECTED_NET_WEIGHT_ASC`None
    * `EXPECTED_NET_WEIGHT_DESC`None
    * `EXPECTED_PALLET_COUNT_ASC`None
    * `EXPECTED_PALLET_COUNT_DESC`None
    * `EXPECTED_QUANTITY_ASC`None
    * `EXPECTED_QUANTITY_DESC`None
    * `COMMITTED_GROSS_WEIGHT_ASC`None
    * `COMMITTED_GROSS_WEIGHT_DESC`None
    * `COMMITTED_NET_WEIGHT_ASC`None
    * `COMMITTED_NET_WEIGHT_DESC`None
    * `COMMITTED_PALLET_COUNT_ASC`None
    * `COMMITTED_PALLET_COUNT_DESC`None
    * `COMMITTED_QUANTITY_ASC`None
    * `COMMITTED_QUANTITY_DESC`None
    * `ON_HOLD_GROSS_WEIGHT_ASC`None
    * `ON_HOLD_GROSS_WEIGHT_DESC`None
    * `ON_HOLD_NET_WEIGHT_ASC`None
    * `ON_HOLD_NET_WEIGHT_DESC`None
    * `ON_HOLD_PALLET_COUNT_ASC`None
    * `ON_HOLD_PALLET_COUNT_DESC`None
    * `ON_HOLD_QUANTITY_ASC`None
    * `ON_HOLD_QUANTITY_DESC`None
    * `ON_HAND_GROSS_WEIGHT_ASC`None
    * `ON_HAND_GROSS_WEIGHT_DESC`None
    * `ON_HAND_NET_WEIGHT_ASC`None
    * `ON_HAND_NET_WEIGHT_DESC`None
    * `ON_HAND_PALLET_COUNT_ASC`None
    * `ON_HAND_PALLET_COUNT_DESC`None
    * `ON_HAND_QUANTITY_ASC`None
    * `ON_HAND_QUANTITY_DESC`None
    * `PRODUCTION_DATE_ASC`None
    * `PRODUCTION_DATE_DESC`None
    * `BEST_BY_DATE_ASC`None
    * `BEST_BY_DATE_DESC`None
    * `CODE_DATE_ASC`None
    * `CODE_DATE_DESC`None
    * `SLAUGHTER_DATE_ASC`None
    * `SLAUGHTER_DATE_DESC`None
    * `EXPIRATION_DATE_ASC`None
    * `EXPIRATION_DATE_DESC`None
    * `DEPLETED_DATE_ASC`None
    * `DEPLETED_DATE_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `SHELF_LIFE_ON_DELIVERY_DAYS_ASC`None
    * `SHELF_LIFE_ON_DELIVERY_DAYS_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `PALLETS_ON_HOLD_COMMITTED_PALLET_COUNT_ASC`None
    * `PALLETS_ON_HOLD_COMMITTED_PALLET_COUNT_DESC`None
    * `PALLETS_ON_HOLD_COMMITTED_QUANTITY_ASC`None
    * `PALLETS_ON_HOLD_COMMITTED_QUANTITY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('AVAILABLE_GROSS_WEIGHT_ASC', 'AVAILABLE_GROSS_WEIGHT_DESC', 'AVAILABLE_NET_WEIGHT_ASC', 'AVAILABLE_NET_WEIGHT_DESC', 'AVAILABLE_PALLET_COUNT_ASC', 'AVAILABLE_PALLET_COUNT_DESC', 'AVAILABLE_QUANTITY_ASC', 'AVAILABLE_QUANTITY_DESC', 'BEST_BY_DATE_ASC', 'BEST_BY_DATE_DESC', 'CODE_DATE_ASC', 'CODE_DATE_DESC', 'COMMITTED_GROSS_WEIGHT_ASC', 'COMMITTED_GROSS_WEIGHT_DESC', 'COMMITTED_NET_WEIGHT_ASC', 'COMMITTED_NET_WEIGHT_DESC', 'COMMITTED_PALLET_COUNT_ASC', 'COMMITTED_PALLET_COUNT_DESC', 'COMMITTED_QUANTITY_ASC', 'COMMITTED_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LOT_REFERENCE_ASC', 'CUSTOMER_LOT_REFERENCE_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPLETED_DATE_ASC', 'DEPLETED_DATE_DESC', 'EXPECTED_GROSS_WEIGHT_ASC', 'EXPECTED_GROSS_WEIGHT_DESC', 'EXPECTED_NET_WEIGHT_ASC', 'EXPECTED_NET_WEIGHT_DESC', 'EXPECTED_PALLET_COUNT_ASC', 'EXPECTED_PALLET_COUNT_DESC', 'EXPECTED_QUANTITY_ASC', 'EXPECTED_QUANTITY_DESC', 'EXPIRATION_DATE_ASC', 'EXPIRATION_DATE_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'ID_ASC', 'ID_DESC', 'INVENTORY_STATUS_ASC', 'INVENTORY_STATUS_DESC', 'IS_DEPLETED_ASC', 'IS_DEPLETED_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'ON_HAND_GROSS_WEIGHT_ASC', 'ON_HAND_GROSS_WEIGHT_DESC', 'ON_HAND_NET_WEIGHT_ASC', 'ON_HAND_NET_WEIGHT_DESC', 'ON_HAND_PALLET_COUNT_ASC', 'ON_HAND_PALLET_COUNT_DESC', 'ON_HAND_QUANTITY_ASC', 'ON_HAND_QUANTITY_DESC', 'ON_HOLD_GROSS_WEIGHT_ASC', 'ON_HOLD_GROSS_WEIGHT_DESC', 'ON_HOLD_NET_WEIGHT_ASC', 'ON_HOLD_NET_WEIGHT_DESC', 'ON_HOLD_PALLET_COUNT_ASC', 'ON_HOLD_PALLET_COUNT_DESC', 'ON_HOLD_QUANTITY_ASC', 'ON_HOLD_QUANTITY_DESC', 'ORIGINAL_GROSS_WEIGHT_ASC', 'ORIGINAL_GROSS_WEIGHT_DESC', 'ORIGINAL_NET_WEIGHT_ASC', 'ORIGINAL_NET_WEIGHT_DESC', 'ORIGINAL_PALLET_COUNT_ASC', 'ORIGINAL_PALLET_COUNT_DESC', 'ORIGINAL_QUANTITY_ASC', 'ORIGINAL_QUANTITY_DESC', 'PALLETS_ON_HOLD_COMMITTED_PALLET_COUNT_ASC', 'PALLETS_ON_HOLD_COMMITTED_PALLET_COUNT_DESC', 'PALLETS_ON_HOLD_COMMITTED_QUANTITY_ASC', 'PALLETS_ON_HOLD_COMMITTED_QUANTITY_DESC', 'PRODUCTION_DATE_ASC', 'PRODUCTION_DATE_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SHELF_LIFE_ON_DELIVERY_DAYS_ASC', 'SHELF_LIFE_ON_DELIVERY_DAYS_DESC', 'SLAUGHTER_DATE_ASC', 'SLAUGHTER_DATE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class LotsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `LotsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `CURRENT_NET_WEIGHT_ASC`None
    * `CURRENT_NET_WEIGHT_DESC`None
    * `CURRENT_PALLET_COUNT_ASC`None
    * `CURRENT_PALLET_COUNT_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `PRODUCTION_DATE_ASC`None
    * `PRODUCTION_DATE_DESC`None
    * `BEST_BY_DATE_ASC`None
    * `BEST_BY_DATE_DESC`None
    * `CODE_DATE_ASC`None
    * `CODE_DATE_DESC`None
    * `SLAUGHTER_DATE_ASC`None
    * `SLAUGHTER_DATE_DESC`None
    * `EXPIRATION_DATE_ASC`None
    * `EXPIRATION_DATE_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `CUSTOMER_LOT_REFERENCE_ASC`None
    * `CUSTOMER_LOT_REFERENCE_DESC`None
    * `CURRENT_GROSS_WEIGHT_ASC`None
    * `CURRENT_GROSS_WEIGHT_DESC`None
    * `ORIGINAL_PALLET_COUNT_ASC`None
    * `ORIGINAL_PALLET_COUNT_DESC`None
    * `ORIGINAL_NET_WEIGHT_ASC`None
    * `ORIGINAL_NET_WEIGHT_DESC`None
    * `ORIGINAL_GROSS_WEIGHT_ASC`None
    * `ORIGINAL_GROSS_WEIGHT_DESC`None
    * `ORIGINAL_QUANTITY_ASC`None
    * `ORIGINAL_QUANTITY_DESC`None
    * `DEPLETED_DATE_ASC`None
    * `DEPLETED_DATE_DESC`None
    * `IS_DEPLETED_ASC`None
    * `IS_DEPLETED_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `INVENTORY_STATUS_ASC`None
    * `INVENTORY_STATUS_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `COMMITTED_PALLET_COUNT_ASC`None
    * `COMMITTED_PALLET_COUNT_DESC`None
    * `COMMITTED_NET_WEIGHT_ASC`None
    * `COMMITTED_NET_WEIGHT_DESC`None
    * `COMMITTED_GROSS_WEIGHT_ASC`None
    * `COMMITTED_GROSS_WEIGHT_DESC`None
    * `COMMITTED_QUANTITY_ASC`None
    * `COMMITTED_QUANTITY_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SHELF_LIFE_AFTER_DELIVERY_OVERRIDE_ASC`None
    * `SHELF_LIFE_AFTER_DELIVERY_OVERRIDE_DESC`None
    * `SHELF_LIFE_DAYS_OVERRIDE_ASC`None
    * `SHELF_LIFE_DAYS_OVERRIDE_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `RECEIVE_DATE_ASC`None
    * `RECEIVE_DATE_DESC`None
    * `OVER_QUANTITY_ASC`None
    * `OVER_QUANTITY_DESC`None
    * `SHORT_QUANTITY_ASC`None
    * `SHORT_QUANTITY_DESC`None
    * `DAMAGED_QUANTITY_ASC`None
    * `DAMAGED_QUANTITY_DESC`None
    * `OVER_TEMPERATURE_ASC`None
    * `OVER_TEMPERATURE_DESC`None
    * `INBOUND_ORDER_ID_ASC`None
    * `INBOUND_ORDER_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BEST_BY_DATE_ASC', 'BEST_BY_DATE_DESC', 'CODE_DATE_ASC', 'CODE_DATE_DESC', 'COMMITTED_GROSS_WEIGHT_ASC', 'COMMITTED_GROSS_WEIGHT_DESC', 'COMMITTED_NET_WEIGHT_ASC', 'COMMITTED_NET_WEIGHT_DESC', 'COMMITTED_PALLET_COUNT_ASC', 'COMMITTED_PALLET_COUNT_DESC', 'COMMITTED_QUANTITY_ASC', 'COMMITTED_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CURRENT_GROSS_WEIGHT_ASC', 'CURRENT_GROSS_WEIGHT_DESC', 'CURRENT_NET_WEIGHT_ASC', 'CURRENT_NET_WEIGHT_DESC', 'CURRENT_PALLET_COUNT_ASC', 'CURRENT_PALLET_COUNT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LOT_REFERENCE_ASC', 'CUSTOMER_LOT_REFERENCE_DESC', 'DAMAGED_QUANTITY_ASC', 'DAMAGED_QUANTITY_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPLETED_DATE_ASC', 'DEPLETED_DATE_DESC', 'EXPIRATION_DATE_ASC', 'EXPIRATION_DATE_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_ORDER_ID_ASC', 'INBOUND_ORDER_ID_DESC', 'INVENTORY_STATUS_ASC', 'INVENTORY_STATUS_DESC', 'IS_DEPLETED_ASC', 'IS_DEPLETED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'ORIGINAL_GROSS_WEIGHT_ASC', 'ORIGINAL_GROSS_WEIGHT_DESC', 'ORIGINAL_NET_WEIGHT_ASC', 'ORIGINAL_NET_WEIGHT_DESC', 'ORIGINAL_PALLET_COUNT_ASC', 'ORIGINAL_PALLET_COUNT_DESC', 'ORIGINAL_QUANTITY_ASC', 'ORIGINAL_QUANTITY_DESC', 'OVER_QUANTITY_ASC', 'OVER_QUANTITY_DESC', 'OVER_TEMPERATURE_ASC', 'OVER_TEMPERATURE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PRODUCTION_DATE_ASC', 'PRODUCTION_DATE_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'RECEIVE_DATE_ASC', 'RECEIVE_DATE_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SHELF_LIFE_AFTER_DELIVERY_OVERRIDE_ASC', 'SHELF_LIFE_AFTER_DELIVERY_OVERRIDE_DESC', 'SHELF_LIFE_DAYS_OVERRIDE_ASC', 'SHELF_LIFE_DAYS_OVERRIDE_DESC', 'SHORT_QUANTITY_ASC', 'SHORT_QUANTITY_DESC', 'SLAUGHTER_DATE_ASC', 'SLAUGHTER_DATE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundCatchWeightRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundCatchWeightRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_ASC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `SERIAL_NUMBER_ASC`None
    * `SERIAL_NUMBER_DESC`None
    * `CATCH_WEIGHT_ASC`None
    * `CATCH_WEIGHT_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CATCH_WEIGHT_ASC', 'CATCH_WEIGHT_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SERIAL_NUMBER_ASC', 'SERIAL_NUMBER_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_ASC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundLoadsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundLoad`.

    Enumeration Choices:

    * `NATURAL`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `LOAD_REFERENCE_NUMBER_ASC`None
    * `LOAD_REFERENCE_NUMBER_DESC`None
    * `PRIMARY_REFERENCE_NUMBER_ASC`None
    * `PRIMARY_REFERENCE_NUMBER_DESC`None
    * `TRAILER_NUMBER_ASC`None
    * `TRAILER_NUMBER_DESC`None
    * `TRAILER_LOAD_TYPE_ASC`None
    * `TRAILER_LOAD_TYPE_DESC`None
    * `CUSTOMER_LOAD_NUMBER_ASC`None
    * `CUSTOMER_LOAD_NUMBER_DESC`None
    * `ACTUAL_CARRIER_CODE_ASC`None
    * `ACTUAL_CARRIER_CODE_DESC`None
    * `TENDER_CARRIER_CODE_ASC`None
    * `TENDER_CARRIER_CODE_DESC`None
    * `SHIPPED_DATETIME_ASC`None
    * `SHIPPED_DATETIME_DESC`None
    * `REQUESTED_DELIVERY_DATE_ASC`None
    * `REQUESTED_DELIVERY_DATE_DESC`None
    * `ARRIVAL_DATETIME_ASC`None
    * `ARRIVAL_DATETIME_DESC`None
    * `LOAD_START_DATETIME_ASC`None
    * `LOAD_START_DATETIME_DESC`None
    * `LOAD_FINISH_DATETIME_ASC`None
    * `LOAD_FINISH_DATETIME_DESC`None
    * `SIGNIN_DATETIME_ASC`None
    * `SIGNIN_DATETIME_DESC`None
    * `SIGNOUT_DATETIME_ASC`None
    * `SIGNOUT_DATETIME_DESC`None
    * `DOCK_IN_DATETIME_ASC`None
    * `DOCK_IN_DATETIME_DESC`None
    * `DOCK_OUT_DATETIME_ASC`None
    * `DOCK_OUT_DATETIME_DESC`None
    * `DEPARTURE_DATETIME_ASC`None
    * `DEPARTURE_DATETIME_DESC`None
    * `EXPECTED_SHIP_DATETIME_START_ASC`None
    * `EXPECTED_SHIP_DATETIME_START_DESC`None
    * `EXPECTED_SHIP_DATETIME_END_ASC`None
    * `EXPECTED_SHIP_DATETIME_END_DESC`None
    * `FRONT_TEMPERATURE_ASC`None
    * `FRONT_TEMPERATURE_DESC`None
    * `MIDDLE_TEMPERATURE_ASC`None
    * `MIDDLE_TEMPERATURE_DESC`None
    * `BACK_TEMPERATURE_ASC`None
    * `BACK_TEMPERATURE_DESC`None
    * `NUMBER_OF_STOPS_ASC`None
    * `NUMBER_OF_STOPS_DESC`None
    * `IS_PLANNED_LINEAGE_ASC`None
    * `IS_PLANNED_LINEAGE_DESC`None
    * `DRIVER_NAME_ASC`None
    * `DRIVER_NAME_DESC`None
    * `DRIVER_PHONE_NUMBER_ASC`None
    * `DRIVER_PHONE_NUMBER_DESC`None
    * `APPOINTMENT_NUMBER_ASC`None
    * `APPOINTMENT_NUMBER_DESC`None
    * `CONFIRMATION_DATETIME_ASC`None
    * `CONFIRMATION_DATETIME_DESC`None
    * `CONFIRMED_BY_ASC`None
    * `CONFIRMED_BY_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `DOCK_DOOR_NUMBER_ASC`None
    * `DOCK_DOOR_NUMBER_DESC`None
    * `ORIGINAL_SCHEDULED_DATETIME_ASC`None
    * `ORIGINAL_SCHEDULED_DATETIME_DESC`None
    * `SCHEDULED_START_DATETIME_ASC`None
    * `SCHEDULED_START_DATETIME_DESC`None
    * `SCHEDULED_END_DATETIME_ASC`None
    * `SCHEDULED_END_DATETIME_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PAYMENT_METHOD_TYPE_ASC`None
    * `PAYMENT_METHOD_TYPE_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `APPOINTMENT_COMMENT_ASC`None
    * `APPOINTMENT_COMMENT_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ACTUAL_CARRIER_CODE_ASC', 'ACTUAL_CARRIER_CODE_DESC', 'APPOINTMENT_COMMENT_ASC', 'APPOINTMENT_COMMENT_DESC', 'APPOINTMENT_NUMBER_ASC', 'APPOINTMENT_NUMBER_DESC', 'ARRIVAL_DATETIME_ASC', 'ARRIVAL_DATETIME_DESC', 'BACK_TEMPERATURE_ASC', 'BACK_TEMPERATURE_DESC', 'CONFIRMATION_DATETIME_ASC', 'CONFIRMATION_DATETIME_DESC', 'CONFIRMED_BY_ASC', 'CONFIRMED_BY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LOAD_NUMBER_ASC', 'CUSTOMER_LOAD_NUMBER_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPARTURE_DATETIME_ASC', 'DEPARTURE_DATETIME_DESC', 'DOCK_DOOR_NUMBER_ASC', 'DOCK_DOOR_NUMBER_DESC', 'DOCK_IN_DATETIME_ASC', 'DOCK_IN_DATETIME_DESC', 'DOCK_OUT_DATETIME_ASC', 'DOCK_OUT_DATETIME_DESC', 'DRIVER_NAME_ASC', 'DRIVER_NAME_DESC', 'DRIVER_PHONE_NUMBER_ASC', 'DRIVER_PHONE_NUMBER_DESC', 'EXPECTED_SHIP_DATETIME_END_ASC', 'EXPECTED_SHIP_DATETIME_END_DESC', 'EXPECTED_SHIP_DATETIME_START_ASC', 'EXPECTED_SHIP_DATETIME_START_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'FRONT_TEMPERATURE_ASC', 'FRONT_TEMPERATURE_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'IS_PLANNED_LINEAGE_ASC', 'IS_PLANNED_LINEAGE_DESC', 'LOAD_FINISH_DATETIME_ASC', 'LOAD_FINISH_DATETIME_DESC', 'LOAD_REFERENCE_NUMBER_ASC', 'LOAD_REFERENCE_NUMBER_DESC', 'LOAD_START_DATETIME_ASC', 'LOAD_START_DATETIME_DESC', 'MIDDLE_TEMPERATURE_ASC', 'MIDDLE_TEMPERATURE_DESC', 'NATURAL', 'NUMBER_OF_STOPS_ASC', 'NUMBER_OF_STOPS_DESC', 'ORIGINAL_SCHEDULED_DATETIME_ASC', 'ORIGINAL_SCHEDULED_DATETIME_DESC', 'PAYMENT_METHOD_TYPE_ASC', 'PAYMENT_METHOD_TYPE_DESC', 'PRIMARY_REFERENCE_NUMBER_ASC', 'PRIMARY_REFERENCE_NUMBER_DESC', 'REQUESTED_DELIVERY_DATE_ASC', 'REQUESTED_DELIVERY_DATE_DESC', 'SCHEDULED_END_DATETIME_ASC', 'SCHEDULED_END_DATETIME_DESC', 'SCHEDULED_START_DATETIME_ASC', 'SCHEDULED_START_DATETIME_DESC', 'SHIPPED_DATETIME_ASC', 'SHIPPED_DATETIME_DESC', 'SIGNIN_DATETIME_ASC', 'SIGNIN_DATETIME_DESC', 'SIGNOUT_DATETIME_ASC', 'SIGNOUT_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TENDER_CARRIER_CODE_ASC', 'TENDER_CARRIER_CODE_DESC', 'TRAILER_LOAD_TYPE_ASC', 'TRAILER_LOAD_TYPE_DESC', 'TRAILER_NUMBER_ASC', 'TRAILER_NUMBER_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundLoadsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundLoadsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `LOAD_REFERENCE_NUMBER_ASC`None
    * `LOAD_REFERENCE_NUMBER_DESC`None
    * `TRAILER_NUMBER_ASC`None
    * `TRAILER_NUMBER_DESC`None
    * `TRAILER_LOAD_TYPE_ASC`None
    * `TRAILER_LOAD_TYPE_DESC`None
    * `CUSTOMER_LOAD_NUMBER_ASC`None
    * `CUSTOMER_LOAD_NUMBER_DESC`None
    * `ACTUAL_CARRIER_CODE_ASC`None
    * `ACTUAL_CARRIER_CODE_DESC`None
    * `TENDER_CARRIER_CODE_ASC`None
    * `TENDER_CARRIER_CODE_DESC`None
    * `SHIPPED_DATETIME_ASC`None
    * `SHIPPED_DATETIME_DESC`None
    * `REQUESTED_DELIVERY_DATE_ASC`None
    * `REQUESTED_DELIVERY_DATE_DESC`None
    * `ARRIVAL_DATETIME_ASC`None
    * `ARRIVAL_DATETIME_DESC`None
    * `LOAD_START_DATETIME_ASC`None
    * `LOAD_START_DATETIME_DESC`None
    * `LOAD_FINISH_DATETIME_ASC`None
    * `LOAD_FINISH_DATETIME_DESC`None
    * `SIGNIN_DATETIME_ASC`None
    * `SIGNIN_DATETIME_DESC`None
    * `SIGNOUT_DATETIME_ASC`None
    * `SIGNOUT_DATETIME_DESC`None
    * `DOCK_IN_DATETIME_ASC`None
    * `DOCK_IN_DATETIME_DESC`None
    * `DOCK_OUT_DATETIME_ASC`None
    * `DOCK_OUT_DATETIME_DESC`None
    * `DEPARTURE_DATETIME_ASC`None
    * `DEPARTURE_DATETIME_DESC`None
    * `EXPECTED_SHIP_DATETIME_START_ASC`None
    * `EXPECTED_SHIP_DATETIME_START_DESC`None
    * `EXPECTED_SHIP_DATETIME_END_ASC`None
    * `EXPECTED_SHIP_DATETIME_END_DESC`None
    * `FRONT_TEMPERATURE_ASC`None
    * `FRONT_TEMPERATURE_DESC`None
    * `MIDDLE_TEMPERATURE_ASC`None
    * `MIDDLE_TEMPERATURE_DESC`None
    * `BACK_TEMPERATURE_ASC`None
    * `BACK_TEMPERATURE_DESC`None
    * `NUMBER_OF_STOPS_ASC`None
    * `NUMBER_OF_STOPS_DESC`None
    * `IS_PLANNED_LINEAGE_ASC`None
    * `IS_PLANNED_LINEAGE_DESC`None
    * `DRIVER_NAME_ASC`None
    * `DRIVER_NAME_DESC`None
    * `DRIVER_PHONE_NUMBER_ASC`None
    * `DRIVER_PHONE_NUMBER_DESC`None
    * `APPOINTMENT_NUMBER_ASC`None
    * `APPOINTMENT_NUMBER_DESC`None
    * `CONFIRMATION_DATETIME_ASC`None
    * `CONFIRMATION_DATETIME_DESC`None
    * `CONFIRMED_BY_ASC`None
    * `CONFIRMED_BY_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `DOCK_DOOR_NUMBER_ASC`None
    * `DOCK_DOOR_NUMBER_DESC`None
    * `ORIGINAL_SCHEDULED_DATETIME_ASC`None
    * `ORIGINAL_SCHEDULED_DATETIME_DESC`None
    * `SCHEDULED_START_DATETIME_ASC`None
    * `SCHEDULED_START_DATETIME_DESC`None
    * `SCHEDULED_END_DATETIME_ASC`None
    * `SCHEDULED_END_DATETIME_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PAYMENT_METHOD_TYPE_ASC`None
    * `PAYMENT_METHOD_TYPE_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `APPOINTMENT_COMMENT_ASC`None
    * `APPOINTMENT_COMMENT_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `PRIMARY_REFERENCE_NUMBER_ASC`None
    * `PRIMARY_REFERENCE_NUMBER_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `LADING_TYPE_ASC`None
    * `LADING_TYPE_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ACTUAL_CARRIER_CODE_ASC', 'ACTUAL_CARRIER_CODE_DESC', 'APPOINTMENT_COMMENT_ASC', 'APPOINTMENT_COMMENT_DESC', 'APPOINTMENT_NUMBER_ASC', 'APPOINTMENT_NUMBER_DESC', 'ARRIVAL_DATETIME_ASC', 'ARRIVAL_DATETIME_DESC', 'BACK_TEMPERATURE_ASC', 'BACK_TEMPERATURE_DESC', 'CONFIRMATION_DATETIME_ASC', 'CONFIRMATION_DATETIME_DESC', 'CONFIRMED_BY_ASC', 'CONFIRMED_BY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LOAD_NUMBER_ASC', 'CUSTOMER_LOAD_NUMBER_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPARTURE_DATETIME_ASC', 'DEPARTURE_DATETIME_DESC', 'DOCK_DOOR_NUMBER_ASC', 'DOCK_DOOR_NUMBER_DESC', 'DOCK_IN_DATETIME_ASC', 'DOCK_IN_DATETIME_DESC', 'DOCK_OUT_DATETIME_ASC', 'DOCK_OUT_DATETIME_DESC', 'DRIVER_NAME_ASC', 'DRIVER_NAME_DESC', 'DRIVER_PHONE_NUMBER_ASC', 'DRIVER_PHONE_NUMBER_DESC', 'EXPECTED_SHIP_DATETIME_END_ASC', 'EXPECTED_SHIP_DATETIME_END_DESC', 'EXPECTED_SHIP_DATETIME_START_ASC', 'EXPECTED_SHIP_DATETIME_START_DESC', 'FRONT_TEMPERATURE_ASC', 'FRONT_TEMPERATURE_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'IS_PLANNED_LINEAGE_ASC', 'IS_PLANNED_LINEAGE_DESC', 'LADING_TYPE_ASC', 'LADING_TYPE_DESC', 'LOAD_FINISH_DATETIME_ASC', 'LOAD_FINISH_DATETIME_DESC', 'LOAD_REFERENCE_NUMBER_ASC', 'LOAD_REFERENCE_NUMBER_DESC', 'LOAD_START_DATETIME_ASC', 'LOAD_START_DATETIME_DESC', 'MIDDLE_TEMPERATURE_ASC', 'MIDDLE_TEMPERATURE_DESC', 'NATURAL', 'NUMBER_OF_STOPS_ASC', 'NUMBER_OF_STOPS_DESC', 'ORIGINAL_SCHEDULED_DATETIME_ASC', 'ORIGINAL_SCHEDULED_DATETIME_DESC', 'PAYMENT_METHOD_TYPE_ASC', 'PAYMENT_METHOD_TYPE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PRIMARY_REFERENCE_NUMBER_ASC', 'PRIMARY_REFERENCE_NUMBER_DESC', 'REQUESTED_DELIVERY_DATE_ASC', 'REQUESTED_DELIVERY_DATE_DESC', 'SCHEDULED_END_DATETIME_ASC', 'SCHEDULED_END_DATETIME_DESC', 'SCHEDULED_START_DATETIME_ASC', 'SCHEDULED_START_DATETIME_DESC', 'SHIPPED_DATETIME_ASC', 'SHIPPED_DATETIME_DESC', 'SIGNIN_DATETIME_ASC', 'SIGNIN_DATETIME_DESC', 'SIGNOUT_DATETIME_ASC', 'SIGNOUT_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TENDER_CARRIER_CODE_ASC', 'TENDER_CARRIER_CODE_DESC', 'TRAILER_LOAD_TYPE_ASC', 'TRAILER_LOAD_TYPE_DESC', 'TRAILER_NUMBER_ASC', 'TRAILER_NUMBER_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundOrderCommentsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundOrderCommentsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `COMMENT_ASC`None
    * `COMMENT_DESC`None
    * `COMMENT_DATETIME_ASC`None
    * `COMMENT_DATETIME_DESC`None
    * `COMMENT_TYPE_ASC`None
    * `COMMENT_TYPE_DESC`None
    * `COMMENT_SEQUENCE_ASC`None
    * `COMMENT_SEQUENCE_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('COMMENT_ASC', 'COMMENT_DATETIME_ASC', 'COMMENT_DATETIME_DESC', 'COMMENT_DESC', 'COMMENT_SEQUENCE_ASC', 'COMMENT_SEQUENCE_DESC', 'COMMENT_TYPE_ASC', 'COMMENT_TYPE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundOrderDetailsExecutionRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundOrderDetailsExecutionRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `EXPECTED_OUTBOUND_ORDER_DETAIL_ID_ASC`None
    * `EXPECTED_OUTBOUND_ORDER_DETAIL_ID_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `PLANNED_QUANTITY_ASC`None
    * `PLANNED_QUANTITY_DESC`None
    * `PICKED_QUANTITY_ASC`None
    * `PICKED_QUANTITY_DESC`None
    * `UNALLOCATED_PLANNED_QUANTITY_ASC`None
    * `UNALLOCATED_PLANNED_QUANTITY_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EXPECTED_OUTBOUND_ORDER_DETAIL_ID_ASC', 'EXPECTED_OUTBOUND_ORDER_DETAIL_ID_DESC', 'ID_ASC', 'ID_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PICKED_QUANTITY_ASC', 'PICKED_QUANTITY_DESC', 'PLANNED_QUANTITY_ASC', 'PLANNED_QUANTITY_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UNALLOCATED_PLANNED_QUANTITY_ASC', 'UNALLOCATED_PLANNED_QUANTITY_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundOrderDetailsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundOrderDetail`.

    Enumeration Choices:

    * `NATURAL`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CUSTOMER_LINE_NUMBER_ASC`None
    * `CUSTOMER_LINE_NUMBER_DESC`None
    * `TI_OVERRIDE_ASC`None
    * `TI_OVERRIDE_DESC`None
    * `HIGH_OVERRIDE_ASC`None
    * `HIGH_OVERRIDE_DESC`None
    * `CUSTOMER_LINE_REFERENCE_ASC`None
    * `CUSTOMER_LINE_REFERENCE_DESC`None
    * `SHELF_LIFE_DATE_ASC`None
    * `SHELF_LIFE_DATE_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `POSITION_IN_TRUCK_ASC`None
    * `POSITION_IN_TRUCK_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `PICK_CODE_ASC`None
    * `PICK_CODE_DESC`None
    * `LABEL_NUMBER_ASC`None
    * `LABEL_NUMBER_DESC`None
    * `STICKER_NUMBER_ASC`None
    * `STICKER_NUMBER_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `CUSTOMER_LOT_REFERENCE_ASC`None
    * `CUSTOMER_LOT_REFERENCE_DESC`None
    * `REQUIRED_SHELF_LIFE_ON_DELIVERY_DAYS_ASC`None
    * `REQUIRED_SHELF_LIFE_ON_DELIVERY_DAYS_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_LINE_NUMBER_ASC', 'CUSTOMER_LINE_NUMBER_DESC', 'CUSTOMER_LINE_REFERENCE_ASC', 'CUSTOMER_LINE_REFERENCE_DESC', 'CUSTOMER_LOT_REFERENCE_ASC', 'CUSTOMER_LOT_REFERENCE_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'HIGH_OVERRIDE_ASC', 'HIGH_OVERRIDE_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LABEL_NUMBER_ASC', 'LABEL_NUMBER_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'NOTES_ASC', 'NOTES_DESC', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PICK_CODE_ASC', 'PICK_CODE_DESC', 'POSITION_IN_TRUCK_ASC', 'POSITION_IN_TRUCK_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'REQUIRED_SHELF_LIFE_ON_DELIVERY_DAYS_ASC', 'REQUIRED_SHELF_LIFE_ON_DELIVERY_DAYS_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SHELF_LIFE_DATE_ASC', 'SHELF_LIFE_DATE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'STICKER_NUMBER_ASC', 'STICKER_NUMBER_DESC', 'TI_OVERRIDE_ASC', 'TI_OVERRIDE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundOrderDetailsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundOrderDetailsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CUSTOMER_LINE_NUMBER_ASC`None
    * `CUSTOMER_LINE_NUMBER_DESC`None
    * `TI_OVERRIDE_ASC`None
    * `TI_OVERRIDE_DESC`None
    * `HIGH_OVERRIDE_ASC`None
    * `HIGH_OVERRIDE_DESC`None
    * `CUSTOMER_LINE_REFERENCE_ASC`None
    * `CUSTOMER_LINE_REFERENCE_DESC`None
    * `SHELF_LIFE_DATE_ASC`None
    * `SHELF_LIFE_DATE_DESC`None
    * `SHELF_LIFE_DAYS_ASC`None
    * `SHELF_LIFE_DAYS_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `POSITION_IN_TRUCK_ASC`None
    * `POSITION_IN_TRUCK_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `PICK_CODE_ASC`None
    * `PICK_CODE_DESC`None
    * `LABEL_NUMBER_ASC`None
    * `LABEL_NUMBER_DESC`None
    * `STICKER_NUMBER_ASC`None
    * `STICKER_NUMBER_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `LOT_REFERENCE_ASC`None
    * `LOT_REFERENCE_DESC`None
    * `REQUIRED_SHELF_LIFE_ON_DELIVERY_DAYS_ASC`None
    * `REQUIRED_SHELF_LIFE_ON_DELIVERY_DAYS_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CODE_DATE_ASC`None
    * `CODE_DATE_DESC`None
    * `BEST_BY_DATE_ASC`None
    * `BEST_BY_DATE_DESC`None
    * `EXPIRATION_DATE_ASC`None
    * `EXPIRATION_DATE_DESC`None
    * `PRODUCTION_DATE_ASC`None
    * `PRODUCTION_DATE_DESC`None
    * `CUSTOMER_LOT_REFERENCE_ASC`None
    * `CUSTOMER_LOT_REFERENCE_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BEST_BY_DATE_ASC', 'BEST_BY_DATE_DESC', 'CODE_DATE_ASC', 'CODE_DATE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LINE_NUMBER_ASC', 'CUSTOMER_LINE_NUMBER_DESC', 'CUSTOMER_LINE_REFERENCE_ASC', 'CUSTOMER_LINE_REFERENCE_DESC', 'CUSTOMER_LOT_REFERENCE_ASC', 'CUSTOMER_LOT_REFERENCE_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EXPIRATION_DATE_ASC', 'EXPIRATION_DATE_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'HIGH_OVERRIDE_ASC', 'HIGH_OVERRIDE_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LABEL_NUMBER_ASC', 'LABEL_NUMBER_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'LOT_REFERENCE_ASC', 'LOT_REFERENCE_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'NOTES_ASC', 'NOTES_DESC', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PICK_CODE_ASC', 'PICK_CODE_DESC', 'POSITION_IN_TRUCK_ASC', 'POSITION_IN_TRUCK_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PRODUCTION_DATE_ASC', 'PRODUCTION_DATE_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'REQUIRED_SHELF_LIFE_ON_DELIVERY_DAYS_ASC', 'REQUIRED_SHELF_LIFE_ON_DELIVERY_DAYS_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SHELF_LIFE_DATE_ASC', 'SHELF_LIFE_DATE_DESC', 'SHELF_LIFE_DAYS_ASC', 'SHELF_LIFE_DAYS_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'STICKER_NUMBER_ASC', 'STICKER_NUMBER_DESC', 'TI_OVERRIDE_ASC', 'TI_OVERRIDE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundOrderReferenceCodesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundOrderReferenceCode`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `REFERENCE_TYPE_ASC`None
    * `REFERENCE_TYPE_DESC`None
    * `REFERENCE_VALUE_ASC`None
    * `REFERENCE_VALUE_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'REFERENCE_TYPE_ASC', 'REFERENCE_TYPE_DESC', 'REFERENCE_VALUE_ASC', 'REFERENCE_VALUE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundOrderReferenceCodesRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundOrderReferenceCodesRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `REFERENCE_TYPE_ASC`None
    * `REFERENCE_TYPE_DESC`None
    * `REFERENCE_VALUE_ASC`None
    * `REFERENCE_VALUE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'REFERENCE_TYPE_ASC', 'REFERENCE_TYPE_DESC', 'REFERENCE_VALUE_ASC', 'REFERENCE_VALUE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundOrdersExecutionRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundOrdersExecutionRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `MIDDLE_TEMPERATURE_ASC`None
    * `MIDDLE_TEMPERATURE_DESC`None
    * `FRONT_TEMPERATURE_ASC`None
    * `FRONT_TEMPERATURE_DESC`None
    * `BACK_TEMPERATURE_ASC`None
    * `BACK_TEMPERATURE_DESC`None
    * `AVERAGE_TEMPERATURE_ASC`None
    * `AVERAGE_TEMPERATURE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('AVERAGE_TEMPERATURE_ASC', 'AVERAGE_TEMPERATURE_DESC', 'BACK_TEMPERATURE_ASC', 'BACK_TEMPERATURE_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FRONT_TEMPERATURE_ASC', 'FRONT_TEMPERATURE_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'MIDDLE_TEMPERATURE_ASC', 'MIDDLE_TEMPERATURE_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundOrdersOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundOrder`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `CARRIER_ID_ASC`None
    * `CARRIER_ID_DESC`None
    * `DESTINATION_STOP_LOCATION_ID_ASC`None
    * `DESTINATION_STOP_LOCATION_ID_DESC`None
    * `DESTINATION_PARTY_ID_ASC`None
    * `DESTINATION_PARTY_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `OUTBOUND_LOAD_ID_ASC`None
    * `OUTBOUND_LOAD_ID_DESC`None
    * `LOAD_REFERENCE_NUMBER_ASC`None
    * `LOAD_REFERENCE_NUMBER_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `COMMENTS_ASC`None
    * `COMMENTS_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `REQUESTED_PICKUP_DATETIME_ASC`None
    * `REQUESTED_PICKUP_DATETIME_DESC`None
    * `EXPECTED_PICKUP_DATETIME_ASC`None
    * `EXPECTED_PICKUP_DATETIME_DESC`None
    * `REQUESTED_DELIVERY_DATETIME_ASC`None
    * `REQUESTED_DELIVERY_DATETIME_DESC`None
    * `ACTUAL_DELIVERY_DATETIME_ASC`None
    * `ACTUAL_DELIVERY_DATETIME_DESC`None
    * `PALLET_EXCHANGE_TYPE_ASC`None
    * `PALLET_EXCHANGE_TYPE_DESC`None
    * `PAYMENT_METHOD_TYPE_ASC`None
    * `PAYMENT_METHOD_TYPE_DESC`None
    * `SALES_ORDER_NUMBER_ASC`None
    * `SALES_ORDER_NUMBER_DESC`None
    * `SHIPPED_DATETIME_ASC`None
    * `SHIPPED_DATETIME_DESC`None
    * `TRANSPORTATION_METHOD_ASC`None
    * `TRANSPORTATION_METHOD_DESC`None
    * `LADING_TYPE_ASC`None
    * `LADING_TYPE_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `WAREHOUSE_GROSS_WEIGHT_ASC`None
    * `WAREHOUSE_GROSS_WEIGHT_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `REQUESTED_PALLET_PLATFORM_TYPE_ASC`None
    * `REQUESTED_PALLET_PLATFORM_TYPE_DESC`None
    * `STOP_SEQUENCE_NUMBER_ASC`None
    * `STOP_SEQUENCE_NUMBER_DESC`None
    * `CARRIER_CODE_ASC`None
    * `CARRIER_CODE_DESC`None
    * `STOP_LOCATION_CODE_ASC`None
    * `STOP_LOCATION_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `DESTINATION_LOCATION_CODE_ASC`None
    * `DESTINATION_LOCATION_CODE_DESC`None
    * `DESTINATION_LOCATION_NAME_ASC`None
    * `DESTINATION_LOCATION_NAME_DESC`None
    * `DESTINATION_ADDRESS_LINE1_ASC`None
    * `DESTINATION_ADDRESS_LINE1_DESC`None
    * `DESTINATION_ADDRESS_LINE2_ASC`None
    * `DESTINATION_ADDRESS_LINE2_DESC`None
    * `DESTINATION_ADDRESS_LINE3_ASC`None
    * `DESTINATION_ADDRESS_LINE3_DESC`None
    * `DESTINATION_CITY_ASC`None
    * `DESTINATION_CITY_DESC`None
    * `DESTINATION_STATE_ASC`None
    * `DESTINATION_STATE_DESC`None
    * `DESTINATION_COUNTRY_ASC`None
    * `DESTINATION_COUNTRY_DESC`None
    * `DESTINATION_ZIP_ASC`None
    * `DESTINATION_ZIP_DESC`None
    * `DESTINATION_EMAIL_ASC`None
    * `DESTINATION_EMAIL_DESC`None
    * `DESTINATION_PHONE_ASC`None
    * `DESTINATION_PHONE_DESC`None
    * `DESTINATION_FAX_ASC`None
    * `DESTINATION_FAX_DESC`None
    * `ORDER_CONFIRMATION_DATETIME_ASC`None
    * `ORDER_CONFIRMATION_DATETIME_DESC`None
    * `IS_CANCELED_ASC`None
    * `IS_CANCELED_DESC`None
    * `IS_TRANSFER_ORDER_ASC`None
    * `IS_TRANSFER_ORDER_DESC`None
    * `TRANSFER_WAREHOUSE_CUSTOMER_ID_ASC`None
    * `TRANSFER_WAREHOUSE_CUSTOMER_ID_DESC`None
    * `TRANSFER_CUSTOMER_ID_ASC`None
    * `TRANSFER_CUSTOMER_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ACTUAL_DELIVERY_DATETIME_ASC', 'ACTUAL_DELIVERY_DATETIME_DESC', 'CARRIER_CODE_ASC', 'CARRIER_CODE_DESC', 'CARRIER_ID_ASC', 'CARRIER_ID_DESC', 'COMMENTS_ASC', 'COMMENTS_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DESTINATION_ADDRESS_LINE1_ASC', 'DESTINATION_ADDRESS_LINE1_DESC', 'DESTINATION_ADDRESS_LINE2_ASC', 'DESTINATION_ADDRESS_LINE2_DESC', 'DESTINATION_ADDRESS_LINE3_ASC', 'DESTINATION_ADDRESS_LINE3_DESC', 'DESTINATION_CITY_ASC', 'DESTINATION_CITY_DESC', 'DESTINATION_COUNTRY_ASC', 'DESTINATION_COUNTRY_DESC', 'DESTINATION_EMAIL_ASC', 'DESTINATION_EMAIL_DESC', 'DESTINATION_FAX_ASC', 'DESTINATION_FAX_DESC', 'DESTINATION_LOCATION_CODE_ASC', 'DESTINATION_LOCATION_CODE_DESC', 'DESTINATION_LOCATION_NAME_ASC', 'DESTINATION_LOCATION_NAME_DESC', 'DESTINATION_PARTY_ID_ASC', 'DESTINATION_PARTY_ID_DESC', 'DESTINATION_PHONE_ASC', 'DESTINATION_PHONE_DESC', 'DESTINATION_STATE_ASC', 'DESTINATION_STATE_DESC', 'DESTINATION_STOP_LOCATION_ID_ASC', 'DESTINATION_STOP_LOCATION_ID_DESC', 'DESTINATION_ZIP_ASC', 'DESTINATION_ZIP_DESC', 'EXPECTED_PICKUP_DATETIME_ASC', 'EXPECTED_PICKUP_DATETIME_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'ID_ASC', 'ID_DESC', 'IS_CANCELED_ASC', 'IS_CANCELED_DESC', 'IS_TRANSFER_ORDER_ASC', 'IS_TRANSFER_ORDER_DESC', 'LADING_TYPE_ASC', 'LADING_TYPE_DESC', 'LOAD_REFERENCE_NUMBER_ASC', 'LOAD_REFERENCE_NUMBER_DESC', 'NATURAL', 'NOTES_ASC', 'NOTES_DESC', 'ORDER_CONFIRMATION_DATETIME_ASC', 'ORDER_CONFIRMATION_DATETIME_DESC', 'OUTBOUND_LOAD_ID_ASC', 'OUTBOUND_LOAD_ID_DESC', 'PALLET_EXCHANGE_TYPE_ASC', 'PALLET_EXCHANGE_TYPE_DESC', 'PAYMENT_METHOD_TYPE_ASC', 'PAYMENT_METHOD_TYPE_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'REQUESTED_DELIVERY_DATETIME_ASC', 'REQUESTED_DELIVERY_DATETIME_DESC', 'REQUESTED_PALLET_PLATFORM_TYPE_ASC', 'REQUESTED_PALLET_PLATFORM_TYPE_DESC', 'REQUESTED_PICKUP_DATETIME_ASC', 'REQUESTED_PICKUP_DATETIME_DESC', 'SALES_ORDER_NUMBER_ASC', 'SALES_ORDER_NUMBER_DESC', 'SHIPPED_DATETIME_ASC', 'SHIPPED_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'STOP_LOCATION_CODE_ASC', 'STOP_LOCATION_CODE_DESC', 'STOP_SEQUENCE_NUMBER_ASC', 'STOP_SEQUENCE_NUMBER_DESC', 'TRANSFER_CUSTOMER_ID_ASC', 'TRANSFER_CUSTOMER_ID_DESC', 'TRANSFER_WAREHOUSE_CUSTOMER_ID_ASC', 'TRANSFER_WAREHOUSE_CUSTOMER_ID_DESC', 'TRANSPORTATION_METHOD_ASC', 'TRANSPORTATION_METHOD_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_GROSS_WEIGHT_ASC', 'WAREHOUSE_GROSS_WEIGHT_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundOrdersRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundOrdersRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `COMMENTS_ASC`None
    * `COMMENTS_DESC`None
    * `NOTES_ASC`None
    * `NOTES_DESC`None
    * `REQUESTED_DELIVERY_DATETIME_ASC`None
    * `REQUESTED_DELIVERY_DATETIME_DESC`None
    * `ACTUAL_DELIVERY_DATETIME_ASC`None
    * `ACTUAL_DELIVERY_DATETIME_DESC`None
    * `PALLET_EXCHANGE_TYPE_ASC`None
    * `PALLET_EXCHANGE_TYPE_DESC`None
    * `PAYMENT_METHOD_TYPE_ASC`None
    * `PAYMENT_METHOD_TYPE_DESC`None
    * `SALES_ORDER_NUMBER_ASC`None
    * `SALES_ORDER_NUMBER_DESC`None
    * `SHIPPED_DATETIME_ASC`None
    * `SHIPPED_DATETIME_DESC`None
    * `TRANSPORTATION_METHOD_ASC`None
    * `TRANSPORTATION_METHOD_DESC`None
    * `LADING_TYPE_ASC`None
    * `LADING_TYPE_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `WAREHOUSE_GROSS_WEIGHT_ASC`None
    * `WAREHOUSE_GROSS_WEIGHT_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `REQUESTED_PALLET_PLATFORM_TYPE_ASC`None
    * `REQUESTED_PALLET_PLATFORM_TYPE_DESC`None
    * `STOP_SEQUENCE_NUMBER_ASC`None
    * `STOP_SEQUENCE_NUMBER_DESC`None
    * `CARRIER_CODE_ASC`None
    * `CARRIER_CODE_DESC`None
    * `STOP_LOCATION_CODE_ASC`None
    * `STOP_LOCATION_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `ORDER_CONFIRMATION_DATETIME_ASC`None
    * `ORDER_CONFIRMATION_DATETIME_DESC`None
    * `DESTINATION_LOCATION_CODE_ASC`None
    * `DESTINATION_LOCATION_CODE_DESC`None
    * `DESTINATION_LOCATION_NAME_ASC`None
    * `DESTINATION_LOCATION_NAME_DESC`None
    * `DESTINATION_ADDRESS_LINE1_ASC`None
    * `DESTINATION_ADDRESS_LINE1_DESC`None
    * `DESTINATION_ADDRESS_LINE2_ASC`None
    * `DESTINATION_ADDRESS_LINE2_DESC`None
    * `DESTINATION_ADDRESS_LINE3_ASC`None
    * `DESTINATION_ADDRESS_LINE3_DESC`None
    * `DESTINATION_CITY_ASC`None
    * `DESTINATION_CITY_DESC`None
    * `DESTINATION_STATE_ASC`None
    * `DESTINATION_STATE_DESC`None
    * `DESTINATION_COUNTRY_ASC`None
    * `DESTINATION_COUNTRY_DESC`None
    * `DESTINATION_ZIP_ASC`None
    * `DESTINATION_ZIP_DESC`None
    * `DESTINATION_EMAIL_ASC`None
    * `DESTINATION_EMAIL_DESC`None
    * `DESTINATION_PHONE_ASC`None
    * `DESTINATION_PHONE_DESC`None
    * `DESTINATION_FAX_ASC`None
    * `DESTINATION_FAX_DESC`None
    * `REQUESTED_PICKUP_DATETIME_ASC`None
    * `REQUESTED_PICKUP_DATETIME_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `LOAD_REFERENCE_NUMBER_ASC`None
    * `LOAD_REFERENCE_NUMBER_DESC`None
    * `IS_CANCELED_ASC`None
    * `IS_CANCELED_DESC`None
    * `TRANSFER_CUSTOMER_CODE_ASC`None
    * `TRANSFER_CUSTOMER_CODE_DESC`None
    * `IS_TRANSFER_ORDER_ASC`None
    * `IS_TRANSFER_ORDER_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `OUTBOUND_LOAD_ID_ASC`None
    * `OUTBOUND_LOAD_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `TRANSFER_CUSTOMER_ID_ASC`None
    * `TRANSFER_CUSTOMER_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ACTUAL_DELIVERY_DATETIME_ASC', 'ACTUAL_DELIVERY_DATETIME_DESC', 'CARRIER_CODE_ASC', 'CARRIER_CODE_DESC', 'COMMENTS_ASC', 'COMMENTS_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DESTINATION_ADDRESS_LINE1_ASC', 'DESTINATION_ADDRESS_LINE1_DESC', 'DESTINATION_ADDRESS_LINE2_ASC', 'DESTINATION_ADDRESS_LINE2_DESC', 'DESTINATION_ADDRESS_LINE3_ASC', 'DESTINATION_ADDRESS_LINE3_DESC', 'DESTINATION_CITY_ASC', 'DESTINATION_CITY_DESC', 'DESTINATION_COUNTRY_ASC', 'DESTINATION_COUNTRY_DESC', 'DESTINATION_EMAIL_ASC', 'DESTINATION_EMAIL_DESC', 'DESTINATION_FAX_ASC', 'DESTINATION_FAX_DESC', 'DESTINATION_LOCATION_CODE_ASC', 'DESTINATION_LOCATION_CODE_DESC', 'DESTINATION_LOCATION_NAME_ASC', 'DESTINATION_LOCATION_NAME_DESC', 'DESTINATION_PHONE_ASC', 'DESTINATION_PHONE_DESC', 'DESTINATION_STATE_ASC', 'DESTINATION_STATE_DESC', 'DESTINATION_ZIP_ASC', 'DESTINATION_ZIP_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'IS_CANCELED_ASC', 'IS_CANCELED_DESC', 'IS_TRANSFER_ORDER_ASC', 'IS_TRANSFER_ORDER_DESC', 'LADING_TYPE_ASC', 'LADING_TYPE_DESC', 'LOAD_REFERENCE_NUMBER_ASC', 'LOAD_REFERENCE_NUMBER_DESC', 'NATURAL', 'NOTES_ASC', 'NOTES_DESC', 'ORDER_CONFIRMATION_DATETIME_ASC', 'ORDER_CONFIRMATION_DATETIME_DESC', 'OUTBOUND_LOAD_ID_ASC', 'OUTBOUND_LOAD_ID_DESC', 'PALLET_EXCHANGE_TYPE_ASC', 'PALLET_EXCHANGE_TYPE_DESC', 'PAYMENT_METHOD_TYPE_ASC', 'PAYMENT_METHOD_TYPE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'REQUESTED_DELIVERY_DATETIME_ASC', 'REQUESTED_DELIVERY_DATETIME_DESC', 'REQUESTED_PALLET_PLATFORM_TYPE_ASC', 'REQUESTED_PALLET_PLATFORM_TYPE_DESC', 'REQUESTED_PICKUP_DATETIME_ASC', 'REQUESTED_PICKUP_DATETIME_DESC', 'SALES_ORDER_NUMBER_ASC', 'SALES_ORDER_NUMBER_DESC', 'SHIPPED_DATETIME_ASC', 'SHIPPED_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'STOP_LOCATION_CODE_ASC', 'STOP_LOCATION_CODE_DESC', 'STOP_SEQUENCE_NUMBER_ASC', 'STOP_SEQUENCE_NUMBER_DESC', 'TRANSFER_CUSTOMER_CODE_ASC', 'TRANSFER_CUSTOMER_CODE_DESC', 'TRANSFER_CUSTOMER_ID_ASC', 'TRANSFER_CUSTOMER_ID_DESC', 'TRANSPORTATION_METHOD_ASC', 'TRANSPORTATION_METHOD_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_GROSS_WEIGHT_ASC', 'WAREHOUSE_GROSS_WEIGHT_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundPalletsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundPalletsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `OUTBOUND_PALLET_CODE_ASC`None
    * `OUTBOUND_PALLET_CODE_DESC`None
    * `WAREHOUSE_PALLET_CODE_ASC`None
    * `WAREHOUSE_PALLET_CODE_DESC`None
    * `CASE_QUANTITY_ASC`None
    * `CASE_QUANTITY_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    * `NET_WEIGHT_ASC`None
    * `NET_WEIGHT_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CASE_QUANTITY_ASC', 'CASE_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'NATURAL', 'NET_WEIGHT_ASC', 'NET_WEIGHT_DESC', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'OUTBOUND_PALLET_CODE_ASC', 'OUTBOUND_PALLET_CODE_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', 'WAREHOUSE_PALLET_CODE_ASC', 'WAREHOUSE_PALLET_CODE_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class OutboundTruckLogRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `OutboundTruckLogRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `COOLER_QUANTITY_ASC`None
    * `COOLER_QUANTITY_DESC`None
    * `COOLER_WAREHOUSE_CUT_QUANTITY_ASC`None
    * `COOLER_WAREHOUSE_CUT_QUANTITY_DESC`None
    * `COOLER_NOT_ENOUGH_QUANTITY_ASC`None
    * `COOLER_NOT_ENOUGH_QUANTITY_DESC`None
    * `COOLER_QA_HOLD_QUANTITY_ASC`None
    * `COOLER_QA_HOLD_QUANTITY_DESC`None
    * `COOLER_OTHER_QUANTITY_ASC`None
    * `COOLER_OTHER_QUANTITY_DESC`None
    * `COOLER_COMMENT_ASC`None
    * `COOLER_COMMENT_DESC`None
    * `FREEZER_QUANTITY_ASC`None
    * `FREEZER_QUANTITY_DESC`None
    * `FREEZER_WAREHOUSE_CUT_QUANTITY_ASC`None
    * `FREEZER_WAREHOUSE_CUT_QUANTITY_DESC`None
    * `FREEZER_NOT_ENOUGH_QUANTITY_ASC`None
    * `FREEZER_NOT_ENOUGH_QUANTITY_DESC`None
    * `FREEZER_QA_HOLD_QUANTITY_ASC`None
    * `FREEZER_QA_HOLD_QUANTITY_DESC`None
    * `FREEZER_OTHER_QUANTITY_ASC`None
    * `FREEZER_OTHER_QUANTITY_DESC`None
    * `FREEZER_COMMENT_ASC`None
    * `FREEZER_COMMENT_DESC`None
    * `DRY_QUANTITY_ASC`None
    * `DRY_QUANTITY_DESC`None
    * `DRY_WAREHOUSE_CUT_QUANTITY_ASC`None
    * `DRY_WAREHOUSE_CUT_QUANTITY_DESC`None
    * `DRY_NOT_ENOUGH_QUANTITY_ASC`None
    * `DRY_NOT_ENOUGH_QUANTITY_DESC`None
    * `DRY_QA_HOLD_QUANTITY_ASC`None
    * `DRY_QA_HOLD_QUANTITY_DESC`None
    * `DRY_OTHER_QUANTITY_ASC`None
    * `DRY_OTHER_QUANTITY_DESC`None
    * `DRY_COMMENT_ASC`None
    * `DRY_COMMENT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('COOLER_COMMENT_ASC', 'COOLER_COMMENT_DESC', 'COOLER_NOT_ENOUGH_QUANTITY_ASC', 'COOLER_NOT_ENOUGH_QUANTITY_DESC', 'COOLER_OTHER_QUANTITY_ASC', 'COOLER_OTHER_QUANTITY_DESC', 'COOLER_QA_HOLD_QUANTITY_ASC', 'COOLER_QA_HOLD_QUANTITY_DESC', 'COOLER_QUANTITY_ASC', 'COOLER_QUANTITY_DESC', 'COOLER_WAREHOUSE_CUT_QUANTITY_ASC', 'COOLER_WAREHOUSE_CUT_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DRY_COMMENT_ASC', 'DRY_COMMENT_DESC', 'DRY_NOT_ENOUGH_QUANTITY_ASC', 'DRY_NOT_ENOUGH_QUANTITY_DESC', 'DRY_OTHER_QUANTITY_ASC', 'DRY_OTHER_QUANTITY_DESC', 'DRY_QA_HOLD_QUANTITY_ASC', 'DRY_QA_HOLD_QUANTITY_DESC', 'DRY_QUANTITY_ASC', 'DRY_QUANTITY_DESC', 'DRY_WAREHOUSE_CUT_QUANTITY_ASC', 'DRY_WAREHOUSE_CUT_QUANTITY_DESC', 'FREEZER_COMMENT_ASC', 'FREEZER_COMMENT_DESC', 'FREEZER_NOT_ENOUGH_QUANTITY_ASC', 'FREEZER_NOT_ENOUGH_QUANTITY_DESC', 'FREEZER_OTHER_QUANTITY_ASC', 'FREEZER_OTHER_QUANTITY_DESC', 'FREEZER_QA_HOLD_QUANTITY_ASC', 'FREEZER_QA_HOLD_QUANTITY_DESC', 'FREEZER_QUANTITY_ASC', 'FREEZER_QUANTITY_DESC', 'FREEZER_WAREHOUSE_CUT_QUANTITY_ASC', 'FREEZER_WAREHOUSE_CUT_QUANTITY_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class PalletHistoriesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `PalletHistory`.

    Enumeration Choices:

    * `NATURAL`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `FROM_LOCATION_CODE_ASC`None
    * `FROM_LOCATION_CODE_DESC`None
    * `TO_LOCATION_CODE_ASC`None
    * `TO_LOCATION_CODE_DESC`None
    * `TRANSACTION_DATE_ASC`None
    * `TRANSACTION_DATE_DESC`None
    * `IS_HAND_KEYED_PALLET_NUMBER_ASC`None
    * `IS_HAND_KEYED_PALLET_NUMBER_DESC`None
    * `IS_HAND_KEYED_LOCATION_ASC`None
    * `IS_HAND_KEYED_LOCATION_DESC`None
    * `OPERATOR_ID_ASC`None
    * `OPERATOR_ID_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `WORK_TYPE_ASC`None
    * `WORK_TYPE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'FROM_LOCATION_CODE_ASC', 'FROM_LOCATION_CODE_DESC', 'ID_ASC', 'ID_DESC', 'IS_HAND_KEYED_LOCATION_ASC', 'IS_HAND_KEYED_LOCATION_DESC', 'IS_HAND_KEYED_PALLET_NUMBER_ASC', 'IS_HAND_KEYED_PALLET_NUMBER_DESC', 'NATURAL', 'OPERATOR_ID_ASC', 'OPERATOR_ID_DESC', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TO_LOCATION_CODE_ASC', 'TO_LOCATION_CODE_DESC', 'TRANSACTION_DATE_ASC', 'TRANSACTION_DATE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WORK_TYPE_ASC', 'WORK_TYPE_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class PalletHistoryRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `PalletHistoryRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `FROM_LOCATION_CODE_ASC`None
    * `FROM_LOCATION_CODE_DESC`None
    * `TO_LOCATION_CODE_ASC`None
    * `TO_LOCATION_CODE_DESC`None
    * `TRANSACTION_DATE_ASC`None
    * `TRANSACTION_DATE_DESC`None
    * `IS_HAND_KEYED_PALLET_NUMBER_ASC`None
    * `IS_HAND_KEYED_PALLET_NUMBER_DESC`None
    * `IS_HAND_KEYED_LOCATION_ASC`None
    * `IS_HAND_KEYED_LOCATION_DESC`None
    * `OPERATOR_ID_ASC`None
    * `OPERATOR_ID_DESC`None
    * `QUANTITY_ASC`None
    * `QUANTITY_DESC`None
    * `WORK_TYPE_ASC`None
    * `WORK_TYPE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `PALLET_ID_ASC`None
    * `PALLET_ID_DESC`None
    * `WEIGHT_DELTA_ASC`None
    * `WEIGHT_DELTA_DESC`None
    * `TRAN_TYPE_ASC`None
    * `TRAN_TYPE_DESC`None
    * `WORK_ORDER_NUMBER_ASC`None
    * `WORK_ORDER_NUMBER_DESC`None
    * `FINAL_PALLET_CODE_ASC`None
    * `FINAL_PALLET_CODE_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `CURRENT_NET_WEIGHT_ASC`None
    * `CURRENT_NET_WEIGHT_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CURRENT_NET_WEIGHT_ASC', 'CURRENT_NET_WEIGHT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FINAL_PALLET_CODE_ASC', 'FINAL_PALLET_CODE_DESC', 'FROM_LOCATION_CODE_ASC', 'FROM_LOCATION_CODE_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'IS_HAND_KEYED_LOCATION_ASC', 'IS_HAND_KEYED_LOCATION_DESC', 'IS_HAND_KEYED_PALLET_NUMBER_ASC', 'IS_HAND_KEYED_PALLET_NUMBER_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'NATURAL', 'OPERATOR_ID_ASC', 'OPERATOR_ID_DESC', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'PALLET_ID_ASC', 'PALLET_ID_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'QUANTITY_ASC', 'QUANTITY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TO_LOCATION_CODE_ASC', 'TO_LOCATION_CODE_DESC', 'TRANSACTION_DATE_ASC', 'TRANSACTION_DATE_DESC', 'TRAN_TYPE_ASC', 'TRAN_TYPE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WEIGHT_DELTA_ASC', 'WEIGHT_DELTA_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', 'WORK_ORDER_NUMBER_ASC', 'WORK_ORDER_NUMBER_DESC', 'WORK_TYPE_ASC', 'WORK_TYPE_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class PalletLocationZonesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `PalletLocationZone`.

    Enumeration Choices:

    * `NATURAL`None
    * `WMS_SYSTEM_ID_ASC`None
    * `WMS_SYSTEM_ID_DESC`None
    * `ZONE_ASC`None
    * `ZONE_DESC`None
    * `DESCRIPTION_ASC`None
    * `DESCRIPTION_DESC`None
    * `CLASSIFICATION_ASC`None
    * `CLASSIFICATION_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CLASSIFICATION_ASC', 'CLASSIFICATION_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DESCRIPTION_ASC', 'DESCRIPTION_DESC', 'NATURAL', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WMS_SYSTEM_ID_ASC', 'WMS_SYSTEM_ID_DESC', 'ZONE_ASC', 'ZONE_DESC')


class PalletLocationsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `PalletLocation`.

    Enumeration Choices:

    * `NATURAL`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `AISLE_ASC`None
    * `AISLE_DESC`None
    * `BAY_ASC`None
    * `BAY_DESC`None
    * `IS_PICK_AREA_ASC`None
    * `IS_PICK_AREA_DESC`None
    * `ROOM_ASC`None
    * `ROOM_DESC`None
    * `ZONE_ASC`None
    * `ZONE_DESC`None
    * `ROOM_TYPE_ASC`None
    * `ROOM_TYPE_DESC`None
    * `WEIGHT_CAPACITY_ASC`None
    * `WEIGHT_CAPACITY_DESC`None
    * `HEIGHT_ASC`None
    * `HEIGHT_DESC`None
    * `LENGTH_ASC`None
    * `LENGTH_DESC`None
    * `DEPTH_ASC`None
    * `DEPTH_DESC`None
    * `CAPACITY_ASC`None
    * `CAPACITY_DESC`None
    * `LOCATION_REPORTED_PALLETS_ASC`None
    * `LOCATION_REPORTED_PALLETS_DESC`None
    * `MAX_PALLETS_ASC`None
    * `MAX_PALLETS_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `LOCATION_STATUS_ASC`None
    * `LOCATION_STATUS_DESC`None
    * `IS_ACTIVE_ASC`None
    * `IS_ACTIVE_DESC`None
    * `IS_PALLET_STORAGE_ASC`None
    * `IS_PALLET_STORAGE_DESC`None
    * `REPORTING_ROOM_ASC`None
    * `REPORTING_ROOM_DESC`None
    * `CURRENT_PALLETS_ASC`None
    * `CURRENT_PALLETS_DESC`None
    '''
    __schema__ = base
    __choices__ = ('AISLE_ASC', 'AISLE_DESC', 'BAY_ASC', 'BAY_DESC', 'CAPACITY_ASC', 'CAPACITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CURRENT_PALLETS_ASC', 'CURRENT_PALLETS_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPTH_ASC', 'DEPTH_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'HEIGHT_ASC', 'HEIGHT_DESC', 'ID_ASC', 'ID_DESC', 'IS_ACTIVE_ASC', 'IS_ACTIVE_DESC', 'IS_PALLET_STORAGE_ASC', 'IS_PALLET_STORAGE_DESC', 'IS_PICK_AREA_ASC', 'IS_PICK_AREA_DESC', 'LENGTH_ASC', 'LENGTH_DESC', 'LOCATION_REPORTED_PALLETS_ASC', 'LOCATION_REPORTED_PALLETS_DESC', 'LOCATION_STATUS_ASC', 'LOCATION_STATUS_DESC', 'MAX_PALLETS_ASC', 'MAX_PALLETS_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'REPORTING_ROOM_ASC', 'REPORTING_ROOM_DESC', 'ROOM_ASC', 'ROOM_DESC', 'ROOM_TYPE_ASC', 'ROOM_TYPE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WEIGHT_CAPACITY_ASC', 'WEIGHT_CAPACITY_DESC', 'ZONE_ASC', 'ZONE_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class PalletLocationsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `PalletLocationsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `AISLE_ASC`None
    * `AISLE_DESC`None
    * `BAY_ASC`None
    * `BAY_DESC`None
    * `IS_PICK_AREA_ASC`None
    * `IS_PICK_AREA_DESC`None
    * `ROOM_ASC`None
    * `ROOM_DESC`None
    * `ZONE_ASC`None
    * `ZONE_DESC`None
    * `ROOM_TYPE_ASC`None
    * `ROOM_TYPE_DESC`None
    * `WEIGHT_CAPACITY_ASC`None
    * `WEIGHT_CAPACITY_DESC`None
    * `HEIGHT_ASC`None
    * `HEIGHT_DESC`None
    * `LENGTH_ASC`None
    * `LENGTH_DESC`None
    * `DEPTH_ASC`None
    * `DEPTH_DESC`None
    * `CAPACITY_ASC`None
    * `CAPACITY_DESC`None
    * `LOCATION_REPORTED_PALLETS_ASC`None
    * `LOCATION_REPORTED_PALLETS_DESC`None
    * `MAX_PALLETS_ASC`None
    * `MAX_PALLETS_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `LOCATION_STATUS_ASC`None
    * `LOCATION_STATUS_DESC`None
    * `IS_ACTIVE_ASC`None
    * `IS_ACTIVE_DESC`None
    * `IS_PALLET_STORAGE_ASC`None
    * `IS_PALLET_STORAGE_DESC`None
    * `REPORTING_ROOM_ASC`None
    * `REPORTING_ROOM_DESC`None
    * `CURRENT_PALLETS_ASC`None
    * `CURRENT_PALLETS_DESC`None
    * `WEIGHT_UOM_ASC`None
    * `WEIGHT_UOM_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('AISLE_ASC', 'AISLE_DESC', 'BAY_ASC', 'BAY_DESC', 'CAPACITY_ASC', 'CAPACITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CURRENT_PALLETS_ASC', 'CURRENT_PALLETS_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPTH_ASC', 'DEPTH_DESC', 'HEIGHT_ASC', 'HEIGHT_DESC', 'ID_ASC', 'ID_DESC', 'IS_ACTIVE_ASC', 'IS_ACTIVE_DESC', 'IS_PALLET_STORAGE_ASC', 'IS_PALLET_STORAGE_DESC', 'IS_PICK_AREA_ASC', 'IS_PICK_AREA_DESC', 'LENGTH_ASC', 'LENGTH_DESC', 'LOCATION_REPORTED_PALLETS_ASC', 'LOCATION_REPORTED_PALLETS_DESC', 'LOCATION_STATUS_ASC', 'LOCATION_STATUS_DESC', 'MAX_PALLETS_ASC', 'MAX_PALLETS_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'REPORTING_ROOM_ASC', 'REPORTING_ROOM_DESC', 'ROOM_ASC', 'ROOM_DESC', 'ROOM_TYPE_ASC', 'ROOM_TYPE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WEIGHT_CAPACITY_ASC', 'WEIGHT_CAPACITY_DESC', 'WEIGHT_UOM_ASC', 'WEIGHT_UOM_DESC', 'ZONE_ASC', 'ZONE_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class PalletReferenceCodesRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `PalletReferenceCodesRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `PALLET_ID_ASC`None
    * `PALLET_ID_DESC`None
    * `IS_DEPLETED_ASC`None
    * `IS_DEPLETED_DESC`None
    * `PURCHASE_ORDER_NUMBER_AT_RECEIPT_ASC`None
    * `PURCHASE_ORDER_NUMBER_AT_RECEIPT_DESC`None
    * `PLANT_CODE_ASC`None
    * `PLANT_CODE_DESC`None
    * `IMPORT_MARK_ASC`None
    * `IMPORT_MARK_DESC`None
    * `PRODUCTION_LINE_HOUR_ASC`None
    * `PRODUCTION_LINE_HOUR_DESC`None
    * `USDA_STAMP_ASC`None
    * `USDA_STAMP_DESC`None
    * `COUNTRY_OF_ORIGIN_ASC`None
    * `COUNTRY_OF_ORIGIN_DESC`None
    * `INCEPTION_DATE_ASC`None
    * `INCEPTION_DATE_DESC`None
    * `CONTAINER_NUMBER_ASC`None
    * `CONTAINER_NUMBER_DESC`None
    * `ALTERNATE_LOT_NUMBER_ASC`None
    * `ALTERNATE_LOT_NUMBER_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ALTERNATE_LOT_NUMBER_ASC', 'ALTERNATE_LOT_NUMBER_DESC', 'CONTAINER_NUMBER_ASC', 'CONTAINER_NUMBER_DESC', 'COUNTRY_OF_ORIGIN_ASC', 'COUNTRY_OF_ORIGIN_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IMPORT_MARK_ASC', 'IMPORT_MARK_DESC', 'INCEPTION_DATE_ASC', 'INCEPTION_DATE_DESC', 'IS_DEPLETED_ASC', 'IS_DEPLETED_DESC', 'NATURAL', 'PALLET_ID_ASC', 'PALLET_ID_DESC', 'PLANT_CODE_ASC', 'PLANT_CODE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'PRODUCTION_LINE_HOUR_ASC', 'PRODUCTION_LINE_HOUR_DESC', 'PURCHASE_ORDER_NUMBER_AT_RECEIPT_ASC', 'PURCHASE_ORDER_NUMBER_AT_RECEIPT_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'USDA_STAMP_ASC', 'USDA_STAMP_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class PalletTransactionsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `PalletTransactionsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `PALLET_ID_ASC`None
    * `PALLET_ID_DESC`None
    * `WAREHOUSE_PALLET_CODE_ASC`None
    * `WAREHOUSE_PALLET_CODE_DESC`None
    * `PALLET_TRANSACTION_DATETIME_ASC`None
    * `PALLET_TRANSACTION_DATETIME_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `TRANSACTION_STATUS_ASC`None
    * `TRANSACTION_STATUS_DESC`None
    * `TRANSACTION_STATUS_DESCRIPTION_ASC`None
    * `TRANSACTION_STATUS_DESCRIPTION_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `OUTBOUND_WAREHOUSE_ORDER_NUMBER_ASC`None
    * `OUTBOUND_WAREHOUSE_ORDER_NUMBER_DESC`None
    * `OUTBOUND_ORDER_LINE_NUMBER_ASC`None
    * `OUTBOUND_ORDER_LINE_NUMBER_DESC`None
    * `INVENTORY_ADJUSTMENT_ID_ASC`None
    * `INVENTORY_ADJUSTMENT_ID_DESC`None
    * `ADJUSTMENT_NUMBER_ASC`None
    * `ADJUSTMENT_NUMBER_DESC`None
    * `PICK_CODE_ASC`None
    * `PICK_CODE_DESC`None
    * `PICK_CODE_DESCRIPTION_ASC`None
    * `PICK_CODE_DESCRIPTION_DESC`None
    * `PICK_TYPE_ASC`None
    * `PICK_TYPE_DESC`None
    * `PICK_TYPE_DESCRIPTION_ASC`None
    * `PICK_TYPE_DESCRIPTION_DESC`None
    * `NET_PALLET_CHANGE_ASC`None
    * `NET_PALLET_CHANGE_DESC`None
    * `NET_CASE_QUANTITY_CHANGE_ASC`None
    * `NET_CASE_QUANTITY_CHANGE_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ADJUSTMENT_NUMBER_ASC', 'ADJUSTMENT_NUMBER_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'INVENTORY_ADJUSTMENT_ID_ASC', 'INVENTORY_ADJUSTMENT_ID_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'NATURAL', 'NET_CASE_QUANTITY_CHANGE_ASC', 'NET_CASE_QUANTITY_CHANGE_DESC', 'NET_PALLET_CHANGE_ASC', 'NET_PALLET_CHANGE_DESC', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'OUTBOUND_ORDER_LINE_NUMBER_ASC', 'OUTBOUND_ORDER_LINE_NUMBER_DESC', 'OUTBOUND_WAREHOUSE_ORDER_NUMBER_ASC', 'OUTBOUND_WAREHOUSE_ORDER_NUMBER_DESC', 'PALLET_ID_ASC', 'PALLET_ID_DESC', 'PALLET_TRANSACTION_DATETIME_ASC', 'PALLET_TRANSACTION_DATETIME_DESC', 'PICK_CODE_ASC', 'PICK_CODE_DESC', 'PICK_CODE_DESCRIPTION_ASC', 'PICK_CODE_DESCRIPTION_DESC', 'PICK_TYPE_ASC', 'PICK_TYPE_DESC', 'PICK_TYPE_DESCRIPTION_ASC', 'PICK_TYPE_DESCRIPTION_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TRANSACTION_STATUS_ASC', 'TRANSACTION_STATUS_DESC', 'TRANSACTION_STATUS_DESCRIPTION_ASC', 'TRANSACTION_STATUS_DESCRIPTION_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_PALLET_CODE_ASC', 'WAREHOUSE_PALLET_CODE_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class PalletsByLoadDatesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `PalletsByLoadDate`.

    Enumeration Choices:

    * `NATURAL`None
    * `INBOUND_LOAD_EXPECTED_RECEIVE_DATE_ASC`None
    * `INBOUND_LOAD_EXPECTED_RECEIVE_DATE_DESC`None
    * `INBOUND_LOAD_REFERENCE_NUMBER_ASC`None
    * `INBOUND_LOAD_REFERENCE_NUMBER_DESC`None
    * `INBOUND_LOAD_TRAILER_NUMBER_ASC`None
    * `INBOUND_LOAD_TRAILER_NUMBER_DESC`None
    * `INBOUND_LOAD_DOCK_DOOR_NUMBER_ASC`None
    * `INBOUND_LOAD_DOCK_DOOR_NUMBER_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `INVENTORY_STATUS_ASC`None
    * `INVENTORY_STATUS_DESC`None
    * `ORIGINAL_QUANTITY_ASC`None
    * `ORIGINAL_QUANTITY_DESC`None
    * `ORIGINAL_PALLET_COUNT_ASC`None
    * `ORIGINAL_PALLET_COUNT_DESC`None
    * `IS_BLAST_ASC`None
    * `IS_BLAST_DESC`None
    * `BLAST_IN_DATETIME_ASC`None
    * `BLAST_IN_DATETIME_DESC`None
    * `BLAST_OUT_DATETIME_ASC`None
    * `BLAST_OUT_DATETIME_DESC`None
    * `IS_HPP_ASC`None
    * `IS_HPP_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_ASC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_DESC`None
    * `CUSTOMER_LICENSE_PLATE_NUMBER_ASC`None
    * `CUSTOMER_LICENSE_PLATE_NUMBER_DESC`None
    * `IS_DEPLETED_ASC`None
    * `IS_DEPLETED_DESC`None
    * `DEPLETED_DATE_ASC`None
    * `DEPLETED_DATE_DESC`None
    * `CURRENT_QUANTITY_ASC`None
    * `CURRENT_QUANTITY_DESC`None
    * `CURRENT_PALLET_COUNT_ASC`None
    * `CURRENT_PALLET_COUNT_DESC`None
    * `WAREHOUSE_LOCATION_CODE_ASC`None
    * `WAREHOUSE_LOCATION_CODE_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PALLET_RECEIVED_DATE_ASC`None
    * `PALLET_RECEIVED_DATE_DESC`None
    * `COMMITTED_QUANTITY_ASC`None
    * `COMMITTED_QUANTITY_DESC`None
    * `COMMITTED_PALLET_COUNT_ASC`None
    * `COMMITTED_PALLET_COUNT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `PALLET_LOCATION_ID_ASC`None
    * `PALLET_LOCATION_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `HPP_IN_DATETIME_ASC`None
    * `HPP_IN_DATETIME_DESC`None
    * `HPP_OUT_DATETIME_ASC`None
    * `HPP_OUT_DATETIME_DESC`None
    * `IS_IN_ASSIGNED_LOCATION_ASC`None
    * `IS_IN_ASSIGNED_LOCATION_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BLAST_IN_DATETIME_ASC', 'BLAST_IN_DATETIME_DESC', 'BLAST_OUT_DATETIME_ASC', 'BLAST_OUT_DATETIME_DESC', 'COMMITTED_PALLET_COUNT_ASC', 'COMMITTED_PALLET_COUNT_DESC', 'COMMITTED_QUANTITY_ASC', 'COMMITTED_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CURRENT_PALLET_COUNT_ASC', 'CURRENT_PALLET_COUNT_DESC', 'CURRENT_QUANTITY_ASC', 'CURRENT_QUANTITY_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LICENSE_PLATE_NUMBER_ASC', 'CUSTOMER_LICENSE_PLATE_NUMBER_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPLETED_DATE_ASC', 'DEPLETED_DATE_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'HPP_IN_DATETIME_ASC', 'HPP_IN_DATETIME_DESC', 'HPP_OUT_DATETIME_ASC', 'HPP_OUT_DATETIME_DESC', 'ID_ASC', 'ID_DESC', 'INBOUND_LOAD_DOCK_DOOR_NUMBER_ASC', 'INBOUND_LOAD_DOCK_DOOR_NUMBER_DESC', 'INBOUND_LOAD_EXPECTED_RECEIVE_DATE_ASC', 'INBOUND_LOAD_EXPECTED_RECEIVE_DATE_DESC', 'INBOUND_LOAD_REFERENCE_NUMBER_ASC', 'INBOUND_LOAD_REFERENCE_NUMBER_DESC', 'INBOUND_LOAD_TRAILER_NUMBER_ASC', 'INBOUND_LOAD_TRAILER_NUMBER_DESC', 'INVENTORY_STATUS_ASC', 'INVENTORY_STATUS_DESC', 'IS_BLAST_ASC', 'IS_BLAST_DESC', 'IS_DEPLETED_ASC', 'IS_DEPLETED_DESC', 'IS_HPP_ASC', 'IS_HPP_DESC', 'IS_IN_ASSIGNED_LOCATION_ASC', 'IS_IN_ASSIGNED_LOCATION_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'NATURAL', 'ORIGINAL_PALLET_COUNT_ASC', 'ORIGINAL_PALLET_COUNT_DESC', 'ORIGINAL_QUANTITY_ASC', 'ORIGINAL_QUANTITY_DESC', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'PALLET_LOCATION_ID_ASC', 'PALLET_LOCATION_ID_DESC', 'PALLET_RECEIVED_DATE_ASC', 'PALLET_RECEIVED_DATE_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_ASC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_DESC', 'WAREHOUSE_LOCATION_CODE_ASC', 'WAREHOUSE_LOCATION_CODE_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class PalletsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `Pallet`.

    Enumeration Choices:

    * `NATURAL`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `WAREHOUSE_CUSTOMER_ID_ASC`None
    * `WAREHOUSE_CUSTOMER_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `WAREHOUSE_LOCATION_ID_ASC`None
    * `WAREHOUSE_LOCATION_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `EXPECTED_PALLET_COUNT_ASC`None
    * `EXPECTED_PALLET_COUNT_DESC`None
    * `EXPECTED_QUANTITY_ASC`None
    * `EXPECTED_QUANTITY_DESC`None
    * `ON_HOLD_PALLET_COUNT_ASC`None
    * `ON_HOLD_PALLET_COUNT_DESC`None
    * `ON_HOLD_QUANTITY_ASC`None
    * `ON_HOLD_QUANTITY_DESC`None
    * `AVAILABLE_QUANTITY_ASC`None
    * `AVAILABLE_QUANTITY_DESC`None
    * `AVAILABLE_PALLET_COUNT_ASC`None
    * `AVAILABLE_PALLET_COUNT_DESC`None
    * `ON_HAND_QUANTITY_ASC`None
    * `ON_HAND_QUANTITY_DESC`None
    * `ON_HAND_PALLET_COUNT_ASC`None
    * `ON_HAND_PALLET_COUNT_DESC`None
    * `COMMITTED_QUANTITY_ASC`None
    * `COMMITTED_QUANTITY_DESC`None
    * `COMMITTED_PALLET_COUNT_ASC`None
    * `COMMITTED_PALLET_COUNT_DESC`None
    * `ORIGINAL_QUANTITY_ASC`None
    * `ORIGINAL_QUANTITY_DESC`None
    * `ORIGINAL_PALLET_COUNT_ASC`None
    * `ORIGINAL_PALLET_COUNT_DESC`None
    * `WAREHOUSE_LOCATION_CODE_ASC`None
    * `WAREHOUSE_LOCATION_CODE_DESC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_ASC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `PALLET_RECEIVED_DATE_ASC`None
    * `PALLET_RECEIVED_DATE_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `IS_HPP_ASC`None
    * `IS_HPP_DESC`None
    * `IS_DEPLETED_ASC`None
    * `IS_DEPLETED_DESC`None
    * `IS_BLAST_ASC`None
    * `IS_BLAST_DESC`None
    * `INVENTORY_STATUS_ASC`None
    * `INVENTORY_STATUS_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `DEPLETED_DATE_ASC`None
    * `DEPLETED_DATE_DESC`None
    * `CUSTOMER_LICENSE_PLATE_NUMBER_ASC`None
    * `CUSTOMER_LICENSE_PLATE_NUMBER_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `BLAST_OUT_DATETIME_ASC`None
    * `BLAST_OUT_DATETIME_DESC`None
    * `BLAST_IN_DATETIME_ASC`None
    * `BLAST_IN_DATETIME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('AVAILABLE_PALLET_COUNT_ASC', 'AVAILABLE_PALLET_COUNT_DESC', 'AVAILABLE_QUANTITY_ASC', 'AVAILABLE_QUANTITY_DESC', 'BLAST_IN_DATETIME_ASC', 'BLAST_IN_DATETIME_DESC', 'BLAST_OUT_DATETIME_ASC', 'BLAST_OUT_DATETIME_DESC', 'COMMITTED_PALLET_COUNT_ASC', 'COMMITTED_PALLET_COUNT_DESC', 'COMMITTED_QUANTITY_ASC', 'COMMITTED_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LICENSE_PLATE_NUMBER_ASC', 'CUSTOMER_LICENSE_PLATE_NUMBER_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPLETED_DATE_ASC', 'DEPLETED_DATE_DESC', 'EXPECTED_PALLET_COUNT_ASC', 'EXPECTED_PALLET_COUNT_DESC', 'EXPECTED_QUANTITY_ASC', 'EXPECTED_QUANTITY_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'ID_ASC', 'ID_DESC', 'INVENTORY_STATUS_ASC', 'INVENTORY_STATUS_DESC', 'IS_BLAST_ASC', 'IS_BLAST_DESC', 'IS_DEPLETED_ASC', 'IS_DEPLETED_DESC', 'IS_HPP_ASC', 'IS_HPP_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'NATURAL', 'ON_HAND_PALLET_COUNT_ASC', 'ON_HAND_PALLET_COUNT_DESC', 'ON_HAND_QUANTITY_ASC', 'ON_HAND_QUANTITY_DESC', 'ON_HOLD_PALLET_COUNT_ASC', 'ON_HOLD_PALLET_COUNT_DESC', 'ON_HOLD_QUANTITY_ASC', 'ON_HOLD_QUANTITY_DESC', 'ORIGINAL_PALLET_COUNT_ASC', 'ORIGINAL_PALLET_COUNT_DESC', 'ORIGINAL_QUANTITY_ASC', 'ORIGINAL_QUANTITY_DESC', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'PALLET_RECEIVED_DATE_ASC', 'PALLET_RECEIVED_DATE_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_CUSTOMER_ID_ASC', 'WAREHOUSE_CUSTOMER_ID_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_ASC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_DESC', 'WAREHOUSE_LOCATION_CODE_ASC', 'WAREHOUSE_LOCATION_CODE_DESC', 'WAREHOUSE_LOCATION_ID_ASC', 'WAREHOUSE_LOCATION_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class PalletsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `PalletsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `INVENTORY_STATUS_ASC`None
    * `INVENTORY_STATUS_DESC`None
    * `ORIGINAL_QUANTITY_ASC`None
    * `ORIGINAL_QUANTITY_DESC`None
    * `ORIGINAL_PALLET_COUNT_ASC`None
    * `ORIGINAL_PALLET_COUNT_DESC`None
    * `IS_BLAST_ASC`None
    * `IS_BLAST_DESC`None
    * `BLAST_IN_DATETIME_ASC`None
    * `BLAST_IN_DATETIME_DESC`None
    * `BLAST_OUT_DATETIME_ASC`None
    * `BLAST_OUT_DATETIME_DESC`None
    * `IS_HPP_ASC`None
    * `IS_HPP_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `LOT_CODE_ASC`None
    * `LOT_CODE_DESC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_ASC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_DESC`None
    * `CUSTOMER_LICENSE_PLATE_NUMBER_ASC`None
    * `CUSTOMER_LICENSE_PLATE_NUMBER_DESC`None
    * `IS_DEPLETED_ASC`None
    * `IS_DEPLETED_DESC`None
    * `DEPLETED_DATE_ASC`None
    * `DEPLETED_DATE_DESC`None
    * `CURRENT_QUANTITY_ASC`None
    * `CURRENT_QUANTITY_DESC`None
    * `CURRENT_PALLET_COUNT_ASC`None
    * `CURRENT_PALLET_COUNT_DESC`None
    * `WAREHOUSE_LOCATION_CODE_ASC`None
    * `WAREHOUSE_LOCATION_CODE_DESC`None
    * `HOLD_CODE_ASC`None
    * `HOLD_CODE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `PALLET_RECEIVED_DATE_ASC`None
    * `PALLET_RECEIVED_DATE_DESC`None
    * `COMMITTED_QUANTITY_ASC`None
    * `COMMITTED_QUANTITY_DESC`None
    * `COMMITTED_PALLET_COUNT_ASC`None
    * `COMMITTED_PALLET_COUNT_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `ITEM_CODE_ASC`None
    * `ITEM_CODE_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `PALLET_LOCATION_ID_ASC`None
    * `PALLET_LOCATION_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `HPP_IN_DATETIME_ASC`None
    * `HPP_IN_DATETIME_DESC`None
    * `HPP_OUT_DATETIME_ASC`None
    * `HPP_OUT_DATETIME_DESC`None
    * `IS_IN_ASSIGNED_LOCATION_ASC`None
    * `IS_IN_ASSIGNED_LOCATION_DESC`None
    * `RESERVATION_CODE_ASC`None
    * `RESERVATION_CODE_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BLAST_IN_DATETIME_ASC', 'BLAST_IN_DATETIME_DESC', 'BLAST_OUT_DATETIME_ASC', 'BLAST_OUT_DATETIME_DESC', 'COMMITTED_PALLET_COUNT_ASC', 'COMMITTED_PALLET_COUNT_DESC', 'COMMITTED_QUANTITY_ASC', 'COMMITTED_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CURRENT_PALLET_COUNT_ASC', 'CURRENT_PALLET_COUNT_DESC', 'CURRENT_QUANTITY_ASC', 'CURRENT_QUANTITY_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'CUSTOMER_LICENSE_PLATE_NUMBER_ASC', 'CUSTOMER_LICENSE_PLATE_NUMBER_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'DEPLETED_DATE_ASC', 'DEPLETED_DATE_DESC', 'HOLD_CODE_ASC', 'HOLD_CODE_DESC', 'HPP_IN_DATETIME_ASC', 'HPP_IN_DATETIME_DESC', 'HPP_OUT_DATETIME_ASC', 'HPP_OUT_DATETIME_DESC', 'ID_ASC', 'ID_DESC', 'INVENTORY_STATUS_ASC', 'INVENTORY_STATUS_DESC', 'IS_BLAST_ASC', 'IS_BLAST_DESC', 'IS_DEPLETED_ASC', 'IS_DEPLETED_DESC', 'IS_HPP_ASC', 'IS_HPP_DESC', 'IS_IN_ASSIGNED_LOCATION_ASC', 'IS_IN_ASSIGNED_LOCATION_DESC', 'ITEM_CODE_ASC', 'ITEM_CODE_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LOT_CODE_ASC', 'LOT_CODE_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'NATURAL', 'ORIGINAL_PALLET_COUNT_ASC', 'ORIGINAL_PALLET_COUNT_DESC', 'ORIGINAL_QUANTITY_ASC', 'ORIGINAL_QUANTITY_DESC', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'PALLET_LOCATION_ID_ASC', 'PALLET_LOCATION_ID_DESC', 'PALLET_RECEIVED_DATE_ASC', 'PALLET_RECEIVED_DATE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'RESERVATION_CODE_ASC', 'RESERVATION_CODE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_ASC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_DESC', 'WAREHOUSE_LOCATION_CODE_ASC', 'WAREHOUSE_LOCATION_CODE_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class RecentInboundLoadsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `RecentInboundLoad`.

    Enumeration Choices:

    * `NATURAL`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `LOAD_REFERENCE_NUMBER_ASC`None
    * `LOAD_REFERENCE_NUMBER_DESC`None
    * `TRAILER_NUMBER_ASC`None
    * `TRAILER_NUMBER_DESC`None
    * `LOAD_STATUS_ASC`None
    * `LOAD_STATUS_DESC`None
    * `LOAD_ARRIVAL_TIME_ASC`None
    * `LOAD_ARRIVAL_TIME_DESC`None
    * `LOAD_FINISH_DATETIME_ASC`None
    * `LOAD_FINISH_DATETIME_DESC`None
    * `TRAILER_YARD_DURATION_ASC`None
    * `TRAILER_YARD_DURATION_DESC`None
    * `UNLOAD_DURATION_ASC`None
    * `UNLOAD_DURATION_DESC`None
    * `SUPPLIER_NAME_ASC`None
    * `SUPPLIER_NAME_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `GROSS_WEIGHT_ASC`None
    * `GROSS_WEIGHT_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'GROSS_WEIGHT_ASC', 'GROSS_WEIGHT_DESC', 'LOAD_ARRIVAL_TIME_ASC', 'LOAD_ARRIVAL_TIME_DESC', 'LOAD_FINISH_DATETIME_ASC', 'LOAD_FINISH_DATETIME_DESC', 'LOAD_REFERENCE_NUMBER_ASC', 'LOAD_REFERENCE_NUMBER_DESC', 'LOAD_STATUS_ASC', 'LOAD_STATUS_DESC', 'NATURAL', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'SUPPLIER_NAME_ASC', 'SUPPLIER_NAME_DESC', 'TRAILER_NUMBER_ASC', 'TRAILER_NUMBER_DESC', 'TRAILER_YARD_DURATION_ASC', 'TRAILER_YARD_DURATION_DESC', 'UNLOAD_DURATION_ASC', 'UNLOAD_DURATION_DESC')


class SourceChannelCursorsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `SourceChannelCursor`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `REFLOW_CURSOR_ASC`None
    * `REFLOW_CURSOR_DESC`None
    * `CHANNEL_CURSOR_ASC`None
    * `CHANNEL_CURSOR_DESC`None
    * `HEADERS_ASC`None
    * `HEADERS_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `REFLOW_METADATA_ASC`None
    * `REFLOW_METADATA_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CHANNEL_CURSOR_ASC', 'CHANNEL_CURSOR_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'HEADERS_ASC', 'HEADERS_DESC', 'ID_ASC', 'ID_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'REFLOW_CURSOR_ASC', 'REFLOW_CURSOR_DESC', 'REFLOW_METADATA_ASC', 'REFLOW_METADATA_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class SourceChannelsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `SourceChannel`.

    Enumeration Choices:

    * `NATURAL`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `DESCRIPTION_ASC`None
    * `DESCRIPTION_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `SOURCE_SLUG_ASC`None
    * `SOURCE_SLUG_DESC`None
    * `CURSOR_ID_ASC`None
    * `CURSOR_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CURSOR_ID_ASC', 'CURSOR_ID_DESC', 'DESCRIPTION_ASC', 'DESCRIPTION_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_SLUG_ASC', 'SOURCE_SLUG_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class SourceTypesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `SourceType`.

    Enumeration Choices:

    * `NATURAL`None
    * `SLUG_ASC`None
    * `SLUG_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SLUG_ASC', 'SLUG_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class SourcesOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `Source`.

    Enumeration Choices:

    * `NATURAL`None
    * `SLUG_ASC`None
    * `SLUG_DESC`None
    * `SOURCE_TYPE_ID_ASC`None
    * `SOURCE_TYPE_ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `ASSET_ID_ASC`None
    * `ASSET_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ASSET_ID_ASC', 'ASSET_ID_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SLUG_ASC', 'SLUG_DESC', 'SOURCE_TYPE_ID_ASC', 'SOURCE_TYPE_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class StopLocationsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `StopLocation`.

    Enumeration Choices:

    * `NATURAL`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `CONTACT_FIRST_NAME_ASC`None
    * `CONTACT_FIRST_NAME_DESC`None
    * `CONTACT_LAST_NAME_ASC`None
    * `CONTACT_LAST_NAME_DESC`None
    * `STOP_LOCATION_CODE_ASC`None
    * `STOP_LOCATION_CODE_DESC`None
    * `ADDRESS_1_ASC`None
    * `ADDRESS_1_DESC`None
    * `ADDRESS_2_ASC`None
    * `ADDRESS_2_DESC`None
    * `ADDRESS_3_ASC`None
    * `ADDRESS_3_DESC`None
    * `CITY_ASC`None
    * `CITY_DESC`None
    * `STATE_ASC`None
    * `STATE_DESC`None
    * `ZIP_ASC`None
    * `ZIP_DESC`None
    * `LOCATION_TYPE_ASC`None
    * `LOCATION_TYPE_DESC`None
    * `EFFECTIVE_DATE_ASC`None
    * `EFFECTIVE_DATE_DESC`None
    * `PHONE_ASC`None
    * `PHONE_DESC`None
    * `FAX_ASC`None
    * `FAX_DESC`None
    * `EMAIL_ADDRESS_ASC`None
    * `EMAIL_ADDRESS_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `EXTERNAL_SYSTEM_ID_ASC`None
    * `EXTERNAL_SYSTEM_ID_DESC`None
    * `EXTERNAL_SYSTEM_NAME_ASC`None
    * `EXTERNAL_SYSTEM_NAME_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ADDRESS_1_ASC', 'ADDRESS_1_DESC', 'ADDRESS_2_ASC', 'ADDRESS_2_DESC', 'ADDRESS_3_ASC', 'ADDRESS_3_DESC', 'CITY_ASC', 'CITY_DESC', 'CONTACT_FIRST_NAME_ASC', 'CONTACT_FIRST_NAME_DESC', 'CONTACT_LAST_NAME_ASC', 'CONTACT_LAST_NAME_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EFFECTIVE_DATE_ASC', 'EFFECTIVE_DATE_DESC', 'EMAIL_ADDRESS_ASC', 'EMAIL_ADDRESS_DESC', 'EXTERNAL_SYSTEM_ID_ASC', 'EXTERNAL_SYSTEM_ID_DESC', 'EXTERNAL_SYSTEM_NAME_ASC', 'EXTERNAL_SYSTEM_NAME_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'FAX_ASC', 'FAX_DESC', 'ID_ASC', 'ID_DESC', 'LOCATION_TYPE_ASC', 'LOCATION_TYPE_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PHONE_ASC', 'PHONE_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'STATE_ASC', 'STATE_DESC', 'STOP_LOCATION_CODE_ASC', 'STOP_LOCATION_CODE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'ZIP_ASC', 'ZIP_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class StopLocationsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `StopLocationsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `CONTACT_FIRST_NAME_ASC`None
    * `CONTACT_FIRST_NAME_DESC`None
    * `CONTACT_LAST_NAME_ASC`None
    * `CONTACT_LAST_NAME_DESC`None
    * `STOP_LOCATION_CODE_ASC`None
    * `STOP_LOCATION_CODE_DESC`None
    * `ADDRESS_1_ASC`None
    * `ADDRESS_1_DESC`None
    * `ADDRESS_2_ASC`None
    * `ADDRESS_2_DESC`None
    * `ADDRESS_3_ASC`None
    * `ADDRESS_3_DESC`None
    * `CITY_ASC`None
    * `CITY_DESC`None
    * `STATE_ASC`None
    * `STATE_DESC`None
    * `ZIP_ASC`None
    * `ZIP_DESC`None
    * `LOCATION_TYPE_ASC`None
    * `LOCATION_TYPE_DESC`None
    * `EFFECTIVE_DATE_ASC`None
    * `EFFECTIVE_DATE_DESC`None
    * `PHONE_ASC`None
    * `PHONE_DESC`None
    * `FAX_ASC`None
    * `FAX_DESC`None
    * `EMAIL_ADDRESS_ASC`None
    * `EMAIL_ADDRESS_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `EXTERNAL_SYSTEM_ID_ASC`None
    * `EXTERNAL_SYSTEM_ID_DESC`None
    * `EXTERNAL_SYSTEM_NAME_ASC`None
    * `EXTERNAL_SYSTEM_NAME_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ADDRESS_1_ASC', 'ADDRESS_1_DESC', 'ADDRESS_2_ASC', 'ADDRESS_2_DESC', 'ADDRESS_3_ASC', 'ADDRESS_3_DESC', 'CITY_ASC', 'CITY_DESC', 'CONTACT_FIRST_NAME_ASC', 'CONTACT_FIRST_NAME_DESC', 'CONTACT_LAST_NAME_ASC', 'CONTACT_LAST_NAME_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EFFECTIVE_DATE_ASC', 'EFFECTIVE_DATE_DESC', 'EMAIL_ADDRESS_ASC', 'EMAIL_ADDRESS_DESC', 'EXTERNAL_SYSTEM_ID_ASC', 'EXTERNAL_SYSTEM_ID_DESC', 'EXTERNAL_SYSTEM_NAME_ASC', 'EXTERNAL_SYSTEM_NAME_DESC', 'FAX_ASC', 'FAX_DESC', 'ID_ASC', 'ID_DESC', 'LOCATION_TYPE_ASC', 'LOCATION_TYPE_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PHONE_ASC', 'PHONE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'STATE_ASC', 'STATE_DESC', 'STOP_LOCATION_CODE_ASC', 'STOP_LOCATION_CODE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'ZIP_ASC', 'ZIP_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


String = sgqlc.types.String

class UUID(sgqlc.types.Scalar):
    '''A universally unique identifier as defined by [RFC
    4122](https://tools.ietf.org/html/rfc4122).
    '''
    __schema__ = base


class WarehouseCustomersConfigRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `WarehouseCustomersConfigRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `IS_BULK_CROSSDOCK_ASC`None
    * `IS_BULK_CROSSDOCK_DESC`None
    * `IS_BOL_EXPIRATION_DATE_VISIBLE_ASC`None
    * `IS_BOL_EXPIRATION_DATE_VISIBLE_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IS_BOL_EXPIRATION_DATE_VISIBLE_ASC', 'IS_BOL_EXPIRATION_DATE_VISIBLE_DESC', 'IS_BULK_CROSSDOCK_ASC', 'IS_BULK_CROSSDOCK_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class WarehouseCustomersOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `WarehouseCustomer`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `SALESFORCE_ACCOUNT_NAME_ASC`None
    * `SALESFORCE_ACCOUNT_NAME_DESC`None
    * `FACILITY_ID_ASC`None
    * `FACILITY_ID_DESC`None
    * `CUSTOMER_ENTERPRISE_ID_ASC`None
    * `CUSTOMER_ENTERPRISE_ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `IS_ACTIVE_ASC`None
    * `IS_ACTIVE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ENTERPRISE_ID_ASC', 'CUSTOMER_ENTERPRISE_ID_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'FACILITY_ID_ASC', 'FACILITY_ID_DESC', 'ID_ASC', 'ID_DESC', 'IS_ACTIVE_ASC', 'IS_ACTIVE_DESC', 'NATURAL', 'SALESFORCE_ACCOUNT_NAME_ASC', 'SALESFORCE_ACCOUNT_NAME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class WarehouseCustomersRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `WarehouseCustomersRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `IS_ACTIVE_ASC`None
    * `IS_ACTIVE_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `CUSTOMER_ADDRESS_ASC`None
    * `CUSTOMER_ADDRESS_DESC`None
    * `CUSTOMER_STATE_ASC`None
    * `CUSTOMER_STATE_DESC`None
    * `CUSTOMER_BILLING_CONTACT_NAME_ASC`None
    * `CUSTOMER_BILLING_CONTACT_NAME_DESC`None
    * `BILLING_ADDRESS_ASC`None
    * `BILLING_ADDRESS_DESC`None
    * `CUSTOMER_ZIP_ASC`None
    * `CUSTOMER_ZIP_DESC`None
    * `BILLING_CITY_ASC`None
    * `BILLING_CITY_DESC`None
    * `BILLING_STATE_ASC`None
    * `BILLING_STATE_DESC`None
    * `BILLING_ZIP_ASC`None
    * `BILLING_ZIP_DESC`None
    * `CUSTOMER_NAME_ASC`None
    * `CUSTOMER_NAME_DESC`None
    * `CUSTOMER_CITY_ASC`None
    * `CUSTOMER_CITY_DESC`None
    * `CUSTOMER_COUNTRY_ASC`None
    * `CUSTOMER_COUNTRY_DESC`None
    * `BILLING_COUNTRY_ASC`None
    * `BILLING_COUNTRY_DESC`None
    * `PHONE_NUMBER_1_ASC`None
    * `PHONE_NUMBER_1_DESC`None
    * `PHONE_TYPE_1_ASC`None
    * `PHONE_TYPE_1_DESC`None
    * `PHONE_NUMBER_2_ASC`None
    * `PHONE_NUMBER_2_DESC`None
    * `PHONE_TYPE_2_ASC`None
    * `PHONE_TYPE_2_DESC`None
    * `EMAIL_ASC`None
    * `EMAIL_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `IS_BROKER_ASC`None
    * `IS_BROKER_DESC`None
    * `CUSTOMER_ADDRESS1_ASC`None
    * `CUSTOMER_ADDRESS1_DESC`None
    * `CUSTOMER_ADDRESS2_ASC`None
    * `CUSTOMER_ADDRESS2_DESC`None
    * `USES_METRIC_REPORTING_ASC`None
    * `USES_METRIC_REPORTING_DESC`None
    * `BILLING_WORK_PHONE_ASC`None
    * `BILLING_WORK_PHONE_DESC`None
    * `BILLING_FAX_ASC`None
    * `BILLING_FAX_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('BILLING_ADDRESS_ASC', 'BILLING_ADDRESS_DESC', 'BILLING_CITY_ASC', 'BILLING_CITY_DESC', 'BILLING_COUNTRY_ASC', 'BILLING_COUNTRY_DESC', 'BILLING_FAX_ASC', 'BILLING_FAX_DESC', 'BILLING_STATE_ASC', 'BILLING_STATE_DESC', 'BILLING_WORK_PHONE_ASC', 'BILLING_WORK_PHONE_DESC', 'BILLING_ZIP_ASC', 'BILLING_ZIP_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_ADDRESS1_ASC', 'CUSTOMER_ADDRESS1_DESC', 'CUSTOMER_ADDRESS2_ASC', 'CUSTOMER_ADDRESS2_DESC', 'CUSTOMER_ADDRESS_ASC', 'CUSTOMER_ADDRESS_DESC', 'CUSTOMER_BILLING_CONTACT_NAME_ASC', 'CUSTOMER_BILLING_CONTACT_NAME_DESC', 'CUSTOMER_CITY_ASC', 'CUSTOMER_CITY_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_COUNTRY_ASC', 'CUSTOMER_COUNTRY_DESC', 'CUSTOMER_NAME_ASC', 'CUSTOMER_NAME_DESC', 'CUSTOMER_STATE_ASC', 'CUSTOMER_STATE_DESC', 'CUSTOMER_ZIP_ASC', 'CUSTOMER_ZIP_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'EMAIL_ASC', 'EMAIL_DESC', 'ID_ASC', 'ID_DESC', 'IS_ACTIVE_ASC', 'IS_ACTIVE_DESC', 'IS_BROKER_ASC', 'IS_BROKER_DESC', 'NATURAL', 'PHONE_NUMBER_1_ASC', 'PHONE_NUMBER_1_DESC', 'PHONE_NUMBER_2_ASC', 'PHONE_NUMBER_2_DESC', 'PHONE_TYPE_1_ASC', 'PHONE_TYPE_1_DESC', 'PHONE_TYPE_2_ASC', 'PHONE_TYPE_2_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'USES_METRIC_REPORTING_ASC', 'USES_METRIC_REPORTING_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class WarehousePickActivitiesRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `WarehousePickActivitiesRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `ACTIVITY_TYPE_ASC`None
    * `ACTIVITY_TYPE_DESC`None
    * `PALLET_ID_ASC`None
    * `PALLET_ID_DESC`None
    * `SHIP_DATETIME_ASC`None
    * `SHIP_DATETIME_DESC`None
    * `CASE_QUANTITY_ASC`None
    * `CASE_QUANTITY_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `LINE_NUMBER_ASC`None
    * `LINE_NUMBER_DESC`None
    * `LOT_ID_ASC`None
    * `LOT_ID_DESC`None
    * `PALLET_CODE_ASC`None
    * `PALLET_CODE_DESC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_ASC`None
    * `WAREHOUSE_LICENSE_PLATE_NUMBER_DESC`None
    * `PALLET_LOCATION_NAME_ASC`None
    * `PALLET_LOCATION_NAME_DESC`None
    * `PALLET_LOCATION_ID_ASC`None
    * `PALLET_LOCATION_ID_DESC`None
    * `ITEM_ID_ASC`None
    * `ITEM_ID_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('ACTIVITY_TYPE_ASC', 'ACTIVITY_TYPE_DESC', 'CASE_QUANTITY_ASC', 'CASE_QUANTITY_DESC', 'CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'ITEM_ID_ASC', 'ITEM_ID_DESC', 'LINE_NUMBER_ASC', 'LINE_NUMBER_DESC', 'LOT_ID_ASC', 'LOT_ID_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PALLET_CODE_ASC', 'PALLET_CODE_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PALLET_ID_ASC', 'PALLET_ID_DESC', 'PALLET_LOCATION_ID_ASC', 'PALLET_LOCATION_ID_DESC', 'PALLET_LOCATION_NAME_ASC', 'PALLET_LOCATION_NAME_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SHIP_DATETIME_ASC', 'SHIP_DATETIME_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_ASC', 'WAREHOUSE_LICENSE_PLATE_NUMBER_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class WmsFacilityDefaultsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `WmsFacilityDefaultsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `WAREHOUSE_FACILITY_NAME_ASC`None
    * `WAREHOUSE_FACILITY_NAME_DESC`None
    * `WAREHOUSE_ADDRESS_LINE1_ASC`None
    * `WAREHOUSE_ADDRESS_LINE1_DESC`None
    * `WAREHOUSE_ADDRESS_LINE2_ASC`None
    * `WAREHOUSE_ADDRESS_LINE2_DESC`None
    * `WAREHOUSE_CITY_ASC`None
    * `WAREHOUSE_CITY_DESC`None
    * `WAREHOUSE_STATE_ASC`None
    * `WAREHOUSE_STATE_DESC`None
    * `WAREHOUSE_ZIP_CODE_ASC`None
    * `WAREHOUSE_ZIP_CODE_DESC`None
    * `WAREHOUSE_TELEPHONE_NUMBER_ASC`None
    * `WAREHOUSE_TELEPHONE_NUMBER_DESC`None
    * `WAREHOUSE_FAX_NUMBER_ASC`None
    * `WAREHOUSE_FAX_NUMBER_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `WAREHOUSE_FACILITY_LEGAL_NAME_ASC`None
    * `WAREHOUSE_FACILITY_LEGAL_NAME_DESC`None
    * `WAREHOUSE_ADDRESS_LINE3_ASC`None
    * `WAREHOUSE_ADDRESS_LINE3_DESC`None
    * `IS_BOL_EXPIRATION_DATE_VISIBLE_ASC`None
    * `IS_BOL_EXPIRATION_DATE_VISIBLE_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IS_BOL_EXPIRATION_DATE_VISIBLE_ASC', 'IS_BOL_EXPIRATION_DATE_VISIBLE_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_ADDRESS_LINE1_ASC', 'WAREHOUSE_ADDRESS_LINE1_DESC', 'WAREHOUSE_ADDRESS_LINE2_ASC', 'WAREHOUSE_ADDRESS_LINE2_DESC', 'WAREHOUSE_ADDRESS_LINE3_ASC', 'WAREHOUSE_ADDRESS_LINE3_DESC', 'WAREHOUSE_CITY_ASC', 'WAREHOUSE_CITY_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_FACILITY_LEGAL_NAME_ASC', 'WAREHOUSE_FACILITY_LEGAL_NAME_DESC', 'WAREHOUSE_FACILITY_NAME_ASC', 'WAREHOUSE_FACILITY_NAME_DESC', 'WAREHOUSE_FAX_NUMBER_ASC', 'WAREHOUSE_FAX_NUMBER_DESC', 'WAREHOUSE_STATE_ASC', 'WAREHOUSE_STATE_DESC', 'WAREHOUSE_TELEPHONE_NUMBER_ASC', 'WAREHOUSE_TELEPHONE_NUMBER_DESC', 'WAREHOUSE_ZIP_CODE_ASC', 'WAREHOUSE_ZIP_CODE_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class WmsSystemsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `WmsSystem`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `SLUG_ASC`None
    * `SLUG_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'ID_ASC', 'ID_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SLUG_ASC', 'SLUG_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')


class WoodenPalletTransactionsRawsOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `WoodenPalletTransactionsRaw`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `SOURCE_SYSTEM_ID_ASC`None
    * `SOURCE_SYSTEM_ID_DESC`None
    * `WAREHOUSE_FACILITY_ID_ASC`None
    * `WAREHOUSE_FACILITY_ID_DESC`None
    * `TRANSACTION_TYPE_ASC`None
    * `TRANSACTION_TYPE_DESC`None
    * `TRANSACTION_DESCRIPTION_ASC`None
    * `TRANSACTION_DESCRIPTION_DESC`None
    * `CUSTOMER_CODE_ASC`None
    * `CUSTOMER_CODE_DESC`None
    * `CUSTOMER_ID_ASC`None
    * `CUSTOMER_ID_DESC`None
    * `WAREHOUSE_ORDER_NUMBER_ASC`None
    * `WAREHOUSE_ORDER_NUMBER_DESC`None
    * `OUTBOUND_ORDER_ID_ASC`None
    * `OUTBOUND_ORDER_ID_DESC`None
    * `PALLET_TYPE_ASC`None
    * `PALLET_TYPE_DESC`None
    * `PALLET_DESCRIPTION_ASC`None
    * `PALLET_DESCRIPTION_DESC`None
    * `TRANSACTION_DATE_ASC`None
    * `TRANSACTION_DATE_DESC`None
    * `PALLET_COUNT_ASC`None
    * `PALLET_COUNT_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DELETED_AT_ASC`None
    * `DELETED_AT_DESC`None
    * `SOURCE_ROW_ID_ASC`None
    * `SOURCE_ROW_ID_DESC`None
    * `_VERSION_ASC`None
    * `_VERSION_DESC`None
    * `_ID_ASC`None
    * `_ID_DESC`None
    * `IS_ORDER_BASED_ASC`None
    * `IS_ORDER_BASED_DESC`None
    * `IS_ARCHIVED_ASC`None
    * `IS_ARCHIVED_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'CUSTOMER_CODE_ASC', 'CUSTOMER_CODE_DESC', 'CUSTOMER_ID_ASC', 'CUSTOMER_ID_DESC', 'DELETED_AT_ASC', 'DELETED_AT_DESC', 'ID_ASC', 'ID_DESC', 'IS_ARCHIVED_ASC', 'IS_ARCHIVED_DESC', 'IS_ORDER_BASED_ASC', 'IS_ORDER_BASED_DESC', 'NATURAL', 'OUTBOUND_ORDER_ID_ASC', 'OUTBOUND_ORDER_ID_DESC', 'PALLET_COUNT_ASC', 'PALLET_COUNT_DESC', 'PALLET_DESCRIPTION_ASC', 'PALLET_DESCRIPTION_DESC', 'PALLET_TYPE_ASC', 'PALLET_TYPE_DESC', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'SOURCE_ROW_ID_ASC', 'SOURCE_ROW_ID_DESC', 'SOURCE_SYSTEM_ID_ASC', 'SOURCE_SYSTEM_ID_DESC', 'TRANSACTION_DATE_ASC', 'TRANSACTION_DATE_DESC', 'TRANSACTION_DESCRIPTION_ASC', 'TRANSACTION_DESCRIPTION_DESC', 'TRANSACTION_TYPE_ASC', 'TRANSACTION_TYPE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC', 'WAREHOUSE_FACILITY_ID_ASC', 'WAREHOUSE_FACILITY_ID_DESC', 'WAREHOUSE_ORDER_NUMBER_ASC', 'WAREHOUSE_ORDER_NUMBER_DESC', '_ID_ASC', '_ID_DESC', '_VERSION_ASC', '_VERSION_DESC')


class WorkdayCostCentersOrderBy(sgqlc.types.Enum):
    '''Methods to use when ordering `WorkdayCostCenter`.

    Enumeration Choices:

    * `NATURAL`None
    * `ID_ASC`None
    * `ID_DESC`None
    * `NAME_ASC`None
    * `NAME_DESC`None
    * `CREATED_AT_ASC`None
    * `CREATED_AT_DESC`None
    * `UPDATED_AT_ASC`None
    * `UPDATED_AT_DESC`None
    * `DAYFORCE_ACTIVE_START_ASC`None
    * `DAYFORCE_ACTIVE_START_DESC`None
    * `GO_LIVE_DATE_ASC`None
    * `GO_LIVE_DATE_DESC`None
    * `TOTAL_PALLET_POSITIONS_ASC`None
    * `TOTAL_PALLET_POSITIONS_DESC`None
    * `TIR_GO_LIVE_DATE_ASC`None
    * `TIR_GO_LIVE_DATE_DESC`None
    * `TURNOVER_GO_LIVE_DATE_ASC`None
    * `TURNOVER_GO_LIVE_DATE_DESC`None
    * `PRIMARY_KEY_ASC`None
    * `PRIMARY_KEY_DESC`None
    '''
    __schema__ = base
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'DAYFORCE_ACTIVE_START_ASC', 'DAYFORCE_ACTIVE_START_DESC', 'GO_LIVE_DATE_ASC', 'GO_LIVE_DATE_DESC', 'ID_ASC', 'ID_DESC', 'NAME_ASC', 'NAME_DESC', 'NATURAL', 'PRIMARY_KEY_ASC', 'PRIMARY_KEY_DESC', 'TIR_GO_LIVE_DATE_ASC', 'TIR_GO_LIVE_DATE_DESC', 'TOTAL_PALLET_POSITIONS_ASC', 'TOTAL_PALLET_POSITIONS_DESC', 'TURNOVER_GO_LIVE_DATE_ASC', 'TURNOVER_GO_LIVE_DATE_DESC', 'UPDATED_AT_ASC', 'UPDATED_AT_DESC')



########################################################################
# Input Objects
########################################################################
class AggregateWarehouseUtilByCustomerRawCondition(sgqlc.types.Input):
    '''A condition to be used against
    `AggregateWarehouseUtilByCustomerRaw` object types. All fields are
    tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'snapshot_date', 'total_filled_pallet_locations', 'total_pallets_on_hand', 'parent_aggregate_warehouse_util_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    snapshot_date = sgqlc.types.Field(Date, graphql_name='snapshotDate')
    '''Checks for equality with the object’s `snapshotDate` field.'''

    total_filled_pallet_locations = sgqlc.types.Field(Float, graphql_name='totalFilledPalletLocations')
    '''Checks for equality with the object’s `totalFilledPalletLocations`
    field.
    '''

    total_pallets_on_hand = sgqlc.types.Field(Int, graphql_name='totalPalletsOnHand')
    '''Checks for equality with the object’s `totalPalletsOnHand` field.'''

    parent_aggregate_warehouse_util_id = sgqlc.types.Field(String, graphql_name='parentAggregateWarehouseUtilId')
    '''Checks for equality with the object’s
    `parentAggregateWarehouseUtilId` field.
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''



class AggregateWarehouseUtilByCustomerRawFilter(sgqlc.types.Input):
    '''A filter to be used against `AggregateWarehouseUtilByCustomerRaw`
    object types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'snapshot_date', 'total_filled_pallet_locations', 'total_pallets_on_hand', 'parent_aggregate_warehouse_util_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    snapshot_date = sgqlc.types.Field('DateFilter', graphql_name='snapshotDate')
    '''Filter by the object’s `snapshotDate` field.'''

    total_filled_pallet_locations = sgqlc.types.Field('FloatFilter', graphql_name='totalFilledPalletLocations')
    '''Filter by the object’s `totalFilledPalletLocations` field.'''

    total_pallets_on_hand = sgqlc.types.Field('IntFilter', graphql_name='totalPalletsOnHand')
    '''Filter by the object’s `totalPalletsOnHand` field.'''

    parent_aggregate_warehouse_util_id = sgqlc.types.Field('StringFilter', graphql_name='parentAggregateWarehouseUtilId')
    '''Filter by the object’s `parentAggregateWarehouseUtilId` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field('BigIntFilter', graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseUtilByCustomerRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseUtilByCustomerRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('AggregateWarehouseUtilByCustomerRawFilter', graphql_name='not')
    '''Negates the expression.'''



class AggregateWarehouseUtilByCustomerRawInput(sgqlc.types.Input):
    '''An input for mutations affecting
    `AggregateWarehouseUtilByCustomerRaw`
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'snapshot_date', 'total_filled_pallet_locations', 'total_pallets_on_hand', 'parent_aggregate_warehouse_util_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    snapshot_date = sgqlc.types.Field(Date, graphql_name='snapshotDate')
    '''Date for the warehouse utilization snapshot'''

    total_filled_pallet_locations = sgqlc.types.Field(Float, graphql_name='totalFilledPalletLocations')
    '''Total number of pallet locations filled by this customer. (If more
    than one customer has pallets in the same location, a non-integer
    value may be possible)
    '''

    total_pallets_on_hand = sgqlc.types.Field(Int, graphql_name='totalPalletsOnHand')
    '''Total number of pallets with product for the customer in the
    warehouse.
    '''

    parent_aggregate_warehouse_util_id = sgqlc.types.Field(String, graphql_name='parentAggregateWarehouseUtilId')
    '''Identifier of warehouse level utilization record'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class AggregateWarehouseUtilByCustomerRawPatch(sgqlc.types.Input):
    '''Represents an update to a `AggregateWarehouseUtilByCustomerRaw`.
    Fields that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'snapshot_date', 'total_filled_pallet_locations', 'total_pallets_on_hand', 'parent_aggregate_warehouse_util_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    snapshot_date = sgqlc.types.Field(Date, graphql_name='snapshotDate')
    '''Date for the warehouse utilization snapshot'''

    total_filled_pallet_locations = sgqlc.types.Field(Float, graphql_name='totalFilledPalletLocations')
    '''Total number of pallet locations filled by this customer. (If more
    than one customer has pallets in the same location, a non-integer
    value may be possible)
    '''

    total_pallets_on_hand = sgqlc.types.Field(Int, graphql_name='totalPalletsOnHand')
    '''Total number of pallets with product for the customer in the
    warehouse.
    '''

    parent_aggregate_warehouse_util_id = sgqlc.types.Field(String, graphql_name='parentAggregateWarehouseUtilId')
    '''Identifier of warehouse level utilization record'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class AggregateWarehouseUtilRawCondition(sgqlc.types.Input):
    '''A condition to be used against `AggregateWarehouseUtilRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'snapshot_date', 'total_pallet_locations', 'total_filled_pallet_locations', 'total_pallets_on_hand', 'has_customer_aggregates', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    snapshot_date = sgqlc.types.Field(Date, graphql_name='snapshotDate')
    '''Checks for equality with the object’s `snapshotDate` field.'''

    total_pallet_locations = sgqlc.types.Field(Int, graphql_name='totalPalletLocations')
    '''Checks for equality with the object’s `totalPalletLocations`
    field.
    '''

    total_filled_pallet_locations = sgqlc.types.Field(Float, graphql_name='totalFilledPalletLocations')
    '''Checks for equality with the object’s `totalFilledPalletLocations`
    field.
    '''

    total_pallets_on_hand = sgqlc.types.Field(Int, graphql_name='totalPalletsOnHand')
    '''Checks for equality with the object’s `totalPalletsOnHand` field.'''

    has_customer_aggregates = sgqlc.types.Field(Boolean, graphql_name='hasCustomerAggregates')
    '''Checks for equality with the object’s `hasCustomerAggregates`
    field.
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''



class AggregateWarehouseUtilRawFilter(sgqlc.types.Input):
    '''A filter to be used against `AggregateWarehouseUtilRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'snapshot_date', 'total_pallet_locations', 'total_filled_pallet_locations', 'total_pallets_on_hand', 'has_customer_aggregates', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    snapshot_date = sgqlc.types.Field('DateFilter', graphql_name='snapshotDate')
    '''Filter by the object’s `snapshotDate` field.'''

    total_pallet_locations = sgqlc.types.Field('IntFilter', graphql_name='totalPalletLocations')
    '''Filter by the object’s `totalPalletLocations` field.'''

    total_filled_pallet_locations = sgqlc.types.Field('FloatFilter', graphql_name='totalFilledPalletLocations')
    '''Filter by the object’s `totalFilledPalletLocations` field.'''

    total_pallets_on_hand = sgqlc.types.Field('IntFilter', graphql_name='totalPalletsOnHand')
    '''Filter by the object’s `totalPalletsOnHand` field.'''

    has_customer_aggregates = sgqlc.types.Field('BooleanFilter', graphql_name='hasCustomerAggregates')
    '''Filter by the object’s `hasCustomerAggregates` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field('BigIntFilter', graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseUtilRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseUtilRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('AggregateWarehouseUtilRawFilter', graphql_name='not')
    '''Negates the expression.'''



class AggregateWarehouseUtilRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `AggregateWarehouseUtilRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'snapshot_date', 'total_pallet_locations', 'total_filled_pallet_locations', 'total_pallets_on_hand', 'has_customer_aggregates', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    snapshot_date = sgqlc.types.Field(Date, graphql_name='snapshotDate')
    '''Date for the warehouse utilization snapshot'''

    total_pallet_locations = sgqlc.types.Field(Int, graphql_name='totalPalletLocations')
    '''Total number of pallet locations in the warehouse that allow
    customer product
    '''

    total_filled_pallet_locations = sgqlc.types.Field(Float, graphql_name='totalFilledPalletLocations')
    '''Total number of pallet locations filled. (This is used for the
    Location Occupancy KPI)
    '''

    total_pallets_on_hand = sgqlc.types.Field(Int, graphql_name='totalPalletsOnHand')
    '''Total number of customer pallets in the warehouse.  (This is used
    for Capacity Utilization KPI)
    '''

    has_customer_aggregates = sgqlc.types.Field(Boolean, graphql_name='hasCustomerAggregates')
    '''Flag for whether a customer breakdown exists in
    aggregate_warehouse_util_by_customer
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class AggregateWarehouseUtilRawPatch(sgqlc.types.Input):
    '''Represents an update to a `AggregateWarehouseUtilRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'snapshot_date', 'total_pallet_locations', 'total_filled_pallet_locations', 'total_pallets_on_hand', 'has_customer_aggregates', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    snapshot_date = sgqlc.types.Field(Date, graphql_name='snapshotDate')
    '''Date for the warehouse utilization snapshot'''

    total_pallet_locations = sgqlc.types.Field(Int, graphql_name='totalPalletLocations')
    '''Total number of pallet locations in the warehouse that allow
    customer product
    '''

    total_filled_pallet_locations = sgqlc.types.Field(Float, graphql_name='totalFilledPalletLocations')
    '''Total number of pallet locations filled. (This is used for the
    Location Occupancy KPI)
    '''

    total_pallets_on_hand = sgqlc.types.Field(Int, graphql_name='totalPalletsOnHand')
    '''Total number of customer pallets in the warehouse.  (This is used
    for Capacity Utilization KPI)
    '''

    has_customer_aggregates = sgqlc.types.Field(Boolean, graphql_name='hasCustomerAggregates')
    '''Flag for whether a customer breakdown exists in
    aggregate_warehouse_util_by_customer
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class AggregateWarehouseVolumeByCustomerRawCondition(sgqlc.types.Input):
    '''A condition to be used against
    `AggregateWarehouseVolumeByCustomerRaw` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'finished_date', 'inbound_gross_weight', 'inbound_net_weight', 'inbound_case_quantity', 'inbound_pallets', 'inbound_loads', 'outbound_gross_weight', 'outbound_net_weight', 'outbound_case_quantity', 'outbound_pallets', 'outbound_loads', 'number_of_picks', 'number_of_cases_picked', 'parent_aggregate_warehouse_volume_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    finished_date = sgqlc.types.Field(Date, graphql_name='finishedDate')
    '''Checks for equality with the object’s `finishedDate` field.'''

    inbound_gross_weight = sgqlc.types.Field(Float, graphql_name='inboundGrossWeight')
    '''Checks for equality with the object’s `inboundGrossWeight` field.'''

    inbound_net_weight = sgqlc.types.Field(Float, graphql_name='inboundNetWeight')
    '''Checks for equality with the object’s `inboundNetWeight` field.'''

    inbound_case_quantity = sgqlc.types.Field(Int, graphql_name='inboundCaseQuantity')
    '''Checks for equality with the object’s `inboundCaseQuantity` field.'''

    inbound_pallets = sgqlc.types.Field(Int, graphql_name='inboundPallets')
    '''Checks for equality with the object’s `inboundPallets` field.'''

    inbound_loads = sgqlc.types.Field(Int, graphql_name='inboundLoads')
    '''Checks for equality with the object’s `inboundLoads` field.'''

    outbound_gross_weight = sgqlc.types.Field(Float, graphql_name='outboundGrossWeight')
    '''Checks for equality with the object’s `outboundGrossWeight` field.'''

    outbound_net_weight = sgqlc.types.Field(Float, graphql_name='outboundNetWeight')
    '''Checks for equality with the object’s `outboundNetWeight` field.'''

    outbound_case_quantity = sgqlc.types.Field(Int, graphql_name='outboundCaseQuantity')
    '''Checks for equality with the object’s `outboundCaseQuantity`
    field.
    '''

    outbound_pallets = sgqlc.types.Field(Int, graphql_name='outboundPallets')
    '''Checks for equality with the object’s `outboundPallets` field.'''

    outbound_loads = sgqlc.types.Field(Int, graphql_name='outboundLoads')
    '''Checks for equality with the object’s `outboundLoads` field.'''

    number_of_picks = sgqlc.types.Field(Int, graphql_name='numberOfPicks')
    '''Checks for equality with the object’s `numberOfPicks` field.'''

    number_of_cases_picked = sgqlc.types.Field(Int, graphql_name='numberOfCasesPicked')
    '''Checks for equality with the object’s `numberOfCasesPicked` field.'''

    parent_aggregate_warehouse_volume_id = sgqlc.types.Field(String, graphql_name='parentAggregateWarehouseVolumeId')
    '''Checks for equality with the object’s
    `parentAggregateWarehouseVolumeId` field.
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''



class AggregateWarehouseVolumeByCustomerRawFilter(sgqlc.types.Input):
    '''A filter to be used against
    `AggregateWarehouseVolumeByCustomerRaw` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'finished_date', 'inbound_gross_weight', 'inbound_net_weight', 'inbound_case_quantity', 'inbound_pallets', 'inbound_loads', 'outbound_gross_weight', 'outbound_net_weight', 'outbound_case_quantity', 'outbound_pallets', 'outbound_loads', 'number_of_picks', 'number_of_cases_picked', 'parent_aggregate_warehouse_volume_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    finished_date = sgqlc.types.Field('DateFilter', graphql_name='finishedDate')
    '''Filter by the object’s `finishedDate` field.'''

    inbound_gross_weight = sgqlc.types.Field('FloatFilter', graphql_name='inboundGrossWeight')
    '''Filter by the object’s `inboundGrossWeight` field.'''

    inbound_net_weight = sgqlc.types.Field('FloatFilter', graphql_name='inboundNetWeight')
    '''Filter by the object’s `inboundNetWeight` field.'''

    inbound_case_quantity = sgqlc.types.Field('IntFilter', graphql_name='inboundCaseQuantity')
    '''Filter by the object’s `inboundCaseQuantity` field.'''

    inbound_pallets = sgqlc.types.Field('IntFilter', graphql_name='inboundPallets')
    '''Filter by the object’s `inboundPallets` field.'''

    inbound_loads = sgqlc.types.Field('IntFilter', graphql_name='inboundLoads')
    '''Filter by the object’s `inboundLoads` field.'''

    outbound_gross_weight = sgqlc.types.Field('FloatFilter', graphql_name='outboundGrossWeight')
    '''Filter by the object’s `outboundGrossWeight` field.'''

    outbound_net_weight = sgqlc.types.Field('FloatFilter', graphql_name='outboundNetWeight')
    '''Filter by the object’s `outboundNetWeight` field.'''

    outbound_case_quantity = sgqlc.types.Field('IntFilter', graphql_name='outboundCaseQuantity')
    '''Filter by the object’s `outboundCaseQuantity` field.'''

    outbound_pallets = sgqlc.types.Field('IntFilter', graphql_name='outboundPallets')
    '''Filter by the object’s `outboundPallets` field.'''

    outbound_loads = sgqlc.types.Field('IntFilter', graphql_name='outboundLoads')
    '''Filter by the object’s `outboundLoads` field.'''

    number_of_picks = sgqlc.types.Field('IntFilter', graphql_name='numberOfPicks')
    '''Filter by the object’s `numberOfPicks` field.'''

    number_of_cases_picked = sgqlc.types.Field('IntFilter', graphql_name='numberOfCasesPicked')
    '''Filter by the object’s `numberOfCasesPicked` field.'''

    parent_aggregate_warehouse_volume_id = sgqlc.types.Field('StringFilter', graphql_name='parentAggregateWarehouseVolumeId')
    '''Filter by the object’s `parentAggregateWarehouseVolumeId` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field('BigIntFilter', graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseVolumeByCustomerRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseVolumeByCustomerRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('AggregateWarehouseVolumeByCustomerRawFilter', graphql_name='not')
    '''Negates the expression.'''



class AggregateWarehouseVolumeByCustomerRawInput(sgqlc.types.Input):
    '''An input for mutations affecting
    `AggregateWarehouseVolumeByCustomerRaw`
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'finished_date', 'inbound_gross_weight', 'inbound_net_weight', 'inbound_case_quantity', 'inbound_pallets', 'inbound_loads', 'outbound_gross_weight', 'outbound_net_weight', 'outbound_case_quantity', 'outbound_pallets', 'outbound_loads', 'number_of_picks', 'number_of_cases_picked', 'parent_aggregate_warehouse_volume_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    finished_date = sgqlc.types.Field(Date, graphql_name='finishedDate')
    '''Date the reported volume was shipped or received'''

    inbound_gross_weight = sgqlc.types.Field(Float, graphql_name='inboundGrossWeight')
    '''Gross weight of the received product (in pounds)'''

    inbound_net_weight = sgqlc.types.Field(Float, graphql_name='inboundNetWeight')
    '''Net weight of the received product (in pounds)'''

    inbound_case_quantity = sgqlc.types.Field(Int, graphql_name='inboundCaseQuantity')
    '''Number of cases of product received'''

    inbound_pallets = sgqlc.types.Field(Int, graphql_name='inboundPallets')
    '''Number of pallets received'''

    inbound_loads = sgqlc.types.Field(Int, graphql_name='inboundLoads')
    '''Number of inbound truck loads completed'''

    outbound_gross_weight = sgqlc.types.Field(Float, graphql_name='outboundGrossWeight')
    '''Gross weight of the shipped product (in pounds)'''

    outbound_net_weight = sgqlc.types.Field(Float, graphql_name='outboundNetWeight')
    '''Net weight of the shipped product (in pounds)'''

    outbound_case_quantity = sgqlc.types.Field(Int, graphql_name='outboundCaseQuantity')
    '''Number of cases shipped'''

    outbound_pallets = sgqlc.types.Field(Int, graphql_name='outboundPallets')
    '''Number of pallets shipped'''

    outbound_loads = sgqlc.types.Field(Int, graphql_name='outboundLoads')
    '''Number of outbound truck loads completed'''

    number_of_picks = sgqlc.types.Field(Int, graphql_name='numberOfPicks')
    '''Number of pick activities'''

    number_of_cases_picked = sgqlc.types.Field(Int, graphql_name='numberOfCasesPicked')
    '''Total number of cases picked during the pick activities'''

    parent_aggregate_warehouse_volume_id = sgqlc.types.Field(String, graphql_name='parentAggregateWarehouseVolumeId')
    '''Identifier of warehouse level volume record'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class AggregateWarehouseVolumeByCustomerRawPatch(sgqlc.types.Input):
    '''Represents an update to a `AggregateWarehouseVolumeByCustomerRaw`.
    Fields that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'finished_date', 'inbound_gross_weight', 'inbound_net_weight', 'inbound_case_quantity', 'inbound_pallets', 'inbound_loads', 'outbound_gross_weight', 'outbound_net_weight', 'outbound_case_quantity', 'outbound_pallets', 'outbound_loads', 'number_of_picks', 'number_of_cases_picked', 'parent_aggregate_warehouse_volume_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    finished_date = sgqlc.types.Field(Date, graphql_name='finishedDate')
    '''Date the reported volume was shipped or received'''

    inbound_gross_weight = sgqlc.types.Field(Float, graphql_name='inboundGrossWeight')
    '''Gross weight of the received product (in pounds)'''

    inbound_net_weight = sgqlc.types.Field(Float, graphql_name='inboundNetWeight')
    '''Net weight of the received product (in pounds)'''

    inbound_case_quantity = sgqlc.types.Field(Int, graphql_name='inboundCaseQuantity')
    '''Number of cases of product received'''

    inbound_pallets = sgqlc.types.Field(Int, graphql_name='inboundPallets')
    '''Number of pallets received'''

    inbound_loads = sgqlc.types.Field(Int, graphql_name='inboundLoads')
    '''Number of inbound truck loads completed'''

    outbound_gross_weight = sgqlc.types.Field(Float, graphql_name='outboundGrossWeight')
    '''Gross weight of the shipped product (in pounds)'''

    outbound_net_weight = sgqlc.types.Field(Float, graphql_name='outboundNetWeight')
    '''Net weight of the shipped product (in pounds)'''

    outbound_case_quantity = sgqlc.types.Field(Int, graphql_name='outboundCaseQuantity')
    '''Number of cases shipped'''

    outbound_pallets = sgqlc.types.Field(Int, graphql_name='outboundPallets')
    '''Number of pallets shipped'''

    outbound_loads = sgqlc.types.Field(Int, graphql_name='outboundLoads')
    '''Number of outbound truck loads completed'''

    number_of_picks = sgqlc.types.Field(Int, graphql_name='numberOfPicks')
    '''Number of pick activities'''

    number_of_cases_picked = sgqlc.types.Field(Int, graphql_name='numberOfCasesPicked')
    '''Total number of cases picked during the pick activities'''

    parent_aggregate_warehouse_volume_id = sgqlc.types.Field(String, graphql_name='parentAggregateWarehouseVolumeId')
    '''Identifier of warehouse level volume record'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class AggregateWarehouseVolumeRawCondition(sgqlc.types.Input):
    '''A condition to be used against `AggregateWarehouseVolumeRaw`
    object types. All fields are tested for equality and combined with
    a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'finished_date', 'inbound_gross_weight', 'inbound_net_weight', 'inbound_case_quantity', 'inbound_pallets', 'inbound_loads', 'outbound_gross_weight', 'outbound_net_weight', 'outbound_case_quantity', 'outbound_pallets', 'outbound_loads', 'number_of_picks', 'number_of_cases_picked', 'has_customer_aggregates', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    finished_date = sgqlc.types.Field(Date, graphql_name='finishedDate')
    '''Checks for equality with the object’s `finishedDate` field.'''

    inbound_gross_weight = sgqlc.types.Field(Float, graphql_name='inboundGrossWeight')
    '''Checks for equality with the object’s `inboundGrossWeight` field.'''

    inbound_net_weight = sgqlc.types.Field(Float, graphql_name='inboundNetWeight')
    '''Checks for equality with the object’s `inboundNetWeight` field.'''

    inbound_case_quantity = sgqlc.types.Field(Int, graphql_name='inboundCaseQuantity')
    '''Checks for equality with the object’s `inboundCaseQuantity` field.'''

    inbound_pallets = sgqlc.types.Field(Int, graphql_name='inboundPallets')
    '''Checks for equality with the object’s `inboundPallets` field.'''

    inbound_loads = sgqlc.types.Field(Int, graphql_name='inboundLoads')
    '''Checks for equality with the object’s `inboundLoads` field.'''

    outbound_gross_weight = sgqlc.types.Field(Float, graphql_name='outboundGrossWeight')
    '''Checks for equality with the object’s `outboundGrossWeight` field.'''

    outbound_net_weight = sgqlc.types.Field(Float, graphql_name='outboundNetWeight')
    '''Checks for equality with the object’s `outboundNetWeight` field.'''

    outbound_case_quantity = sgqlc.types.Field(Int, graphql_name='outboundCaseQuantity')
    '''Checks for equality with the object’s `outboundCaseQuantity`
    field.
    '''

    outbound_pallets = sgqlc.types.Field(Int, graphql_name='outboundPallets')
    '''Checks for equality with the object’s `outboundPallets` field.'''

    outbound_loads = sgqlc.types.Field(Int, graphql_name='outboundLoads')
    '''Checks for equality with the object’s `outboundLoads` field.'''

    number_of_picks = sgqlc.types.Field(Int, graphql_name='numberOfPicks')
    '''Checks for equality with the object’s `numberOfPicks` field.'''

    number_of_cases_picked = sgqlc.types.Field(Int, graphql_name='numberOfCasesPicked')
    '''Checks for equality with the object’s `numberOfCasesPicked` field.'''

    has_customer_aggregates = sgqlc.types.Field(Boolean, graphql_name='hasCustomerAggregates')
    '''Checks for equality with the object’s `hasCustomerAggregates`
    field.
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''



class AggregateWarehouseVolumeRawFilter(sgqlc.types.Input):
    '''A filter to be used against `AggregateWarehouseVolumeRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'finished_date', 'inbound_gross_weight', 'inbound_net_weight', 'inbound_case_quantity', 'inbound_pallets', 'inbound_loads', 'outbound_gross_weight', 'outbound_net_weight', 'outbound_case_quantity', 'outbound_pallets', 'outbound_loads', 'number_of_picks', 'number_of_cases_picked', 'has_customer_aggregates', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    finished_date = sgqlc.types.Field('DateFilter', graphql_name='finishedDate')
    '''Filter by the object’s `finishedDate` field.'''

    inbound_gross_weight = sgqlc.types.Field('FloatFilter', graphql_name='inboundGrossWeight')
    '''Filter by the object’s `inboundGrossWeight` field.'''

    inbound_net_weight = sgqlc.types.Field('FloatFilter', graphql_name='inboundNetWeight')
    '''Filter by the object’s `inboundNetWeight` field.'''

    inbound_case_quantity = sgqlc.types.Field('IntFilter', graphql_name='inboundCaseQuantity')
    '''Filter by the object’s `inboundCaseQuantity` field.'''

    inbound_pallets = sgqlc.types.Field('IntFilter', graphql_name='inboundPallets')
    '''Filter by the object’s `inboundPallets` field.'''

    inbound_loads = sgqlc.types.Field('IntFilter', graphql_name='inboundLoads')
    '''Filter by the object’s `inboundLoads` field.'''

    outbound_gross_weight = sgqlc.types.Field('FloatFilter', graphql_name='outboundGrossWeight')
    '''Filter by the object’s `outboundGrossWeight` field.'''

    outbound_net_weight = sgqlc.types.Field('FloatFilter', graphql_name='outboundNetWeight')
    '''Filter by the object’s `outboundNetWeight` field.'''

    outbound_case_quantity = sgqlc.types.Field('IntFilter', graphql_name='outboundCaseQuantity')
    '''Filter by the object’s `outboundCaseQuantity` field.'''

    outbound_pallets = sgqlc.types.Field('IntFilter', graphql_name='outboundPallets')
    '''Filter by the object’s `outboundPallets` field.'''

    outbound_loads = sgqlc.types.Field('IntFilter', graphql_name='outboundLoads')
    '''Filter by the object’s `outboundLoads` field.'''

    number_of_picks = sgqlc.types.Field('IntFilter', graphql_name='numberOfPicks')
    '''Filter by the object’s `numberOfPicks` field.'''

    number_of_cases_picked = sgqlc.types.Field('IntFilter', graphql_name='numberOfCasesPicked')
    '''Filter by the object’s `numberOfCasesPicked` field.'''

    has_customer_aggregates = sgqlc.types.Field('BooleanFilter', graphql_name='hasCustomerAggregates')
    '''Filter by the object’s `hasCustomerAggregates` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field('BigIntFilter', graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseVolumeRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseVolumeRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('AggregateWarehouseVolumeRawFilter', graphql_name='not')
    '''Negates the expression.'''



class AggregateWarehouseVolumeRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `AggregateWarehouseVolumeRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'finished_date', 'inbound_gross_weight', 'inbound_net_weight', 'inbound_case_quantity', 'inbound_pallets', 'inbound_loads', 'outbound_gross_weight', 'outbound_net_weight', 'outbound_case_quantity', 'outbound_pallets', 'outbound_loads', 'number_of_picks', 'number_of_cases_picked', 'has_customer_aggregates', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    finished_date = sgqlc.types.Field(Date, graphql_name='finishedDate')
    '''Date the reported volume was shipped or received'''

    inbound_gross_weight = sgqlc.types.Field(Float, graphql_name='inboundGrossWeight')
    '''Gross weight of the received product (in pounds)'''

    inbound_net_weight = sgqlc.types.Field(Float, graphql_name='inboundNetWeight')
    '''Net weight of the received product (in pounds)'''

    inbound_case_quantity = sgqlc.types.Field(Int, graphql_name='inboundCaseQuantity')
    '''Number of cases of product received'''

    inbound_pallets = sgqlc.types.Field(Int, graphql_name='inboundPallets')
    '''Number of pallets received'''

    inbound_loads = sgqlc.types.Field(Int, graphql_name='inboundLoads')
    '''Number of inbound truck loads completed'''

    outbound_gross_weight = sgqlc.types.Field(Float, graphql_name='outboundGrossWeight')
    '''Gross weight of the shipped product (in pounds)'''

    outbound_net_weight = sgqlc.types.Field(Float, graphql_name='outboundNetWeight')
    '''Net weight of the shipped product (in pounds)'''

    outbound_case_quantity = sgqlc.types.Field(Int, graphql_name='outboundCaseQuantity')
    '''Number of cases shipped'''

    outbound_pallets = sgqlc.types.Field(Int, graphql_name='outboundPallets')
    '''Number of pallets shipped'''

    outbound_loads = sgqlc.types.Field(Int, graphql_name='outboundLoads')
    '''Number of outbound truck loads completed'''

    number_of_picks = sgqlc.types.Field(Int, graphql_name='numberOfPicks')
    '''Number of pick activities'''

    number_of_cases_picked = sgqlc.types.Field(Int, graphql_name='numberOfCasesPicked')
    '''Total number of cases picked during the pick activities'''

    has_customer_aggregates = sgqlc.types.Field(Boolean, graphql_name='hasCustomerAggregates')
    '''Flag for whether a customer breakdown exists in
    aggregate_warehouse_volume_by_customer
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class AggregateWarehouseVolumeRawPatch(sgqlc.types.Input):
    '''Represents an update to a `AggregateWarehouseVolumeRaw`. Fields
    that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'finished_date', 'inbound_gross_weight', 'inbound_net_weight', 'inbound_case_quantity', 'inbound_pallets', 'inbound_loads', 'outbound_gross_weight', 'outbound_net_weight', 'outbound_case_quantity', 'outbound_pallets', 'outbound_loads', 'number_of_picks', 'number_of_cases_picked', 'has_customer_aggregates', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    finished_date = sgqlc.types.Field(Date, graphql_name='finishedDate')
    '''Date the reported volume was shipped or received'''

    inbound_gross_weight = sgqlc.types.Field(Float, graphql_name='inboundGrossWeight')
    '''Gross weight of the received product (in pounds)'''

    inbound_net_weight = sgqlc.types.Field(Float, graphql_name='inboundNetWeight')
    '''Net weight of the received product (in pounds)'''

    inbound_case_quantity = sgqlc.types.Field(Int, graphql_name='inboundCaseQuantity')
    '''Number of cases of product received'''

    inbound_pallets = sgqlc.types.Field(Int, graphql_name='inboundPallets')
    '''Number of pallets received'''

    inbound_loads = sgqlc.types.Field(Int, graphql_name='inboundLoads')
    '''Number of inbound truck loads completed'''

    outbound_gross_weight = sgqlc.types.Field(Float, graphql_name='outboundGrossWeight')
    '''Gross weight of the shipped product (in pounds)'''

    outbound_net_weight = sgqlc.types.Field(Float, graphql_name='outboundNetWeight')
    '''Net weight of the shipped product (in pounds)'''

    outbound_case_quantity = sgqlc.types.Field(Int, graphql_name='outboundCaseQuantity')
    '''Number of cases shipped'''

    outbound_pallets = sgqlc.types.Field(Int, graphql_name='outboundPallets')
    '''Number of pallets shipped'''

    outbound_loads = sgqlc.types.Field(Int, graphql_name='outboundLoads')
    '''Number of outbound truck loads completed'''

    number_of_picks = sgqlc.types.Field(Int, graphql_name='numberOfPicks')
    '''Number of pick activities'''

    number_of_cases_picked = sgqlc.types.Field(Int, graphql_name='numberOfCasesPicked')
    '''Total number of cases picked during the pick activities'''

    has_customer_aggregates = sgqlc.types.Field(Boolean, graphql_name='hasCustomerAggregates')
    '''Flag for whether a customer breakdown exists in
    aggregate_warehouse_volume_by_customer
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class BigFloatFilter(sgqlc.types.Input):
    '''A filter to be used against BigFloat fields. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(BigFloat, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(BigFloat, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(BigFloat, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(BigFloat, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BigFloat)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BigFloat)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(BigFloat, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(BigFloat, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(BigFloat, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(BigFloat, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class BigIntFilter(sgqlc.types.Input):
    '''A filter to be used against BigInt fields. All fields are combined
    with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(BigInt, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(BigInt, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(BigInt, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(BigInt, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BigInt)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BigInt)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(BigInt, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(BigInt, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(BigInt, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(BigInt, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class BillingHistoryCondition(sgqlc.types.Input):
    '''A condition to be used against `BillingHistory` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'charge_code', 'item_code', 'lot_code', 'warehouse_order_number', 'line_number', 'invoice', 'invoice_date', 'bill_from_date', 'rate_charged', 'unit_of_measurement', 'billed_quantity', 'billed_weight', 'basis', 'billed_pallet_count', 'billed_cube_count', 'debit_amount', 'credit_amount', 'renewal_period', 'original_amount', 'bill_id', 'billed_by', 'notes', 'customer_code', 'num_days', 'bill_type', 'break_factor', 'line_billed_by', 'posted_by', 'posted_datetime', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived')
    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    charge_code = sgqlc.types.Field(String, graphql_name='chargeCode')
    '''Checks for equality with the object’s `chargeCode` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    invoice = sgqlc.types.Field(String, graphql_name='invoice')
    '''Checks for equality with the object’s `invoice` field.'''

    invoice_date = sgqlc.types.Field(Datetime, graphql_name='invoiceDate')
    '''Checks for equality with the object’s `invoiceDate` field.'''

    bill_from_date = sgqlc.types.Field(Datetime, graphql_name='billFromDate')
    '''Checks for equality with the object’s `billFromDate` field.'''

    rate_charged = sgqlc.types.Field(Float, graphql_name='rateCharged')
    '''Checks for equality with the object’s `rateCharged` field.'''

    unit_of_measurement = sgqlc.types.Field(String, graphql_name='unitOfMeasurement')
    '''Checks for equality with the object’s `unitOfMeasurement` field.'''

    billed_quantity = sgqlc.types.Field(Float, graphql_name='billedQuantity')
    '''Checks for equality with the object’s `billedQuantity` field.'''

    billed_weight = sgqlc.types.Field(Float, graphql_name='billedWeight')
    '''Checks for equality with the object’s `billedWeight` field.'''

    basis = sgqlc.types.Field(Float, graphql_name='basis')
    '''Checks for equality with the object’s `basis` field.'''

    billed_pallet_count = sgqlc.types.Field(Float, graphql_name='billedPalletCount')
    '''Checks for equality with the object’s `billedPalletCount` field.'''

    billed_cube_count = sgqlc.types.Field(Float, graphql_name='billedCubeCount')
    '''Checks for equality with the object’s `billedCubeCount` field.'''

    debit_amount = sgqlc.types.Field(Float, graphql_name='debitAmount')
    '''Checks for equality with the object’s `debitAmount` field.'''

    credit_amount = sgqlc.types.Field(Float, graphql_name='creditAmount')
    '''Checks for equality with the object’s `creditAmount` field.'''

    renewal_period = sgqlc.types.Field(String, graphql_name='renewalPeriod')
    '''Checks for equality with the object’s `renewalPeriod` field.'''

    original_amount = sgqlc.types.Field(String, graphql_name='originalAmount')
    '''Checks for equality with the object’s `originalAmount` field.'''

    bill_id = sgqlc.types.Field(String, graphql_name='billId')
    '''Checks for equality with the object’s `billId` field.'''

    billed_by = sgqlc.types.Field(String, graphql_name='billedBy')
    '''Checks for equality with the object’s `billedBy` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    num_days = sgqlc.types.Field(String, graphql_name='numDays')
    '''Checks for equality with the object’s `numDays` field.'''

    bill_type = sgqlc.types.Field(String, graphql_name='billType')
    '''Checks for equality with the object’s `billType` field.'''

    break_factor = sgqlc.types.Field(String, graphql_name='breakFactor')
    '''Checks for equality with the object’s `breakFactor` field.'''

    line_billed_by = sgqlc.types.Field(String, graphql_name='lineBilledBy')
    '''Checks for equality with the object’s `lineBilledBy` field.'''

    posted_by = sgqlc.types.Field(String, graphql_name='postedBy')
    '''Checks for equality with the object’s `postedBy` field.'''

    posted_datetime = sgqlc.types.Field(Datetime, graphql_name='postedDatetime')
    '''Checks for equality with the object’s `postedDatetime` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''



class BillingHistoryFilter(sgqlc.types.Input):
    '''A filter to be used against `BillingHistory` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'charge_code', 'item_code', 'lot_code', 'warehouse_order_number', 'line_number', 'invoice', 'invoice_date', 'bill_from_date', 'rate_charged', 'unit_of_measurement', 'billed_quantity', 'billed_weight', 'basis', 'billed_pallet_count', 'billed_cube_count', 'debit_amount', 'credit_amount', 'renewal_period', 'original_amount', 'bill_id', 'billed_by', 'notes', 'customer_code', 'num_days', 'bill_type', 'break_factor', 'line_billed_by', 'posted_by', 'posted_datetime', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived', 'and_', 'or_', 'not_')
    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    charge_code = sgqlc.types.Field('StringFilter', graphql_name='chargeCode')
    '''Filter by the object’s `chargeCode` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    invoice = sgqlc.types.Field('StringFilter', graphql_name='invoice')
    '''Filter by the object’s `invoice` field.'''

    invoice_date = sgqlc.types.Field('DatetimeFilter', graphql_name='invoiceDate')
    '''Filter by the object’s `invoiceDate` field.'''

    bill_from_date = sgqlc.types.Field('DatetimeFilter', graphql_name='billFromDate')
    '''Filter by the object’s `billFromDate` field.'''

    rate_charged = sgqlc.types.Field('FloatFilter', graphql_name='rateCharged')
    '''Filter by the object’s `rateCharged` field.'''

    unit_of_measurement = sgqlc.types.Field('StringFilter', graphql_name='unitOfMeasurement')
    '''Filter by the object’s `unitOfMeasurement` field.'''

    billed_quantity = sgqlc.types.Field('FloatFilter', graphql_name='billedQuantity')
    '''Filter by the object’s `billedQuantity` field.'''

    billed_weight = sgqlc.types.Field('FloatFilter', graphql_name='billedWeight')
    '''Filter by the object’s `billedWeight` field.'''

    basis = sgqlc.types.Field('FloatFilter', graphql_name='basis')
    '''Filter by the object’s `basis` field.'''

    billed_pallet_count = sgqlc.types.Field('FloatFilter', graphql_name='billedPalletCount')
    '''Filter by the object’s `billedPalletCount` field.'''

    billed_cube_count = sgqlc.types.Field('FloatFilter', graphql_name='billedCubeCount')
    '''Filter by the object’s `billedCubeCount` field.'''

    debit_amount = sgqlc.types.Field('FloatFilter', graphql_name='debitAmount')
    '''Filter by the object’s `debitAmount` field.'''

    credit_amount = sgqlc.types.Field('FloatFilter', graphql_name='creditAmount')
    '''Filter by the object’s `creditAmount` field.'''

    renewal_period = sgqlc.types.Field('StringFilter', graphql_name='renewalPeriod')
    '''Filter by the object’s `renewalPeriod` field.'''

    original_amount = sgqlc.types.Field('StringFilter', graphql_name='originalAmount')
    '''Filter by the object’s `originalAmount` field.'''

    bill_id = sgqlc.types.Field('StringFilter', graphql_name='billId')
    '''Filter by the object’s `billId` field.'''

    billed_by = sgqlc.types.Field('StringFilter', graphql_name='billedBy')
    '''Filter by the object’s `billedBy` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    num_days = sgqlc.types.Field('StringFilter', graphql_name='numDays')
    '''Filter by the object’s `numDays` field.'''

    bill_type = sgqlc.types.Field('StringFilter', graphql_name='billType')
    '''Filter by the object’s `billType` field.'''

    break_factor = sgqlc.types.Field('StringFilter', graphql_name='breakFactor')
    '''Filter by the object’s `breakFactor` field.'''

    line_billed_by = sgqlc.types.Field('StringFilter', graphql_name='lineBilledBy')
    '''Filter by the object’s `lineBilledBy` field.'''

    posted_by = sgqlc.types.Field('StringFilter', graphql_name='postedBy')
    '''Filter by the object’s `postedBy` field.'''

    posted_datetime = sgqlc.types.Field('DatetimeFilter', graphql_name='postedDatetime')
    '''Filter by the object’s `postedDatetime` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    is_archived = sgqlc.types.Field('BooleanFilter', graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BillingHistoryFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BillingHistoryFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BillingHistoryFilter', graphql_name='not')
    '''Negates the expression.'''



class BillingHistoryRawCondition(sgqlc.types.Input):
    '''A condition to be used against `BillingHistoryRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'charge_code', 'item_code', 'lot_code', 'warehouse_order_number', 'line_number', 'invoice', 'invoice_date', 'bill_from_date', 'rate_charged', 'unit_of_measurement', 'billed_quantity', 'billed_weight', 'basis', 'billed_pallet_count', 'billed_cube_count', 'debit_amount', 'credit_amount', 'renewal_period', 'original_amount', 'bill_id', 'billed_by', 'notes', 'customer_code', 'num_days', 'bill_type', 'break_factor', 'line_billed_by', 'posted_by', 'posted_datetime', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived', 'customer_id', 'original_customer', 'last_bill', 'weight_type', 'price_code', 'break_code', 'misc_code', 'ar_batch', 'group_code', 'lot_reference', 'lot_id', 'item_id', 'order_id', 'inbound_outbound_flag', 'product_code', 'owner_customer_code', 'item_category', 'supplier_product_code', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    charge_code = sgqlc.types.Field(String, graphql_name='chargeCode')
    '''Checks for equality with the object’s `chargeCode` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    invoice = sgqlc.types.Field(String, graphql_name='invoice')
    '''Checks for equality with the object’s `invoice` field.'''

    invoice_date = sgqlc.types.Field(Datetime, graphql_name='invoiceDate')
    '''Checks for equality with the object’s `invoiceDate` field.'''

    bill_from_date = sgqlc.types.Field(Datetime, graphql_name='billFromDate')
    '''Checks for equality with the object’s `billFromDate` field.'''

    rate_charged = sgqlc.types.Field(Float, graphql_name='rateCharged')
    '''Checks for equality with the object’s `rateCharged` field.'''

    unit_of_measurement = sgqlc.types.Field(String, graphql_name='unitOfMeasurement')
    '''Checks for equality with the object’s `unitOfMeasurement` field.'''

    billed_quantity = sgqlc.types.Field(Float, graphql_name='billedQuantity')
    '''Checks for equality with the object’s `billedQuantity` field.'''

    billed_weight = sgqlc.types.Field(Float, graphql_name='billedWeight')
    '''Checks for equality with the object’s `billedWeight` field.'''

    basis = sgqlc.types.Field(Float, graphql_name='basis')
    '''Checks for equality with the object’s `basis` field.'''

    billed_pallet_count = sgqlc.types.Field(Float, graphql_name='billedPalletCount')
    '''Checks for equality with the object’s `billedPalletCount` field.'''

    billed_cube_count = sgqlc.types.Field(Float, graphql_name='billedCubeCount')
    '''Checks for equality with the object’s `billedCubeCount` field.'''

    debit_amount = sgqlc.types.Field(Float, graphql_name='debitAmount')
    '''Checks for equality with the object’s `debitAmount` field.'''

    credit_amount = sgqlc.types.Field(Float, graphql_name='creditAmount')
    '''Checks for equality with the object’s `creditAmount` field.'''

    renewal_period = sgqlc.types.Field(String, graphql_name='renewalPeriod')
    '''Checks for equality with the object’s `renewalPeriod` field.'''

    original_amount = sgqlc.types.Field(String, graphql_name='originalAmount')
    '''Checks for equality with the object’s `originalAmount` field.'''

    bill_id = sgqlc.types.Field(String, graphql_name='billId')
    '''Checks for equality with the object’s `billId` field.'''

    billed_by = sgqlc.types.Field(String, graphql_name='billedBy')
    '''Checks for equality with the object’s `billedBy` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    num_days = sgqlc.types.Field(String, graphql_name='numDays')
    '''Checks for equality with the object’s `numDays` field.'''

    bill_type = sgqlc.types.Field(String, graphql_name='billType')
    '''Checks for equality with the object’s `billType` field.'''

    break_factor = sgqlc.types.Field(String, graphql_name='breakFactor')
    '''Checks for equality with the object’s `breakFactor` field.'''

    line_billed_by = sgqlc.types.Field(String, graphql_name='lineBilledBy')
    '''Checks for equality with the object’s `lineBilledBy` field.'''

    posted_by = sgqlc.types.Field(String, graphql_name='postedBy')
    '''Checks for equality with the object’s `postedBy` field.'''

    posted_datetime = sgqlc.types.Field(Datetime, graphql_name='postedDatetime')
    '''Checks for equality with the object’s `postedDatetime` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    original_customer = sgqlc.types.Field(String, graphql_name='originalCustomer')
    '''Checks for equality with the object’s `originalCustomer` field.'''

    last_bill = sgqlc.types.Field(Date, graphql_name='lastBill')
    '''Checks for equality with the object’s `lastBill` field.'''

    weight_type = sgqlc.types.Field(String, graphql_name='weightType')
    '''Checks for equality with the object’s `weightType` field.'''

    price_code = sgqlc.types.Field(String, graphql_name='priceCode')
    '''Checks for equality with the object’s `priceCode` field.'''

    break_code = sgqlc.types.Field(String, graphql_name='breakCode')
    '''Checks for equality with the object’s `breakCode` field.'''

    misc_code = sgqlc.types.Field(String, graphql_name='miscCode')
    '''Checks for equality with the object’s `miscCode` field.'''

    ar_batch = sgqlc.types.Field(String, graphql_name='arBatch')
    '''Checks for equality with the object’s `arBatch` field.'''

    group_code = sgqlc.types.Field(String, graphql_name='groupCode')
    '''Checks for equality with the object’s `groupCode` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    order_id = sgqlc.types.Field(String, graphql_name='orderId')
    '''Checks for equality with the object’s `orderId` field.'''

    inbound_outbound_flag = sgqlc.types.Field(String, graphql_name='inboundOutboundFlag')
    '''Checks for equality with the object’s `inboundOutboundFlag` field.'''

    product_code = sgqlc.types.Field(String, graphql_name='productCode')
    '''Checks for equality with the object’s `productCode` field.'''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Checks for equality with the object’s `ownerCustomerCode` field.'''

    item_category = sgqlc.types.Field(String, graphql_name='itemCategory')
    '''Checks for equality with the object’s `itemCategory` field.'''

    supplier_product_code = sgqlc.types.Field(String, graphql_name='supplierProductCode')
    '''Checks for equality with the object’s `supplierProductCode` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class BillingHistoryRawFilter(sgqlc.types.Input):
    '''A filter to be used against `BillingHistoryRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'charge_code', 'item_code', 'lot_code', 'warehouse_order_number', 'line_number', 'invoice', 'invoice_date', 'bill_from_date', 'rate_charged', 'unit_of_measurement', 'billed_quantity', 'billed_weight', 'basis', 'billed_pallet_count', 'billed_cube_count', 'debit_amount', 'credit_amount', 'renewal_period', 'original_amount', 'bill_id', 'billed_by', 'notes', 'customer_code', 'num_days', 'bill_type', 'break_factor', 'line_billed_by', 'posted_by', 'posted_datetime', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived', 'customer_id', 'original_customer', 'last_bill', 'weight_type', 'price_code', 'break_code', 'misc_code', 'ar_batch', 'group_code', 'lot_reference', 'lot_id', 'item_id', 'order_id', 'inbound_outbound_flag', 'product_code', 'owner_customer_code', 'item_category', 'supplier_product_code', 'weight_uom', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    charge_code = sgqlc.types.Field('StringFilter', graphql_name='chargeCode')
    '''Filter by the object’s `chargeCode` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    invoice = sgqlc.types.Field('StringFilter', graphql_name='invoice')
    '''Filter by the object’s `invoice` field.'''

    invoice_date = sgqlc.types.Field('DatetimeFilter', graphql_name='invoiceDate')
    '''Filter by the object’s `invoiceDate` field.'''

    bill_from_date = sgqlc.types.Field('DatetimeFilter', graphql_name='billFromDate')
    '''Filter by the object’s `billFromDate` field.'''

    rate_charged = sgqlc.types.Field('FloatFilter', graphql_name='rateCharged')
    '''Filter by the object’s `rateCharged` field.'''

    unit_of_measurement = sgqlc.types.Field('StringFilter', graphql_name='unitOfMeasurement')
    '''Filter by the object’s `unitOfMeasurement` field.'''

    billed_quantity = sgqlc.types.Field('FloatFilter', graphql_name='billedQuantity')
    '''Filter by the object’s `billedQuantity` field.'''

    billed_weight = sgqlc.types.Field('FloatFilter', graphql_name='billedWeight')
    '''Filter by the object’s `billedWeight` field.'''

    basis = sgqlc.types.Field('FloatFilter', graphql_name='basis')
    '''Filter by the object’s `basis` field.'''

    billed_pallet_count = sgqlc.types.Field('FloatFilter', graphql_name='billedPalletCount')
    '''Filter by the object’s `billedPalletCount` field.'''

    billed_cube_count = sgqlc.types.Field('FloatFilter', graphql_name='billedCubeCount')
    '''Filter by the object’s `billedCubeCount` field.'''

    debit_amount = sgqlc.types.Field('FloatFilter', graphql_name='debitAmount')
    '''Filter by the object’s `debitAmount` field.'''

    credit_amount = sgqlc.types.Field('FloatFilter', graphql_name='creditAmount')
    '''Filter by the object’s `creditAmount` field.'''

    renewal_period = sgqlc.types.Field('StringFilter', graphql_name='renewalPeriod')
    '''Filter by the object’s `renewalPeriod` field.'''

    original_amount = sgqlc.types.Field('StringFilter', graphql_name='originalAmount')
    '''Filter by the object’s `originalAmount` field.'''

    bill_id = sgqlc.types.Field('StringFilter', graphql_name='billId')
    '''Filter by the object’s `billId` field.'''

    billed_by = sgqlc.types.Field('StringFilter', graphql_name='billedBy')
    '''Filter by the object’s `billedBy` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    num_days = sgqlc.types.Field('StringFilter', graphql_name='numDays')
    '''Filter by the object’s `numDays` field.'''

    bill_type = sgqlc.types.Field('StringFilter', graphql_name='billType')
    '''Filter by the object’s `billType` field.'''

    break_factor = sgqlc.types.Field('StringFilter', graphql_name='breakFactor')
    '''Filter by the object’s `breakFactor` field.'''

    line_billed_by = sgqlc.types.Field('StringFilter', graphql_name='lineBilledBy')
    '''Filter by the object’s `lineBilledBy` field.'''

    posted_by = sgqlc.types.Field('StringFilter', graphql_name='postedBy')
    '''Filter by the object’s `postedBy` field.'''

    posted_datetime = sgqlc.types.Field('DatetimeFilter', graphql_name='postedDatetime')
    '''Filter by the object’s `postedDatetime` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    is_archived = sgqlc.types.Field('BooleanFilter', graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    original_customer = sgqlc.types.Field('StringFilter', graphql_name='originalCustomer')
    '''Filter by the object’s `originalCustomer` field.'''

    last_bill = sgqlc.types.Field('DateFilter', graphql_name='lastBill')
    '''Filter by the object’s `lastBill` field.'''

    weight_type = sgqlc.types.Field('StringFilter', graphql_name='weightType')
    '''Filter by the object’s `weightType` field.'''

    price_code = sgqlc.types.Field('StringFilter', graphql_name='priceCode')
    '''Filter by the object’s `priceCode` field.'''

    break_code = sgqlc.types.Field('StringFilter', graphql_name='breakCode')
    '''Filter by the object’s `breakCode` field.'''

    misc_code = sgqlc.types.Field('StringFilter', graphql_name='miscCode')
    '''Filter by the object’s `miscCode` field.'''

    ar_batch = sgqlc.types.Field('StringFilter', graphql_name='arBatch')
    '''Filter by the object’s `arBatch` field.'''

    group_code = sgqlc.types.Field('StringFilter', graphql_name='groupCode')
    '''Filter by the object’s `groupCode` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    order_id = sgqlc.types.Field('StringFilter', graphql_name='orderId')
    '''Filter by the object’s `orderId` field.'''

    inbound_outbound_flag = sgqlc.types.Field('StringFilter', graphql_name='inboundOutboundFlag')
    '''Filter by the object’s `inboundOutboundFlag` field.'''

    product_code = sgqlc.types.Field('StringFilter', graphql_name='productCode')
    '''Filter by the object’s `productCode` field.'''

    owner_customer_code = sgqlc.types.Field('StringFilter', graphql_name='ownerCustomerCode')
    '''Filter by the object’s `ownerCustomerCode` field.'''

    item_category = sgqlc.types.Field('StringFilter', graphql_name='itemCategory')
    '''Filter by the object’s `itemCategory` field.'''

    supplier_product_code = sgqlc.types.Field('StringFilter', graphql_name='supplierProductCode')
    '''Filter by the object’s `supplierProductCode` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BillingHistoryRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BillingHistoryRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BillingHistoryRawFilter', graphql_name='not')
    '''Negates the expression.'''



class BillingHistoryRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `BillingHistoryRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'charge_code', 'item_code', 'lot_code', 'warehouse_order_number', 'line_number', 'invoice', 'invoice_date', 'bill_from_date', 'rate_charged', 'unit_of_measurement', 'billed_quantity', 'billed_weight', 'basis', 'billed_pallet_count', 'billed_cube_count', 'debit_amount', 'credit_amount', 'renewal_period', 'original_amount', 'bill_id', 'billed_by', 'notes', 'customer_code', 'num_days', 'bill_type', 'break_factor', 'line_billed_by', 'posted_by', 'posted_datetime', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived', 'customer_id', 'original_customer', 'last_bill', 'weight_type', 'price_code', 'break_code', 'misc_code', 'ar_batch', 'group_code', 'lot_reference', 'lot_id', 'item_id', 'order_id', 'inbound_outbound_flag', 'product_code', 'owner_customer_code', 'item_category', 'supplier_product_code', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    charge_code = sgqlc.types.Field(String, graphql_name='chargeCode')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    invoice = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='invoice')

    invoice_date = sgqlc.types.Field(Datetime, graphql_name='invoiceDate')

    bill_from_date = sgqlc.types.Field(Datetime, graphql_name='billFromDate')

    rate_charged = sgqlc.types.Field(Float, graphql_name='rateCharged')

    unit_of_measurement = sgqlc.types.Field(String, graphql_name='unitOfMeasurement')

    billed_quantity = sgqlc.types.Field(Float, graphql_name='billedQuantity')

    billed_weight = sgqlc.types.Field(Float, graphql_name='billedWeight')

    basis = sgqlc.types.Field(Float, graphql_name='basis')

    billed_pallet_count = sgqlc.types.Field(Float, graphql_name='billedPalletCount')

    billed_cube_count = sgqlc.types.Field(Float, graphql_name='billedCubeCount')

    debit_amount = sgqlc.types.Field(Float, graphql_name='debitAmount')

    credit_amount = sgqlc.types.Field(Float, graphql_name='creditAmount')

    renewal_period = sgqlc.types.Field(String, graphql_name='renewalPeriod')

    original_amount = sgqlc.types.Field(String, graphql_name='originalAmount')

    bill_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='billId')

    billed_by = sgqlc.types.Field(String, graphql_name='billedBy')

    notes = sgqlc.types.Field(String, graphql_name='notes')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    num_days = sgqlc.types.Field(String, graphql_name='numDays')

    bill_type = sgqlc.types.Field(String, graphql_name='billType')

    break_factor = sgqlc.types.Field(String, graphql_name='breakFactor')

    line_billed_by = sgqlc.types.Field(String, graphql_name='lineBilledBy')

    posted_by = sgqlc.types.Field(String, graphql_name='postedBy')

    posted_datetime = sgqlc.types.Field(Datetime, graphql_name='postedDatetime')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    original_customer = sgqlc.types.Field(String, graphql_name='originalCustomer')

    last_bill = sgqlc.types.Field(Date, graphql_name='lastBill')

    weight_type = sgqlc.types.Field(String, graphql_name='weightType')

    price_code = sgqlc.types.Field(String, graphql_name='priceCode')

    break_code = sgqlc.types.Field(String, graphql_name='breakCode')

    misc_code = sgqlc.types.Field(String, graphql_name='miscCode')

    ar_batch = sgqlc.types.Field(String, graphql_name='arBatch')

    group_code = sgqlc.types.Field(String, graphql_name='groupCode')

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    order_id = sgqlc.types.Field(String, graphql_name='orderId')

    inbound_outbound_flag = sgqlc.types.Field(String, graphql_name='inboundOutboundFlag')

    product_code = sgqlc.types.Field(String, graphql_name='productCode')

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    item_category = sgqlc.types.Field(String, graphql_name='itemCategory')

    supplier_product_code = sgqlc.types.Field(String, graphql_name='supplierProductCode')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class BillingHistoryRawPatch(sgqlc.types.Input):
    '''Represents an update to a `BillingHistoryRaw`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'charge_code', 'item_code', 'lot_code', 'warehouse_order_number', 'line_number', 'invoice', 'invoice_date', 'bill_from_date', 'rate_charged', 'unit_of_measurement', 'billed_quantity', 'billed_weight', 'basis', 'billed_pallet_count', 'billed_cube_count', 'debit_amount', 'credit_amount', 'renewal_period', 'original_amount', 'bill_id', 'billed_by', 'notes', 'customer_code', 'num_days', 'bill_type', 'break_factor', 'line_billed_by', 'posted_by', 'posted_datetime', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived', 'customer_id', 'original_customer', 'last_bill', 'weight_type', 'price_code', 'break_code', 'misc_code', 'ar_batch', 'group_code', 'lot_reference', 'lot_id', 'item_id', 'order_id', 'inbound_outbound_flag', 'product_code', 'owner_customer_code', 'item_category', 'supplier_product_code', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    charge_code = sgqlc.types.Field(String, graphql_name='chargeCode')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    invoice = sgqlc.types.Field(String, graphql_name='invoice')

    invoice_date = sgqlc.types.Field(Datetime, graphql_name='invoiceDate')

    bill_from_date = sgqlc.types.Field(Datetime, graphql_name='billFromDate')

    rate_charged = sgqlc.types.Field(Float, graphql_name='rateCharged')

    unit_of_measurement = sgqlc.types.Field(String, graphql_name='unitOfMeasurement')

    billed_quantity = sgqlc.types.Field(Float, graphql_name='billedQuantity')

    billed_weight = sgqlc.types.Field(Float, graphql_name='billedWeight')

    basis = sgqlc.types.Field(Float, graphql_name='basis')

    billed_pallet_count = sgqlc.types.Field(Float, graphql_name='billedPalletCount')

    billed_cube_count = sgqlc.types.Field(Float, graphql_name='billedCubeCount')

    debit_amount = sgqlc.types.Field(Float, graphql_name='debitAmount')

    credit_amount = sgqlc.types.Field(Float, graphql_name='creditAmount')

    renewal_period = sgqlc.types.Field(String, graphql_name='renewalPeriod')

    original_amount = sgqlc.types.Field(String, graphql_name='originalAmount')

    bill_id = sgqlc.types.Field(String, graphql_name='billId')

    billed_by = sgqlc.types.Field(String, graphql_name='billedBy')

    notes = sgqlc.types.Field(String, graphql_name='notes')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    num_days = sgqlc.types.Field(String, graphql_name='numDays')

    bill_type = sgqlc.types.Field(String, graphql_name='billType')

    break_factor = sgqlc.types.Field(String, graphql_name='breakFactor')

    line_billed_by = sgqlc.types.Field(String, graphql_name='lineBilledBy')

    posted_by = sgqlc.types.Field(String, graphql_name='postedBy')

    posted_datetime = sgqlc.types.Field(Datetime, graphql_name='postedDatetime')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    original_customer = sgqlc.types.Field(String, graphql_name='originalCustomer')

    last_bill = sgqlc.types.Field(Date, graphql_name='lastBill')

    weight_type = sgqlc.types.Field(String, graphql_name='weightType')

    price_code = sgqlc.types.Field(String, graphql_name='priceCode')

    break_code = sgqlc.types.Field(String, graphql_name='breakCode')

    misc_code = sgqlc.types.Field(String, graphql_name='miscCode')

    ar_batch = sgqlc.types.Field(String, graphql_name='arBatch')

    group_code = sgqlc.types.Field(String, graphql_name='groupCode')

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    order_id = sgqlc.types.Field(String, graphql_name='orderId')

    inbound_outbound_flag = sgqlc.types.Field(String, graphql_name='inboundOutboundFlag')

    product_code = sgqlc.types.Field(String, graphql_name='productCode')

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    item_category = sgqlc.types.Field(String, graphql_name='itemCategory')

    supplier_product_code = sgqlc.types.Field(String, graphql_name='supplierProductCode')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class BlastCellCondition(sgqlc.types.Input):
    '''A condition to be used against `BlastCell` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'slug', 'label', 'facility_id', 'created_at', 'updated_at', 'blast_cell_type_id')
    id = sgqlc.types.Field(Int, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    slug = sgqlc.types.Field(String, graphql_name='slug')
    '''Checks for equality with the object’s `slug` field.'''

    label = sgqlc.types.Field(String, graphql_name='label')
    '''Checks for equality with the object’s `label` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    blast_cell_type_id = sgqlc.types.Field(String, graphql_name='blastCellTypeId')
    '''Checks for equality with the object’s `blastCellTypeId` field.'''



class BlastCellFilter(sgqlc.types.Input):
    '''A filter to be used against `BlastCell` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'slug', 'label', 'facility_id', 'created_at', 'updated_at', 'blast_cell_type_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('IntFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    slug = sgqlc.types.Field('StringFilter', graphql_name='slug')
    '''Filter by the object’s `slug` field.'''

    label = sgqlc.types.Field('StringFilter', graphql_name='label')
    '''Filter by the object’s `label` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    blast_cell_type_id = sgqlc.types.Field('StringFilter', graphql_name='blastCellTypeId')
    '''Filter by the object’s `blastCellTypeId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BlastCellFilter', graphql_name='not')
    '''Negates the expression.'''



class BlastCellInput(sgqlc.types.Input):
    '''An input for mutations affecting `BlastCell`'''
    __schema__ = base
    __field_names__ = ('id', 'slug', 'label', 'facility_id', 'created_at', 'updated_at', 'blast_cell_type_id')
    id = sgqlc.types.Field(Int, graphql_name='id')

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')

    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='label')

    facility_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='facilityId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    blast_cell_type_id = sgqlc.types.Field(String, graphql_name='blastCellTypeId')



class BlastCellPatch(sgqlc.types.Input):
    '''Represents an update to a `BlastCell`. Fields that are set will be
    updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'slug', 'label', 'facility_id', 'created_at', 'updated_at', 'blast_cell_type_id')
    id = sgqlc.types.Field(Int, graphql_name='id')

    slug = sgqlc.types.Field(String, graphql_name='slug')

    label = sgqlc.types.Field(String, graphql_name='label')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    blast_cell_type_id = sgqlc.types.Field(String, graphql_name='blastCellTypeId')



class BlastCellTypeCondition(sgqlc.types.Input):
    '''A condition to be used against `BlastCellType` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('slug', 'description', 'created_at', 'updated_at')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    '''Checks for equality with the object’s `slug` field.'''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Checks for equality with the object’s `description` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class BlastCellTypeFilter(sgqlc.types.Input):
    '''A filter to be used against `BlastCellType` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('slug', 'description', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    slug = sgqlc.types.Field('StringFilter', graphql_name='slug')
    '''Filter by the object’s `slug` field.'''

    description = sgqlc.types.Field('StringFilter', graphql_name='description')
    '''Filter by the object’s `description` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellTypeFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellTypeFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BlastCellTypeFilter', graphql_name='not')
    '''Negates the expression.'''



class BlastCellTypeInput(sgqlc.types.Input):
    '''An input for mutations affecting `BlastCellType`'''
    __schema__ = base
    __field_names__ = ('slug', 'description', 'created_at', 'updated_at')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')

    description = sgqlc.types.Field(String, graphql_name='description')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastCellTypePatch(sgqlc.types.Input):
    '''Represents an update to a `BlastCellType`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('slug', 'description', 'created_at', 'updated_at')
    slug = sgqlc.types.Field(String, graphql_name='slug')

    description = sgqlc.types.Field(String, graphql_name='description')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastCellWmsPalletCondition(sgqlc.types.Input):
    '''A condition to be used against `BlastCellWmsPallet` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'wms_pallet_id', 'pallet_dropped_datetime', 'pallet_picked_datetime', 'blast_cycle_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    blast_cell_id = sgqlc.types.Field(Int, graphql_name='blastCellId')
    '''Checks for equality with the object’s `blastCellId` field.'''

    wms_pallet_id = sgqlc.types.Field(String, graphql_name='wmsPalletId')
    '''Checks for equality with the object’s `wmsPalletId` field.'''

    pallet_dropped_datetime = sgqlc.types.Field(Datetime, graphql_name='palletDroppedDatetime')
    '''Checks for equality with the object’s `palletDroppedDatetime`
    field.
    '''

    pallet_picked_datetime = sgqlc.types.Field(Datetime, graphql_name='palletPickedDatetime')
    '''Checks for equality with the object’s `palletPickedDatetime`
    field.
    '''

    blast_cycle_id = sgqlc.types.Field(Int, graphql_name='blastCycleId')
    '''Checks for equality with the object’s `blastCycleId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class BlastCellWmsPalletFilter(sgqlc.types.Input):
    '''A filter to be used against `BlastCellWmsPallet` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'wms_pallet_id', 'pallet_dropped_datetime', 'pallet_picked_datetime', 'blast_cycle_id', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('UUIDFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    blast_cell_id = sgqlc.types.Field('IntFilter', graphql_name='blastCellId')
    '''Filter by the object’s `blastCellId` field.'''

    wms_pallet_id = sgqlc.types.Field('StringFilter', graphql_name='wmsPalletId')
    '''Filter by the object’s `wmsPalletId` field.'''

    pallet_dropped_datetime = sgqlc.types.Field('DatetimeFilter', graphql_name='palletDroppedDatetime')
    '''Filter by the object’s `palletDroppedDatetime` field.'''

    pallet_picked_datetime = sgqlc.types.Field('DatetimeFilter', graphql_name='palletPickedDatetime')
    '''Filter by the object’s `palletPickedDatetime` field.'''

    blast_cycle_id = sgqlc.types.Field('IntFilter', graphql_name='blastCycleId')
    '''Filter by the object’s `blastCycleId` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellWmsPalletFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellWmsPalletFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BlastCellWmsPalletFilter', graphql_name='not')
    '''Negates the expression.'''



class BlastCellWmsPalletInput(sgqlc.types.Input):
    '''An input for mutations affecting `BlastCellWmsPallet`'''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'wms_pallet_id', 'pallet_dropped_datetime', 'pallet_picked_datetime', 'blast_cycle_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCellId')

    wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsPalletId')

    pallet_dropped_datetime = sgqlc.types.Field(Datetime, graphql_name='palletDroppedDatetime')

    pallet_picked_datetime = sgqlc.types.Field(Datetime, graphql_name='palletPickedDatetime')

    blast_cycle_id = sgqlc.types.Field(Int, graphql_name='blastCycleId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastCellWmsPalletLocationCondition(sgqlc.types.Input):
    '''A condition to be used against `BlastCellWmsPalletLocation` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'wms_pallet_location_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    blast_cell_id = sgqlc.types.Field(Int, graphql_name='blastCellId')
    '''Checks for equality with the object’s `blastCellId` field.'''

    wms_pallet_location_id = sgqlc.types.Field(String, graphql_name='wmsPalletLocationId')
    '''Checks for equality with the object’s `wmsPalletLocationId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class BlastCellWmsPalletLocationFilter(sgqlc.types.Input):
    '''A filter to be used against `BlastCellWmsPalletLocation` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'wms_pallet_location_id', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('UUIDFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    blast_cell_id = sgqlc.types.Field('IntFilter', graphql_name='blastCellId')
    '''Filter by the object’s `blastCellId` field.'''

    wms_pallet_location_id = sgqlc.types.Field('StringFilter', graphql_name='wmsPalletLocationId')
    '''Filter by the object’s `wmsPalletLocationId` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellWmsPalletLocationFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellWmsPalletLocationFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BlastCellWmsPalletLocationFilter', graphql_name='not')
    '''Negates the expression.'''



class BlastCellWmsPalletLocationInput(sgqlc.types.Input):
    '''An input for mutations affecting `BlastCellWmsPalletLocation`'''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'wms_pallet_location_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCellId')

    wms_pallet_location_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsPalletLocationId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastCellWmsPalletLocationPatch(sgqlc.types.Input):
    '''Represents an update to a `BlastCellWmsPalletLocation`. Fields
    that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'wms_pallet_location_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    blast_cell_id = sgqlc.types.Field(Int, graphql_name='blastCellId')

    wms_pallet_location_id = sgqlc.types.Field(String, graphql_name='wmsPalletLocationId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastCellWmsPalletPatch(sgqlc.types.Input):
    '''Represents an update to a `BlastCellWmsPallet`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'wms_pallet_id', 'pallet_dropped_datetime', 'pallet_picked_datetime', 'blast_cycle_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    blast_cell_id = sgqlc.types.Field(Int, graphql_name='blastCellId')

    wms_pallet_id = sgqlc.types.Field(String, graphql_name='wmsPalletId')

    pallet_dropped_datetime = sgqlc.types.Field(Datetime, graphql_name='palletDroppedDatetime')

    pallet_picked_datetime = sgqlc.types.Field(Datetime, graphql_name='palletPickedDatetime')

    blast_cycle_id = sgqlc.types.Field(Int, graphql_name='blastCycleId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastCycleCondition(sgqlc.types.Input):
    '''A condition to be used against `BlastCycle` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'overall_start_time', 'overall_finish_time', 'created_at', 'updated_at', 'current_status', 'event_proposal_id', 'estimated_freezing_hours', 'planned_pallet_freezing_hours', 'ideal_pallet_freezing_hours', 'load_start_time', 'load_finish_time', 'refrigeration_start_time', 'refrigeration_finish_time', 'unload_start_time', 'unload_finish_time')
    id = sgqlc.types.Field(Int, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    blast_cell_id = sgqlc.types.Field(Int, graphql_name='blastCellId')
    '''Checks for equality with the object’s `blastCellId` field.'''

    overall_start_time = sgqlc.types.Field(Datetime, graphql_name='overallStartTime')
    '''Checks for equality with the object’s `overallStartTime` field.'''

    overall_finish_time = sgqlc.types.Field(Datetime, graphql_name='overallFinishTime')
    '''Checks for equality with the object’s `overallFinishTime` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    current_status = sgqlc.types.Field(String, graphql_name='currentStatus')
    '''Checks for equality with the object’s `currentStatus` field.'''

    event_proposal_id = sgqlc.types.Field(UUID, graphql_name='eventProposalId')
    '''Checks for equality with the object’s `eventProposalId` field.'''

    estimated_freezing_hours = sgqlc.types.Field(Float, graphql_name='estimatedFreezingHours')
    '''Checks for equality with the object’s `estimatedFreezingHours`
    field.
    '''

    planned_pallet_freezing_hours = sgqlc.types.Field(Float, graphql_name='plannedPalletFreezingHours')
    '''Checks for equality with the object’s `plannedPalletFreezingHours`
    field.
    '''

    ideal_pallet_freezing_hours = sgqlc.types.Field(Float, graphql_name='idealPalletFreezingHours')
    '''Checks for equality with the object’s `idealPalletFreezingHours`
    field.
    '''

    load_start_time = sgqlc.types.Field(Datetime, graphql_name='loadStartTime')
    '''Checks for equality with the object’s `loadStartTime` field.'''

    load_finish_time = sgqlc.types.Field(Datetime, graphql_name='loadFinishTime')
    '''Checks for equality with the object’s `loadFinishTime` field.'''

    refrigeration_start_time = sgqlc.types.Field(Datetime, graphql_name='refrigerationStartTime')
    '''Checks for equality with the object’s `refrigerationStartTime`
    field.
    '''

    refrigeration_finish_time = sgqlc.types.Field(Datetime, graphql_name='refrigerationFinishTime')
    '''Checks for equality with the object’s `refrigerationFinishTime`
    field.
    '''

    unload_start_time = sgqlc.types.Field(Datetime, graphql_name='unloadStartTime')
    '''Checks for equality with the object’s `unloadStartTime` field.'''

    unload_finish_time = sgqlc.types.Field(Datetime, graphql_name='unloadFinishTime')
    '''Checks for equality with the object’s `unloadFinishTime` field.'''



class BlastCycleEventCondition(sgqlc.types.Input):
    '''A condition to be used against `BlastCycleEvent` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cycle_id', 'description', 'type', 'event_time')
    id = sgqlc.types.Field(UUID, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    blast_cycle_id = sgqlc.types.Field(Int, graphql_name='blastCycleId')
    '''Checks for equality with the object’s `blastCycleId` field.'''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Checks for equality with the object’s `description` field.'''

    type = sgqlc.types.Field(String, graphql_name='type')
    '''Checks for equality with the object’s `type` field.'''

    event_time = sgqlc.types.Field(Datetime, graphql_name='eventTime')
    '''Checks for equality with the object’s `eventTime` field.'''



class BlastCycleEventFilter(sgqlc.types.Input):
    '''A filter to be used against `BlastCycleEvent` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cycle_id', 'description', 'type', 'event_time', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('UUIDFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    blast_cycle_id = sgqlc.types.Field('IntFilter', graphql_name='blastCycleId')
    '''Filter by the object’s `blastCycleId` field.'''

    description = sgqlc.types.Field('StringFilter', graphql_name='description')
    '''Filter by the object’s `description` field.'''

    type = sgqlc.types.Field('StringFilter', graphql_name='type')
    '''Filter by the object’s `type` field.'''

    event_time = sgqlc.types.Field('DatetimeFilter', graphql_name='eventTime')
    '''Filter by the object’s `eventTime` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleEventFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleEventFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BlastCycleEventFilter', graphql_name='not')
    '''Negates the expression.'''



class BlastCycleEventInput(sgqlc.types.Input):
    '''An input for mutations affecting `BlastCycleEvent`'''
    __schema__ = base
    __field_names__ = ('id', 'blast_cycle_id', 'description', 'type', 'event_time')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    blast_cycle_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCycleId')

    description = sgqlc.types.Field(String, graphql_name='description')

    type = sgqlc.types.Field(String, graphql_name='type')

    event_time = sgqlc.types.Field(Datetime, graphql_name='eventTime')



class BlastCycleEventPatch(sgqlc.types.Input):
    '''Represents an update to a `BlastCycleEvent`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cycle_id', 'description', 'type', 'event_time')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    blast_cycle_id = sgqlc.types.Field(Int, graphql_name='blastCycleId')

    description = sgqlc.types.Field(String, graphql_name='description')

    type = sgqlc.types.Field(String, graphql_name='type')

    event_time = sgqlc.types.Field(Datetime, graphql_name='eventTime')



class BlastCycleFilter(sgqlc.types.Input):
    '''A filter to be used against `BlastCycle` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'overall_start_time', 'overall_finish_time', 'created_at', 'updated_at', 'current_status', 'event_proposal_id', 'estimated_freezing_hours', 'planned_pallet_freezing_hours', 'ideal_pallet_freezing_hours', 'load_start_time', 'load_finish_time', 'refrigeration_start_time', 'refrigeration_finish_time', 'unload_start_time', 'unload_finish_time', 'idle_duration_hours', 'load_duration_hours', 'overall_duration_hours', 'refrigeration_duration_hours', 'unload_duration_hours', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('IntFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    blast_cell_id = sgqlc.types.Field('IntFilter', graphql_name='blastCellId')
    '''Filter by the object’s `blastCellId` field.'''

    overall_start_time = sgqlc.types.Field('DatetimeFilter', graphql_name='overallStartTime')
    '''Filter by the object’s `overallStartTime` field.'''

    overall_finish_time = sgqlc.types.Field('DatetimeFilter', graphql_name='overallFinishTime')
    '''Filter by the object’s `overallFinishTime` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    current_status = sgqlc.types.Field('StringFilter', graphql_name='currentStatus')
    '''Filter by the object’s `currentStatus` field.'''

    event_proposal_id = sgqlc.types.Field('UUIDFilter', graphql_name='eventProposalId')
    '''Filter by the object’s `eventProposalId` field.'''

    estimated_freezing_hours = sgqlc.types.Field('FloatFilter', graphql_name='estimatedFreezingHours')
    '''Filter by the object’s `estimatedFreezingHours` field.'''

    planned_pallet_freezing_hours = sgqlc.types.Field('FloatFilter', graphql_name='plannedPalletFreezingHours')
    '''Filter by the object’s `plannedPalletFreezingHours` field.'''

    ideal_pallet_freezing_hours = sgqlc.types.Field('FloatFilter', graphql_name='idealPalletFreezingHours')
    '''Filter by the object’s `idealPalletFreezingHours` field.'''

    load_start_time = sgqlc.types.Field('DatetimeFilter', graphql_name='loadStartTime')
    '''Filter by the object’s `loadStartTime` field.'''

    load_finish_time = sgqlc.types.Field('DatetimeFilter', graphql_name='loadFinishTime')
    '''Filter by the object’s `loadFinishTime` field.'''

    refrigeration_start_time = sgqlc.types.Field('DatetimeFilter', graphql_name='refrigerationStartTime')
    '''Filter by the object’s `refrigerationStartTime` field.'''

    refrigeration_finish_time = sgqlc.types.Field('DatetimeFilter', graphql_name='refrigerationFinishTime')
    '''Filter by the object’s `refrigerationFinishTime` field.'''

    unload_start_time = sgqlc.types.Field('DatetimeFilter', graphql_name='unloadStartTime')
    '''Filter by the object’s `unloadStartTime` field.'''

    unload_finish_time = sgqlc.types.Field('DatetimeFilter', graphql_name='unloadFinishTime')
    '''Filter by the object’s `unloadFinishTime` field.'''

    idle_duration_hours = sgqlc.types.Field('FloatFilter', graphql_name='idleDurationHours')
    '''Filter by the object’s `idleDurationHours` field.'''

    load_duration_hours = sgqlc.types.Field('FloatFilter', graphql_name='loadDurationHours')
    '''Filter by the object’s `loadDurationHours` field.'''

    overall_duration_hours = sgqlc.types.Field('FloatFilter', graphql_name='overallDurationHours')
    '''Filter by the object’s `overallDurationHours` field.'''

    refrigeration_duration_hours = sgqlc.types.Field('FloatFilter', graphql_name='refrigerationDurationHours')
    '''Filter by the object’s `refrigerationDurationHours` field.'''

    unload_duration_hours = sgqlc.types.Field('FloatFilter', graphql_name='unloadDurationHours')
    '''Filter by the object’s `unloadDurationHours` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BlastCycleFilter', graphql_name='not')
    '''Negates the expression.'''



class BlastCycleInput(sgqlc.types.Input):
    '''An input for mutations affecting `BlastCycle`'''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'overall_start_time', 'overall_finish_time', 'created_at', 'updated_at', 'current_status', 'event_proposal_id', 'estimated_freezing_hours', 'planned_pallet_freezing_hours', 'ideal_pallet_freezing_hours', 'load_start_time', 'load_finish_time', 'refrigeration_start_time', 'refrigeration_finish_time', 'unload_start_time', 'unload_finish_time')
    id = sgqlc.types.Field(Int, graphql_name='id')

    blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCellId')

    overall_start_time = sgqlc.types.Field(Datetime, graphql_name='overallStartTime')

    overall_finish_time = sgqlc.types.Field(Datetime, graphql_name='overallFinishTime')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    current_status = sgqlc.types.Field(String, graphql_name='currentStatus')

    event_proposal_id = sgqlc.types.Field(UUID, graphql_name='eventProposalId')

    estimated_freezing_hours = sgqlc.types.Field(Float, graphql_name='estimatedFreezingHours')

    planned_pallet_freezing_hours = sgqlc.types.Field(Float, graphql_name='plannedPalletFreezingHours')

    ideal_pallet_freezing_hours = sgqlc.types.Field(Float, graphql_name='idealPalletFreezingHours')

    load_start_time = sgqlc.types.Field(Datetime, graphql_name='loadStartTime')

    load_finish_time = sgqlc.types.Field(Datetime, graphql_name='loadFinishTime')

    refrigeration_start_time = sgqlc.types.Field(Datetime, graphql_name='refrigerationStartTime')

    refrigeration_finish_time = sgqlc.types.Field(Datetime, graphql_name='refrigerationFinishTime')

    unload_start_time = sgqlc.types.Field(Datetime, graphql_name='unloadStartTime')

    unload_finish_time = sgqlc.types.Field(Datetime, graphql_name='unloadFinishTime')



class BlastCyclePatch(sgqlc.types.Input):
    '''Represents an update to a `BlastCycle`. Fields that are set will
    be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'overall_start_time', 'overall_finish_time', 'created_at', 'updated_at', 'current_status', 'event_proposal_id', 'estimated_freezing_hours', 'planned_pallet_freezing_hours', 'ideal_pallet_freezing_hours', 'load_start_time', 'load_finish_time', 'refrigeration_start_time', 'refrigeration_finish_time', 'unload_start_time', 'unload_finish_time')
    id = sgqlc.types.Field(Int, graphql_name='id')

    blast_cell_id = sgqlc.types.Field(Int, graphql_name='blastCellId')

    overall_start_time = sgqlc.types.Field(Datetime, graphql_name='overallStartTime')

    overall_finish_time = sgqlc.types.Field(Datetime, graphql_name='overallFinishTime')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    current_status = sgqlc.types.Field(String, graphql_name='currentStatus')

    event_proposal_id = sgqlc.types.Field(UUID, graphql_name='eventProposalId')

    estimated_freezing_hours = sgqlc.types.Field(Float, graphql_name='estimatedFreezingHours')

    planned_pallet_freezing_hours = sgqlc.types.Field(Float, graphql_name='plannedPalletFreezingHours')

    ideal_pallet_freezing_hours = sgqlc.types.Field(Float, graphql_name='idealPalletFreezingHours')

    load_start_time = sgqlc.types.Field(Datetime, graphql_name='loadStartTime')

    load_finish_time = sgqlc.types.Field(Datetime, graphql_name='loadFinishTime')

    refrigeration_start_time = sgqlc.types.Field(Datetime, graphql_name='refrigerationStartTime')

    refrigeration_finish_time = sgqlc.types.Field(Datetime, graphql_name='refrigerationFinishTime')

    unload_start_time = sgqlc.types.Field(Datetime, graphql_name='unloadStartTime')

    unload_finish_time = sgqlc.types.Field(Datetime, graphql_name='unloadFinishTime')



class BlastCycleWmsPalletCondition(sgqlc.types.Input):
    '''A condition to be used against `BlastCycleWmsPallet` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cycle_id', 'wms_pallet_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    blast_cycle_id = sgqlc.types.Field(Int, graphql_name='blastCycleId')
    '''Checks for equality with the object’s `blastCycleId` field.'''

    wms_pallet_id = sgqlc.types.Field(String, graphql_name='wmsPalletId')
    '''Checks for equality with the object’s `wmsPalletId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class BlastCycleWmsPalletFilter(sgqlc.types.Input):
    '''A filter to be used against `BlastCycleWmsPallet` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cycle_id', 'wms_pallet_id', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('UUIDFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    blast_cycle_id = sgqlc.types.Field('IntFilter', graphql_name='blastCycleId')
    '''Filter by the object’s `blastCycleId` field.'''

    wms_pallet_id = sgqlc.types.Field('StringFilter', graphql_name='wmsPalletId')
    '''Filter by the object’s `wmsPalletId` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleWmsPalletFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleWmsPalletFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BlastCycleWmsPalletFilter', graphql_name='not')
    '''Negates the expression.'''



class BlastCycleWmsPalletInput(sgqlc.types.Input):
    '''An input for mutations affecting `BlastCycleWmsPallet`'''
    __schema__ = base
    __field_names__ = ('id', 'blast_cycle_id', 'wms_pallet_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    blast_cycle_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCycleId')

    wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsPalletId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastCycleWmsPalletPatch(sgqlc.types.Input):
    '''Represents an update to a `BlastCycleWmsPallet`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_cycle_id', 'wms_pallet_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    blast_cycle_id = sgqlc.types.Field(Int, graphql_name='blastCycleId')

    wms_pallet_id = sgqlc.types.Field(String, graphql_name='wmsPalletId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastPlanCondition(sgqlc.types.Input):
    '''A condition to be used against `BlastPlan` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'assignment_time', 'assigned_by', 'type', 'assigned_blast_cell_id', 'is_committed')
    id = sgqlc.types.Field(UUID, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    assignment_time = sgqlc.types.Field(Datetime, graphql_name='assignmentTime')
    '''Checks for equality with the object’s `assignmentTime` field.'''

    assigned_by = sgqlc.types.Field(String, graphql_name='assignedBy')
    '''Checks for equality with the object’s `assignedBy` field.'''

    type = sgqlc.types.Field(BlastPlanType, graphql_name='type')
    '''Checks for equality with the object’s `type` field.'''

    assigned_blast_cell_id = sgqlc.types.Field(Int, graphql_name='assignedBlastCellId')
    '''Checks for equality with the object’s `assignedBlastCellId` field.'''

    is_committed = sgqlc.types.Field(Boolean, graphql_name='isCommitted')
    '''Checks for equality with the object’s `isCommitted` field.'''



class BlastPlanFilter(sgqlc.types.Input):
    '''A filter to be used against `BlastPlan` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'assignment_time', 'assigned_by', 'type', 'assigned_blast_cell_id', 'is_committed', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('UUIDFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    assignment_time = sgqlc.types.Field('DatetimeFilter', graphql_name='assignmentTime')
    '''Filter by the object’s `assignmentTime` field.'''

    assigned_by = sgqlc.types.Field('StringFilter', graphql_name='assignedBy')
    '''Filter by the object’s `assignedBy` field.'''

    type = sgqlc.types.Field('BlastPlanTypeFilter', graphql_name='type')
    '''Filter by the object’s `type` field.'''

    assigned_blast_cell_id = sgqlc.types.Field('IntFilter', graphql_name='assignedBlastCellId')
    '''Filter by the object’s `assignedBlastCellId` field.'''

    is_committed = sgqlc.types.Field('BooleanFilter', graphql_name='isCommitted')
    '''Filter by the object’s `isCommitted` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastPlanFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastPlanFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BlastPlanFilter', graphql_name='not')
    '''Negates the expression.'''



class BlastPlanInput(sgqlc.types.Input):
    '''An input for mutations affecting `BlastPlan`'''
    __schema__ = base
    __field_names__ = ('id', 'assignment_time', 'assigned_by', 'type', 'assigned_blast_cell_id', 'is_committed')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    assignment_time = sgqlc.types.Field(Datetime, graphql_name='assignmentTime')

    assigned_by = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='assignedBy')

    type = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanType), graphql_name='type')

    assigned_blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='assignedBlastCellId')

    is_committed = sgqlc.types.Field(Boolean, graphql_name='isCommitted')



class BlastPlanPalletCondition(sgqlc.types.Input):
    '''A condition to be used against `BlastPlanPallet` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_plan_id', 'wms_pallet_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    blast_plan_id = sgqlc.types.Field(UUID, graphql_name='blastPlanId')
    '''Checks for equality with the object’s `blastPlanId` field.'''

    wms_pallet_id = sgqlc.types.Field(String, graphql_name='wmsPalletId')
    '''Checks for equality with the object’s `wmsPalletId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class BlastPlanPalletFilter(sgqlc.types.Input):
    '''A filter to be used against `BlastPlanPallet` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_plan_id', 'wms_pallet_id', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('UUIDFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    blast_plan_id = sgqlc.types.Field('UUIDFilter', graphql_name='blastPlanId')
    '''Filter by the object’s `blastPlanId` field.'''

    wms_pallet_id = sgqlc.types.Field('StringFilter', graphql_name='wmsPalletId')
    '''Filter by the object’s `wmsPalletId` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastPlanPalletFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastPlanPalletFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BlastPlanPalletFilter', graphql_name='not')
    '''Negates the expression.'''



class BlastPlanPalletInput(sgqlc.types.Input):
    '''An input for mutations affecting `BlastPlanPallet`'''
    __schema__ = base
    __field_names__ = ('id', 'blast_plan_id', 'wms_pallet_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    blast_plan_id = sgqlc.types.Field(UUID, graphql_name='blastPlanId')

    wms_pallet_id = sgqlc.types.Field(String, graphql_name='wmsPalletId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastPlanPalletPatch(sgqlc.types.Input):
    '''Represents an update to a `BlastPlanPallet`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'blast_plan_id', 'wms_pallet_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    blast_plan_id = sgqlc.types.Field(UUID, graphql_name='blastPlanId')

    wms_pallet_id = sgqlc.types.Field(String, graphql_name='wmsPalletId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastPlanPatch(sgqlc.types.Input):
    '''Represents an update to a `BlastPlan`. Fields that are set will be
    updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'assignment_time', 'assigned_by', 'type', 'assigned_blast_cell_id', 'is_committed')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    assignment_time = sgqlc.types.Field(Datetime, graphql_name='assignmentTime')

    assigned_by = sgqlc.types.Field(String, graphql_name='assignedBy')

    type = sgqlc.types.Field(BlastPlanType, graphql_name='type')

    assigned_blast_cell_id = sgqlc.types.Field(Int, graphql_name='assignedBlastCellId')

    is_committed = sgqlc.types.Field(Boolean, graphql_name='isCommitted')



class BlastPlanTypeFilter(sgqlc.types.Input):
    '''A filter to be used against BlastPlanType fields. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(BlastPlanType, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(BlastPlanType, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(BlastPlanType, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(BlastPlanType, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlanType)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlanType)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(BlastPlanType, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(BlastPlanType, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(BlastPlanType, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(BlastPlanType, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class BolConstantsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `BolConstantsRaw` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'customer_id', 'chep_pallet_weight', 'cpc_pallet_weight', 'igps_pallet_weight', 'is_print', 'whitewood_pallet_weight', 'customer_address_line1', 'customer_address_line2', 'customer_city_state_zip', 'shipper_name', 'warehouse_address_line1', 'warehouse_address_line2', 'warehouse_address_line3', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    chep_pallet_weight = sgqlc.types.Field(Float, graphql_name='chepPalletWeight')
    '''Checks for equality with the object’s `chepPalletWeight` field.'''

    cpc_pallet_weight = sgqlc.types.Field(Float, graphql_name='cpcPalletWeight')
    '''Checks for equality with the object’s `cpcPalletWeight` field.'''

    igps_pallet_weight = sgqlc.types.Field(Float, graphql_name='igpsPalletWeight')
    '''Checks for equality with the object’s `igpsPalletWeight` field.'''

    is_print = sgqlc.types.Field(Boolean, graphql_name='isPrint')
    '''Checks for equality with the object’s `isPrint` field.'''

    whitewood_pallet_weight = sgqlc.types.Field(Float, graphql_name='whitewoodPalletWeight')
    '''Checks for equality with the object’s `whitewoodPalletWeight`
    field.
    '''

    customer_address_line1 = sgqlc.types.Field(String, graphql_name='customerAddressLine1')
    '''Checks for equality with the object’s `customerAddressLine1`
    field.
    '''

    customer_address_line2 = sgqlc.types.Field(String, graphql_name='customerAddressLine2')
    '''Checks for equality with the object’s `customerAddressLine2`
    field.
    '''

    customer_city_state_zip = sgqlc.types.Field(String, graphql_name='customerCityStateZip')
    '''Checks for equality with the object’s `customerCityStateZip`
    field.
    '''

    shipper_name = sgqlc.types.Field(String, graphql_name='shipperName')
    '''Checks for equality with the object’s `shipperName` field.'''

    warehouse_address_line1 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine1')
    '''Checks for equality with the object’s `warehouseAddressLine1`
    field.
    '''

    warehouse_address_line2 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine2')
    '''Checks for equality with the object’s `warehouseAddressLine2`
    field.
    '''

    warehouse_address_line3 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine3')
    '''Checks for equality with the object’s `warehouseAddressLine3`
    field.
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class BolConstantsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `BolConstantsRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'customer_id', 'chep_pallet_weight', 'cpc_pallet_weight', 'igps_pallet_weight', 'is_print', 'whitewood_pallet_weight', 'customer_address_line1', 'customer_address_line2', 'customer_city_state_zip', 'shipper_name', 'warehouse_address_line1', 'warehouse_address_line2', 'warehouse_address_line3', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    chep_pallet_weight = sgqlc.types.Field('FloatFilter', graphql_name='chepPalletWeight')
    '''Filter by the object’s `chepPalletWeight` field.'''

    cpc_pallet_weight = sgqlc.types.Field('FloatFilter', graphql_name='cpcPalletWeight')
    '''Filter by the object’s `cpcPalletWeight` field.'''

    igps_pallet_weight = sgqlc.types.Field('FloatFilter', graphql_name='igpsPalletWeight')
    '''Filter by the object’s `igpsPalletWeight` field.'''

    is_print = sgqlc.types.Field('BooleanFilter', graphql_name='isPrint')
    '''Filter by the object’s `isPrint` field.'''

    whitewood_pallet_weight = sgqlc.types.Field('FloatFilter', graphql_name='whitewoodPalletWeight')
    '''Filter by the object’s `whitewoodPalletWeight` field.'''

    customer_address_line1 = sgqlc.types.Field('StringFilter', graphql_name='customerAddressLine1')
    '''Filter by the object’s `customerAddressLine1` field.'''

    customer_address_line2 = sgqlc.types.Field('StringFilter', graphql_name='customerAddressLine2')
    '''Filter by the object’s `customerAddressLine2` field.'''

    customer_city_state_zip = sgqlc.types.Field('StringFilter', graphql_name='customerCityStateZip')
    '''Filter by the object’s `customerCityStateZip` field.'''

    shipper_name = sgqlc.types.Field('StringFilter', graphql_name='shipperName')
    '''Filter by the object’s `shipperName` field.'''

    warehouse_address_line1 = sgqlc.types.Field('StringFilter', graphql_name='warehouseAddressLine1')
    '''Filter by the object’s `warehouseAddressLine1` field.'''

    warehouse_address_line2 = sgqlc.types.Field('StringFilter', graphql_name='warehouseAddressLine2')
    '''Filter by the object’s `warehouseAddressLine2` field.'''

    warehouse_address_line3 = sgqlc.types.Field('StringFilter', graphql_name='warehouseAddressLine3')
    '''Filter by the object’s `warehouseAddressLine3` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BolConstantsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BolConstantsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BolConstantsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class BolConstantsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `BolConstantsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'customer_id', 'chep_pallet_weight', 'cpc_pallet_weight', 'igps_pallet_weight', 'is_print', 'whitewood_pallet_weight', 'customer_address_line1', 'customer_address_line2', 'customer_city_state_zip', 'shipper_name', 'warehouse_address_line1', 'warehouse_address_line2', 'warehouse_address_line3', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    chep_pallet_weight = sgqlc.types.Field(Float, graphql_name='chepPalletWeight')
    '''Weight to use for CHEP Pallets (in pounds)'''

    cpc_pallet_weight = sgqlc.types.Field(Float, graphql_name='cpcPalletWeight')
    '''Weight to use for CPC Pallets (in pounds)'''

    igps_pallet_weight = sgqlc.types.Field(Float, graphql_name='igpsPalletWeight')
    '''Weight to use for IGPS Pallets (in pounds)'''

    is_print = sgqlc.types.Field(Boolean, graphql_name='isPrint')
    '''Flag for whether the BOL can be printed'''

    whitewood_pallet_weight = sgqlc.types.Field(Float, graphql_name='whitewoodPalletWeight')
    '''Weight to use for White Wood Pallets (in pounds)'''

    customer_address_line1 = sgqlc.types.Field(String, graphql_name='customerAddressLine1')
    '''Address 1 line to print on the BOL'''

    customer_address_line2 = sgqlc.types.Field(String, graphql_name='customerAddressLine2')
    '''Address 2 line to print on the BOL'''

    customer_city_state_zip = sgqlc.types.Field(String, graphql_name='customerCityStateZip')
    '''City, State, Zip to print on the BOL'''

    shipper_name = sgqlc.types.Field(String, graphql_name='shipperName')
    '''Shipper Name to print on the BOL'''

    warehouse_address_line1 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine1')
    '''Warehouse address line 1'''

    warehouse_address_line2 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine2')
    '''Warehouse address line 2.  In MRS this stores the warehouse City,
    State and Zip
    '''

    warehouse_address_line3 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine3')
    '''Warehouse address line 3.  In MRS this stores thw warehouse Phone
    Number
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class BolConstantsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `BolConstantsRaw`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'customer_id', 'chep_pallet_weight', 'cpc_pallet_weight', 'igps_pallet_weight', 'is_print', 'whitewood_pallet_weight', 'customer_address_line1', 'customer_address_line2', 'customer_city_state_zip', 'shipper_name', 'warehouse_address_line1', 'warehouse_address_line2', 'warehouse_address_line3', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    chep_pallet_weight = sgqlc.types.Field(Float, graphql_name='chepPalletWeight')
    '''Weight to use for CHEP Pallets (in pounds)'''

    cpc_pallet_weight = sgqlc.types.Field(Float, graphql_name='cpcPalletWeight')
    '''Weight to use for CPC Pallets (in pounds)'''

    igps_pallet_weight = sgqlc.types.Field(Float, graphql_name='igpsPalletWeight')
    '''Weight to use for IGPS Pallets (in pounds)'''

    is_print = sgqlc.types.Field(Boolean, graphql_name='isPrint')
    '''Flag for whether the BOL can be printed'''

    whitewood_pallet_weight = sgqlc.types.Field(Float, graphql_name='whitewoodPalletWeight')
    '''Weight to use for White Wood Pallets (in pounds)'''

    customer_address_line1 = sgqlc.types.Field(String, graphql_name='customerAddressLine1')
    '''Address 1 line to print on the BOL'''

    customer_address_line2 = sgqlc.types.Field(String, graphql_name='customerAddressLine2')
    '''Address 2 line to print on the BOL'''

    customer_city_state_zip = sgqlc.types.Field(String, graphql_name='customerCityStateZip')
    '''City, State, Zip to print on the BOL'''

    shipper_name = sgqlc.types.Field(String, graphql_name='shipperName')
    '''Shipper Name to print on the BOL'''

    warehouse_address_line1 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine1')
    '''Warehouse address line 1'''

    warehouse_address_line2 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine2')
    '''Warehouse address line 2.  In MRS this stores the warehouse City,
    State and Zip
    '''

    warehouse_address_line3 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine3')
    '''Warehouse address line 3.  In MRS this stores thw warehouse Phone
    Number
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class BooleanFilter(sgqlc.types.Input):
    '''A filter to be used against Boolean fields. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(Boolean, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(Boolean, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(Boolean, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(Boolean, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Boolean)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Boolean)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(Boolean, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(Boolean, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(Boolean, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(Boolean, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class BrokerOwnersRawCondition(sgqlc.types.Input):
    '''A condition to be used against `BrokerOwnersRaw` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'broker_customer_code', 'broker_customer_id', 'owner_code', 'owner_name', 'owner_customer_code', 'owner_customer_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    broker_customer_code = sgqlc.types.Field(String, graphql_name='brokerCustomerCode')
    '''Checks for equality with the object’s `brokerCustomerCode` field.'''

    broker_customer_id = sgqlc.types.Field(String, graphql_name='brokerCustomerId')
    '''Checks for equality with the object’s `brokerCustomerId` field.'''

    owner_code = sgqlc.types.Field(String, graphql_name='ownerCode')
    '''Checks for equality with the object’s `ownerCode` field.'''

    owner_name = sgqlc.types.Field(String, graphql_name='ownerName')
    '''Checks for equality with the object’s `ownerName` field.'''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Checks for equality with the object’s `ownerCustomerCode` field.'''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')
    '''Checks for equality with the object’s `ownerCustomerId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class BrokerOwnersRawFilter(sgqlc.types.Input):
    '''A filter to be used against `BrokerOwnersRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'broker_customer_code', 'broker_customer_id', 'owner_code', 'owner_name', 'owner_customer_code', 'owner_customer_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    broker_customer_code = sgqlc.types.Field('StringFilter', graphql_name='brokerCustomerCode')
    '''Filter by the object’s `brokerCustomerCode` field.'''

    broker_customer_id = sgqlc.types.Field('StringFilter', graphql_name='brokerCustomerId')
    '''Filter by the object’s `brokerCustomerId` field.'''

    owner_code = sgqlc.types.Field('StringFilter', graphql_name='ownerCode')
    '''Filter by the object’s `ownerCode` field.'''

    owner_name = sgqlc.types.Field('StringFilter', graphql_name='ownerName')
    '''Filter by the object’s `ownerName` field.'''

    owner_customer_code = sgqlc.types.Field('StringFilter', graphql_name='ownerCustomerCode')
    '''Filter by the object’s `ownerCustomerCode` field.'''

    owner_customer_id = sgqlc.types.Field('StringFilter', graphql_name='ownerCustomerId')
    '''Filter by the object’s `ownerCustomerId` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BrokerOwnersRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BrokerOwnersRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('BrokerOwnersRawFilter', graphql_name='not')
    '''Negates the expression.'''



class BrokerOwnersRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `BrokerOwnersRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'broker_customer_code', 'broker_customer_id', 'owner_code', 'owner_name', 'owner_customer_code', 'owner_customer_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    broker_customer_code = sgqlc.types.Field(String, graphql_name='brokerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    broker_customer_id = sgqlc.types.Field(String, graphql_name='brokerCustomerId')

    owner_code = sgqlc.types.Field(String, graphql_name='ownerCode')

    owner_name = sgqlc.types.Field(String, graphql_name='ownerName')

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class BrokerOwnersRawPatch(sgqlc.types.Input):
    '''Represents an update to a `BrokerOwnersRaw`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'broker_customer_code', 'broker_customer_id', 'owner_code', 'owner_name', 'owner_customer_code', 'owner_customer_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    broker_customer_code = sgqlc.types.Field(String, graphql_name='brokerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    broker_customer_id = sgqlc.types.Field(String, graphql_name='brokerCustomerId')

    owner_code = sgqlc.types.Field(String, graphql_name='ownerCode')

    owner_name = sgqlc.types.Field(String, graphql_name='ownerName')

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class CarrierCondition(sgqlc.types.Input):
    '''A condition to be used against `Carrier` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'carrier_code', 'external_system_id', 'external_system_name', 'carrier_name', 'mcn', 'dot', 'contact_first_name', 'contact_last_name', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'country', 'effective_date', 'phone', 'fax', 'email_address', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'updated_at', 'deleted_at', 'created_at', '_version', '_id')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Checks for equality with the object’s `carrierCode` field.'''

    external_system_id = sgqlc.types.Field(String, graphql_name='externalSystemId')
    '''Checks for equality with the object’s `externalSystemId` field.'''

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')
    '''Checks for equality with the object’s `externalSystemName` field.'''

    carrier_name = sgqlc.types.Field(String, graphql_name='carrierName')
    '''Checks for equality with the object’s `carrierName` field.'''

    mcn = sgqlc.types.Field(Int, graphql_name='mcn')
    '''Checks for equality with the object’s `mcn` field.'''

    dot = sgqlc.types.Field(String, graphql_name='dot')
    '''Checks for equality with the object’s `dot` field.'''

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')
    '''Checks for equality with the object’s `contactFirstName` field.'''

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')
    '''Checks for equality with the object’s `contactLastName` field.'''

    address1 = sgqlc.types.Field(String, graphql_name='address1')
    '''Checks for equality with the object’s `address1` field.'''

    address2 = sgqlc.types.Field(String, graphql_name='address2')
    '''Checks for equality with the object’s `address2` field.'''

    address3 = sgqlc.types.Field(String, graphql_name='address3')
    '''Checks for equality with the object’s `address3` field.'''

    city = sgqlc.types.Field(String, graphql_name='city')
    '''Checks for equality with the object’s `city` field.'''

    state = sgqlc.types.Field(String, graphql_name='state')
    '''Checks for equality with the object’s `state` field.'''

    zip = sgqlc.types.Field(String, graphql_name='zip')
    '''Checks for equality with the object’s `zip` field.'''

    country = sgqlc.types.Field(String, graphql_name='country')
    '''Checks for equality with the object’s `country` field.'''

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')
    '''Checks for equality with the object’s `effectiveDate` field.'''

    phone = sgqlc.types.Field(String, graphql_name='phone')
    '''Checks for equality with the object’s `phone` field.'''

    fax = sgqlc.types.Field(String, graphql_name='fax')
    '''Checks for equality with the object’s `fax` field.'''

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')
    '''Checks for equality with the object’s `emailAddress` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class CarrierFilter(sgqlc.types.Input):
    '''A filter to be used against `Carrier` object types. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'carrier_code', 'external_system_id', 'external_system_name', 'carrier_name', 'mcn', 'dot', 'contact_first_name', 'contact_last_name', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'country', 'effective_date', 'phone', 'fax', 'email_address', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'updated_at', 'deleted_at', 'created_at', '_version', '_id', 'and_', 'or_', 'not_')
    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    carrier_code = sgqlc.types.Field('StringFilter', graphql_name='carrierCode')
    '''Filter by the object’s `carrierCode` field.'''

    external_system_id = sgqlc.types.Field('StringFilter', graphql_name='externalSystemId')
    '''Filter by the object’s `externalSystemId` field.'''

    external_system_name = sgqlc.types.Field('StringFilter', graphql_name='externalSystemName')
    '''Filter by the object’s `externalSystemName` field.'''

    carrier_name = sgqlc.types.Field('StringFilter', graphql_name='carrierName')
    '''Filter by the object’s `carrierName` field.'''

    mcn = sgqlc.types.Field('IntFilter', graphql_name='mcn')
    '''Filter by the object’s `mcn` field.'''

    dot = sgqlc.types.Field('StringFilter', graphql_name='dot')
    '''Filter by the object’s `dot` field.'''

    contact_first_name = sgqlc.types.Field('StringFilter', graphql_name='contactFirstName')
    '''Filter by the object’s `contactFirstName` field.'''

    contact_last_name = sgqlc.types.Field('StringFilter', graphql_name='contactLastName')
    '''Filter by the object’s `contactLastName` field.'''

    address1 = sgqlc.types.Field('StringFilter', graphql_name='address1')
    '''Filter by the object’s `address1` field.'''

    address2 = sgqlc.types.Field('StringFilter', graphql_name='address2')
    '''Filter by the object’s `address2` field.'''

    address3 = sgqlc.types.Field('StringFilter', graphql_name='address3')
    '''Filter by the object’s `address3` field.'''

    city = sgqlc.types.Field('StringFilter', graphql_name='city')
    '''Filter by the object’s `city` field.'''

    state = sgqlc.types.Field('StringFilter', graphql_name='state')
    '''Filter by the object’s `state` field.'''

    zip = sgqlc.types.Field('StringFilter', graphql_name='zip')
    '''Filter by the object’s `zip` field.'''

    country = sgqlc.types.Field('StringFilter', graphql_name='country')
    '''Filter by the object’s `country` field.'''

    effective_date = sgqlc.types.Field('DatetimeFilter', graphql_name='effectiveDate')
    '''Filter by the object’s `effectiveDate` field.'''

    phone = sgqlc.types.Field('StringFilter', graphql_name='phone')
    '''Filter by the object’s `phone` field.'''

    fax = sgqlc.types.Field('StringFilter', graphql_name='fax')
    '''Filter by the object’s `fax` field.'''

    email_address = sgqlc.types.Field('StringFilter', graphql_name='emailAddress')
    '''Filter by the object’s `emailAddress` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CarrierFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CarrierFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('CarrierFilter', graphql_name='not')
    '''Negates the expression.'''



class CarriersRawCondition(sgqlc.types.Input):
    '''A condition to be used against `CarriersRaw` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('carrier_code', 'external_system_id', 'external_system_name', 'carrier_name', 'mcn', 'dot', 'contact_first_name', 'contact_last_name', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'country', 'effective_date', 'phone', 'fax', 'email_address', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'updated_at', 'deleted_at', 'created_at', '_version', '_id', 'id')
    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Checks for equality with the object’s `carrierCode` field.'''

    external_system_id = sgqlc.types.Field(String, graphql_name='externalSystemId')
    '''Checks for equality with the object’s `externalSystemId` field.'''

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')
    '''Checks for equality with the object’s `externalSystemName` field.'''

    carrier_name = sgqlc.types.Field(String, graphql_name='carrierName')
    '''Checks for equality with the object’s `carrierName` field.'''

    mcn = sgqlc.types.Field(Int, graphql_name='mcn')
    '''Checks for equality with the object’s `mcn` field.'''

    dot = sgqlc.types.Field(String, graphql_name='dot')
    '''Checks for equality with the object’s `dot` field.'''

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')
    '''Checks for equality with the object’s `contactFirstName` field.'''

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')
    '''Checks for equality with the object’s `contactLastName` field.'''

    address1 = sgqlc.types.Field(String, graphql_name='address1')
    '''Checks for equality with the object’s `address1` field.'''

    address2 = sgqlc.types.Field(String, graphql_name='address2')
    '''Checks for equality with the object’s `address2` field.'''

    address3 = sgqlc.types.Field(String, graphql_name='address3')
    '''Checks for equality with the object’s `address3` field.'''

    city = sgqlc.types.Field(String, graphql_name='city')
    '''Checks for equality with the object’s `city` field.'''

    state = sgqlc.types.Field(String, graphql_name='state')
    '''Checks for equality with the object’s `state` field.'''

    zip = sgqlc.types.Field(String, graphql_name='zip')
    '''Checks for equality with the object’s `zip` field.'''

    country = sgqlc.types.Field(String, graphql_name='country')
    '''Checks for equality with the object’s `country` field.'''

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')
    '''Checks for equality with the object’s `effectiveDate` field.'''

    phone = sgqlc.types.Field(String, graphql_name='phone')
    '''Checks for equality with the object’s `phone` field.'''

    fax = sgqlc.types.Field(String, graphql_name='fax')
    '''Checks for equality with the object’s `fax` field.'''

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')
    '''Checks for equality with the object’s `emailAddress` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''



class CarriersRawFilter(sgqlc.types.Input):
    '''A filter to be used against `CarriersRaw` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('carrier_code', 'external_system_id', 'external_system_name', 'carrier_name', 'mcn', 'dot', 'contact_first_name', 'contact_last_name', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'country', 'effective_date', 'phone', 'fax', 'email_address', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'updated_at', 'deleted_at', 'created_at', '_version', '_id', 'id', 'and_', 'or_', 'not_')
    carrier_code = sgqlc.types.Field('StringFilter', graphql_name='carrierCode')
    '''Filter by the object’s `carrierCode` field.'''

    external_system_id = sgqlc.types.Field('StringFilter', graphql_name='externalSystemId')
    '''Filter by the object’s `externalSystemId` field.'''

    external_system_name = sgqlc.types.Field('StringFilter', graphql_name='externalSystemName')
    '''Filter by the object’s `externalSystemName` field.'''

    carrier_name = sgqlc.types.Field('StringFilter', graphql_name='carrierName')
    '''Filter by the object’s `carrierName` field.'''

    mcn = sgqlc.types.Field('IntFilter', graphql_name='mcn')
    '''Filter by the object’s `mcn` field.'''

    dot = sgqlc.types.Field('StringFilter', graphql_name='dot')
    '''Filter by the object’s `dot` field.'''

    contact_first_name = sgqlc.types.Field('StringFilter', graphql_name='contactFirstName')
    '''Filter by the object’s `contactFirstName` field.'''

    contact_last_name = sgqlc.types.Field('StringFilter', graphql_name='contactLastName')
    '''Filter by the object’s `contactLastName` field.'''

    address1 = sgqlc.types.Field('StringFilter', graphql_name='address1')
    '''Filter by the object’s `address1` field.'''

    address2 = sgqlc.types.Field('StringFilter', graphql_name='address2')
    '''Filter by the object’s `address2` field.'''

    address3 = sgqlc.types.Field('StringFilter', graphql_name='address3')
    '''Filter by the object’s `address3` field.'''

    city = sgqlc.types.Field('StringFilter', graphql_name='city')
    '''Filter by the object’s `city` field.'''

    state = sgqlc.types.Field('StringFilter', graphql_name='state')
    '''Filter by the object’s `state` field.'''

    zip = sgqlc.types.Field('StringFilter', graphql_name='zip')
    '''Filter by the object’s `zip` field.'''

    country = sgqlc.types.Field('StringFilter', graphql_name='country')
    '''Filter by the object’s `country` field.'''

    effective_date = sgqlc.types.Field('DatetimeFilter', graphql_name='effectiveDate')
    '''Filter by the object’s `effectiveDate` field.'''

    phone = sgqlc.types.Field('StringFilter', graphql_name='phone')
    '''Filter by the object’s `phone` field.'''

    fax = sgqlc.types.Field('StringFilter', graphql_name='fax')
    '''Filter by the object’s `fax` field.'''

    email_address = sgqlc.types.Field('StringFilter', graphql_name='emailAddress')
    '''Filter by the object’s `emailAddress` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CarriersRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CarriersRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('CarriersRawFilter', graphql_name='not')
    '''Negates the expression.'''



class CarriersRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `CarriersRaw`'''
    __schema__ = base
    __field_names__ = ('carrier_code', 'external_system_id', 'external_system_name', 'carrier_name', 'mcn', 'dot', 'contact_first_name', 'contact_last_name', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'country', 'effective_date', 'phone', 'fax', 'email_address', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'updated_at', 'deleted_at', 'created_at', '_version', '_id', 'id')
    carrier_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='carrierCode')

    external_system_id = sgqlc.types.Field(String, graphql_name='externalSystemId')

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')

    carrier_name = sgqlc.types.Field(String, graphql_name='carrierName')

    mcn = sgqlc.types.Field(Int, graphql_name='mcn')

    dot = sgqlc.types.Field(String, graphql_name='dot')

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    address3 = sgqlc.types.Field(String, graphql_name='address3')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    country = sgqlc.types.Field(String, graphql_name='country')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    phone = sgqlc.types.Field(String, graphql_name='phone')

    fax = sgqlc.types.Field(String, graphql_name='fax')

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class CarriersRawPatch(sgqlc.types.Input):
    '''Represents an update to a `CarriersRaw`. Fields that are set will
    be updated.
    '''
    __schema__ = base
    __field_names__ = ('carrier_code', 'external_system_id', 'external_system_name', 'carrier_name', 'mcn', 'dot', 'contact_first_name', 'contact_last_name', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'country', 'effective_date', 'phone', 'fax', 'email_address', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'updated_at', 'deleted_at', 'created_at', '_version', '_id', 'id')
    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')

    external_system_id = sgqlc.types.Field(String, graphql_name='externalSystemId')

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')

    carrier_name = sgqlc.types.Field(String, graphql_name='carrierName')

    mcn = sgqlc.types.Field(Int, graphql_name='mcn')

    dot = sgqlc.types.Field(String, graphql_name='dot')

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    address3 = sgqlc.types.Field(String, graphql_name='address3')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    country = sgqlc.types.Field(String, graphql_name='country')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    phone = sgqlc.types.Field(String, graphql_name='phone')

    fax = sgqlc.types.Field(String, graphql_name='fax')

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    id = sgqlc.types.Field(String, graphql_name='id')



class CasePicksRawCondition(sgqlc.types.Input):
    '''A condition to be used against `CasePicksRaw` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'customer_code', 'case_pick_date', 'source_row_id', 'id', '_id', 'warehouse_facility_id', 'pallet_code', 'pick_type', 'quantity', 'created_at', 'updated_at', 'deleted_at', '_version', 'is_archived', 'operator_id', 'customer_id')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    case_pick_date = sgqlc.types.Field(Datetime, graphql_name='casePickDate')
    '''Checks for equality with the object’s `casePickDate` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    pick_type = sgqlc.types.Field(String, graphql_name='pickType')
    '''Checks for equality with the object’s `pickType` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Checks for equality with the object’s `operatorId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''



class CasePicksRawFilter(sgqlc.types.Input):
    '''A filter to be used against `CasePicksRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'customer_code', 'case_pick_date', 'source_row_id', 'id', '_id', 'warehouse_facility_id', 'pallet_code', 'pick_type', 'quantity', 'created_at', 'updated_at', 'deleted_at', '_version', 'is_archived', 'operator_id', 'customer_id', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    case_pick_date = sgqlc.types.Field('DatetimeFilter', graphql_name='casePickDate')
    '''Filter by the object’s `casePickDate` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    pallet_code = sgqlc.types.Field('StringFilter', graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    pick_type = sgqlc.types.Field('StringFilter', graphql_name='pickType')
    '''Filter by the object’s `pickType` field.'''

    quantity = sgqlc.types.Field('IntFilter', graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    operator_id = sgqlc.types.Field('StringFilter', graphql_name='operatorId')
    '''Filter by the object’s `operatorId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CasePicksRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CasePicksRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('CasePicksRawFilter', graphql_name='not')
    '''Negates the expression.'''



class CasePicksRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `CasePicksRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'customer_code', 'case_pick_date', 'source_row_id', 'id', '_id', 'warehouse_facility_id', 'pallet_code', 'pick_type', 'quantity', 'created_at', 'updated_at', 'deleted_at', '_version', 'is_archived', 'operator_id', 'customer_id')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    customer_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    case_pick_date = sgqlc.types.Field(Datetime, graphql_name='casePickDate')
    '''Timestamp for when the case pick occurred (in facility local time)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    pick_type = sgqlc.types.Field(String, graphql_name='pickType')
    '''Type of case pick.  Possible values include "Case Pick", "Cherry
    Pick", "Voice Pick", "Scanner Pick"
    '''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases picked'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Identifier used by the WMS to signify the operator'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class CasePicksRawPatch(sgqlc.types.Input):
    '''Represents an update to a `CasePicksRaw`. Fields that are set will
    be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'customer_code', 'case_pick_date', 'source_row_id', 'id', '_id', 'warehouse_facility_id', 'pallet_code', 'pick_type', 'quantity', 'created_at', 'updated_at', 'deleted_at', '_version', 'is_archived', 'operator_id', 'customer_id')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    case_pick_date = sgqlc.types.Field(Datetime, graphql_name='casePickDate')
    '''Timestamp for when the case pick occurred (in facility local time)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    pick_type = sgqlc.types.Field(String, graphql_name='pickType')
    '''Type of case pick.  Possible values include "Case Pick", "Cherry
    Pick", "Voice Pick", "Scanner Pick"
    '''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases picked'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Identifier used by the WMS to signify the operator'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class CostCenterCompanyLookupCondition(sgqlc.types.Input):
    '''A condition to be used against `CostCenterCompanyLookup` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('cost_center_id', 'company', 'created_at', 'created_by', 'updated_at', 'updated_by', 'company_code', 'include_in_facility_financials', 'include_in_rollup_financials')
    cost_center_id = sgqlc.types.Field(String, graphql_name='costCenterId')
    '''Checks for equality with the object’s `costCenterId` field.'''

    company = sgqlc.types.Field(String, graphql_name='company')
    '''Checks for equality with the object’s `company` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    created_by = sgqlc.types.Field(String, graphql_name='createdBy')
    '''Checks for equality with the object’s `createdBy` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    updated_by = sgqlc.types.Field(String, graphql_name='updatedBy')
    '''Checks for equality with the object’s `updatedBy` field.'''

    company_code = sgqlc.types.Field(String, graphql_name='companyCode')
    '''Checks for equality with the object’s `companyCode` field.'''

    include_in_facility_financials = sgqlc.types.Field(Boolean, graphql_name='includeInFacilityFinancials')
    '''Checks for equality with the object’s
    `includeInFacilityFinancials` field.
    '''

    include_in_rollup_financials = sgqlc.types.Field(Boolean, graphql_name='includeInRollupFinancials')
    '''Checks for equality with the object’s `includeInRollupFinancials`
    field.
    '''



class CostCenterCompanyLookupFilter(sgqlc.types.Input):
    '''A filter to be used against `CostCenterCompanyLookup` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('cost_center_id', 'company', 'created_at', 'created_by', 'updated_at', 'updated_by', 'company_code', 'include_in_facility_financials', 'include_in_rollup_financials', 'and_', 'or_', 'not_')
    cost_center_id = sgqlc.types.Field('StringFilter', graphql_name='costCenterId')
    '''Filter by the object’s `costCenterId` field.'''

    company = sgqlc.types.Field('StringFilter', graphql_name='company')
    '''Filter by the object’s `company` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    created_by = sgqlc.types.Field('StringFilter', graphql_name='createdBy')
    '''Filter by the object’s `createdBy` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    updated_by = sgqlc.types.Field('StringFilter', graphql_name='updatedBy')
    '''Filter by the object’s `updatedBy` field.'''

    company_code = sgqlc.types.Field('StringFilter', graphql_name='companyCode')
    '''Filter by the object’s `companyCode` field.'''

    include_in_facility_financials = sgqlc.types.Field(BooleanFilter, graphql_name='includeInFacilityFinancials')
    '''Filter by the object’s `includeInFacilityFinancials` field.'''

    include_in_rollup_financials = sgqlc.types.Field(BooleanFilter, graphql_name='includeInRollupFinancials')
    '''Filter by the object’s `includeInRollupFinancials` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CostCenterCompanyLookupFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CostCenterCompanyLookupFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('CostCenterCompanyLookupFilter', graphql_name='not')
    '''Negates the expression.'''



class CostCenterCompanyLookupInput(sgqlc.types.Input):
    '''An input for mutations affecting `CostCenterCompanyLookup`'''
    __schema__ = base
    __field_names__ = ('cost_center_id', 'company', 'created_at', 'created_by', 'updated_at', 'updated_by', 'company_code', 'include_in_facility_financials', 'include_in_rollup_financials')
    cost_center_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='costCenterId')

    company = sgqlc.types.Field(String, graphql_name='company')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    created_by = sgqlc.types.Field(String, graphql_name='createdBy')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    updated_by = sgqlc.types.Field(String, graphql_name='updatedBy')

    company_code = sgqlc.types.Field(String, graphql_name='companyCode')

    include_in_facility_financials = sgqlc.types.Field(Boolean, graphql_name='includeInFacilityFinancials')

    include_in_rollup_financials = sgqlc.types.Field(Boolean, graphql_name='includeInRollupFinancials')



class CreateAggregateWarehouseUtilByCustomerRawInput(sgqlc.types.Input):
    '''All input for the create `AggregateWarehouseUtilByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_util_by_customer_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    aggregate_warehouse_util_by_customer_raw = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseUtilByCustomerRawInput), graphql_name='aggregateWarehouseUtilByCustomerRaw')
    '''The `AggregateWarehouseUtilByCustomerRaw` to be created by this
    mutation.
    '''



class CreateAggregateWarehouseUtilRawInput(sgqlc.types.Input):
    '''All input for the create `AggregateWarehouseUtilRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_util_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    aggregate_warehouse_util_raw = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseUtilRawInput), graphql_name='aggregateWarehouseUtilRaw')
    '''The `AggregateWarehouseUtilRaw` to be created by this mutation.'''



class CreateAggregateWarehouseVolumeByCustomerRawInput(sgqlc.types.Input):
    '''All input for the create `AggregateWarehouseVolumeByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_volume_by_customer_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    aggregate_warehouse_volume_by_customer_raw = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseVolumeByCustomerRawInput), graphql_name='aggregateWarehouseVolumeByCustomerRaw')
    '''The `AggregateWarehouseVolumeByCustomerRaw` to be created by this
    mutation.
    '''



class CreateAggregateWarehouseVolumeRawInput(sgqlc.types.Input):
    '''All input for the create `AggregateWarehouseVolumeRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_volume_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    aggregate_warehouse_volume_raw = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseVolumeRawInput), graphql_name='aggregateWarehouseVolumeRaw')
    '''The `AggregateWarehouseVolumeRaw` to be created by this mutation.'''



class CreateBillingHistoryRawInput(sgqlc.types.Input):
    '''All input for the create `BillingHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'billing_history_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    billing_history_raw = sgqlc.types.Field(sgqlc.types.non_null(BillingHistoryRawInput), graphql_name='billingHistoryRaw')
    '''The `BillingHistoryRaw` to be created by this mutation.'''



class CreateBlastCellInput(sgqlc.types.Input):
    '''All input for the create `BlastCell` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    blast_cell = sgqlc.types.Field(sgqlc.types.non_null(BlastCellInput), graphql_name='blastCell')
    '''The `BlastCell` to be created by this mutation.'''



class CreateBlastCellTypeInput(sgqlc.types.Input):
    '''All input for the create `BlastCellType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_type')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    blast_cell_type = sgqlc.types.Field(sgqlc.types.non_null(BlastCellTypeInput), graphql_name='blastCellType')
    '''The `BlastCellType` to be created by this mutation.'''



class CreateBlastCellWmsPalletInput(sgqlc.types.Input):
    '''All input for the create `BlastCellWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_wms_pallet')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    blast_cell_wms_pallet = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletInput), graphql_name='blastCellWmsPallet')
    '''The `BlastCellWmsPallet` to be created by this mutation.'''



class CreateBlastCellWmsPalletLocationInput(sgqlc.types.Input):
    '''All input for the create `BlastCellWmsPalletLocation` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_wms_pallet_location')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    blast_cell_wms_pallet_location = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletLocationInput), graphql_name='blastCellWmsPalletLocation')
    '''The `BlastCellWmsPalletLocation` to be created by this mutation.'''



class CreateBlastCycleEventInput(sgqlc.types.Input):
    '''All input for the create `BlastCycleEvent` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle_event')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    blast_cycle_event = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleEventInput), graphql_name='blastCycleEvent')
    '''The `BlastCycleEvent` to be created by this mutation.'''



class CreateBlastCycleInput(sgqlc.types.Input):
    '''All input for the create `BlastCycle` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    blast_cycle = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleInput), graphql_name='blastCycle')
    '''The `BlastCycle` to be created by this mutation.'''



class CreateBlastCycleWmsPalletInput(sgqlc.types.Input):
    '''All input for the create `BlastCycleWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle_wms_pallet')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    blast_cycle_wms_pallet = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleWmsPalletInput), graphql_name='blastCycleWmsPallet')
    '''The `BlastCycleWmsPallet` to be created by this mutation.'''



class CreateBlastPlanInput(sgqlc.types.Input):
    '''All input for the create `BlastPlan` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_plan')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    blast_plan = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanInput), graphql_name='blastPlan')
    '''The `BlastPlan` to be created by this mutation.'''



class CreateBlastPlanPalletInput(sgqlc.types.Input):
    '''All input for the create `BlastPlanPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_plan_pallet')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    blast_plan_pallet = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanPalletInput), graphql_name='blastPlanPallet')
    '''The `BlastPlanPallet` to be created by this mutation.'''



class CreateBolConstantsRawInput(sgqlc.types.Input):
    '''All input for the create `BolConstantsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'bol_constants_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    bol_constants_raw = sgqlc.types.Field(sgqlc.types.non_null(BolConstantsRawInput), graphql_name='bolConstantsRaw')
    '''The `BolConstantsRaw` to be created by this mutation.'''



class CreateBrokerOwnersRawInput(sgqlc.types.Input):
    '''All input for the create `BrokerOwnersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'broker_owners_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    broker_owners_raw = sgqlc.types.Field(sgqlc.types.non_null(BrokerOwnersRawInput), graphql_name='brokerOwnersRaw')
    '''The `BrokerOwnersRaw` to be created by this mutation.'''



class CreateCarriersRawInput(sgqlc.types.Input):
    '''All input for the create `CarriersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'carriers_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    carriers_raw = sgqlc.types.Field(sgqlc.types.non_null(CarriersRawInput), graphql_name='carriersRaw')
    '''The `CarriersRaw` to be created by this mutation.'''



class CreateCasePicksRawInput(sgqlc.types.Input):
    '''All input for the create `CasePicksRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'case_picks_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    case_picks_raw = sgqlc.types.Field(sgqlc.types.non_null(CasePicksRawInput), graphql_name='casePicksRaw')
    '''The `CasePicksRaw` to be created by this mutation.'''



class CreateCostCenterCompanyLookupInput(sgqlc.types.Input):
    '''All input for the create `CostCenterCompanyLookup` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cost_center_company_lookup')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    cost_center_company_lookup = sgqlc.types.Field(sgqlc.types.non_null(CostCenterCompanyLookupInput), graphql_name='costCenterCompanyLookup')
    '''The `CostCenterCompanyLookup` to be created by this mutation.'''



class CreateCursorHistoryInput(sgqlc.types.Input):
    '''All input for the create `CursorHistory` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cursor_history')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    cursor_history = sgqlc.types.Field(sgqlc.types.non_null('CursorHistoryInput'), graphql_name='cursorHistory')
    '''The `CursorHistory` to be created by this mutation.'''



class CreateCustomerHierarchyInput(sgqlc.types.Input):
    '''All input for the create `CustomerHierarchy` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'customer_hierarchy')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    customer_hierarchy = sgqlc.types.Field(sgqlc.types.non_null('CustomerHierarchyInput'), graphql_name='customerHierarchy')
    '''The `CustomerHierarchy` to be created by this mutation.'''



class CreateCustomerHierarchyMapInput(sgqlc.types.Input):
    '''All input for the create `CustomerHierarchyMap` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'customer_hierarchy_map')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    customer_hierarchy_map = sgqlc.types.Field(sgqlc.types.non_null('CustomerHierarchyMapInput'), graphql_name='customerHierarchyMap')
    '''The `CustomerHierarchyMap` to be created by this mutation.'''



class CreateCutsRawInput(sgqlc.types.Input):
    '''All input for the create `CutsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cuts_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    cuts_raw = sgqlc.types.Field(sgqlc.types.non_null('CutsRawInput'), graphql_name='cutsRaw')
    '''The `CutsRaw` to be created by this mutation.'''



class CreateCyclesFromLoadedPalletsInput(sgqlc.types.Input):
    '''All input for the `createCyclesFromLoadedPallets` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id',)
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''



class CreateDriversMasterInput(sgqlc.types.Input):
    '''All input for the create `DriversMaster` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'drivers_master')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    drivers_master = sgqlc.types.Field(sgqlc.types.non_null('DriversMasterInput'), graphql_name='driversMaster')
    '''The `DriversMaster` to be created by this mutation.'''



class CreateDriversRawInput(sgqlc.types.Input):
    '''All input for the create `DriversRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'drivers_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    drivers_raw = sgqlc.types.Field(sgqlc.types.non_null('DriversRawInput'), graphql_name='driversRaw')
    '''The `DriversRaw` to be created by this mutation.'''



class CreateEdgeNodeInput(sgqlc.types.Input):
    '''All input for the create `EdgeNode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'edge_node')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    edge_node = sgqlc.types.Field(sgqlc.types.non_null('EdgeNodeInput'), graphql_name='edgeNode')
    '''The `EdgeNode` to be created by this mutation.'''



class CreateEdgeNodeSourceChannelAccessInput(sgqlc.types.Input):
    '''All input for the create `EdgeNodeSourceChannelAccess` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'edge_node_source_channel_access')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    edge_node_source_channel_access = sgqlc.types.Field(sgqlc.types.non_null('EdgeNodeSourceChannelAccessInput'), graphql_name='edgeNodeSourceChannelAccess')
    '''The `EdgeNodeSourceChannelAccess` to be created by this mutation.'''



class CreateExpectedInboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the create `ExpectedInboundOrderDetailsRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_inbound_order_details_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    expected_inbound_order_details_raw = sgqlc.types.Field(sgqlc.types.non_null('ExpectedInboundOrderDetailsRawInput'), graphql_name='expectedInboundOrderDetailsRaw')
    '''The `ExpectedInboundOrderDetailsRaw` to be created by this
    mutation.
    '''



class CreateExpectedInboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the create `ExpectedInboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_inbound_orders_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    expected_inbound_orders_raw = sgqlc.types.Field(sgqlc.types.non_null('ExpectedInboundOrdersRawInput'), graphql_name='expectedInboundOrdersRaw')
    '''The `ExpectedInboundOrdersRaw` to be created by this mutation.'''



class CreateExpectedOutboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the create `ExpectedOutboundOrderDetailsRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_outbound_order_details_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    expected_outbound_order_details_raw = sgqlc.types.Field(sgqlc.types.non_null('ExpectedOutboundOrderDetailsRawInput'), graphql_name='expectedOutboundOrderDetailsRaw')
    '''The `ExpectedOutboundOrderDetailsRaw` to be created by this
    mutation.
    '''



class CreateExpectedOutboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the create `ExpectedOutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_outbound_orders_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    expected_outbound_orders_raw = sgqlc.types.Field(sgqlc.types.non_null('ExpectedOutboundOrdersRawInput'), graphql_name='expectedOutboundOrdersRaw')
    '''The `ExpectedOutboundOrdersRaw` to be created by this mutation.'''



class CreateExpectedPalletsRawInput(sgqlc.types.Input):
    '''All input for the create `ExpectedPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_pallets_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    expected_pallets_raw = sgqlc.types.Field(sgqlc.types.non_null('ExpectedPalletsRawInput'), graphql_name='expectedPalletsRaw')
    '''The `ExpectedPalletsRaw` to be created by this mutation.'''



class CreateFacilitiesTestInput(sgqlc.types.Input):
    '''All input for the create `FacilitiesTest` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facilities_test')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    facilities_test = sgqlc.types.Field(sgqlc.types.non_null('FacilitiesTestInput'), graphql_name='facilitiesTest')
    '''The `FacilitiesTest` to be created by this mutation.'''



class CreateFacilityGroupingInput(sgqlc.types.Input):
    '''All input for the create `FacilityGrouping` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility_grouping')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    facility_grouping = sgqlc.types.Field(sgqlc.types.non_null('FacilityGroupingInput'), graphql_name='facilityGrouping')
    '''The `FacilityGrouping` to be created by this mutation.'''



class CreateFacilityInput(sgqlc.types.Input):
    '''All input for the create `Facility` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    facility = sgqlc.types.Field(sgqlc.types.non_null('FacilityInput'), graphql_name='facility')
    '''The `Facility` to be created by this mutation.'''



class CreateFacilityWarehouseLinkInput(sgqlc.types.Input):
    '''All input for the create `FacilityWarehouseLink` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility_warehouse_link')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    facility_warehouse_link = sgqlc.types.Field(sgqlc.types.non_null('FacilityWarehouseLinkInput'), graphql_name='facilityWarehouseLink')
    '''The `FacilityWarehouseLink` to be created by this mutation.'''



class CreateFacilityWorkdayCostCenterInput(sgqlc.types.Input):
    '''All input for the create `FacilityWorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility_workday_cost_center')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    facility_workday_cost_center = sgqlc.types.Field(sgqlc.types.non_null('FacilityWorkdayCostCenterInput'), graphql_name='facilityWorkdayCostCenter')
    '''The `FacilityWorkdayCostCenter` to be created by this mutation.'''



class CreateHoldCodesRawInput(sgqlc.types.Input):
    '''All input for the create `HoldCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'hold_codes_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    hold_codes_raw = sgqlc.types.Field(sgqlc.types.non_null('HoldCodesRawInput'), graphql_name='holdCodesRaw')
    '''The `HoldCodesRaw` to be created by this mutation.'''



class CreateHppRawInput(sgqlc.types.Input):
    '''All input for the create `HppRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'hpp_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    hpp_raw = sgqlc.types.Field(sgqlc.types.non_null('HppRawInput'), graphql_name='hppRaw')
    '''The `HppRaw` to be created by this mutation.'''



class CreateInboundCatchWeightRawInput(sgqlc.types.Input):
    '''All input for the create `InboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_catch_weight_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_catch_weight_raw = sgqlc.types.Field(sgqlc.types.non_null('InboundCatchWeightRawInput'), graphql_name='inboundCatchWeightRaw')
    '''The `InboundCatchWeightRaw` to be created by this mutation.'''



class CreateInboundLoadsRawInput(sgqlc.types.Input):
    '''All input for the create `InboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_loads_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_loads_raw = sgqlc.types.Field(sgqlc.types.non_null('InboundLoadsRawInput'), graphql_name='inboundLoadsRaw')
    '''The `InboundLoadsRaw` to be created by this mutation.'''



class CreateInboundOrderCommentsRawInput(sgqlc.types.Input):
    '''All input for the create `InboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_comments_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_order_comments_raw = sgqlc.types.Field(sgqlc.types.non_null('InboundOrderCommentsRawInput'), graphql_name='inboundOrderCommentsRaw')
    '''The `InboundOrderCommentsRaw` to be created by this mutation.'''



class CreateInboundOrderDetailReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the create `InboundOrderDetailReferenceCodesRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_detail_reference_codes_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_order_detail_reference_codes_raw = sgqlc.types.Field(sgqlc.types.non_null('InboundOrderDetailReferenceCodesRawInput'), graphql_name='inboundOrderDetailReferenceCodesRaw')
    '''The `InboundOrderDetailReferenceCodesRaw` to be created by this
    mutation.
    '''



class CreateInboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the create `InboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_details_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_order_details_raw = sgqlc.types.Field(sgqlc.types.non_null('InboundOrderDetailsRawInput'), graphql_name='inboundOrderDetailsRaw')
    '''The `InboundOrderDetailsRaw` to be created by this mutation.'''



class CreateInboundOrderReferenceCodeInput(sgqlc.types.Input):
    '''All input for the create `InboundOrderReferenceCode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_reference_code')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_order_reference_code = sgqlc.types.Field(sgqlc.types.non_null('InboundOrderReferenceCodeInput'), graphql_name='inboundOrderReferenceCode')
    '''The `InboundOrderReferenceCode` to be created by this mutation.'''



class CreateInboundOrderReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the create `InboundOrderReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_reference_codes_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_order_reference_codes_raw = sgqlc.types.Field(sgqlc.types.non_null('InboundOrderReferenceCodesRawInput'), graphql_name='inboundOrderReferenceCodesRaw')
    '''The `InboundOrderReferenceCodesRaw` to be created by this
    mutation.
    '''



class CreateInboundOrdersExecutionRawInput(sgqlc.types.Input):
    '''All input for the create `InboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_orders_execution_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_orders_execution_raw = sgqlc.types.Field(sgqlc.types.non_null('InboundOrdersExecutionRawInput'), graphql_name='inboundOrdersExecutionRaw')
    '''The `InboundOrdersExecutionRaw` to be created by this mutation.'''



class CreateInboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the create `InboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_orders_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_orders_raw = sgqlc.types.Field(sgqlc.types.non_null('InboundOrdersRawInput'), graphql_name='inboundOrdersRaw')
    '''The `InboundOrdersRaw` to be created by this mutation.'''



class CreateInboundPalletsRawInput(sgqlc.types.Input):
    '''All input for the create `InboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_pallets_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_pallets_raw = sgqlc.types.Field(sgqlc.types.non_null('InboundPalletsRawInput'), graphql_name='inboundPalletsRaw')
    '''The `InboundPalletsRaw` to be created by this mutation.'''



class CreateInboundTruckLogRawInput(sgqlc.types.Input):
    '''All input for the create `InboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_truck_log_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inbound_truck_log_raw = sgqlc.types.Field(sgqlc.types.non_null('InboundTruckLogRawInput'), graphql_name='inboundTruckLogRaw')
    '''The `InboundTruckLogRaw` to be created by this mutation.'''



class CreateInventoryAdjustmentsRawInput(sgqlc.types.Input):
    '''All input for the create `InventoryAdjustmentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_adjustments_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inventory_adjustments_raw = sgqlc.types.Field(sgqlc.types.non_null('InventoryAdjustmentsRawInput'), graphql_name='inventoryAdjustmentsRaw')
    '''The `InventoryAdjustmentsRaw` to be created by this mutation.'''



class CreateInventoryControlRawInput(sgqlc.types.Input):
    '''All input for the create `InventoryControlRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_control_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inventory_control_raw = sgqlc.types.Field(sgqlc.types.non_null('InventoryControlRawInput'), graphql_name='inventoryControlRaw')
    '''The `InventoryControlRaw` to be created by this mutation.'''



class CreateInventoryHoldHistoryRawInput(sgqlc.types.Input):
    '''All input for the create `InventoryHoldHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_hold_history_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    inventory_hold_history_raw = sgqlc.types.Field(sgqlc.types.non_null('InventoryHoldHistoryRawInput'), graphql_name='inventoryHoldHistoryRaw')
    '''The `InventoryHoldHistoryRaw` to be created by this mutation.'''



class CreateItemFreezeTimeInput(sgqlc.types.Input):
    '''All input for the create `ItemFreezeTime` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_freeze_time')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    item_freeze_time = sgqlc.types.Field(sgqlc.types.non_null('ItemFreezeTimeInput'), graphql_name='itemFreezeTime')
    '''The `ItemFreezeTime` to be created by this mutation.'''



class CreateItemReferenceCodeInput(sgqlc.types.Input):
    '''All input for the create `ItemReferenceCode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_reference_code')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    item_reference_code = sgqlc.types.Field(sgqlc.types.non_null('ItemReferenceCodeInput'), graphql_name='itemReferenceCode')
    '''The `ItemReferenceCode` to be created by this mutation.'''



class CreateItemReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the create `ItemReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_reference_codes_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    item_reference_codes_raw = sgqlc.types.Field(sgqlc.types.non_null('ItemReferenceCodesRawInput'), graphql_name='itemReferenceCodesRaw')
    '''The `ItemReferenceCodesRaw` to be created by this mutation.'''



class CreateItemShortCategoryNameInput(sgqlc.types.Input):
    '''All input for the create `ItemShortCategoryName` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_short_category_name')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    item_short_category_name = sgqlc.types.Field(sgqlc.types.non_null('ItemShortCategoryNameInput'), graphql_name='itemShortCategoryName')
    '''The `ItemShortCategoryName` to be created by this mutation.'''



class CreateItemsRawInput(sgqlc.types.Input):
    '''All input for the create `ItemsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'items_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    items_raw = sgqlc.types.Field(sgqlc.types.non_null('ItemsRawInput'), graphql_name='itemsRaw')
    '''The `ItemsRaw` to be created by this mutation.'''



class CreateLotReferenceCodeInput(sgqlc.types.Input):
    '''All input for the create `LotReferenceCode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lot_reference_code')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    lot_reference_code = sgqlc.types.Field(sgqlc.types.non_null('LotReferenceCodeInput'), graphql_name='lotReferenceCode')
    '''The `LotReferenceCode` to be created by this mutation.'''



class CreateLotReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the create `LotReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lot_reference_codes_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    lot_reference_codes_raw = sgqlc.types.Field(sgqlc.types.non_null('LotReferenceCodesRawInput'), graphql_name='lotReferenceCodesRaw')
    '''The `LotReferenceCodesRaw` to be created by this mutation.'''



class CreateLotTransactionsRawInput(sgqlc.types.Input):
    '''All input for the create `LotTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lot_transactions_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    lot_transactions_raw = sgqlc.types.Field(sgqlc.types.non_null('LotTransactionsRawInput'), graphql_name='lotTransactionsRaw')
    '''The `LotTransactionsRaw` to be created by this mutation.'''



class CreateLotsRawInput(sgqlc.types.Input):
    '''All input for the create `LotsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lots_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    lots_raw = sgqlc.types.Field(sgqlc.types.non_null('LotsRawInput'), graphql_name='lotsRaw')
    '''The `LotsRaw` to be created by this mutation.'''



class CreateOutboundCatchWeightRawInput(sgqlc.types.Input):
    '''All input for the create `OutboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_catch_weight_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_catch_weight_raw = sgqlc.types.Field(sgqlc.types.non_null('OutboundCatchWeightRawInput'), graphql_name='outboundCatchWeightRaw')
    '''The `OutboundCatchWeightRaw` to be created by this mutation.'''



class CreateOutboundLoadsRawInput(sgqlc.types.Input):
    '''All input for the create `OutboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_loads_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_loads_raw = sgqlc.types.Field(sgqlc.types.non_null('OutboundLoadsRawInput'), graphql_name='outboundLoadsRaw')
    '''The `OutboundLoadsRaw` to be created by this mutation.'''



class CreateOutboundOrderCommentsRawInput(sgqlc.types.Input):
    '''All input for the create `OutboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_comments_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_order_comments_raw = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrderCommentsRawInput'), graphql_name='outboundOrderCommentsRaw')
    '''The `OutboundOrderCommentsRaw` to be created by this mutation.'''



class CreateOutboundOrderDetailsExecutionRawInput(sgqlc.types.Input):
    '''All input for the create `OutboundOrderDetailsExecutionRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_details_execution_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_order_details_execution_raw = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrderDetailsExecutionRawInput'), graphql_name='outboundOrderDetailsExecutionRaw')
    '''The `OutboundOrderDetailsExecutionRaw` to be created by this
    mutation.
    '''



class CreateOutboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the create `OutboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_details_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_order_details_raw = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrderDetailsRawInput'), graphql_name='outboundOrderDetailsRaw')
    '''The `OutboundOrderDetailsRaw` to be created by this mutation.'''



class CreateOutboundOrderReferenceCodeInput(sgqlc.types.Input):
    '''All input for the create `OutboundOrderReferenceCode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_reference_code')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_order_reference_code = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrderReferenceCodeInput'), graphql_name='outboundOrderReferenceCode')
    '''The `OutboundOrderReferenceCode` to be created by this mutation.'''



class CreateOutboundOrderReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the create `OutboundOrderReferenceCodesRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_reference_codes_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_order_reference_codes_raw = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrderReferenceCodesRawInput'), graphql_name='outboundOrderReferenceCodesRaw')
    '''The `OutboundOrderReferenceCodesRaw` to be created by this
    mutation.
    '''



class CreateOutboundOrdersExecutionRawInput(sgqlc.types.Input):
    '''All input for the create `OutboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_orders_execution_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_orders_execution_raw = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrdersExecutionRawInput'), graphql_name='outboundOrdersExecutionRaw')
    '''The `OutboundOrdersExecutionRaw` to be created by this mutation.'''



class CreateOutboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the create `OutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_orders_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_orders_raw = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrdersRawInput'), graphql_name='outboundOrdersRaw')
    '''The `OutboundOrdersRaw` to be created by this mutation.'''



class CreateOutboundPalletsRawInput(sgqlc.types.Input):
    '''All input for the create `OutboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_pallets_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_pallets_raw = sgqlc.types.Field(sgqlc.types.non_null('OutboundPalletsRawInput'), graphql_name='outboundPalletsRaw')
    '''The `OutboundPalletsRaw` to be created by this mutation.'''



class CreateOutboundTruckLogRawInput(sgqlc.types.Input):
    '''All input for the create `OutboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_truck_log_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    outbound_truck_log_raw = sgqlc.types.Field(sgqlc.types.non_null('OutboundTruckLogRawInput'), graphql_name='outboundTruckLogRaw')
    '''The `OutboundTruckLogRaw` to be created by this mutation.'''



class CreatePalletHistoryRawInput(sgqlc.types.Input):
    '''All input for the create `PalletHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_history_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    pallet_history_raw = sgqlc.types.Field(sgqlc.types.non_null('PalletHistoryRawInput'), graphql_name='palletHistoryRaw')
    '''The `PalletHistoryRaw` to be created by this mutation.'''



class CreatePalletLocationZoneInput(sgqlc.types.Input):
    '''All input for the create `PalletLocationZone` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_location_zone')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    pallet_location_zone = sgqlc.types.Field(sgqlc.types.non_null('PalletLocationZoneInput'), graphql_name='palletLocationZone')
    '''The `PalletLocationZone` to be created by this mutation.'''



class CreatePalletLocationsRawInput(sgqlc.types.Input):
    '''All input for the create `PalletLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_locations_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    pallet_locations_raw = sgqlc.types.Field(sgqlc.types.non_null('PalletLocationsRawInput'), graphql_name='palletLocationsRaw')
    '''The `PalletLocationsRaw` to be created by this mutation.'''



class CreatePalletReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the create `PalletReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_reference_codes_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    pallet_reference_codes_raw = sgqlc.types.Field(sgqlc.types.non_null('PalletReferenceCodesRawInput'), graphql_name='palletReferenceCodesRaw')
    '''The `PalletReferenceCodesRaw` to be created by this mutation.'''



class CreatePalletTransactionsRawInput(sgqlc.types.Input):
    '''All input for the create `PalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_transactions_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    pallet_transactions_raw = sgqlc.types.Field(sgqlc.types.non_null('PalletTransactionsRawInput'), graphql_name='palletTransactionsRaw')
    '''The `PalletTransactionsRaw` to be created by this mutation.'''



class CreatePalletsRawInput(sgqlc.types.Input):
    '''All input for the create `PalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallets_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    pallets_raw = sgqlc.types.Field(sgqlc.types.non_null('PalletsRawInput'), graphql_name='palletsRaw')
    '''The `PalletsRaw` to be created by this mutation.'''



class CreateSourceChannelCursorInput(sgqlc.types.Input):
    '''All input for the create `SourceChannelCursor` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_channel_cursor')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    source_channel_cursor = sgqlc.types.Field(sgqlc.types.non_null('SourceChannelCursorInput'), graphql_name='sourceChannelCursor')
    '''The `SourceChannelCursor` to be created by this mutation.'''



class CreateSourceChannelInput(sgqlc.types.Input):
    '''All input for the create `SourceChannel` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_channel')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    source_channel = sgqlc.types.Field(sgqlc.types.non_null('SourceChannelInput'), graphql_name='sourceChannel')
    '''The `SourceChannel` to be created by this mutation.'''



class CreateSourceInput(sgqlc.types.Input):
    '''All input for the create `Source` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    source = sgqlc.types.Field(sgqlc.types.non_null('SourceInput'), graphql_name='source')
    '''The `Source` to be created by this mutation.'''



class CreateSourceTypeInput(sgqlc.types.Input):
    '''All input for the create `SourceType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_type')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    source_type = sgqlc.types.Field(sgqlc.types.non_null('SourceTypeInput'), graphql_name='sourceType')
    '''The `SourceType` to be created by this mutation.'''



class CreateStopLocationsRawInput(sgqlc.types.Input):
    '''All input for the create `StopLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'stop_locations_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    stop_locations_raw = sgqlc.types.Field(sgqlc.types.non_null('StopLocationsRawInput'), graphql_name='stopLocationsRaw')
    '''The `StopLocationsRaw` to be created by this mutation.'''



class CreateWarehouseCustomersConfigRawInput(sgqlc.types.Input):
    '''All input for the create `WarehouseCustomersConfigRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_customers_config_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    warehouse_customers_config_raw = sgqlc.types.Field(sgqlc.types.non_null('WarehouseCustomersConfigRawInput'), graphql_name='warehouseCustomersConfigRaw')
    '''The `WarehouseCustomersConfigRaw` to be created by this mutation.'''



class CreateWarehouseCustomersRawInput(sgqlc.types.Input):
    '''All input for the create `WarehouseCustomersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_customers_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    warehouse_customers_raw = sgqlc.types.Field(sgqlc.types.non_null('WarehouseCustomersRawInput'), graphql_name='warehouseCustomersRaw')
    '''The `WarehouseCustomersRaw` to be created by this mutation.'''



class CreateWarehousePickActivitiesRawInput(sgqlc.types.Input):
    '''All input for the create `WarehousePickActivitiesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_pick_activities_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    warehouse_pick_activities_raw = sgqlc.types.Field(sgqlc.types.non_null('WarehousePickActivitiesRawInput'), graphql_name='warehousePickActivitiesRaw')
    '''The `WarehousePickActivitiesRaw` to be created by this mutation.'''



class CreateWmsFacilityDefaultsRawInput(sgqlc.types.Input):
    '''All input for the create `WmsFacilityDefaultsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wms_facility_defaults_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    wms_facility_defaults_raw = sgqlc.types.Field(sgqlc.types.non_null('WmsFacilityDefaultsRawInput'), graphql_name='wmsFacilityDefaultsRaw')
    '''The `WmsFacilityDefaultsRaw` to be created by this mutation.'''



class CreateWmsSystemInput(sgqlc.types.Input):
    '''All input for the create `WmsSystem` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wms_system')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    wms_system = sgqlc.types.Field(sgqlc.types.non_null('WmsSystemInput'), graphql_name='wmsSystem')
    '''The `WmsSystem` to be created by this mutation.'''



class CreateWoodenPalletTransactionsRawInput(sgqlc.types.Input):
    '''All input for the create `WoodenPalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wooden_pallet_transactions_raw')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    wooden_pallet_transactions_raw = sgqlc.types.Field(sgqlc.types.non_null('WoodenPalletTransactionsRawInput'), graphql_name='woodenPalletTransactionsRaw')
    '''The `WoodenPalletTransactionsRaw` to be created by this mutation.'''



class CreateWorkdayCostCenterInput(sgqlc.types.Input):
    '''All input for the create `WorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'workday_cost_center')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    workday_cost_center = sgqlc.types.Field(sgqlc.types.non_null('WorkdayCostCenterInput'), graphql_name='workdayCostCenter')
    '''The `WorkdayCostCenter` to be created by this mutation.'''



class CursorHistoryCondition(sgqlc.types.Input):
    '''A condition to be used against `CursorHistory` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_slug', 'source_channel_name', 'cursor', 'snapshot_time', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_slug = sgqlc.types.Field(String, graphql_name='sourceSlug')
    '''Checks for equality with the object’s `sourceSlug` field.'''

    source_channel_name = sgqlc.types.Field(String, graphql_name='sourceChannelName')
    '''Checks for equality with the object’s `sourceChannelName` field.'''

    cursor = sgqlc.types.Field(BigInt, graphql_name='cursor')
    '''Checks for equality with the object’s `cursor` field.'''

    snapshot_time = sgqlc.types.Field(Datetime, graphql_name='snapshotTime')
    '''Checks for equality with the object’s `snapshotTime` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class CursorHistoryFilter(sgqlc.types.Input):
    '''A filter to be used against `CursorHistory` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_slug', 'source_channel_name', 'cursor', 'snapshot_time', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('UUIDFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_slug = sgqlc.types.Field('StringFilter', graphql_name='sourceSlug')
    '''Filter by the object’s `sourceSlug` field.'''

    source_channel_name = sgqlc.types.Field('StringFilter', graphql_name='sourceChannelName')
    '''Filter by the object’s `sourceChannelName` field.'''

    cursor = sgqlc.types.Field(BigIntFilter, graphql_name='cursor')
    '''Filter by the object’s `cursor` field.'''

    snapshot_time = sgqlc.types.Field('DatetimeFilter', graphql_name='snapshotTime')
    '''Filter by the object’s `snapshotTime` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CursorHistoryFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CursorHistoryFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('CursorHistoryFilter', graphql_name='not')
    '''Negates the expression.'''



class CursorHistoryInput(sgqlc.types.Input):
    '''An input for mutations affecting `CursorHistory`'''
    __schema__ = base
    __field_names__ = ('id', 'source_slug', 'source_channel_name', 'cursor', 'snapshot_time', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    source_slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceSlug')

    source_channel_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceChannelName')

    cursor = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='cursor')

    snapshot_time = sgqlc.types.Field(Datetime, graphql_name='snapshotTime')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class CursorHistoryPatch(sgqlc.types.Input):
    '''Represents an update to a `CursorHistory`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_slug', 'source_channel_name', 'cursor', 'snapshot_time', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    source_slug = sgqlc.types.Field(String, graphql_name='sourceSlug')

    source_channel_name = sgqlc.types.Field(String, graphql_name='sourceChannelName')

    cursor = sgqlc.types.Field(BigInt, graphql_name='cursor')

    snapshot_time = sgqlc.types.Field(Datetime, graphql_name='snapshotTime')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class CustomerFacilityLinkCondition(sgqlc.types.Input):
    '''A condition to be used against `CustomerFacilityLink` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'facility_id', 'customer_code', 'customer_enterprise_id')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''



class CustomerFacilityLinkFilter(sgqlc.types.Input):
    '''A filter to be used against `CustomerFacilityLink` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'facility_id', 'customer_code', 'customer_enterprise_id', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomerFacilityLinkFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomerFacilityLinkFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('CustomerFacilityLinkFilter', graphql_name='not')
    '''Negates the expression.'''



class CustomerHierarchyCondition(sgqlc.types.Input):
    '''A condition to be used against `CustomerHierarchy` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('pid', 'p_enterprise_id', 'p_customer_name', 'id', 'c_enterprise_id', 'c_customer_name', 'link_length', 'c_level', 'p_level')
    pid = sgqlc.types.Field(String, graphql_name='pid')
    '''Checks for equality with the object’s `pid` field.'''

    p_enterprise_id = sgqlc.types.Field(String, graphql_name='pEnterpriseId')
    '''Checks for equality with the object’s `pEnterpriseId` field.'''

    p_customer_name = sgqlc.types.Field(String, graphql_name='pCustomerName')
    '''Checks for equality with the object’s `pCustomerName` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    c_enterprise_id = sgqlc.types.Field(String, graphql_name='cEnterpriseId')
    '''Checks for equality with the object’s `cEnterpriseId` field.'''

    c_customer_name = sgqlc.types.Field(String, graphql_name='cCustomerName')
    '''Checks for equality with the object’s `cCustomerName` field.'''

    link_length = sgqlc.types.Field(Int, graphql_name='linkLength')
    '''Checks for equality with the object’s `linkLength` field.'''

    c_level = sgqlc.types.Field(Int, graphql_name='cLevel')
    '''Checks for equality with the object’s `cLevel` field.'''

    p_level = sgqlc.types.Field(Int, graphql_name='pLevel')
    '''Checks for equality with the object’s `pLevel` field.'''



class CustomerHierarchyFilter(sgqlc.types.Input):
    '''A filter to be used against `CustomerHierarchy` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('pid', 'p_enterprise_id', 'p_customer_name', 'id', 'c_enterprise_id', 'c_customer_name', 'link_length', 'c_level', 'p_level', 'and_', 'or_', 'not_')
    pid = sgqlc.types.Field('StringFilter', graphql_name='pid')
    '''Filter by the object’s `pid` field.'''

    p_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='pEnterpriseId')
    '''Filter by the object’s `pEnterpriseId` field.'''

    p_customer_name = sgqlc.types.Field('StringFilter', graphql_name='pCustomerName')
    '''Filter by the object’s `pCustomerName` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    c_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='cEnterpriseId')
    '''Filter by the object’s `cEnterpriseId` field.'''

    c_customer_name = sgqlc.types.Field('StringFilter', graphql_name='cCustomerName')
    '''Filter by the object’s `cCustomerName` field.'''

    link_length = sgqlc.types.Field('IntFilter', graphql_name='linkLength')
    '''Filter by the object’s `linkLength` field.'''

    c_level = sgqlc.types.Field('IntFilter', graphql_name='cLevel')
    '''Filter by the object’s `cLevel` field.'''

    p_level = sgqlc.types.Field('IntFilter', graphql_name='pLevel')
    '''Filter by the object’s `pLevel` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomerHierarchyFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomerHierarchyFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('CustomerHierarchyFilter', graphql_name='not')
    '''Negates the expression.'''



class CustomerHierarchyInput(sgqlc.types.Input):
    '''An input for mutations affecting `CustomerHierarchy`'''
    __schema__ = base
    __field_names__ = ('pid', 'p_enterprise_id', 'p_customer_name', 'id', 'c_enterprise_id', 'c_customer_name', 'link_length', 'c_level', 'p_level')
    pid = sgqlc.types.Field(String, graphql_name='pid')

    p_enterprise_id = sgqlc.types.Field(String, graphql_name='pEnterpriseId')

    p_customer_name = sgqlc.types.Field(String, graphql_name='pCustomerName')

    id = sgqlc.types.Field(String, graphql_name='id')

    c_enterprise_id = sgqlc.types.Field(String, graphql_name='cEnterpriseId')

    c_customer_name = sgqlc.types.Field(String, graphql_name='cCustomerName')

    link_length = sgqlc.types.Field(Int, graphql_name='linkLength')

    c_level = sgqlc.types.Field(Int, graphql_name='cLevel')

    p_level = sgqlc.types.Field(Int, graphql_name='pLevel')



class CustomerHierarchyMapCondition(sgqlc.types.Input):
    '''A condition to be used against `CustomerHierarchyMap` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('pid', 'id', 'name', 'link_length', 'c_level', 'p_level', 'enterprise_id')
    pid = sgqlc.types.Field(String, graphql_name='pid')
    '''Checks for equality with the object’s `pid` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    link_length = sgqlc.types.Field(BigFloat, graphql_name='linkLength')
    '''Checks for equality with the object’s `linkLength` field.'''

    c_level = sgqlc.types.Field(BigFloat, graphql_name='cLevel')
    '''Checks for equality with the object’s `cLevel` field.'''

    p_level = sgqlc.types.Field(BigFloat, graphql_name='pLevel')
    '''Checks for equality with the object’s `pLevel` field.'''

    enterprise_id = sgqlc.types.Field(BigFloat, graphql_name='enterpriseId')
    '''Checks for equality with the object’s `enterpriseId` field.'''



class CustomerHierarchyMapFilter(sgqlc.types.Input):
    '''A filter to be used against `CustomerHierarchyMap` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('pid', 'id', 'name', 'link_length', 'c_level', 'p_level', 'enterprise_id', 'and_', 'or_', 'not_')
    pid = sgqlc.types.Field('StringFilter', graphql_name='pid')
    '''Filter by the object’s `pid` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    link_length = sgqlc.types.Field(BigFloatFilter, graphql_name='linkLength')
    '''Filter by the object’s `linkLength` field.'''

    c_level = sgqlc.types.Field(BigFloatFilter, graphql_name='cLevel')
    '''Filter by the object’s `cLevel` field.'''

    p_level = sgqlc.types.Field(BigFloatFilter, graphql_name='pLevel')
    '''Filter by the object’s `pLevel` field.'''

    enterprise_id = sgqlc.types.Field(BigFloatFilter, graphql_name='enterpriseId')
    '''Filter by the object’s `enterpriseId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomerHierarchyMapFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomerHierarchyMapFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('CustomerHierarchyMapFilter', graphql_name='not')
    '''Negates the expression.'''



class CustomerHierarchyMapInput(sgqlc.types.Input):
    '''An input for mutations affecting `CustomerHierarchyMap`'''
    __schema__ = base
    __field_names__ = ('pid', 'id', 'name', 'link_length', 'c_level', 'p_level', 'enterprise_id')
    pid = sgqlc.types.Field(String, graphql_name='pid')

    id = sgqlc.types.Field(String, graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    link_length = sgqlc.types.Field(BigFloat, graphql_name='linkLength')

    c_level = sgqlc.types.Field(BigFloat, graphql_name='cLevel')

    p_level = sgqlc.types.Field(BigFloat, graphql_name='pLevel')

    enterprise_id = sgqlc.types.Field(BigFloat, graphql_name='enterpriseId')



class CutsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `CutsRaw` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'customer_id', 'item_id', 'lot_id', 'pallet_id', 'shipped_date', 'cut_quantity', 'reason', 'cut_description', 'lot_reference', 'wms_last_modified_by', 'wms_last_modified_datetime', '_id', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''Checks for equality with the object’s `palletId` field.'''

    shipped_date = sgqlc.types.Field(Date, graphql_name='shippedDate')
    '''Checks for equality with the object’s `shippedDate` field.'''

    cut_quantity = sgqlc.types.Field(Int, graphql_name='cutQuantity')
    '''Checks for equality with the object’s `cutQuantity` field.'''

    reason = sgqlc.types.Field(String, graphql_name='reason')
    '''Checks for equality with the object’s `reason` field.'''

    cut_description = sgqlc.types.Field(String, graphql_name='cutDescription')
    '''Checks for equality with the object’s `cutDescription` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    wms_last_modified_by = sgqlc.types.Field(String, graphql_name='wmsLastModifiedBy')
    '''Checks for equality with the object’s `wmsLastModifiedBy` field.'''

    wms_last_modified_datetime = sgqlc.types.Field(Datetime, graphql_name='wmsLastModifiedDatetime')
    '''Checks for equality with the object’s `wmsLastModifiedDatetime`
    field.
    '''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''



class CutsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `CutsRaw` object types. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'customer_id', 'item_id', 'lot_id', 'pallet_id', 'shipped_date', 'cut_quantity', 'reason', 'cut_description', 'lot_reference', 'wms_last_modified_by', 'wms_last_modified_datetime', '_id', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    pallet_id = sgqlc.types.Field('StringFilter', graphql_name='palletId')
    '''Filter by the object’s `palletId` field.'''

    shipped_date = sgqlc.types.Field('DateFilter', graphql_name='shippedDate')
    '''Filter by the object’s `shippedDate` field.'''

    cut_quantity = sgqlc.types.Field('IntFilter', graphql_name='cutQuantity')
    '''Filter by the object’s `cutQuantity` field.'''

    reason = sgqlc.types.Field('StringFilter', graphql_name='reason')
    '''Filter by the object’s `reason` field.'''

    cut_description = sgqlc.types.Field('StringFilter', graphql_name='cutDescription')
    '''Filter by the object’s `cutDescription` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    wms_last_modified_by = sgqlc.types.Field('StringFilter', graphql_name='wmsLastModifiedBy')
    '''Filter by the object’s `wmsLastModifiedBy` field.'''

    wms_last_modified_datetime = sgqlc.types.Field('DatetimeFilter', graphql_name='wmsLastModifiedDatetime')
    '''Filter by the object’s `wmsLastModifiedDatetime` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field('DatetimeFilter', graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field('DatetimeFilter', graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field('DatetimeFilter', graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CutsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CutsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('CutsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class CutsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `CutsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'customer_id', 'item_id', 'lot_id', 'pallet_id', 'shipped_date', 'cut_quantity', 'reason', 'cut_description', 'lot_reference', 'wms_last_modified_by', 'wms_last_modified_datetime', '_id', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS identifier for the pallet (references wms.pallets_raw.id)'''

    shipped_date = sgqlc.types.Field(Date, graphql_name='shippedDate')
    '''Date the outbound order was shipped'''

    cut_quantity = sgqlc.types.Field(Int, graphql_name='cutQuantity')
    '''Number of cases cut from the outbound order'''

    reason = sgqlc.types.Field(String, graphql_name='reason')
    '''WMS Code for reason the cut occurred'''

    cut_description = sgqlc.types.Field(String, graphql_name='cutDescription')
    '''Text description for the cut reason'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    wms_last_modified_by = sgqlc.types.Field(String, graphql_name='wmsLastModifiedBy')
    '''WMS user that last modified the cuts record in the source system'''

    wms_last_modified_datetime = sgqlc.types.Field(Datetime, graphql_name='wmsLastModifiedDatetime')
    '''Date and time the WMS userlast modified the cuts record'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class CutsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `CutsRaw`. Fields that are set will be
    updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'customer_id', 'item_id', 'lot_id', 'pallet_id', 'shipped_date', 'cut_quantity', 'reason', 'cut_description', 'lot_reference', 'wms_last_modified_by', 'wms_last_modified_datetime', '_id', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS identifier for the pallet (references wms.pallets_raw.id)'''

    shipped_date = sgqlc.types.Field(Date, graphql_name='shippedDate')
    '''Date the outbound order was shipped'''

    cut_quantity = sgqlc.types.Field(Int, graphql_name='cutQuantity')
    '''Number of cases cut from the outbound order'''

    reason = sgqlc.types.Field(String, graphql_name='reason')
    '''WMS Code for reason the cut occurred'''

    cut_description = sgqlc.types.Field(String, graphql_name='cutDescription')
    '''Text description for the cut reason'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    wms_last_modified_by = sgqlc.types.Field(String, graphql_name='wmsLastModifiedBy')
    '''WMS user that last modified the cuts record in the source system'''

    wms_last_modified_datetime = sgqlc.types.Field(Datetime, graphql_name='wmsLastModifiedDatetime')
    '''Date and time the WMS userlast modified the cuts record'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class DateFilter(sgqlc.types.Input):
    '''A filter to be used against Date fields. All fields are combined
    with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(Date, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(Date, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(Date, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(Date, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Date)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Date)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(Date, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(Date, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(Date, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(Date, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class DatetimeFilter(sgqlc.types.Input):
    '''A filter to be used against Datetime fields. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(Datetime, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(Datetime, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(Datetime, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(Datetime, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Datetime)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Datetime)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(Datetime, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(Datetime, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(Datetime, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(Datetime, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class DeleteAggregateWarehouseUtilByCustomerRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the
    `deleteAggregateWarehouseUtilByCustomerRawByNodeId` mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `AggregateWarehouseUtilByCustomerRaw` to be deleted.
    '''



class DeleteAggregateWarehouseUtilByCustomerRawInput(sgqlc.types.Input):
    '''All input for the `deleteAggregateWarehouseUtilByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class DeleteAggregateWarehouseUtilRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteAggregateWarehouseUtilRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `AggregateWarehouseUtilRaw` to be deleted.
    '''



class DeleteAggregateWarehouseUtilRawInput(sgqlc.types.Input):
    '''All input for the `deleteAggregateWarehouseUtilRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class DeleteAggregateWarehouseVolumeByCustomerRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the
    `deleteAggregateWarehouseVolumeByCustomerRawByNodeId` mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `AggregateWarehouseVolumeByCustomerRaw` to be deleted.
    '''



class DeleteAggregateWarehouseVolumeByCustomerRawInput(sgqlc.types.Input):
    '''All input for the `deleteAggregateWarehouseVolumeByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class DeleteAggregateWarehouseVolumeRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteAggregateWarehouseVolumeRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `AggregateWarehouseVolumeRaw` to be deleted.
    '''



class DeleteAggregateWarehouseVolumeRawInput(sgqlc.types.Input):
    '''All input for the `deleteAggregateWarehouseVolumeRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class DeleteBillingHistoryRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBillingHistoryRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BillingHistoryRaw` to be deleted.
    '''



class DeleteBillingHistoryRawInput(sgqlc.types.Input):
    '''All input for the `deleteBillingHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteBlastCellByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCellByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `BlastCell`
    to be deleted.
    '''



class DeleteBlastCellInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCell` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class DeleteBlastCellTypeByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCellTypeByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastCellType` to be deleted.
    '''



class DeleteBlastCellTypeInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCellType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'slug')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')



class DeleteBlastCellWmsPalletByBlastCellIdAndWmsPalletIdInput(sgqlc.types.Input):
    '''All input for the
    `deleteBlastCellWmsPalletByBlastCellIdAndWmsPalletId` mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_id', 'wms_pallet_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCellId')

    wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsPalletId')



class DeleteBlastCellWmsPalletByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCellWmsPalletByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastCellWmsPallet` to be deleted.
    '''



class DeleteBlastCellWmsPalletInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCellWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class DeleteBlastCellWmsPalletLocationByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCellWmsPalletLocationByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastCellWmsPalletLocation` to be deleted.
    '''



class DeleteBlastCellWmsPalletLocationInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCellWmsPalletLocation` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class DeleteBlastCycleByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCycleByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `BlastCycle`
    to be deleted.
    '''



class DeleteBlastCycleEventByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCycleEventByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastCycleEvent` to be deleted.
    '''



class DeleteBlastCycleEventInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCycleEvent` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class DeleteBlastCycleInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCycle` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class DeleteBlastCycleWmsPalletByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCycleWmsPalletByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastCycleWmsPallet` to be deleted.
    '''



class DeleteBlastCycleWmsPalletInput(sgqlc.types.Input):
    '''All input for the `deleteBlastCycleWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class DeleteBlastPlanByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBlastPlanByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `BlastPlan`
    to be deleted.
    '''



class DeleteBlastPlanInput(sgqlc.types.Input):
    '''All input for the `deleteBlastPlan` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class DeleteBlastPlanPalletByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBlastPlanPalletByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastPlanPallet` to be deleted.
    '''



class DeleteBlastPlanPalletInput(sgqlc.types.Input):
    '''All input for the `deleteBlastPlanPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class DeleteBolConstantsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBolConstantsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BolConstantsRaw` to be deleted.
    '''



class DeleteBolConstantsRawInput(sgqlc.types.Input):
    '''All input for the `deleteBolConstantsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeleteBrokerOwnersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteBrokerOwnersRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BrokerOwnersRaw` to be deleted.
    '''



class DeleteBrokerOwnersRawInput(sgqlc.types.Input):
    '''All input for the `deleteBrokerOwnersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteCarriersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteCarriersRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `CarriersRaw` to be deleted.
    '''



class DeleteCarriersRawInput(sgqlc.types.Input):
    '''All input for the `deleteCarriersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class DeleteCasePicksRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteCasePicksRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `CasePicksRaw` to be deleted.
    '''



class DeleteCasePicksRawInput(sgqlc.types.Input):
    '''All input for the `deleteCasePicksRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteCursorHistoryByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteCursorHistoryByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `CursorHistory` to be deleted.
    '''



class DeleteCursorHistoryInput(sgqlc.types.Input):
    '''All input for the `deleteCursorHistory` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class DeleteCutsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteCutsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `CutsRaw` to
    be deleted.
    '''



class DeleteCutsRawInput(sgqlc.types.Input):
    '''All input for the `deleteCutsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteDriversRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteDriversRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `DriversRaw`
    to be deleted.
    '''



class DeleteDriversRawInput(sgqlc.types.Input):
    '''All input for the `deleteDriversRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class DeleteEdgeNodeByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteEdgeNodeByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `EdgeNode`
    to be deleted.
    '''



class DeleteEdgeNodeInput(sgqlc.types.Input):
    '''All input for the `deleteEdgeNode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'client_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='clientId')



class DeleteEdgeNodeSourceChannelAccessByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteEdgeNodeSourceChannelAccessByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `EdgeNodeSourceChannelAccess` to be deleted.
    '''



class DeleteEdgeNodeSourceChannelAccessInput(sgqlc.types.Input):
    '''All input for the `deleteEdgeNodeSourceChannelAccess` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'edge_node_client_id', 'source_channel_name', 'action')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    edge_node_client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='edgeNodeClientId')

    source_channel_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceChannelName')

    action = sgqlc.types.Field(sgqlc.types.non_null(EnumEdgeNodeSourceChannelAccessAction), graphql_name='action')



class DeleteExpectedInboundOrderDetailsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteExpectedInboundOrderDetailsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ExpectedInboundOrderDetailsRaw` to be deleted.
    '''



class DeleteExpectedInboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the `deleteExpectedInboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteExpectedInboundOrdersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteExpectedInboundOrdersRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ExpectedInboundOrdersRaw` to be deleted.
    '''



class DeleteExpectedInboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the `deleteExpectedInboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteExpectedOutboundOrderDetailsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteExpectedOutboundOrderDetailsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ExpectedOutboundOrderDetailsRaw` to be deleted.
    '''



class DeleteExpectedOutboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the `deleteExpectedOutboundOrderDetailsRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteExpectedOutboundOrdersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteExpectedOutboundOrdersRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ExpectedOutboundOrdersRaw` to be deleted.
    '''



class DeleteExpectedOutboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the `deleteExpectedOutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteExpectedPalletsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteExpectedPalletsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ExpectedPalletsRaw` to be deleted.
    '''



class DeleteExpectedPalletsRawInput(sgqlc.types.Input):
    '''All input for the `deleteExpectedPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteFacilitiesTestByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteFacilitiesTestByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `FacilitiesTest` to be deleted.
    '''



class DeleteFacilitiesTestInput(sgqlc.types.Input):
    '''All input for the `deleteFacilitiesTest` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class DeleteFacilityByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteFacilityByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `Facility`
    to be deleted.
    '''



class DeleteFacilityGroupingByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteFacilityGroupingByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `FacilityGrouping` to be deleted.
    '''



class DeleteFacilityGroupingInput(sgqlc.types.Input):
    '''All input for the `deleteFacilityGrouping` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class DeleteFacilityInput(sgqlc.types.Input):
    '''All input for the `deleteFacility` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class DeleteFacilityWorkdayCostCenterByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteFacilityWorkdayCostCenterByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `FacilityWorkdayCostCenter` to be deleted.
    '''



class DeleteFacilityWorkdayCostCenterInput(sgqlc.types.Input):
    '''All input for the `deleteFacilityWorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class DeleteHoldCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteHoldCodesRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `HoldCodesRaw` to be deleted.
    '''



class DeleteHoldCodesRawInput(sgqlc.types.Input):
    '''All input for the `deleteHoldCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteHppRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteHppRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `HppRaw` to
    be deleted.
    '''



class DeleteHppRawInput(sgqlc.types.Input):
    '''All input for the `deleteHppRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class DeleteInboundCatchWeightRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInboundCatchWeightRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundCatchWeightRaw` to be deleted.
    '''



class DeleteInboundCatchWeightRawInput(sgqlc.types.Input):
    '''All input for the `deleteInboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class DeleteInboundLoadsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInboundLoadsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundLoadsRaw` to be deleted.
    '''



class DeleteInboundLoadsRawInput(sgqlc.types.Input):
    '''All input for the `deleteInboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteInboundOrderCommentsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrderCommentsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrderCommentsRaw` to be deleted.
    '''



class DeleteInboundOrderCommentsRawInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeleteInboundOrderDetailReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the
    `deleteInboundOrderDetailReferenceCodesRawByNodeId` mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrderDetailReferenceCodesRaw` to be deleted.
    '''



class DeleteInboundOrderDetailReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrderDetailReferenceCodesRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeleteInboundOrderDetailsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrderDetailsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrderDetailsRaw` to be deleted.
    '''



class DeleteInboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteInboundOrderReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrderReferenceCodesRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrderReferenceCodesRaw` to be deleted.
    '''



class DeleteInboundOrderReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrderReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteInboundOrdersExecutionRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrdersExecutionRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrdersExecutionRaw` to be deleted.
    '''



class DeleteInboundOrdersExecutionRawInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeleteInboundOrdersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrdersRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrdersRaw` to be deleted.
    '''



class DeleteInboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the `deleteInboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteInboundPalletsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInboundPalletsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundPalletsRaw` to be deleted.
    '''



class DeleteInboundPalletsRawInput(sgqlc.types.Input):
    '''All input for the `deleteInboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteInboundTruckLogRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInboundTruckLogRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundTruckLogRaw` to be deleted.
    '''



class DeleteInboundTruckLogRawInput(sgqlc.types.Input):
    '''All input for the `deleteInboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteInventoryAdjustmentsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInventoryAdjustmentsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InventoryAdjustmentsRaw` to be deleted.
    '''



class DeleteInventoryAdjustmentsRawInput(sgqlc.types.Input):
    '''All input for the `deleteInventoryAdjustmentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteInventoryControlRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInventoryControlRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InventoryControlRaw` to be deleted.
    '''



class DeleteInventoryControlRawInput(sgqlc.types.Input):
    '''All input for the `deleteInventoryControlRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteInventoryHoldHistoryRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteInventoryHoldHistoryRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InventoryHoldHistoryRaw` to be deleted.
    '''



class DeleteInventoryHoldHistoryRawInput(sgqlc.types.Input):
    '''All input for the `deleteInventoryHoldHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteItemFreezeTimeByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteItemFreezeTimeByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ItemFreezeTime` to be deleted.
    '''



class DeleteItemFreezeTimeInput(sgqlc.types.Input):
    '''All input for the `deleteItemFreezeTime` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class DeleteItemReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteItemReferenceCodesRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ItemReferenceCodesRaw` to be deleted.
    '''



class DeleteItemReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `deleteItemReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteItemShortCategoryNameByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteItemShortCategoryNameByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ItemShortCategoryName` to be deleted.
    '''



class DeleteItemShortCategoryNameInput(sgqlc.types.Input):
    '''All input for the `deleteItemShortCategoryName` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class DeleteItemsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteItemsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `ItemsRaw`
    to be deleted.
    '''



class DeleteItemsRawInput(sgqlc.types.Input):
    '''All input for the `deleteItemsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteLotReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteLotReferenceCodesRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `LotReferenceCodesRaw` to be deleted.
    '''



class DeleteLotReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `deleteLotReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteLotTransactionsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteLotTransactionsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `LotTransactionsRaw` to be deleted.
    '''



class DeleteLotTransactionsRawInput(sgqlc.types.Input):
    '''All input for the `deleteLotTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteLotsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteLotsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `LotsRaw` to
    be deleted.
    '''



class DeleteLotsRawInput(sgqlc.types.Input):
    '''All input for the `deleteLotsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteOutboundCatchWeightRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundCatchWeightRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundCatchWeightRaw` to be deleted.
    '''



class DeleteOutboundCatchWeightRawInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeleteOutboundLoadsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundLoadsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundLoadsRaw` to be deleted.
    '''



class DeleteOutboundLoadsRawInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteOutboundOrderCommentsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrderCommentsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrderCommentsRaw` to be deleted.
    '''



class DeleteOutboundOrderCommentsRawInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeleteOutboundOrderDetailsExecutionRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrderDetailsExecutionRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrderDetailsExecutionRaw` to be deleted.
    '''



class DeleteOutboundOrderDetailsExecutionRawInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrderDetailsExecutionRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeleteOutboundOrderDetailsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrderDetailsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrderDetailsRaw` to be deleted.
    '''



class DeleteOutboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteOutboundOrderReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrderReferenceCodesRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrderReferenceCodesRaw` to be deleted.
    '''



class DeleteOutboundOrderReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrderReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteOutboundOrdersExecutionRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrdersExecutionRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrdersExecutionRaw` to be deleted.
    '''



class DeleteOutboundOrdersExecutionRawInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeleteOutboundOrdersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrdersRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrdersRaw` to be deleted.
    '''



class DeleteOutboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteOutboundPalletsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundPalletsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundPalletsRaw` to be deleted.
    '''



class DeleteOutboundPalletsRawInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteOutboundTruckLogRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundTruckLogRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundTruckLogRaw` to be deleted.
    '''



class DeleteOutboundTruckLogRawInput(sgqlc.types.Input):
    '''All input for the `deleteOutboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeletePalletHistoryRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deletePalletHistoryRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `PalletHistoryRaw` to be deleted.
    '''



class DeletePalletHistoryRawInput(sgqlc.types.Input):
    '''All input for the `deletePalletHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeletePalletLocationsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deletePalletLocationsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `PalletLocationsRaw` to be deleted.
    '''



class DeletePalletLocationsRawInput(sgqlc.types.Input):
    '''All input for the `deletePalletLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeletePalletReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deletePalletReferenceCodesRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `PalletReferenceCodesRaw` to be deleted.
    '''



class DeletePalletReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `deletePalletReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeletePalletTransactionsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deletePalletTransactionsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `PalletTransactionsRaw` to be deleted.
    '''



class DeletePalletTransactionsRawInput(sgqlc.types.Input):
    '''All input for the `deletePalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeletePalletsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deletePalletsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `PalletsRaw`
    to be deleted.
    '''



class DeletePalletsRawInput(sgqlc.types.Input):
    '''All input for the `deletePalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteSourceByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteSourceByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `Source` to
    be deleted.
    '''



class DeleteSourceChannelByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteSourceChannelByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `SourceChannel` to be deleted.
    '''



class DeleteSourceChannelCursorByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteSourceChannelCursorByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `SourceChannelCursor` to be deleted.
    '''



class DeleteSourceChannelCursorInput(sgqlc.types.Input):
    '''All input for the `deleteSourceChannelCursor` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class DeleteSourceChannelInput(sgqlc.types.Input):
    '''All input for the `deleteSourceChannel` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'name')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')



class DeleteSourceInput(sgqlc.types.Input):
    '''All input for the `deleteSource` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'slug')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')



class DeleteSourceTypeByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteSourceTypeByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `SourceType`
    to be deleted.
    '''



class DeleteSourceTypeInput(sgqlc.types.Input):
    '''All input for the `deleteSourceType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'slug')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')



class DeleteStopLocationsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteStopLocationsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `StopLocationsRaw` to be deleted.
    '''



class DeleteStopLocationsRawInput(sgqlc.types.Input):
    '''All input for the `deleteStopLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_system_id', 'name')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')



class DeleteWarehouseCustomersConfigRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteWarehouseCustomersConfigRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WarehouseCustomersConfigRaw` to be deleted.
    '''



class DeleteWarehouseCustomersConfigRawInput(sgqlc.types.Input):
    '''All input for the `deleteWarehouseCustomersConfigRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeleteWarehouseCustomersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteWarehouseCustomersRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WarehouseCustomersRaw` to be deleted.
    '''



class DeleteWarehouseCustomersRawInput(sgqlc.types.Input):
    '''All input for the `deleteWarehouseCustomersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteWarehousePickActivitiesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteWarehousePickActivitiesRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WarehousePickActivitiesRaw` to be deleted.
    '''



class DeleteWarehousePickActivitiesRawInput(sgqlc.types.Input):
    '''All input for the `deleteWarehousePickActivitiesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteWmsFacilityDefaultsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteWmsFacilityDefaultsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WmsFacilityDefaultsRaw` to be deleted.
    '''



class DeleteWmsFacilityDefaultsRawInput(sgqlc.types.Input):
    '''All input for the `deleteWmsFacilityDefaultsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class DeleteWmsSystemByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteWmsSystemByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `WmsSystem`
    to be deleted.
    '''



class DeleteWmsSystemInput(sgqlc.types.Input):
    '''All input for the `deleteWmsSystem` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class DeleteWoodenPalletTransactionsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteWoodenPalletTransactionsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WoodenPalletTransactionsRaw` to be deleted.
    '''



class DeleteWoodenPalletTransactionsRawInput(sgqlc.types.Input):
    '''All input for the `deleteWoodenPalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class DeleteWorkdayCostCenterByNodeIdInput(sgqlc.types.Input):
    '''All input for the `deleteWorkdayCostCenterByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WorkdayCostCenter` to be deleted.
    '''



class DeleteWorkdayCostCenterInput(sgqlc.types.Input):
    '''All input for the `deleteWorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class DetectPalletsByLookAheadInput(sgqlc.types.Input):
    '''All input for the `detectPalletsByLookAhead` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id',)
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''



class DetectPalletsByLookBehindInput(sgqlc.types.Input):
    '''All input for the `detectPalletsByLookBehind` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id',)
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''



class DriverCondition(sgqlc.types.Input):
    '''A condition to be used against `Driver` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at', 'deleted_at', '_version', '_id')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    '''Checks for equality with the object’s `phoneNumber` field.'''

    license_number = sgqlc.types.Field(String, graphql_name='licenseNumber')
    '''Checks for equality with the object’s `licenseNumber` field.'''

    license_state_of_issue = sgqlc.types.Field(String, graphql_name='licenseStateOfIssue')
    '''Checks for equality with the object’s `licenseStateOfIssue` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class DriverFilter(sgqlc.types.Input):
    '''A filter to be used against `Driver` object types. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'and_', 'or_', 'not_')
    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    phone_number = sgqlc.types.Field('StringFilter', graphql_name='phoneNumber')
    '''Filter by the object’s `phoneNumber` field.'''

    license_number = sgqlc.types.Field('StringFilter', graphql_name='licenseNumber')
    '''Filter by the object’s `licenseNumber` field.'''

    license_state_of_issue = sgqlc.types.Field('StringFilter', graphql_name='licenseStateOfIssue')
    '''Filter by the object’s `licenseStateOfIssue` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DriverFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DriverFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('DriverFilter', graphql_name='not')
    '''Negates the expression.'''



class DriversMasterCondition(sgqlc.types.Input):
    '''A condition to be used against `DriversMaster` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'turvo_driver_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at')
    id = sgqlc.types.Field(Int, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    turvo_driver_id = sgqlc.types.Field(Int, graphql_name='turvoDriverId')
    '''Checks for equality with the object’s `turvoDriverId` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    '''Checks for equality with the object’s `phoneNumber` field.'''

    license_number = sgqlc.types.Field(String, graphql_name='licenseNumber')
    '''Checks for equality with the object’s `licenseNumber` field.'''

    license_state_of_issue = sgqlc.types.Field(String, graphql_name='licenseStateOfIssue')
    '''Checks for equality with the object’s `licenseStateOfIssue` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class DriversMasterFilter(sgqlc.types.Input):
    '''A filter to be used against `DriversMaster` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'turvo_driver_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('IntFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    turvo_driver_id = sgqlc.types.Field('IntFilter', graphql_name='turvoDriverId')
    '''Filter by the object’s `turvoDriverId` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    phone_number = sgqlc.types.Field('StringFilter', graphql_name='phoneNumber')
    '''Filter by the object’s `phoneNumber` field.'''

    license_number = sgqlc.types.Field('StringFilter', graphql_name='licenseNumber')
    '''Filter by the object’s `licenseNumber` field.'''

    license_state_of_issue = sgqlc.types.Field('StringFilter', graphql_name='licenseStateOfIssue')
    '''Filter by the object’s `licenseStateOfIssue` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DriversMasterFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DriversMasterFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('DriversMasterFilter', graphql_name='not')
    '''Negates the expression.'''



class DriversMasterInput(sgqlc.types.Input):
    '''An input for mutations affecting `DriversMaster`'''
    __schema__ = base
    __field_names__ = ('id', 'turvo_driver_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at')
    id = sgqlc.types.Field(Int, graphql_name='id')

    turvo_driver_id = sgqlc.types.Field(Int, graphql_name='turvoDriverId')

    name = sgqlc.types.Field(String, graphql_name='name')

    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')

    license_number = sgqlc.types.Field(String, graphql_name='licenseNumber')

    license_state_of_issue = sgqlc.types.Field(String, graphql_name='licenseStateOfIssue')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class DriversRawCondition(sgqlc.types.Input):
    '''A condition to be used against `DriversRaw` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at', 'deleted_at', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    '''Checks for equality with the object’s `phoneNumber` field.'''

    license_number = sgqlc.types.Field(String, graphql_name='licenseNumber')
    '''Checks for equality with the object’s `licenseNumber` field.'''

    license_state_of_issue = sgqlc.types.Field(String, graphql_name='licenseStateOfIssue')
    '''Checks for equality with the object’s `licenseStateOfIssue` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class DriversRawFilter(sgqlc.types.Input):
    '''A filter to be used against `DriversRaw` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    phone_number = sgqlc.types.Field('StringFilter', graphql_name='phoneNumber')
    '''Filter by the object’s `phoneNumber` field.'''

    license_number = sgqlc.types.Field('StringFilter', graphql_name='licenseNumber')
    '''Filter by the object’s `licenseNumber` field.'''

    license_state_of_issue = sgqlc.types.Field('StringFilter', graphql_name='licenseStateOfIssue')
    '''Filter by the object’s `licenseStateOfIssue` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DriversRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DriversRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('DriversRawFilter', graphql_name='not')
    '''Negates the expression.'''



class DriversRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `DriversRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at', 'deleted_at', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')

    name = sgqlc.types.Field(String, graphql_name='name')

    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')

    license_number = sgqlc.types.Field(String, graphql_name='licenseNumber')

    license_state_of_issue = sgqlc.types.Field(String, graphql_name='licenseStateOfIssue')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')



class DriversRawPatch(sgqlc.types.Input):
    '''Represents an update to a `DriversRaw`. Fields that are set will
    be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at', 'deleted_at', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    name = sgqlc.types.Field(String, graphql_name='name')

    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')

    license_number = sgqlc.types.Field(String, graphql_name='licenseNumber')

    license_state_of_issue = sgqlc.types.Field(String, graphql_name='licenseStateOfIssue')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class EdgeNodeCondition(sgqlc.types.Input):
    '''A condition to be used against `EdgeNode` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('client_id', 'description', 'name', 'organization_id', 'created_at', 'updated_at')
    client_id = sgqlc.types.Field(String, graphql_name='clientId')
    '''Checks for equality with the object’s `clientId` field.'''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Checks for equality with the object’s `description` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    organization_id = sgqlc.types.Field(UUID, graphql_name='organizationId')
    '''Checks for equality with the object’s `organizationId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class EdgeNodeFilter(sgqlc.types.Input):
    '''A filter to be used against `EdgeNode` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('client_id', 'description', 'name', 'organization_id', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    client_id = sgqlc.types.Field('StringFilter', graphql_name='clientId')
    '''Filter by the object’s `clientId` field.'''

    description = sgqlc.types.Field('StringFilter', graphql_name='description')
    '''Filter by the object’s `description` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    organization_id = sgqlc.types.Field('UUIDFilter', graphql_name='organizationId')
    '''Filter by the object’s `organizationId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('EdgeNodeFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('EdgeNodeFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('EdgeNodeFilter', graphql_name='not')
    '''Negates the expression.'''



class EdgeNodeInput(sgqlc.types.Input):
    '''An input for mutations affecting `EdgeNode`'''
    __schema__ = base
    __field_names__ = ('client_id', 'description', 'name', 'organization_id', 'created_at', 'updated_at')
    client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='clientId')

    description = sgqlc.types.Field(String, graphql_name='description')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    organization_id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='organizationId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class EdgeNodePatch(sgqlc.types.Input):
    '''Represents an update to a `EdgeNode`. Fields that are set will be
    updated.
    '''
    __schema__ = base
    __field_names__ = ('client_id', 'description', 'name', 'organization_id', 'created_at', 'updated_at')
    client_id = sgqlc.types.Field(String, graphql_name='clientId')

    description = sgqlc.types.Field(String, graphql_name='description')

    name = sgqlc.types.Field(String, graphql_name='name')

    organization_id = sgqlc.types.Field(UUID, graphql_name='organizationId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class EdgeNodeSourceChannelAccessCondition(sgqlc.types.Input):
    '''A condition to be used against `EdgeNodeSourceChannelAccess`
    object types. All fields are tested for equality and combined with
    a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('edge_node_client_id', 'source_channel_name', 'action', 'created_at', 'updated_at')
    edge_node_client_id = sgqlc.types.Field(String, graphql_name='edgeNodeClientId')
    '''Checks for equality with the object’s `edgeNodeClientId` field.'''

    source_channel_name = sgqlc.types.Field(String, graphql_name='sourceChannelName')
    '''Checks for equality with the object’s `sourceChannelName` field.'''

    action = sgqlc.types.Field(EnumEdgeNodeSourceChannelAccessAction, graphql_name='action')
    '''Checks for equality with the object’s `action` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class EdgeNodeSourceChannelAccessFilter(sgqlc.types.Input):
    '''A filter to be used against `EdgeNodeSourceChannelAccess` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('edge_node_client_id', 'source_channel_name', 'action', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    edge_node_client_id = sgqlc.types.Field('StringFilter', graphql_name='edgeNodeClientId')
    '''Filter by the object’s `edgeNodeClientId` field.'''

    source_channel_name = sgqlc.types.Field('StringFilter', graphql_name='sourceChannelName')
    '''Filter by the object’s `sourceChannelName` field.'''

    action = sgqlc.types.Field('EnumEdgeNodeSourceChannelAccessActionFilter', graphql_name='action')
    '''Filter by the object’s `action` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('EdgeNodeSourceChannelAccessFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('EdgeNodeSourceChannelAccessFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('EdgeNodeSourceChannelAccessFilter', graphql_name='not')
    '''Negates the expression.'''



class EdgeNodeSourceChannelAccessInput(sgqlc.types.Input):
    '''An input for mutations affecting `EdgeNodeSourceChannelAccess`'''
    __schema__ = base
    __field_names__ = ('edge_node_client_id', 'source_channel_name', 'action', 'created_at', 'updated_at')
    edge_node_client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='edgeNodeClientId')

    source_channel_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceChannelName')

    action = sgqlc.types.Field(sgqlc.types.non_null(EnumEdgeNodeSourceChannelAccessAction), graphql_name='action')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class EdgeNodeSourceChannelAccessPatch(sgqlc.types.Input):
    '''Represents an update to a `EdgeNodeSourceChannelAccess`. Fields
    that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('edge_node_client_id', 'source_channel_name', 'action', 'created_at', 'updated_at')
    edge_node_client_id = sgqlc.types.Field(String, graphql_name='edgeNodeClientId')

    source_channel_name = sgqlc.types.Field(String, graphql_name='sourceChannelName')

    action = sgqlc.types.Field(EnumEdgeNodeSourceChannelAccessAction, graphql_name='action')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class EnumEdgeNodeSourceChannelAccessActionFilter(sgqlc.types.Input):
    '''A filter to be used against EnumEdgeNodeSourceChannelAccessAction
    fields. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(EnumEdgeNodeSourceChannelAccessAction, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(EnumEdgeNodeSourceChannelAccessAction, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(EnumEdgeNodeSourceChannelAccessAction, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(EnumEdgeNodeSourceChannelAccessAction, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EnumEdgeNodeSourceChannelAccessAction)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EnumEdgeNodeSourceChannelAccessAction)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(EnumEdgeNodeSourceChannelAccessAction, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(EnumEdgeNodeSourceChannelAccessAction, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(EnumEdgeNodeSourceChannelAccessAction, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(EnumEdgeNodeSourceChannelAccessAction, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class ExpectedInboundOrderDetailCondition(sgqlc.types.Input):
    '''A condition to be used against `ExpectedInboundOrderDetail` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'inbound_order_id', 'item_id', 'lot_id', 'facility_id', 'source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference')
    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    expiration_date = sgqlc.types.Field(String, graphql_name='expirationDate')
    '''Checks for equality with the object’s `expirationDate` field.'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Checks for equality with the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Checks for equality with the object’s `bestByDate` field.'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Checks for equality with the object’s `productionDate` field.'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Checks for equality with the object’s `slaughterDate` field.'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Checks for equality with the object’s `customerLineReference`
    field.
    '''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Checks for equality with the object’s `countryOfOrigin` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Checks for equality with the object’s `customerLineNumber` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Checks for equality with the object’s `customerLotReference`
    field.
    '''



class ExpectedInboundOrderDetailFilter(sgqlc.types.Input):
    '''A filter to be used against `ExpectedInboundOrderDetail` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'inbound_order_id', 'item_id', 'lot_id', 'facility_id', 'source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'and_', 'or_', 'not_')
    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    expiration_date = sgqlc.types.Field('StringFilter', graphql_name='expirationDate')
    '''Filter by the object’s `expirationDate` field.'''

    code_date = sgqlc.types.Field(DateFilter, graphql_name='codeDate')
    '''Filter by the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(DateFilter, graphql_name='bestByDate')
    '''Filter by the object’s `bestByDate` field.'''

    production_date = sgqlc.types.Field(DateFilter, graphql_name='productionDate')
    '''Filter by the object’s `productionDate` field.'''

    slaughter_date = sgqlc.types.Field(DateFilter, graphql_name='slaughterDate')
    '''Filter by the object’s `slaughterDate` field.'''

    shelf_life_days = sgqlc.types.Field('IntFilter', graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    customer_line_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLineReference')
    '''Filter by the object’s `customerLineReference` field.'''

    country_of_origin = sgqlc.types.Field('StringFilter', graphql_name='countryOfOrigin')
    '''Filter by the object’s `countryOfOrigin` field.'''

    quantity = sgqlc.types.Field('IntFilter', graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field('IntFilter', graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field('FloatFilter', graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field('FloatFilter', graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    customer_line_number = sgqlc.types.Field('StringFilter', graphql_name='customerLineNumber')
    '''Filter by the object’s `customerLineNumber` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLotReference')
    '''Filter by the object’s `customerLotReference` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrderDetailFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrderDetailFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ExpectedInboundOrderDetailFilter', graphql_name='not')
    '''Negates the expression.'''



class ExpectedInboundOrderDetailsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `ExpectedInboundOrderDetailsRaw`
    object types. All fields are tested for equality and combined with
    a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'inbound_order_id', 'item_id', 'lot_id', 'customer_id', 'weight_uom')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Checks for equality with the object’s `expirationDate` field.'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Checks for equality with the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Checks for equality with the object’s `bestByDate` field.'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Checks for equality with the object’s `productionDate` field.'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Checks for equality with the object’s `slaughterDate` field.'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Checks for equality with the object’s `customerLineReference`
    field.
    '''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Checks for equality with the object’s `countryOfOrigin` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Checks for equality with the object’s `customerLineNumber` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Checks for equality with the object’s `customerLotReference`
    field.
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class ExpectedInboundOrderDetailsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `ExpectedInboundOrderDetailsRaw`
    object types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'inbound_order_id', 'item_id', 'lot_id', 'customer_id', 'weight_uom', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    expiration_date = sgqlc.types.Field(DateFilter, graphql_name='expirationDate')
    '''Filter by the object’s `expirationDate` field.'''

    code_date = sgqlc.types.Field(DateFilter, graphql_name='codeDate')
    '''Filter by the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(DateFilter, graphql_name='bestByDate')
    '''Filter by the object’s `bestByDate` field.'''

    production_date = sgqlc.types.Field(DateFilter, graphql_name='productionDate')
    '''Filter by the object’s `productionDate` field.'''

    slaughter_date = sgqlc.types.Field(DateFilter, graphql_name='slaughterDate')
    '''Filter by the object’s `slaughterDate` field.'''

    shelf_life_days = sgqlc.types.Field('IntFilter', graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    customer_line_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLineReference')
    '''Filter by the object’s `customerLineReference` field.'''

    country_of_origin = sgqlc.types.Field('StringFilter', graphql_name='countryOfOrigin')
    '''Filter by the object’s `countryOfOrigin` field.'''

    quantity = sgqlc.types.Field('IntFilter', graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field('IntFilter', graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field('FloatFilter', graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field('FloatFilter', graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    customer_line_number = sgqlc.types.Field('StringFilter', graphql_name='customerLineNumber')
    '''Filter by the object’s `customerLineNumber` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLotReference')
    '''Filter by the object’s `customerLotReference` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrderDetailsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrderDetailsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ExpectedInboundOrderDetailsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class ExpectedInboundOrderDetailsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `ExpectedInboundOrderDetailsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'inbound_order_id', 'item_id', 'lot_id', 'customer_id', 'weight_uom')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lineNumber')
    '''Line number listed in the order for this record'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used by the WMS to track the lot'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Expiration Date for the item or product'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code Date for the item or product'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By Date for the item or product'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Production date for the item or product'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Slaughter date for the item or product'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Shelf life override for the item or product (in days)'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Hold code for the product on the time of receipt'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Customer provided code that places a reservation on the related
    lots/pallets for matching in a later allocation process
    '''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Customer line reference used in EDI transactions to help uniquely
    identify the line item in the customer ERP system
    '''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Country of Origin for the item/product'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets for the line item'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Customer provided notes on the line item'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''(not used)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Secondary customer-provided reference number for the lot'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class ExpectedInboundOrderDetailsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `ExpectedInboundOrderDetailsRaw`. Fields
    that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'inbound_order_id', 'item_id', 'lot_id', 'customer_id', 'weight_uom')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line number listed in the order for this record'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used by the WMS to track the lot'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Expiration Date for the item or product'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code Date for the item or product'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By Date for the item or product'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Production date for the item or product'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Slaughter date for the item or product'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Shelf life override for the item or product (in days)'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Hold code for the product on the time of receipt'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Customer provided code that places a reservation on the related
    lots/pallets for matching in a later allocation process
    '''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Customer line reference used in EDI transactions to help uniquely
    identify the line item in the customer ERP system
    '''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Country of Origin for the item/product'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets for the line item'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Customer provided notes on the line item'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''(not used)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Secondary customer-provided reference number for the lot'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class ExpectedInboundOrdersRawCondition(sgqlc.types.Input):
    '''A condition to be used against `ExpectedInboundOrdersRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', '_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'expected_receive_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'inbound_order_id', 'customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    expected_receive_datetime = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetime')
    '''Checks for equality with the object’s `expectedReceiveDatetime`
    field.
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''



class ExpectedInboundOrdersRawFilter(sgqlc.types.Input):
    '''A filter to be used against `ExpectedInboundOrdersRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', '_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'expected_receive_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'inbound_order_id', 'customer_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    expected_receive_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedReceiveDatetime')
    '''Filter by the object’s `expectedReceiveDatetime` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrdersRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrdersRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ExpectedInboundOrdersRawFilter', graphql_name='not')
    '''Negates the expression.'''



class ExpectedInboundOrdersRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `ExpectedInboundOrdersRaw`'''
    __schema__ = base
    __field_names__ = ('id', '_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'expected_receive_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'inbound_order_id', 'customer_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    expected_receive_datetime = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetime')
    '''Expected Date and Time the order will be received (in facility
    local time)
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class ExpectedInboundOrdersRawPatch(sgqlc.types.Input):
    '''Represents an update to a `ExpectedInboundOrdersRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', '_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'expected_receive_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'inbound_order_id', 'customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    expected_receive_datetime = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetime')
    '''Expected Date and Time the order will be received (in facility
    local time)
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class ExpectedOutboundOrderCondition(sgqlc.types.Input):
    '''A condition to be used against `ExpectedOutboundOrder` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('outbound_order_id', 'facility_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'requested_pickup_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id')
    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')
    '''Checks for equality with the object’s `requestedPickupDatetime`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''



class ExpectedOutboundOrderDetailCondition(sgqlc.types.Input):
    '''A condition to be used against `ExpectedOutboundOrderDetail`
    object types. All fields are tested for equality and combined with
    a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'outbound_order_id', 'item_id', 'lot_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'lot_reference', 'customer_lot_reference')
    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Checks for equality with the object’s `customerLineNumber` field.'''

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')
    '''Checks for equality with the object’s `tiOverride` field.'''

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')
    '''Checks for equality with the object’s `highOverride` field.'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Checks for equality with the object’s `customerLineReference`
    field.
    '''

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')
    '''Checks for equality with the object’s `shelfLifeDate` field.'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')
    '''Checks for equality with the object’s `positionInTruck` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Checks for equality with the object’s `pickCode` field.'''

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')
    '''Checks for equality with the object’s `labelNumber` field.'''

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')
    '''Checks for equality with the object’s `stickerNumber` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Checks for equality with the object’s `customerLotReference`
    field.
    '''



class ExpectedOutboundOrderDetailFilter(sgqlc.types.Input):
    '''A filter to be used against `ExpectedOutboundOrderDetail` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'outbound_order_id', 'item_id', 'lot_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'lot_reference', 'customer_lot_reference', 'and_', 'or_', 'not_')
    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    customer_line_number = sgqlc.types.Field('StringFilter', graphql_name='customerLineNumber')
    '''Filter by the object’s `customerLineNumber` field.'''

    ti_override = sgqlc.types.Field('IntFilter', graphql_name='tiOverride')
    '''Filter by the object’s `tiOverride` field.'''

    high_override = sgqlc.types.Field('IntFilter', graphql_name='highOverride')
    '''Filter by the object’s `highOverride` field.'''

    customer_line_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLineReference')
    '''Filter by the object’s `customerLineReference` field.'''

    shelf_life_date = sgqlc.types.Field(DateFilter, graphql_name='shelfLifeDate')
    '''Filter by the object’s `shelfLifeDate` field.'''

    shelf_life_days = sgqlc.types.Field('IntFilter', graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    quantity = sgqlc.types.Field('FloatFilter', graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field('IntFilter', graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field('FloatFilter', graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field('FloatFilter', graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    position_in_truck = sgqlc.types.Field('StringFilter', graphql_name='positionInTruck')
    '''Filter by the object’s `positionInTruck` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    pick_code = sgqlc.types.Field('StringFilter', graphql_name='pickCode')
    '''Filter by the object’s `pickCode` field.'''

    label_number = sgqlc.types.Field('StringFilter', graphql_name='labelNumber')
    '''Filter by the object’s `labelNumber` field.'''

    sticker_number = sgqlc.types.Field('StringFilter', graphql_name='stickerNumber')
    '''Filter by the object’s `stickerNumber` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLotReference')
    '''Filter by the object’s `customerLotReference` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrderDetailFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrderDetailFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ExpectedOutboundOrderDetailFilter', graphql_name='not')
    '''Negates the expression.'''



class ExpectedOutboundOrderDetailsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `ExpectedOutboundOrderDetailsRaw`
    object types. All fields are tested for equality and combined with
    a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'outbound_order_id', 'item_id', 'lot_id', 'customer_id', 'code_date', 'best_by_date', 'requested_room_code', 'customer_lot_reference', 'weight_uom')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Checks for equality with the object’s `customerLineNumber` field.'''

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')
    '''Checks for equality with the object’s `tiOverride` field.'''

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')
    '''Checks for equality with the object’s `highOverride` field.'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Checks for equality with the object’s `customerLineReference`
    field.
    '''

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')
    '''Checks for equality with the object’s `shelfLifeDate` field.'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')
    '''Checks for equality with the object’s `positionInTruck` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Checks for equality with the object’s `pickCode` field.'''

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')
    '''Checks for equality with the object’s `labelNumber` field.'''

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')
    '''Checks for equality with the object’s `stickerNumber` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Checks for equality with the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Checks for equality with the object’s `bestByDate` field.'''

    requested_room_code = sgqlc.types.Field(String, graphql_name='requestedRoomCode')
    '''Checks for equality with the object’s `requestedRoomCode` field.'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Checks for equality with the object’s `customerLotReference`
    field.
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class ExpectedOutboundOrderDetailsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `ExpectedOutboundOrderDetailsRaw`
    object types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'outbound_order_id', 'item_id', 'lot_id', 'customer_id', 'code_date', 'best_by_date', 'requested_room_code', 'customer_lot_reference', 'weight_uom', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    customer_line_number = sgqlc.types.Field('StringFilter', graphql_name='customerLineNumber')
    '''Filter by the object’s `customerLineNumber` field.'''

    ti_override = sgqlc.types.Field('IntFilter', graphql_name='tiOverride')
    '''Filter by the object’s `tiOverride` field.'''

    high_override = sgqlc.types.Field('IntFilter', graphql_name='highOverride')
    '''Filter by the object’s `highOverride` field.'''

    customer_line_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLineReference')
    '''Filter by the object’s `customerLineReference` field.'''

    shelf_life_date = sgqlc.types.Field(DateFilter, graphql_name='shelfLifeDate')
    '''Filter by the object’s `shelfLifeDate` field.'''

    shelf_life_days = sgqlc.types.Field('IntFilter', graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    quantity = sgqlc.types.Field('FloatFilter', graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field('IntFilter', graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field('FloatFilter', graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field('FloatFilter', graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    position_in_truck = sgqlc.types.Field('StringFilter', graphql_name='positionInTruck')
    '''Filter by the object’s `positionInTruck` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    pick_code = sgqlc.types.Field('StringFilter', graphql_name='pickCode')
    '''Filter by the object’s `pickCode` field.'''

    label_number = sgqlc.types.Field('StringFilter', graphql_name='labelNumber')
    '''Filter by the object’s `labelNumber` field.'''

    sticker_number = sgqlc.types.Field('StringFilter', graphql_name='stickerNumber')
    '''Filter by the object’s `stickerNumber` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    code_date = sgqlc.types.Field(DateFilter, graphql_name='codeDate')
    '''Filter by the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(DateFilter, graphql_name='bestByDate')
    '''Filter by the object’s `bestByDate` field.'''

    requested_room_code = sgqlc.types.Field('StringFilter', graphql_name='requestedRoomCode')
    '''Filter by the object’s `requestedRoomCode` field.'''

    customer_lot_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLotReference')
    '''Filter by the object’s `customerLotReference` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrderDetailsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrderDetailsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ExpectedOutboundOrderDetailsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class ExpectedOutboundOrderDetailsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `ExpectedOutboundOrderDetailsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'outbound_order_id', 'item_id', 'lot_id', 'customer_id', 'code_date', 'best_by_date', 'requested_room_code', 'customer_lot_reference', 'weight_uom')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used by the WMS to track the lot the customer is
    requesting to fulfill this order detail
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Customer override of line number for this record'''

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')
    '''Customer-specified value for changing the product tie'''

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')
    '''Customer-specified value for changing the product high'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Reference value provided by customer for this order detail'''

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')
    '''Deprecated'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Override number of days of shelf life needed to by the customer'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets for the line item'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')
    '''Not used'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Customer notes on the order detail'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Code provided by the customer to match to product in warehouse
    inventory
    '''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Picking code used for committing inventory against this order
    detail
    '''

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')
    '''Label number'''

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')
    '''Sticker number'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the item or product'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By Date for the item or product'''

    requested_room_code = sgqlc.types.Field(String, graphql_name='requestedRoomCode')

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Secondary customer-provided reference number for the lot'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class ExpectedOutboundOrderDetailsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `ExpectedOutboundOrderDetailsRaw`.
    Fields that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'outbound_order_id', 'item_id', 'lot_id', 'customer_id', 'code_date', 'best_by_date', 'requested_room_code', 'customer_lot_reference', 'weight_uom')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used by the WMS to track the lot the customer is
    requesting to fulfill this order detail
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Customer override of line number for this record'''

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')
    '''Customer-specified value for changing the product tie'''

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')
    '''Customer-specified value for changing the product high'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Reference value provided by customer for this order detail'''

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')
    '''Deprecated'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Override number of days of shelf life needed to by the customer'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets for the line item'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')
    '''Not used'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Customer notes on the order detail'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Code provided by the customer to match to product in warehouse
    inventory
    '''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Picking code used for committing inventory against this order
    detail
    '''

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')
    '''Label number'''

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')
    '''Sticker number'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the item or product'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By Date for the item or product'''

    requested_room_code = sgqlc.types.Field(String, graphql_name='requestedRoomCode')

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Secondary customer-provided reference number for the lot'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class ExpectedOutboundOrderFilter(sgqlc.types.Input):
    '''A filter to be used against `ExpectedOutboundOrder` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('outbound_order_id', 'facility_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'requested_pickup_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'and_', 'or_', 'not_')
    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    requested_pickup_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='requestedPickupDatetime')
    '''Filter by the object’s `requestedPickupDatetime` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrderFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrderFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ExpectedOutboundOrderFilter', graphql_name='not')
    '''Negates the expression.'''



class ExpectedOutboundOrdersRawCondition(sgqlc.types.Input):
    '''A condition to be used against `ExpectedOutboundOrdersRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', '_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'requested_pickup_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'outbound_order_id', 'customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')
    '''Checks for equality with the object’s `requestedPickupDatetime`
    field.
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''



class ExpectedOutboundOrdersRawFilter(sgqlc.types.Input):
    '''A filter to be used against `ExpectedOutboundOrdersRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', '_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'requested_pickup_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'outbound_order_id', 'customer_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    requested_pickup_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='requestedPickupDatetime')
    '''Filter by the object’s `requestedPickupDatetime` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrdersRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrdersRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ExpectedOutboundOrdersRawFilter', graphql_name='not')
    '''Negates the expression.'''



class ExpectedOutboundOrdersRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `ExpectedOutboundOrdersRaw`'''
    __schema__ = base
    __field_names__ = ('id', '_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'requested_pickup_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'outbound_order_id', 'customer_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')
    '''Date and time the customer requests to pick up the product at the
    warehouse
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class ExpectedOutboundOrdersRawPatch(sgqlc.types.Input):
    '''Represents an update to a `ExpectedOutboundOrdersRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', '_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'requested_pickup_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'outbound_order_id', 'customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')
    '''Date and time the customer requests to pick up the product at the
    warehouse
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class ExpectedPalletsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `ExpectedPalletsRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'pallet_code', 'source_row_id', 'id', '_id', 'warehouse_facility_id', 'expected_pallet_count', 'expected_quantity', 'created_at', 'updated_at', 'deleted_at', '_version')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    expected_pallet_count = sgqlc.types.Field(Int, graphql_name='expectedPalletCount')
    '''Checks for equality with the object’s `expectedPalletCount` field.'''

    expected_quantity = sgqlc.types.Field(Int, graphql_name='expectedQuantity')
    '''Checks for equality with the object’s `expectedQuantity` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''



class ExpectedPalletsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `ExpectedPalletsRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'pallet_code', 'source_row_id', 'id', '_id', 'warehouse_facility_id', 'expected_pallet_count', 'expected_quantity', 'created_at', 'updated_at', 'deleted_at', '_version', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    pallet_code = sgqlc.types.Field('StringFilter', graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    expected_pallet_count = sgqlc.types.Field('IntFilter', graphql_name='expectedPalletCount')
    '''Filter by the object’s `expectedPalletCount` field.'''

    expected_quantity = sgqlc.types.Field('IntFilter', graphql_name='expectedQuantity')
    '''Filter by the object’s `expectedQuantity` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedPalletsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedPalletsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ExpectedPalletsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class ExpectedPalletsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `ExpectedPalletsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'pallet_code', 'source_row_id', 'id', '_id', 'warehouse_facility_id', 'expected_pallet_count', 'expected_quantity', 'created_at', 'updated_at', 'deleted_at', '_version')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    pallet_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    expected_pallet_count = sgqlc.types.Field(Int, graphql_name='expectedPalletCount')
    '''Number of pallets expected for this pallet record'''

    expected_quantity = sgqlc.types.Field(Int, graphql_name='expectedQuantity')
    '''Number of cases expected for this pallet record'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class ExpectedPalletsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `ExpectedPalletsRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'pallet_code', 'source_row_id', 'id', '_id', 'warehouse_facility_id', 'expected_pallet_count', 'expected_quantity', 'created_at', 'updated_at', 'deleted_at', '_version')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    expected_pallet_count = sgqlc.types.Field(Int, graphql_name='expectedPalletCount')
    '''Number of pallets expected for this pallet record'''

    expected_quantity = sgqlc.types.Field(Int, graphql_name='expectedQuantity')
    '''Number of cases expected for this pallet record'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''



class FacilitiesTestCondition(sgqlc.types.Input):
    '''A condition to be used against `FacilitiesTest` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'city', 'state', 'zip', 'timezone', 'created_at', 'updated_at', 'deleted_at', 'address1', 'address2', 'location_id', 'region', 'sub_region', 'effective_date', 'is_lineage_managed_site', 'include_in_cap_util_snapshots')
    id = sgqlc.types.Field(Int, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    city = sgqlc.types.Field(String, graphql_name='city')
    '''Checks for equality with the object’s `city` field.'''

    state = sgqlc.types.Field(String, graphql_name='state')
    '''Checks for equality with the object’s `state` field.'''

    zip = sgqlc.types.Field(String, graphql_name='zip')
    '''Checks for equality with the object’s `zip` field.'''

    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    '''Checks for equality with the object’s `timezone` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    address1 = sgqlc.types.Field(String, graphql_name='address1')
    '''Checks for equality with the object’s `address1` field.'''

    address2 = sgqlc.types.Field(String, graphql_name='address2')
    '''Checks for equality with the object’s `address2` field.'''

    location_id = sgqlc.types.Field(String, graphql_name='locationId')
    '''Checks for equality with the object’s `locationId` field.'''

    region = sgqlc.types.Field(String, graphql_name='region')
    '''Checks for equality with the object’s `region` field.'''

    sub_region = sgqlc.types.Field(String, graphql_name='subRegion')
    '''Checks for equality with the object’s `subRegion` field.'''

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')
    '''Checks for equality with the object’s `effectiveDate` field.'''

    is_lineage_managed_site = sgqlc.types.Field(Boolean, graphql_name='isLineageManagedSite')
    '''Checks for equality with the object’s `isLineageManagedSite`
    field.
    '''

    include_in_cap_util_snapshots = sgqlc.types.Field(Boolean, graphql_name='includeInCapUtilSnapshots')
    '''Checks for equality with the object’s `includeInCapUtilSnapshots`
    field.
    '''



class FacilitiesTestFilter(sgqlc.types.Input):
    '''A filter to be used against `FacilitiesTest` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'city', 'state', 'zip', 'timezone', 'created_at', 'updated_at', 'deleted_at', 'address1', 'address2', 'location_id', 'region', 'sub_region', 'effective_date', 'is_lineage_managed_site', 'include_in_cap_util_snapshots', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('IntFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    city = sgqlc.types.Field('StringFilter', graphql_name='city')
    '''Filter by the object’s `city` field.'''

    state = sgqlc.types.Field('StringFilter', graphql_name='state')
    '''Filter by the object’s `state` field.'''

    zip = sgqlc.types.Field('StringFilter', graphql_name='zip')
    '''Filter by the object’s `zip` field.'''

    timezone = sgqlc.types.Field('StringFilter', graphql_name='timezone')
    '''Filter by the object’s `timezone` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    address1 = sgqlc.types.Field('StringFilter', graphql_name='address1')
    '''Filter by the object’s `address1` field.'''

    address2 = sgqlc.types.Field('StringFilter', graphql_name='address2')
    '''Filter by the object’s `address2` field.'''

    location_id = sgqlc.types.Field('StringFilter', graphql_name='locationId')
    '''Filter by the object’s `locationId` field.'''

    region = sgqlc.types.Field('StringFilter', graphql_name='region')
    '''Filter by the object’s `region` field.'''

    sub_region = sgqlc.types.Field('StringFilter', graphql_name='subRegion')
    '''Filter by the object’s `subRegion` field.'''

    effective_date = sgqlc.types.Field(DatetimeFilter, graphql_name='effectiveDate')
    '''Filter by the object’s `effectiveDate` field.'''

    is_lineage_managed_site = sgqlc.types.Field(BooleanFilter, graphql_name='isLineageManagedSite')
    '''Filter by the object’s `isLineageManagedSite` field.'''

    include_in_cap_util_snapshots = sgqlc.types.Field(BooleanFilter, graphql_name='includeInCapUtilSnapshots')
    '''Filter by the object’s `includeInCapUtilSnapshots` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilitiesTestFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilitiesTestFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('FacilitiesTestFilter', graphql_name='not')
    '''Negates the expression.'''



class FacilitiesTestInput(sgqlc.types.Input):
    '''An input for mutations affecting `FacilitiesTest`'''
    __schema__ = base
    __field_names__ = ('id', 'name', 'city', 'state', 'zip', 'timezone', 'created_at', 'updated_at', 'deleted_at', 'address1', 'address2', 'location_id', 'region', 'sub_region', 'effective_date', 'is_lineage_managed_site', 'include_in_cap_util_snapshots')
    id = sgqlc.types.Field(Int, graphql_name='id')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    timezone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='timezone')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    location_id = sgqlc.types.Field(String, graphql_name='locationId')

    region = sgqlc.types.Field(String, graphql_name='region')

    sub_region = sgqlc.types.Field(String, graphql_name='subRegion')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    is_lineage_managed_site = sgqlc.types.Field(Boolean, graphql_name='isLineageManagedSite')

    include_in_cap_util_snapshots = sgqlc.types.Field(Boolean, graphql_name='includeInCapUtilSnapshots')



class FacilitiesTestPatch(sgqlc.types.Input):
    '''Represents an update to a `FacilitiesTest`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'city', 'state', 'zip', 'timezone', 'created_at', 'updated_at', 'deleted_at', 'address1', 'address2', 'location_id', 'region', 'sub_region', 'effective_date', 'is_lineage_managed_site', 'include_in_cap_util_snapshots')
    id = sgqlc.types.Field(Int, graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    timezone = sgqlc.types.Field(String, graphql_name='timezone')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    location_id = sgqlc.types.Field(String, graphql_name='locationId')

    region = sgqlc.types.Field(String, graphql_name='region')

    sub_region = sgqlc.types.Field(String, graphql_name='subRegion')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    is_lineage_managed_site = sgqlc.types.Field(Boolean, graphql_name='isLineageManagedSite')

    include_in_cap_util_snapshots = sgqlc.types.Field(Boolean, graphql_name='includeInCapUtilSnapshots')



class FacilityCondition(sgqlc.types.Input):
    '''A condition to be used against `Facility` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'city', 'state', 'zip', 'timezone', 'organization_id', 'created_at', 'updated_at', 'deleted_at', 'address1', 'address2', 'weather_location_id', 'location_id', 'wh_id', 'source_system', 'region', 'sub_region', 'company_name', 'gen_manager', 'temperature', 'effective_date', 'is_lineage_managed_site', 'include_ltr_in_bonus', 'include_in_cap_util_snapshots', 'business_unit', 'commodity', 'property_type', 'is_test_facility')
    id = sgqlc.types.Field(Int, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    city = sgqlc.types.Field(String, graphql_name='city')
    '''Checks for equality with the object’s `city` field.'''

    state = sgqlc.types.Field(String, graphql_name='state')
    '''Checks for equality with the object’s `state` field.'''

    zip = sgqlc.types.Field(Int, graphql_name='zip')
    '''Checks for equality with the object’s `zip` field.'''

    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    '''Checks for equality with the object’s `timezone` field.'''

    organization_id = sgqlc.types.Field(Int, graphql_name='organizationId')
    '''Checks for equality with the object’s `organizationId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    address1 = sgqlc.types.Field(String, graphql_name='address1')
    '''Checks for equality with the object’s `address1` field.'''

    address2 = sgqlc.types.Field(String, graphql_name='address2')
    '''Checks for equality with the object’s `address2` field.'''

    weather_location_id = sgqlc.types.Field(Int, graphql_name='weatherLocationId')
    '''Checks for equality with the object’s `weatherLocationId` field.'''

    location_id = sgqlc.types.Field(String, graphql_name='locationId')
    '''Checks for equality with the object’s `locationId` field.'''

    wh_id = sgqlc.types.Field(String, graphql_name='whId')
    '''Checks for equality with the object’s `whId` field.'''

    source_system = sgqlc.types.Field(String, graphql_name='sourceSystem')
    '''Checks for equality with the object’s `sourceSystem` field.'''

    region = sgqlc.types.Field(String, graphql_name='region')
    '''Checks for equality with the object’s `region` field.'''

    sub_region = sgqlc.types.Field(String, graphql_name='subRegion')
    '''Checks for equality with the object’s `subRegion` field.'''

    company_name = sgqlc.types.Field(String, graphql_name='companyName')
    '''Checks for equality with the object’s `companyName` field.'''

    gen_manager = sgqlc.types.Field(String, graphql_name='genManager')
    '''Checks for equality with the object’s `genManager` field.'''

    temperature = sgqlc.types.Field(String, graphql_name='temperature')
    '''Checks for equality with the object’s `temperature` field.'''

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')
    '''Checks for equality with the object’s `effectiveDate` field.'''

    is_lineage_managed_site = sgqlc.types.Field(Boolean, graphql_name='isLineageManagedSite')
    '''Checks for equality with the object’s `isLineageManagedSite`
    field.
    '''

    include_ltr_in_bonus = sgqlc.types.Field(Boolean, graphql_name='includeLtrInBonus')
    '''Checks for equality with the object’s `includeLtrInBonus` field.'''

    include_in_cap_util_snapshots = sgqlc.types.Field(Boolean, graphql_name='includeInCapUtilSnapshots')
    '''Checks for equality with the object’s `includeInCapUtilSnapshots`
    field.
    '''

    business_unit = sgqlc.types.Field(String, graphql_name='businessUnit')
    '''Checks for equality with the object’s `businessUnit` field.'''

    commodity = sgqlc.types.Field(String, graphql_name='commodity')
    '''Checks for equality with the object’s `commodity` field.'''

    property_type = sgqlc.types.Field(String, graphql_name='propertyType')
    '''Checks for equality with the object’s `propertyType` field.'''

    is_test_facility = sgqlc.types.Field(Boolean, graphql_name='isTestFacility')
    '''Checks for equality with the object’s `isTestFacility` field.'''



class FacilityCycleStatFilter(sgqlc.types.Input):
    '''A filter to be used against `FacilityCycleStat` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('blast_cell_id', 'load_duration_hours_min', 'load_duration_hours_max', 'load_duration_hours_avg', 'after_load_idle_duration_hours_min', 'after_load_idle_duration_hours_max', 'after_load_idle_duration_hours_avg', 'refrigeration_duration_hours_min', 'refrigeration_duration_hours_max', 'refrigeration_duration_hours_avg', 'before_unload_idle_duration_hours_min', 'before_unload_idle_duration_hours_max', 'before_unload_idle_duration_hours_avg', 'unload_duration_hours_min', 'unload_duration_hours_max', 'unload_duration_hours_avg', 'overall_duration_hours_min', 'overall_duration_hours_max', 'overall_duration_hours_avg', 'and_', 'or_', 'not_')
    blast_cell_id = sgqlc.types.Field('IntFilter', graphql_name='blastCellId')
    '''Filter by the object’s `blastCellId` field.'''

    load_duration_hours_min = sgqlc.types.Field('FloatFilter', graphql_name='loadDurationHoursMin')
    '''Filter by the object’s `loadDurationHoursMin` field.'''

    load_duration_hours_max = sgqlc.types.Field('FloatFilter', graphql_name='loadDurationHoursMax')
    '''Filter by the object’s `loadDurationHoursMax` field.'''

    load_duration_hours_avg = sgqlc.types.Field('FloatFilter', graphql_name='loadDurationHoursAvg')
    '''Filter by the object’s `loadDurationHoursAvg` field.'''

    after_load_idle_duration_hours_min = sgqlc.types.Field('FloatFilter', graphql_name='afterLoadIdleDurationHoursMin')
    '''Filter by the object’s `afterLoadIdleDurationHoursMin` field.'''

    after_load_idle_duration_hours_max = sgqlc.types.Field('FloatFilter', graphql_name='afterLoadIdleDurationHoursMax')
    '''Filter by the object’s `afterLoadIdleDurationHoursMax` field.'''

    after_load_idle_duration_hours_avg = sgqlc.types.Field('FloatFilter', graphql_name='afterLoadIdleDurationHoursAvg')
    '''Filter by the object’s `afterLoadIdleDurationHoursAvg` field.'''

    refrigeration_duration_hours_min = sgqlc.types.Field('FloatFilter', graphql_name='refrigerationDurationHoursMin')
    '''Filter by the object’s `refrigerationDurationHoursMin` field.'''

    refrigeration_duration_hours_max = sgqlc.types.Field('FloatFilter', graphql_name='refrigerationDurationHoursMax')
    '''Filter by the object’s `refrigerationDurationHoursMax` field.'''

    refrigeration_duration_hours_avg = sgqlc.types.Field('FloatFilter', graphql_name='refrigerationDurationHoursAvg')
    '''Filter by the object’s `refrigerationDurationHoursAvg` field.'''

    before_unload_idle_duration_hours_min = sgqlc.types.Field('FloatFilter', graphql_name='beforeUnloadIdleDurationHoursMin')
    '''Filter by the object’s `beforeUnloadIdleDurationHoursMin` field.'''

    before_unload_idle_duration_hours_max = sgqlc.types.Field('FloatFilter', graphql_name='beforeUnloadIdleDurationHoursMax')
    '''Filter by the object’s `beforeUnloadIdleDurationHoursMax` field.'''

    before_unload_idle_duration_hours_avg = sgqlc.types.Field('FloatFilter', graphql_name='beforeUnloadIdleDurationHoursAvg')
    '''Filter by the object’s `beforeUnloadIdleDurationHoursAvg` field.'''

    unload_duration_hours_min = sgqlc.types.Field('FloatFilter', graphql_name='unloadDurationHoursMin')
    '''Filter by the object’s `unloadDurationHoursMin` field.'''

    unload_duration_hours_max = sgqlc.types.Field('FloatFilter', graphql_name='unloadDurationHoursMax')
    '''Filter by the object’s `unloadDurationHoursMax` field.'''

    unload_duration_hours_avg = sgqlc.types.Field('FloatFilter', graphql_name='unloadDurationHoursAvg')
    '''Filter by the object’s `unloadDurationHoursAvg` field.'''

    overall_duration_hours_min = sgqlc.types.Field('FloatFilter', graphql_name='overallDurationHoursMin')
    '''Filter by the object’s `overallDurationHoursMin` field.'''

    overall_duration_hours_max = sgqlc.types.Field('FloatFilter', graphql_name='overallDurationHoursMax')
    '''Filter by the object’s `overallDurationHoursMax` field.'''

    overall_duration_hours_avg = sgqlc.types.Field('FloatFilter', graphql_name='overallDurationHoursAvg')
    '''Filter by the object’s `overallDurationHoursAvg` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilityCycleStatFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilityCycleStatFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('FacilityCycleStatFilter', graphql_name='not')
    '''Negates the expression.'''



class FacilityFilter(sgqlc.types.Input):
    '''A filter to be used against `Facility` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'city', 'state', 'zip', 'timezone', 'organization_id', 'created_at', 'updated_at', 'deleted_at', 'address1', 'address2', 'weather_location_id', 'location_id', 'wh_id', 'source_system', 'region', 'sub_region', 'company_name', 'gen_manager', 'temperature', 'effective_date', 'is_lineage_managed_site', 'include_ltr_in_bonus', 'include_in_cap_util_snapshots', 'business_unit', 'commodity', 'property_type', 'is_test_facility', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('IntFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    city = sgqlc.types.Field('StringFilter', graphql_name='city')
    '''Filter by the object’s `city` field.'''

    state = sgqlc.types.Field('StringFilter', graphql_name='state')
    '''Filter by the object’s `state` field.'''

    zip = sgqlc.types.Field('IntFilter', graphql_name='zip')
    '''Filter by the object’s `zip` field.'''

    timezone = sgqlc.types.Field('StringFilter', graphql_name='timezone')
    '''Filter by the object’s `timezone` field.'''

    organization_id = sgqlc.types.Field('IntFilter', graphql_name='organizationId')
    '''Filter by the object’s `organizationId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    address1 = sgqlc.types.Field('StringFilter', graphql_name='address1')
    '''Filter by the object’s `address1` field.'''

    address2 = sgqlc.types.Field('StringFilter', graphql_name='address2')
    '''Filter by the object’s `address2` field.'''

    weather_location_id = sgqlc.types.Field('IntFilter', graphql_name='weatherLocationId')
    '''Filter by the object’s `weatherLocationId` field.'''

    location_id = sgqlc.types.Field('StringFilter', graphql_name='locationId')
    '''Filter by the object’s `locationId` field.'''

    wh_id = sgqlc.types.Field('StringFilter', graphql_name='whId')
    '''Filter by the object’s `whId` field.'''

    source_system = sgqlc.types.Field('StringFilter', graphql_name='sourceSystem')
    '''Filter by the object’s `sourceSystem` field.'''

    region = sgqlc.types.Field('StringFilter', graphql_name='region')
    '''Filter by the object’s `region` field.'''

    sub_region = sgqlc.types.Field('StringFilter', graphql_name='subRegion')
    '''Filter by the object’s `subRegion` field.'''

    company_name = sgqlc.types.Field('StringFilter', graphql_name='companyName')
    '''Filter by the object’s `companyName` field.'''

    gen_manager = sgqlc.types.Field('StringFilter', graphql_name='genManager')
    '''Filter by the object’s `genManager` field.'''

    temperature = sgqlc.types.Field('StringFilter', graphql_name='temperature')
    '''Filter by the object’s `temperature` field.'''

    effective_date = sgqlc.types.Field(DatetimeFilter, graphql_name='effectiveDate')
    '''Filter by the object’s `effectiveDate` field.'''

    is_lineage_managed_site = sgqlc.types.Field(BooleanFilter, graphql_name='isLineageManagedSite')
    '''Filter by the object’s `isLineageManagedSite` field.'''

    include_ltr_in_bonus = sgqlc.types.Field(BooleanFilter, graphql_name='includeLtrInBonus')
    '''Filter by the object’s `includeLtrInBonus` field.'''

    include_in_cap_util_snapshots = sgqlc.types.Field(BooleanFilter, graphql_name='includeInCapUtilSnapshots')
    '''Filter by the object’s `includeInCapUtilSnapshots` field.'''

    business_unit = sgqlc.types.Field('StringFilter', graphql_name='businessUnit')
    '''Filter by the object’s `businessUnit` field.'''

    commodity = sgqlc.types.Field('StringFilter', graphql_name='commodity')
    '''Filter by the object’s `commodity` field.'''

    property_type = sgqlc.types.Field('StringFilter', graphql_name='propertyType')
    '''Filter by the object’s `propertyType` field.'''

    is_test_facility = sgqlc.types.Field(BooleanFilter, graphql_name='isTestFacility')
    '''Filter by the object’s `isTestFacility` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilityFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilityFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('FacilityFilter', graphql_name='not')
    '''Negates the expression.'''



class FacilityGroupingCondition(sgqlc.types.Input):
    '''A condition to be used against `FacilityGrouping` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'description', 'path', 'facility_ids', 'parent_id', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Checks for equality with the object’s `description` field.'''

    path = sgqlc.types.Field(String, graphql_name='path')
    '''Checks for equality with the object’s `path` field.'''

    facility_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='facilityIds')
    '''Checks for equality with the object’s `facilityIds` field.'''

    parent_id = sgqlc.types.Field(String, graphql_name='parentId')
    '''Checks for equality with the object’s `parentId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''



class FacilityGroupingFilter(sgqlc.types.Input):
    '''A filter to be used against `FacilityGrouping` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'description', 'path', 'facility_ids', 'parent_id', 'created_at', 'updated_at', 'deleted_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    description = sgqlc.types.Field('StringFilter', graphql_name='description')
    '''Filter by the object’s `description` field.'''

    path = sgqlc.types.Field('StringFilter', graphql_name='path')
    '''Filter by the object’s `path` field.'''

    facility_ids = sgqlc.types.Field('IntListFilter', graphql_name='facilityIds')
    '''Filter by the object’s `facilityIds` field.'''

    parent_id = sgqlc.types.Field('StringFilter', graphql_name='parentId')
    '''Filter by the object’s `parentId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilityGroupingFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilityGroupingFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('FacilityGroupingFilter', graphql_name='not')
    '''Negates the expression.'''



class FacilityGroupingInput(sgqlc.types.Input):
    '''An input for mutations affecting `FacilityGrouping`'''
    __schema__ = base
    __field_names__ = ('id', 'name', 'description', 'path', 'facility_ids', 'parent_id', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    description = sgqlc.types.Field(String, graphql_name='description')

    path = sgqlc.types.Field(String, graphql_name='path')

    facility_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='facilityIds')

    parent_id = sgqlc.types.Field(String, graphql_name='parentId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')



class FacilityGroupingPatch(sgqlc.types.Input):
    '''Represents an update to a `FacilityGrouping`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'description', 'path', 'facility_ids', 'parent_id', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(String, graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    description = sgqlc.types.Field(String, graphql_name='description')

    path = sgqlc.types.Field(String, graphql_name='path')

    facility_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='facilityIds')

    parent_id = sgqlc.types.Field(String, graphql_name='parentId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')



class FacilityInput(sgqlc.types.Input):
    '''An input for mutations affecting `Facility`'''
    __schema__ = base
    __field_names__ = ('id', 'name', 'city', 'state', 'zip', 'timezone', 'organization_id', 'created_at', 'updated_at', 'deleted_at', 'address1', 'address2', 'weather_location_id', 'location_id', 'wh_id', 'source_system', 'region', 'sub_region', 'company_name', 'gen_manager', 'temperature', 'effective_date', 'is_lineage_managed_site', 'include_ltr_in_bonus', 'include_in_cap_util_snapshots', 'business_unit', 'commodity', 'property_type', 'is_test_facility')
    id = sgqlc.types.Field(Int, graphql_name='id')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(Int, graphql_name='zip')

    timezone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='timezone')

    organization_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='organizationId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    weather_location_id = sgqlc.types.Field(Int, graphql_name='weatherLocationId')

    location_id = sgqlc.types.Field(String, graphql_name='locationId')

    wh_id = sgqlc.types.Field(String, graphql_name='whId')

    source_system = sgqlc.types.Field(String, graphql_name='sourceSystem')

    region = sgqlc.types.Field(String, graphql_name='region')

    sub_region = sgqlc.types.Field(String, graphql_name='subRegion')

    company_name = sgqlc.types.Field(String, graphql_name='companyName')

    gen_manager = sgqlc.types.Field(String, graphql_name='genManager')

    temperature = sgqlc.types.Field(String, graphql_name='temperature')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    is_lineage_managed_site = sgqlc.types.Field(Boolean, graphql_name='isLineageManagedSite')

    include_ltr_in_bonus = sgqlc.types.Field(Boolean, graphql_name='includeLtrInBonus')

    include_in_cap_util_snapshots = sgqlc.types.Field(Boolean, graphql_name='includeInCapUtilSnapshots')

    business_unit = sgqlc.types.Field(String, graphql_name='businessUnit')

    commodity = sgqlc.types.Field(String, graphql_name='commodity')

    property_type = sgqlc.types.Field(String, graphql_name='propertyType')

    is_test_facility = sgqlc.types.Field(Boolean, graphql_name='isTestFacility')



class FacilityPatch(sgqlc.types.Input):
    '''Represents an update to a `Facility`. Fields that are set will be
    updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'city', 'state', 'zip', 'timezone', 'organization_id', 'created_at', 'updated_at', 'deleted_at', 'address1', 'address2', 'weather_location_id', 'location_id', 'wh_id', 'source_system', 'region', 'sub_region', 'company_name', 'gen_manager', 'temperature', 'effective_date', 'is_lineage_managed_site', 'include_ltr_in_bonus', 'include_in_cap_util_snapshots', 'business_unit', 'commodity', 'property_type', 'is_test_facility')
    id = sgqlc.types.Field(Int, graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(Int, graphql_name='zip')

    timezone = sgqlc.types.Field(String, graphql_name='timezone')

    organization_id = sgqlc.types.Field(Int, graphql_name='organizationId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    weather_location_id = sgqlc.types.Field(Int, graphql_name='weatherLocationId')

    location_id = sgqlc.types.Field(String, graphql_name='locationId')

    wh_id = sgqlc.types.Field(String, graphql_name='whId')

    source_system = sgqlc.types.Field(String, graphql_name='sourceSystem')

    region = sgqlc.types.Field(String, graphql_name='region')

    sub_region = sgqlc.types.Field(String, graphql_name='subRegion')

    company_name = sgqlc.types.Field(String, graphql_name='companyName')

    gen_manager = sgqlc.types.Field(String, graphql_name='genManager')

    temperature = sgqlc.types.Field(String, graphql_name='temperature')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    is_lineage_managed_site = sgqlc.types.Field(Boolean, graphql_name='isLineageManagedSite')

    include_ltr_in_bonus = sgqlc.types.Field(Boolean, graphql_name='includeLtrInBonus')

    include_in_cap_util_snapshots = sgqlc.types.Field(Boolean, graphql_name='includeInCapUtilSnapshots')

    business_unit = sgqlc.types.Field(String, graphql_name='businessUnit')

    commodity = sgqlc.types.Field(String, graphql_name='commodity')

    property_type = sgqlc.types.Field(String, graphql_name='propertyType')

    is_test_facility = sgqlc.types.Field(Boolean, graphql_name='isTestFacility')



class FacilityWarehouseLinkCondition(sgqlc.types.Input):
    '''A condition to be used against `FacilityWarehouseLink` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'warehouse_facility_id', 'wms_system_id', 'source_system_id', 'salesforce_warehouse_code')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    wms_system_id = sgqlc.types.Field(Int, graphql_name='wmsSystemId')
    '''Checks for equality with the object’s `wmsSystemId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    salesforce_warehouse_code = sgqlc.types.Field(String, graphql_name='salesforceWarehouseCode')
    '''Checks for equality with the object’s `salesforceWarehouseCode`
    field.
    '''



class FacilityWarehouseLinkFilter(sgqlc.types.Input):
    '''A filter to be used against `FacilityWarehouseLink` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'warehouse_facility_id', 'wms_system_id', 'source_system_id', 'salesforce_warehouse_code', 'and_', 'or_', 'not_')
    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    wms_system_id = sgqlc.types.Field('IntFilter', graphql_name='wmsSystemId')
    '''Filter by the object’s `wmsSystemId` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    salesforce_warehouse_code = sgqlc.types.Field('StringFilter', graphql_name='salesforceWarehouseCode')
    '''Filter by the object’s `salesforceWarehouseCode` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilityWarehouseLinkFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilityWarehouseLinkFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('FacilityWarehouseLinkFilter', graphql_name='not')
    '''Negates the expression.'''



class FacilityWarehouseLinkInput(sgqlc.types.Input):
    '''An input for mutations affecting `FacilityWarehouseLink`'''
    __schema__ = base
    __field_names__ = ('facility_id', 'warehouse_facility_id', 'wms_system_id', 'source_system_id', 'salesforce_warehouse_code')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    wms_system_id = sgqlc.types.Field(Int, graphql_name='wmsSystemId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    salesforce_warehouse_code = sgqlc.types.Field(String, graphql_name='salesforceWarehouseCode')



class FacilityWorkdayCostCenterCondition(sgqlc.types.Input):
    '''A condition to be used against `FacilityWorkdayCostCenter` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'facility_id', 'cost_center_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(Int, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    cost_center_id = sgqlc.types.Field(String, graphql_name='costCenterId')
    '''Checks for equality with the object’s `costCenterId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class FacilityWorkdayCostCenterFilter(sgqlc.types.Input):
    '''A filter to be used against `FacilityWorkdayCostCenter` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'facility_id', 'cost_center_id', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('IntFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    cost_center_id = sgqlc.types.Field('StringFilter', graphql_name='costCenterId')
    '''Filter by the object’s `costCenterId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilityWorkdayCostCenterFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FacilityWorkdayCostCenterFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('FacilityWorkdayCostCenterFilter', graphql_name='not')
    '''Negates the expression.'''



class FacilityWorkdayCostCenterInput(sgqlc.types.Input):
    '''An input for mutations affecting `FacilityWorkdayCostCenter`'''
    __schema__ = base
    __field_names__ = ('id', 'facility_id', 'cost_center_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(Int, graphql_name='id')

    facility_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='facilityId')

    cost_center_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='costCenterId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')



class FacilityWorkdayCostCenterPatch(sgqlc.types.Input):
    '''Represents an update to a `FacilityWorkdayCostCenter`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'facility_id', 'cost_center_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(Int, graphql_name='id')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    cost_center_id = sgqlc.types.Field(String, graphql_name='costCenterId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class FetchHistoricalPalletsForCycleInput(sgqlc.types.Input):
    '''All input for the `fetchHistoricalPalletsForCycle` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cycle_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    cycle_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cycleId')



class FetchUnloadedPalletsForCycleInput(sgqlc.types.Input):
    '''All input for the `fetchUnloadedPalletsForCycle` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cycle_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    cycle_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cycleId')



class FloatFilter(sgqlc.types.Input):
    '''A filter to be used against Float fields. All fields are combined
    with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(Float, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(Float, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(Float, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(Float, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(Float, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(Float, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(Float, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(Float, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class HoldCodeCondition(sgqlc.types.Input):
    '''A condition to be used against `HoldCode` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'warehouse_customer_id', 'customer_enterprise_id', 'facility_id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', 'updated_at', 'deleted_at', 'created_at', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    hold_code_description = sgqlc.types.Field(String, graphql_name='holdCodeDescription')
    '''Checks for equality with the object’s `holdCodeDescription` field.'''

    is_facility_hold_code = sgqlc.types.Field(Boolean, graphql_name='isFacilityHoldCode')
    '''Checks for equality with the object’s `isFacilityHoldCode` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class HoldCodeFilter(sgqlc.types.Input):
    '''A filter to be used against `HoldCode` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'warehouse_customer_id', 'customer_enterprise_id', 'facility_id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', 'updated_at', 'deleted_at', 'created_at', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    hold_code_description = sgqlc.types.Field('StringFilter', graphql_name='holdCodeDescription')
    '''Filter by the object’s `holdCodeDescription` field.'''

    is_facility_hold_code = sgqlc.types.Field(BooleanFilter, graphql_name='isFacilityHoldCode')
    '''Filter by the object’s `isFacilityHoldCode` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HoldCodeFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HoldCodeFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('HoldCodeFilter', graphql_name='not')
    '''Negates the expression.'''



class HoldCodesPerCustomerCondition(sgqlc.types.Input):
    '''A condition to be used against `HoldCodesPerCustomer` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'warehouse_customer_id', 'customer_enterprise_id', 'facility_id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', 'updated_at', 'deleted_at', 'created_at')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    hold_code_description = sgqlc.types.Field(String, graphql_name='holdCodeDescription')
    '''Checks for equality with the object’s `holdCodeDescription` field.'''

    is_facility_hold_code = sgqlc.types.Field(Boolean, graphql_name='isFacilityHoldCode')
    '''Checks for equality with the object’s `isFacilityHoldCode` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''



class HoldCodesPerCustomerFilter(sgqlc.types.Input):
    '''A filter to be used against `HoldCodesPerCustomer` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'warehouse_customer_id', 'customer_enterprise_id', 'facility_id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', 'updated_at', 'deleted_at', 'created_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    hold_code_description = sgqlc.types.Field('StringFilter', graphql_name='holdCodeDescription')
    '''Filter by the object’s `holdCodeDescription` field.'''

    is_facility_hold_code = sgqlc.types.Field(BooleanFilter, graphql_name='isFacilityHoldCode')
    '''Filter by the object’s `isFacilityHoldCode` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HoldCodesPerCustomerFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HoldCodesPerCustomerFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('HoldCodesPerCustomerFilter', graphql_name='not')
    '''Negates the expression.'''



class HoldCodesRawCondition(sgqlc.types.Input):
    '''A condition to be used against `HoldCodesRaw` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', '_id', 'source_row_id', '_version', 'updated_at', 'created_at', 'deleted_at', 'customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    hold_code_description = sgqlc.types.Field(String, graphql_name='holdCodeDescription')
    '''Checks for equality with the object’s `holdCodeDescription` field.'''

    is_facility_hold_code = sgqlc.types.Field(Boolean, graphql_name='isFacilityHoldCode')
    '''Checks for equality with the object’s `isFacilityHoldCode` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''



class HoldCodesRawFilter(sgqlc.types.Input):
    '''A filter to be used against `HoldCodesRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', '_id', 'source_row_id', '_version', 'updated_at', 'created_at', 'deleted_at', 'customer_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    hold_code_description = sgqlc.types.Field('StringFilter', graphql_name='holdCodeDescription')
    '''Filter by the object’s `holdCodeDescription` field.'''

    is_facility_hold_code = sgqlc.types.Field(BooleanFilter, graphql_name='isFacilityHoldCode')
    '''Filter by the object’s `isFacilityHoldCode` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HoldCodesRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HoldCodesRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('HoldCodesRawFilter', graphql_name='not')
    '''Negates the expression.'''



class HoldCodesRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `HoldCodesRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', '_id', 'source_row_id', '_version', 'updated_at', 'created_at', 'deleted_at', 'customer_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Identifier used by the WMS to signify the type of hold'''

    hold_code_description = sgqlc.types.Field(String, graphql_name='holdCodeDescription')
    '''Description of the hold code'''

    is_facility_hold_code = sgqlc.types.Field(Boolean, graphql_name='isFacilityHoldCode')
    '''Flag for whether the hold code exists for all customers at the
    facility
    '''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class HoldCodesRawPatch(sgqlc.types.Input):
    '''Represents an update to a `HoldCodesRaw`. Fields that are set will
    be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', '_id', 'source_row_id', '_version', 'updated_at', 'created_at', 'deleted_at', 'customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Identifier used by the WMS to signify the type of hold'''

    hold_code_description = sgqlc.types.Field(String, graphql_name='holdCodeDescription')
    '''Description of the hold code'''

    is_facility_hold_code = sgqlc.types.Field(Boolean, graphql_name='isFacilityHoldCode')
    '''Flag for whether the hold code exists for all customers at the
    facility
    '''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class HppRawCondition(sgqlc.types.Input):
    '''A condition to be used against `HppRaw` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'customer_id', 'lot_code', 'lot_id', 'pallet_code', 'quantity', 'sort_date', 'transaction_datetime', 'warehouse_license_plate_number', 'lot_reference', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_in_hpp_machine')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    sort_date = sgqlc.types.Field(Date, graphql_name='sortDate')
    '''Checks for equality with the object’s `sortDate` field.'''

    transaction_datetime = sgqlc.types.Field(Datetime, graphql_name='transactionDatetime')
    '''Checks for equality with the object’s `transactionDatetime` field.'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Checks for equality with the object’s
    `warehouseLicensePlateNumber` field.
    '''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    is_in_hpp_machine = sgqlc.types.Field(Boolean, graphql_name='isInHppMachine')
    '''Checks for equality with the object’s `isInHppMachine` field.'''



class HppRawFilter(sgqlc.types.Input):
    '''A filter to be used against `HppRaw` object types. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'customer_id', 'lot_code', 'lot_id', 'pallet_code', 'quantity', 'sort_date', 'transaction_datetime', 'warehouse_license_plate_number', 'lot_reference', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_in_hpp_machine', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    pallet_code = sgqlc.types.Field('StringFilter', graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    quantity = sgqlc.types.Field('IntFilter', graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    sort_date = sgqlc.types.Field(DateFilter, graphql_name='sortDate')
    '''Filter by the object’s `sortDate` field.'''

    transaction_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='transactionDatetime')
    '''Filter by the object’s `transactionDatetime` field.'''

    warehouse_license_plate_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseLicensePlateNumber')
    '''Filter by the object’s `warehouseLicensePlateNumber` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    is_in_hpp_machine = sgqlc.types.Field(BooleanFilter, graphql_name='isInHppMachine')
    '''Filter by the object’s `isInHppMachine` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HppRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HppRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('HppRawFilter', graphql_name='not')
    '''Negates the expression.'''



class HppRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `HppRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'customer_id', 'lot_code', 'lot_id', 'pallet_code', 'quantity', 'sort_date', 'transaction_datetime', 'warehouse_license_plate_number', 'lot_reference', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_in_hpp_machine')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS lot code for tracking purposes'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS Lot identifer (references lots_raw.id)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases on the pallet'''

    sort_date = sgqlc.types.Field(Date, graphql_name='sortDate')
    '''Sort date for the high pressure processing event'''

    transaction_datetime = sgqlc.types.Field(Datetime, graphql_name='transactionDatetime')
    '''Timestamp for when the high pressure processing occurred (in
    facility local time)
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Number assigned to pallet for identification purposes'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary lot reference that is customer visible'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_in_hpp_machine = sgqlc.types.Field(Boolean, graphql_name='isInHppMachine')



class HppRawPatch(sgqlc.types.Input):
    '''Represents an update to a `HppRaw`. Fields that are set will be
    updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'customer_id', 'lot_code', 'lot_id', 'pallet_code', 'quantity', 'sort_date', 'transaction_datetime', 'warehouse_license_plate_number', 'lot_reference', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_in_hpp_machine')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS lot code for tracking purposes'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS Lot identifer (references lots_raw.id)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases on the pallet'''

    sort_date = sgqlc.types.Field(Date, graphql_name='sortDate')
    '''Sort date for the high pressure processing event'''

    transaction_datetime = sgqlc.types.Field(Datetime, graphql_name='transactionDatetime')
    '''Timestamp for when the high pressure processing occurred (in
    facility local time)
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Number assigned to pallet for identification purposes'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary lot reference that is customer visible'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_in_hpp_machine = sgqlc.types.Field(Boolean, graphql_name='isInHppMachine')



class InboundCatchWeightRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundCatchWeightRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_license_plate_number', 'customer_id', 'item_code', 'item_id', 'warehouse_order_number', 'serial_number', 'catch_weight', 'inbound_order_id', 'lot_reference', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Checks for equality with the object’s
    `warehouseLicensePlateNumber` field.
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    serial_number = sgqlc.types.Field(String, graphql_name='serialNumber')
    '''Checks for equality with the object’s `serialNumber` field.'''

    catch_weight = sgqlc.types.Field(Float, graphql_name='catchWeight')
    '''Checks for equality with the object’s `catchWeight` field.'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class InboundCatchWeightRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundCatchWeightRaw` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_license_plate_number', 'customer_id', 'item_code', 'item_id', 'warehouse_order_number', 'serial_number', 'catch_weight', 'inbound_order_id', 'lot_reference', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_license_plate_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseLicensePlateNumber')
    '''Filter by the object’s `warehouseLicensePlateNumber` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    serial_number = sgqlc.types.Field('StringFilter', graphql_name='serialNumber')
    '''Filter by the object’s `serialNumber` field.'''

    catch_weight = sgqlc.types.Field(FloatFilter, graphql_name='catchWeight')
    '''Filter by the object’s `catchWeight` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundCatchWeightRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundCatchWeightRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundCatchWeightRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundCatchWeightRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InboundCatchWeightRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_license_plate_number', 'customer_id', 'item_code', 'item_id', 'warehouse_order_number', 'serial_number', 'catch_weight', 'inbound_order_id', 'lot_reference', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Number assigned to pallet for identification purposes'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Unique identifier for the customer'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Unique value for item'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Unique identifier for item'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    serial_number = sgqlc.types.Field(String, graphql_name='serialNumber')
    '''serial number for item in the case of pallet'''

    catch_weight = sgqlc.types.Field(Float, graphql_name='catchWeight')
    '''Size of food item in case'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Unique identifier for inbound orders'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Unique number for the lot'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if archived or not'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InboundCatchWeightRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InboundCatchWeightRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_license_plate_number', 'customer_id', 'item_code', 'item_id', 'warehouse_order_number', 'serial_number', 'catch_weight', 'inbound_order_id', 'lot_reference', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Number assigned to pallet for identification purposes'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Unique identifier for the customer'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Unique value for item'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Unique identifier for item'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    serial_number = sgqlc.types.Field(String, graphql_name='serialNumber')
    '''serial number for item in the case of pallet'''

    catch_weight = sgqlc.types.Field(Float, graphql_name='catchWeight')
    '''Size of food item in case'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Unique identifier for inbound orders'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Unique number for the lot'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if archived or not'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InboundLoadCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundLoad` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'source_system_id', 'warehouse_facility_id', 'load_reference_number', 'primary_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'received_datetime', 'arrival_datetime', 'dock_in_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'appointment_comment', 'purchase_order_number', 'is_archived')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Checks for equality with the object’s `loadReferenceNumber` field.'''

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')
    '''Checks for equality with the object’s `primaryReferenceNumber`
    field.
    '''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Checks for equality with the object’s `trailerNumber` field.'''

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')
    '''Checks for equality with the object’s `trailerLoadType` field.'''

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')
    '''Checks for equality with the object’s `customerLoadNumber` field.'''

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')
    '''Checks for equality with the object’s `actualCarrierCode` field.'''

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')
    '''Checks for equality with the object’s `tenderCarrierCode` field.'''

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')
    '''Checks for equality with the object’s `receivedDatetime` field.'''

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')
    '''Checks for equality with the object’s `arrivalDatetime` field.'''

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')
    '''Checks for equality with the object’s `dockInDatetime` field.'''

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')
    '''Checks for equality with the object’s `loadStartDatetime` field.'''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Checks for equality with the object’s `loadFinishDatetime` field.'''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Checks for equality with the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Checks for equality with the object’s `signoutDatetime` field.'''

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')
    '''Checks for equality with the object’s `dockOutDatetime` field.'''

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')
    '''Checks for equality with the object’s `departureDatetime` field.'''

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')
    '''Checks for equality with the object’s
    `expectedReceiveDatetimeStart` field.
    '''

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')
    '''Checks for equality with the object’s `expectedReceiveDatetimeEnd`
    field.
    '''

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')
    '''Checks for equality with the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')
    '''Checks for equality with the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')
    '''Checks for equality with the object’s `backTemperature` field.'''

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')
    '''Checks for equality with the object’s `numberOfStops` field.'''

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')
    '''Checks for equality with the object’s `isPlannedLineage` field.'''

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')
    '''Checks for equality with the object’s `driverName` field.'''

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')
    '''Checks for equality with the object’s `driverPhoneNumber` field.'''

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')
    '''Checks for equality with the object’s `appointmentNumber` field.'''

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')
    '''Checks for equality with the object’s `confirmationDatetime`
    field.
    '''

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')
    '''Checks for equality with the object’s `confirmedBy` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')
    '''Checks for equality with the object’s `dockDoorNumber` field.'''

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')
    '''Checks for equality with the object’s `originalScheduledDatetime`
    field.
    '''

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')
    '''Checks for equality with the object’s `scheduledStartDatetime`
    field.
    '''

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')
    '''Checks for equality with the object’s `scheduledEndDatetime`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')
    '''Checks for equality with the object’s `appointmentComment` field.'''

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')
    '''Checks for equality with the object’s `purchaseOrderNumber` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''



class InboundLoadFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundLoad` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'source_system_id', 'warehouse_facility_id', 'load_reference_number', 'primary_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'received_datetime', 'arrival_datetime', 'dock_in_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'appointment_comment', 'purchase_order_number', 'is_archived', 'load_status', 'and_', 'or_', 'not_')
    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    load_reference_number = sgqlc.types.Field('StringFilter', graphql_name='loadReferenceNumber')
    '''Filter by the object’s `loadReferenceNumber` field.'''

    primary_reference_number = sgqlc.types.Field('StringFilter', graphql_name='primaryReferenceNumber')
    '''Filter by the object’s `primaryReferenceNumber` field.'''

    trailer_number = sgqlc.types.Field('StringFilter', graphql_name='trailerNumber')
    '''Filter by the object’s `trailerNumber` field.'''

    trailer_load_type = sgqlc.types.Field('StringFilter', graphql_name='trailerLoadType')
    '''Filter by the object’s `trailerLoadType` field.'''

    customer_load_number = sgqlc.types.Field('StringFilter', graphql_name='customerLoadNumber')
    '''Filter by the object’s `customerLoadNumber` field.'''

    actual_carrier_code = sgqlc.types.Field('StringFilter', graphql_name='actualCarrierCode')
    '''Filter by the object’s `actualCarrierCode` field.'''

    tender_carrier_code = sgqlc.types.Field('StringFilter', graphql_name='tenderCarrierCode')
    '''Filter by the object’s `tenderCarrierCode` field.'''

    received_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='receivedDatetime')
    '''Filter by the object’s `receivedDatetime` field.'''

    arrival_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='arrivalDatetime')
    '''Filter by the object’s `arrivalDatetime` field.'''

    dock_in_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='dockInDatetime')
    '''Filter by the object’s `dockInDatetime` field.'''

    load_start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='loadStartDatetime')
    '''Filter by the object’s `loadStartDatetime` field.'''

    load_finish_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='loadFinishDatetime')
    '''Filter by the object’s `loadFinishDatetime` field.'''

    signin_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signinDatetime')
    '''Filter by the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signoutDatetime')
    '''Filter by the object’s `signoutDatetime` field.'''

    dock_out_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='dockOutDatetime')
    '''Filter by the object’s `dockOutDatetime` field.'''

    departure_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='departureDatetime')
    '''Filter by the object’s `departureDatetime` field.'''

    expected_receive_datetime_start = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedReceiveDatetimeStart')
    '''Filter by the object’s `expectedReceiveDatetimeStart` field.'''

    expected_receive_datetime_end = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedReceiveDatetimeEnd')
    '''Filter by the object’s `expectedReceiveDatetimeEnd` field.'''

    front_temperature = sgqlc.types.Field(FloatFilter, graphql_name='frontTemperature')
    '''Filter by the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field(FloatFilter, graphql_name='middleTemperature')
    '''Filter by the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field(FloatFilter, graphql_name='backTemperature')
    '''Filter by the object’s `backTemperature` field.'''

    number_of_stops = sgqlc.types.Field('IntFilter', graphql_name='numberOfStops')
    '''Filter by the object’s `numberOfStops` field.'''

    is_planned_lineage = sgqlc.types.Field(BooleanFilter, graphql_name='isPlannedLineage')
    '''Filter by the object’s `isPlannedLineage` field.'''

    driver_name = sgqlc.types.Field('StringFilter', graphql_name='driverName')
    '''Filter by the object’s `driverName` field.'''

    driver_phone_number = sgqlc.types.Field('StringFilter', graphql_name='driverPhoneNumber')
    '''Filter by the object’s `driverPhoneNumber` field.'''

    appointment_number = sgqlc.types.Field('StringFilter', graphql_name='appointmentNumber')
    '''Filter by the object’s `appointmentNumber` field.'''

    confirmation_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='confirmationDatetime')
    '''Filter by the object’s `confirmationDatetime` field.'''

    confirmed_by = sgqlc.types.Field('StringFilter', graphql_name='confirmedBy')
    '''Filter by the object’s `confirmedBy` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    dock_door_number = sgqlc.types.Field('StringFilter', graphql_name='dockDoorNumber')
    '''Filter by the object’s `dockDoorNumber` field.'''

    original_scheduled_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='originalScheduledDatetime')
    '''Filter by the object’s `originalScheduledDatetime` field.'''

    scheduled_start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scheduledStartDatetime')
    '''Filter by the object’s `scheduledStartDatetime` field.'''

    scheduled_end_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scheduledEndDatetime')
    '''Filter by the object’s `scheduledEndDatetime` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    appointment_comment = sgqlc.types.Field('StringFilter', graphql_name='appointmentComment')
    '''Filter by the object’s `appointmentComment` field.'''

    purchase_order_number = sgqlc.types.Field('StringFilter', graphql_name='purchaseOrderNumber')
    '''Filter by the object’s `purchaseOrderNumber` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    load_status = sgqlc.types.Field('StringFilter', graphql_name='loadStatus')
    '''Filter by the object’s `loadStatus` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundLoadFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundLoadFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundLoadFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundLoadsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundLoadsRaw` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'load_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'received_datetime', 'arrival_datetime', 'dock_in_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'appointment_comment', 'purchase_order_number', 'is_archived', 'primary_reference_number', 'customer_id', 'lading_type')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Checks for equality with the object’s `loadReferenceNumber` field.'''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Checks for equality with the object’s `trailerNumber` field.'''

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')
    '''Checks for equality with the object’s `trailerLoadType` field.'''

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')
    '''Checks for equality with the object’s `customerLoadNumber` field.'''

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')
    '''Checks for equality with the object’s `actualCarrierCode` field.'''

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')
    '''Checks for equality with the object’s `tenderCarrierCode` field.'''

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')
    '''Checks for equality with the object’s `receivedDatetime` field.'''

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')
    '''Checks for equality with the object’s `arrivalDatetime` field.'''

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')
    '''Checks for equality with the object’s `dockInDatetime` field.'''

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')
    '''Checks for equality with the object’s `loadStartDatetime` field.'''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Checks for equality with the object’s `loadFinishDatetime` field.'''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Checks for equality with the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Checks for equality with the object’s `signoutDatetime` field.'''

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')
    '''Checks for equality with the object’s `dockOutDatetime` field.'''

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')
    '''Checks for equality with the object’s `departureDatetime` field.'''

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')
    '''Checks for equality with the object’s
    `expectedReceiveDatetimeStart` field.
    '''

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')
    '''Checks for equality with the object’s `expectedReceiveDatetimeEnd`
    field.
    '''

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')
    '''Checks for equality with the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')
    '''Checks for equality with the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')
    '''Checks for equality with the object’s `backTemperature` field.'''

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')
    '''Checks for equality with the object’s `numberOfStops` field.'''

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')
    '''Checks for equality with the object’s `isPlannedLineage` field.'''

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')
    '''Checks for equality with the object’s `driverName` field.'''

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')
    '''Checks for equality with the object’s `driverPhoneNumber` field.'''

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')
    '''Checks for equality with the object’s `appointmentNumber` field.'''

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')
    '''Checks for equality with the object’s `confirmationDatetime`
    field.
    '''

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')
    '''Checks for equality with the object’s `confirmedBy` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')
    '''Checks for equality with the object’s `dockDoorNumber` field.'''

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')
    '''Checks for equality with the object’s `originalScheduledDatetime`
    field.
    '''

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')
    '''Checks for equality with the object’s `scheduledStartDatetime`
    field.
    '''

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')
    '''Checks for equality with the object’s `scheduledEndDatetime`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')
    '''Checks for equality with the object’s `appointmentComment` field.'''

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')
    '''Checks for equality with the object’s `purchaseOrderNumber` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')
    '''Checks for equality with the object’s `primaryReferenceNumber`
    field.
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Checks for equality with the object’s `ladingType` field.'''



class InboundLoadsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundLoadsRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'load_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'received_datetime', 'arrival_datetime', 'dock_in_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'appointment_comment', 'purchase_order_number', 'is_archived', 'primary_reference_number', 'customer_id', 'lading_type', 'load_status', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    load_reference_number = sgqlc.types.Field('StringFilter', graphql_name='loadReferenceNumber')
    '''Filter by the object’s `loadReferenceNumber` field.'''

    trailer_number = sgqlc.types.Field('StringFilter', graphql_name='trailerNumber')
    '''Filter by the object’s `trailerNumber` field.'''

    trailer_load_type = sgqlc.types.Field('StringFilter', graphql_name='trailerLoadType')
    '''Filter by the object’s `trailerLoadType` field.'''

    customer_load_number = sgqlc.types.Field('StringFilter', graphql_name='customerLoadNumber')
    '''Filter by the object’s `customerLoadNumber` field.'''

    actual_carrier_code = sgqlc.types.Field('StringFilter', graphql_name='actualCarrierCode')
    '''Filter by the object’s `actualCarrierCode` field.'''

    tender_carrier_code = sgqlc.types.Field('StringFilter', graphql_name='tenderCarrierCode')
    '''Filter by the object’s `tenderCarrierCode` field.'''

    received_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='receivedDatetime')
    '''Filter by the object’s `receivedDatetime` field.'''

    arrival_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='arrivalDatetime')
    '''Filter by the object’s `arrivalDatetime` field.'''

    dock_in_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='dockInDatetime')
    '''Filter by the object’s `dockInDatetime` field.'''

    load_start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='loadStartDatetime')
    '''Filter by the object’s `loadStartDatetime` field.'''

    load_finish_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='loadFinishDatetime')
    '''Filter by the object’s `loadFinishDatetime` field.'''

    signin_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signinDatetime')
    '''Filter by the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signoutDatetime')
    '''Filter by the object’s `signoutDatetime` field.'''

    dock_out_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='dockOutDatetime')
    '''Filter by the object’s `dockOutDatetime` field.'''

    departure_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='departureDatetime')
    '''Filter by the object’s `departureDatetime` field.'''

    expected_receive_datetime_start = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedReceiveDatetimeStart')
    '''Filter by the object’s `expectedReceiveDatetimeStart` field.'''

    expected_receive_datetime_end = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedReceiveDatetimeEnd')
    '''Filter by the object’s `expectedReceiveDatetimeEnd` field.'''

    front_temperature = sgqlc.types.Field(FloatFilter, graphql_name='frontTemperature')
    '''Filter by the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field(FloatFilter, graphql_name='middleTemperature')
    '''Filter by the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field(FloatFilter, graphql_name='backTemperature')
    '''Filter by the object’s `backTemperature` field.'''

    number_of_stops = sgqlc.types.Field('IntFilter', graphql_name='numberOfStops')
    '''Filter by the object’s `numberOfStops` field.'''

    is_planned_lineage = sgqlc.types.Field(BooleanFilter, graphql_name='isPlannedLineage')
    '''Filter by the object’s `isPlannedLineage` field.'''

    driver_name = sgqlc.types.Field('StringFilter', graphql_name='driverName')
    '''Filter by the object’s `driverName` field.'''

    driver_phone_number = sgqlc.types.Field('StringFilter', graphql_name='driverPhoneNumber')
    '''Filter by the object’s `driverPhoneNumber` field.'''

    appointment_number = sgqlc.types.Field('StringFilter', graphql_name='appointmentNumber')
    '''Filter by the object’s `appointmentNumber` field.'''

    confirmation_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='confirmationDatetime')
    '''Filter by the object’s `confirmationDatetime` field.'''

    confirmed_by = sgqlc.types.Field('StringFilter', graphql_name='confirmedBy')
    '''Filter by the object’s `confirmedBy` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    dock_door_number = sgqlc.types.Field('StringFilter', graphql_name='dockDoorNumber')
    '''Filter by the object’s `dockDoorNumber` field.'''

    original_scheduled_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='originalScheduledDatetime')
    '''Filter by the object’s `originalScheduledDatetime` field.'''

    scheduled_start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scheduledStartDatetime')
    '''Filter by the object’s `scheduledStartDatetime` field.'''

    scheduled_end_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scheduledEndDatetime')
    '''Filter by the object’s `scheduledEndDatetime` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    appointment_comment = sgqlc.types.Field('StringFilter', graphql_name='appointmentComment')
    '''Filter by the object’s `appointmentComment` field.'''

    purchase_order_number = sgqlc.types.Field('StringFilter', graphql_name='purchaseOrderNumber')
    '''Filter by the object’s `purchaseOrderNumber` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    primary_reference_number = sgqlc.types.Field('StringFilter', graphql_name='primaryReferenceNumber')
    '''Filter by the object’s `primaryReferenceNumber` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    lading_type = sgqlc.types.Field('StringFilter', graphql_name='ladingType')
    '''Filter by the object’s `ladingType` field.'''

    load_status = sgqlc.types.Field('StringFilter', graphql_name='loadStatus')
    '''Filter by the object’s `loadStatus` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundLoadsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundLoadsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundLoadsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundLoadsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InboundLoadsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'load_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'received_datetime', 'arrival_datetime', 'dock_in_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'appointment_comment', 'purchase_order_number', 'is_archived', 'primary_reference_number', 'customer_id', 'lading_type')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    load_reference_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='loadReferenceNumber')
    '''Reference number used by the WMS to identify the load.  This could
    be the appointment number
    '''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Number used to identify the trailer in the yard'''

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')
    '''Live or Drop flag.  "L" for Live and "D" for Drop'''

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')
    '''Customer-provided reference number for the load'''

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')
    '''Deprecated'''

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')
    '''Carrier identifier for the load.  If the WMS supports a SCAC, that
    is what is populated
    '''

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')
    '''Date and time the load was received into the WMS (in facility
    local time)
    '''

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')
    '''Date and time the truck and trailer arrived at the facility (in
    facility local time)
    '''

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')
    '''Date and time the  trailer was parked at the dock door  (in
    facility local time)
    '''

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')
    '''Date and time the facility started to unload product from the
    trailer  (in facility local time)
    '''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Date and time the facility finished unloading product from the
    trailer  (in facility local time)
    '''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Date and time the driver signed in at the facility  (in facility
    local time)
    '''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Date and time the driver signed out at the facility  (in facility
    local time)
    '''

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')
    '''Date and time the  trailer was moved from the dock door  (in
    facility local time)
    '''

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')
    '''Date and time the load departed the facility (in facility local
    time)
    '''

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')
    '''Date and time the load is expected to be at the warehouse for
    unloading (in facility local time)
    '''

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')
    '''Date and time the load is expected finish unloading at the
    warehouse  (in facility local time)
    '''

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')
    '''Temperature at the nose of the trailer at the start of unloading
    (in Fahrenheit)
    '''

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')
    '''Temperature at the middle of the trailer at the start of unloading
    (in Fahrenheit)
    '''

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')
    '''Temperature at the tail of the trailer at the start of unloading
    (in Fahrenheit)
    '''

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')
    '''Deprecated'''

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')
    '''Flag for whether the load is planned by Lineage'''

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')
    '''Name of the Driver (first and last name)'''

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')
    '''Phone Number for the driver'''

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')
    '''Appointment Identifier from the WMS'''

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')
    '''Date and Time the appointment is confirmed by the facility (in
    facility local time)
    '''

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')
    '''User that last modified the order in the WMS'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')
    '''Dock door that will be used to unload the trailer'''

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')
    '''Date and time of the first known appointment for the load'''

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')
    '''Comment provided by the facility for the appointment'''

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')
    '''Purchase order number tied to the load'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')
    '''Primary reference number tied to the load by the facility'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Type code for how the product is loaded on the truck.'''



class InboundLoadsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InboundLoadsRaw`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'load_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'received_datetime', 'arrival_datetime', 'dock_in_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'appointment_comment', 'purchase_order_number', 'is_archived', 'primary_reference_number', 'customer_id', 'lading_type')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Reference number used by the WMS to identify the load.  This could
    be the appointment number
    '''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Number used to identify the trailer in the yard'''

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')
    '''Live or Drop flag.  "L" for Live and "D" for Drop'''

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')
    '''Customer-provided reference number for the load'''

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')
    '''Deprecated'''

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')
    '''Carrier identifier for the load.  If the WMS supports a SCAC, that
    is what is populated
    '''

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')
    '''Date and time the load was received into the WMS (in facility
    local time)
    '''

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')
    '''Date and time the truck and trailer arrived at the facility (in
    facility local time)
    '''

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')
    '''Date and time the  trailer was parked at the dock door  (in
    facility local time)
    '''

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')
    '''Date and time the facility started to unload product from the
    trailer  (in facility local time)
    '''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Date and time the facility finished unloading product from the
    trailer  (in facility local time)
    '''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Date and time the driver signed in at the facility  (in facility
    local time)
    '''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Date and time the driver signed out at the facility  (in facility
    local time)
    '''

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')
    '''Date and time the  trailer was moved from the dock door  (in
    facility local time)
    '''

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')
    '''Date and time the load departed the facility (in facility local
    time)
    '''

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')
    '''Date and time the load is expected to be at the warehouse for
    unloading (in facility local time)
    '''

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')
    '''Date and time the load is expected finish unloading at the
    warehouse  (in facility local time)
    '''

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')
    '''Temperature at the nose of the trailer at the start of unloading
    (in Fahrenheit)
    '''

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')
    '''Temperature at the middle of the trailer at the start of unloading
    (in Fahrenheit)
    '''

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')
    '''Temperature at the tail of the trailer at the start of unloading
    (in Fahrenheit)
    '''

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')
    '''Deprecated'''

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')
    '''Flag for whether the load is planned by Lineage'''

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')
    '''Name of the Driver (first and last name)'''

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')
    '''Phone Number for the driver'''

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')
    '''Appointment Identifier from the WMS'''

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')
    '''Date and Time the appointment is confirmed by the facility (in
    facility local time)
    '''

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')
    '''User that last modified the order in the WMS'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')
    '''Dock door that will be used to unload the trailer'''

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')
    '''Date and time of the first known appointment for the load'''

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')
    '''Comment provided by the facility for the appointment'''

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')
    '''Purchase order number tied to the load'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')
    '''Primary reference number tied to the load by the facility'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Type code for how the product is loaded on the truck.'''



class InboundOrderCommentsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundOrderCommentsRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'comment', 'inbound_order_id', 'comment_datetime', 'comment_sequence', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Checks for equality with the object’s `comment` field.'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    comment_datetime = sgqlc.types.Field(Datetime, graphql_name='commentDatetime')
    '''Checks for equality with the object’s `commentDatetime` field.'''

    comment_sequence = sgqlc.types.Field(Int, graphql_name='commentSequence')
    '''Checks for equality with the object’s `commentSequence` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class InboundOrderCommentsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundOrderCommentsRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'comment', 'inbound_order_id', 'comment_datetime', 'comment_sequence', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    comment = sgqlc.types.Field('StringFilter', graphql_name='comment')
    '''Filter by the object’s `comment` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    comment_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='commentDatetime')
    '''Filter by the object’s `commentDatetime` field.'''

    comment_sequence = sgqlc.types.Field('IntFilter', graphql_name='commentSequence')
    '''Filter by the object’s `commentSequence` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderCommentsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderCommentsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundOrderCommentsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundOrderCommentsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InboundOrderCommentsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'comment', 'inbound_order_id', 'comment_datetime', 'comment_sequence', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment for an order'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Unique identifier for inbound orders'''

    comment_datetime = sgqlc.types.Field(Datetime, graphql_name='commentDatetime')
    '''Date when comment was recorded'''

    comment_sequence = sgqlc.types.Field(Int, graphql_name='commentSequence')
    '''Sequence to represent identity in series of comment'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class InboundOrderCommentsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InboundOrderCommentsRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'comment', 'inbound_order_id', 'comment_datetime', 'comment_sequence', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment for an order'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Unique identifier for inbound orders'''

    comment_datetime = sgqlc.types.Field(Datetime, graphql_name='commentDatetime')
    '''Date when comment was recorded'''

    comment_sequence = sgqlc.types.Field(Int, graphql_name='commentSequence')
    '''Sequence to represent identity in series of comment'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class InboundOrderCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundOrder` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'carrier_id', 'origin_party_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'facility_id', 'supplier_id', 'inbound_load_id', 'load_reference_number', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'carrier_code', 'quantity', 'warehouse_gross_weight', 'origin_party_code', 'customer_code', 'weight_uom', 'is_quick_receive', 'order_confirmation_datetime', 'notes', 'purchase_order_number', 'received_datetime', 'scan_finish_datetime', 'scan_start_datetime', 'supplier_code', 'transportation_method', 'edi_type', 'version_number', 'finish_datetime', 'comments', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'signin_datetime', 'signout_datetime', 'start_datetime', 'origin_location_code', 'origin_location_name', 'origin_address_line1', 'origin_address_line2', 'origin_address_line3', 'origin_city', 'origin_state', 'origin_country', 'origin_zip', 'origin_email', 'origin_phone', 'origin_fax', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_canceled', 'is_transfer_order', 'transfer_warehouse_customer_id', 'transfer_customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    carrier_id = sgqlc.types.Field(String, graphql_name='carrierId')
    '''Checks for equality with the object’s `carrierId` field.'''

    origin_party_id = sgqlc.types.Field(String, graphql_name='originPartyId')
    '''Checks for equality with the object’s `originPartyId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    supplier_id = sgqlc.types.Field(String, graphql_name='supplierId')
    '''Checks for equality with the object’s `supplierId` field.'''

    inbound_load_id = sgqlc.types.Field(String, graphql_name='inboundLoadId')
    '''Checks for equality with the object’s `inboundLoadId` field.'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Checks for equality with the object’s `loadReferenceNumber` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Checks for equality with the object’s `carrierCode` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')
    '''Checks for equality with the object’s `warehouseGrossWeight`
    field.
    '''

    origin_party_code = sgqlc.types.Field(String, graphql_name='originPartyCode')
    '''Checks for equality with the object’s `originPartyCode` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''

    is_quick_receive = sgqlc.types.Field(Boolean, graphql_name='isQuickReceive')
    '''Checks for equality with the object’s `isQuickReceive` field.'''

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')
    '''Checks for equality with the object’s `orderConfirmationDatetime`
    field.
    '''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')
    '''Checks for equality with the object’s `purchaseOrderNumber` field.'''

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')
    '''Checks for equality with the object’s `receivedDatetime` field.'''

    scan_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='scanFinishDatetime')
    '''Checks for equality with the object’s `scanFinishDatetime` field.'''

    scan_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scanStartDatetime')
    '''Checks for equality with the object’s `scanStartDatetime` field.'''

    supplier_code = sgqlc.types.Field(String, graphql_name='supplierCode')
    '''Checks for equality with the object’s `supplierCode` field.'''

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')
    '''Checks for equality with the object’s `transportationMethod`
    field.
    '''

    edi_type = sgqlc.types.Field(String, graphql_name='ediType')
    '''Checks for equality with the object’s `ediType` field.'''

    version_number = sgqlc.types.Field(String, graphql_name='versionNumber')
    '''Checks for equality with the object’s `versionNumber` field.'''

    finish_datetime = sgqlc.types.Field(Datetime, graphql_name='finishDatetime')
    '''Checks for equality with the object’s `finishDatetime` field.'''

    comments = sgqlc.types.Field(String, graphql_name='comments')
    '''Checks for equality with the object’s `comments` field.'''

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')
    '''Checks for equality with the object’s
    `expectedReceiveDatetimeStart` field.
    '''

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')
    '''Checks for equality with the object’s `expectedReceiveDatetimeEnd`
    field.
    '''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Checks for equality with the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Checks for equality with the object’s `signoutDatetime` field.'''

    start_datetime = sgqlc.types.Field(Datetime, graphql_name='startDatetime')
    '''Checks for equality with the object’s `startDatetime` field.'''

    origin_location_code = sgqlc.types.Field(String, graphql_name='originLocationCode')
    '''Checks for equality with the object’s `originLocationCode` field.'''

    origin_location_name = sgqlc.types.Field(String, graphql_name='originLocationName')
    '''Checks for equality with the object’s `originLocationName` field.'''

    origin_address_line1 = sgqlc.types.Field(String, graphql_name='originAddressLine1')
    '''Checks for equality with the object’s `originAddressLine1` field.'''

    origin_address_line2 = sgqlc.types.Field(String, graphql_name='originAddressLine2')
    '''Checks for equality with the object’s `originAddressLine2` field.'''

    origin_address_line3 = sgqlc.types.Field(String, graphql_name='originAddressLine3')
    '''Checks for equality with the object’s `originAddressLine3` field.'''

    origin_city = sgqlc.types.Field(String, graphql_name='originCity')
    '''Checks for equality with the object’s `originCity` field.'''

    origin_state = sgqlc.types.Field(String, graphql_name='originState')
    '''Checks for equality with the object’s `originState` field.'''

    origin_country = sgqlc.types.Field(String, graphql_name='originCountry')
    '''Checks for equality with the object’s `originCountry` field.'''

    origin_zip = sgqlc.types.Field(String, graphql_name='originZip')
    '''Checks for equality with the object’s `originZip` field.'''

    origin_email = sgqlc.types.Field(String, graphql_name='originEmail')
    '''Checks for equality with the object’s `originEmail` field.'''

    origin_phone = sgqlc.types.Field(String, graphql_name='originPhone')
    '''Checks for equality with the object’s `originPhone` field.'''

    origin_fax = sgqlc.types.Field(String, graphql_name='originFax')
    '''Checks for equality with the object’s `originFax` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')
    '''Checks for equality with the object’s `isCanceled` field.'''

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')
    '''Checks for equality with the object’s `isTransferOrder` field.'''

    transfer_warehouse_customer_id = sgqlc.types.Field(String, graphql_name='transferWarehouseCustomerId')
    '''Checks for equality with the object’s
    `transferWarehouseCustomerId` field.
    '''

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')
    '''Checks for equality with the object’s `transferCustomerId` field.'''



class InboundOrderDetailCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundOrderDetail` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'inbound_order_id', 'item_id', 'lot_id', 'facility_id', 'source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference')
    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    expiration_date = sgqlc.types.Field(String, graphql_name='expirationDate')
    '''Checks for equality with the object’s `expirationDate` field.'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Checks for equality with the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Checks for equality with the object’s `bestByDate` field.'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Checks for equality with the object’s `productionDate` field.'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Checks for equality with the object’s `slaughterDate` field.'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Checks for equality with the object’s `customerLineReference`
    field.
    '''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Checks for equality with the object’s `countryOfOrigin` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Checks for equality with the object’s `customerLineNumber` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Checks for equality with the object’s `customerLotReference`
    field.
    '''



class InboundOrderDetailFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundOrderDetail` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'inbound_order_id', 'item_id', 'lot_id', 'facility_id', 'source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'and_', 'or_', 'not_')
    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    expiration_date = sgqlc.types.Field('StringFilter', graphql_name='expirationDate')
    '''Filter by the object’s `expirationDate` field.'''

    code_date = sgqlc.types.Field(DateFilter, graphql_name='codeDate')
    '''Filter by the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(DateFilter, graphql_name='bestByDate')
    '''Filter by the object’s `bestByDate` field.'''

    production_date = sgqlc.types.Field(DateFilter, graphql_name='productionDate')
    '''Filter by the object’s `productionDate` field.'''

    slaughter_date = sgqlc.types.Field(DateFilter, graphql_name='slaughterDate')
    '''Filter by the object’s `slaughterDate` field.'''

    shelf_life_days = sgqlc.types.Field('IntFilter', graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    customer_line_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLineReference')
    '''Filter by the object’s `customerLineReference` field.'''

    country_of_origin = sgqlc.types.Field('StringFilter', graphql_name='countryOfOrigin')
    '''Filter by the object’s `countryOfOrigin` field.'''

    quantity = sgqlc.types.Field('IntFilter', graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field('IntFilter', graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(FloatFilter, graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    customer_line_number = sgqlc.types.Field('StringFilter', graphql_name='customerLineNumber')
    '''Filter by the object’s `customerLineNumber` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLotReference')
    '''Filter by the object’s `customerLotReference` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundOrderDetailFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundOrderDetailReferenceCodesRawCondition(sgqlc.types.Input):
    '''A condition to be used against
    `InboundOrderDetailReferenceCodesRaw` object types. All fields are
    tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'inbound_order_id', 'warehouse_order_number', 'inbound_order_detail_id', 'item_id', 'item_code', 'import_mark', 'plant_code', 'production_line_hour', 'usda_stamp', 'alternate_lot_number', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    inbound_order_detail_id = sgqlc.types.Field(String, graphql_name='inboundOrderDetailId')
    '''Checks for equality with the object’s `inboundOrderDetailId`
    field.
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    import_mark = sgqlc.types.Field(String, graphql_name='importMark')
    '''Checks for equality with the object’s `importMark` field.'''

    plant_code = sgqlc.types.Field(String, graphql_name='plantCode')
    '''Checks for equality with the object’s `plantCode` field.'''

    production_line_hour = sgqlc.types.Field(String, graphql_name='productionLineHour')
    '''Checks for equality with the object’s `productionLineHour` field.'''

    usda_stamp = sgqlc.types.Field(String, graphql_name='usdaStamp')
    '''Checks for equality with the object’s `usdaStamp` field.'''

    alternate_lot_number = sgqlc.types.Field(String, graphql_name='alternateLotNumber')
    '''Checks for equality with the object’s `alternateLotNumber` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class InboundOrderDetailReferenceCodesRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundOrderDetailReferenceCodesRaw`
    object types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'inbound_order_id', 'warehouse_order_number', 'inbound_order_detail_id', 'item_id', 'item_code', 'import_mark', 'plant_code', 'production_line_hour', 'usda_stamp', 'alternate_lot_number', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    inbound_order_detail_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderDetailId')
    '''Filter by the object’s `inboundOrderDetailId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    import_mark = sgqlc.types.Field('StringFilter', graphql_name='importMark')
    '''Filter by the object’s `importMark` field.'''

    plant_code = sgqlc.types.Field('StringFilter', graphql_name='plantCode')
    '''Filter by the object’s `plantCode` field.'''

    production_line_hour = sgqlc.types.Field('StringFilter', graphql_name='productionLineHour')
    '''Filter by the object’s `productionLineHour` field.'''

    usda_stamp = sgqlc.types.Field('StringFilter', graphql_name='usdaStamp')
    '''Filter by the object’s `usdaStamp` field.'''

    alternate_lot_number = sgqlc.types.Field('StringFilter', graphql_name='alternateLotNumber')
    '''Filter by the object’s `alternateLotNumber` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailReferenceCodesRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailReferenceCodesRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundOrderDetailReferenceCodesRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundOrderDetailReferenceCodesRawInput(sgqlc.types.Input):
    '''An input for mutations affecting
    `InboundOrderDetailReferenceCodesRaw`
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'inbound_order_id', 'warehouse_order_number', 'inbound_order_detail_id', 'item_id', 'item_code', 'import_mark', 'plant_code', 'production_line_hour', 'usda_stamp', 'alternate_lot_number', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbound_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    inbound_order_detail_id = sgqlc.types.Field(String, graphql_name='inboundOrderDetailId')
    '''ODS identifier for the inbound order detail (references
    wms.inbound_order_details_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    import_mark = sgqlc.types.Field(String, graphql_name='importMark')
    '''Import mark'''

    plant_code = sgqlc.types.Field(String, graphql_name='plantCode')
    '''Code/Identifier for the Plant that manufactured the order item'''

    production_line_hour = sgqlc.types.Field(String, graphql_name='productionLineHour')
    '''Production Line/Hour'''

    usda_stamp = sgqlc.types.Field(String, graphql_name='usdaStamp')
    '''USDA Stamp'''

    alternate_lot_number = sgqlc.types.Field(String, graphql_name='alternateLotNumber')
    '''Alternate Lot Number'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class InboundOrderDetailReferenceCodesRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InboundOrderDetailReferenceCodesRaw`.
    Fields that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'inbound_order_id', 'warehouse_order_number', 'inbound_order_detail_id', 'item_id', 'item_code', 'import_mark', 'plant_code', 'production_line_hour', 'usda_stamp', 'alternate_lot_number', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbound_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    inbound_order_detail_id = sgqlc.types.Field(String, graphql_name='inboundOrderDetailId')
    '''ODS identifier for the inbound order detail (references
    wms.inbound_order_details_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    import_mark = sgqlc.types.Field(String, graphql_name='importMark')
    '''Import mark'''

    plant_code = sgqlc.types.Field(String, graphql_name='plantCode')
    '''Code/Identifier for the Plant that manufactured the order item'''

    production_line_hour = sgqlc.types.Field(String, graphql_name='productionLineHour')
    '''Production Line/Hour'''

    usda_stamp = sgqlc.types.Field(String, graphql_name='usdaStamp')
    '''USDA Stamp'''

    alternate_lot_number = sgqlc.types.Field(String, graphql_name='alternateLotNumber')
    '''Alternate Lot Number'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class InboundOrderDetailsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundOrderDetailsRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'shelf_life_days_override', 'is_archived', 'inbound_order_id', 'item_id', 'lot_id', 'customer_id', 'weight_uom')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Checks for equality with the object’s `expirationDate` field.'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Checks for equality with the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Checks for equality with the object’s `bestByDate` field.'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Checks for equality with the object’s `productionDate` field.'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Checks for equality with the object’s `slaughterDate` field.'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Checks for equality with the object’s `customerLineReference`
    field.
    '''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Checks for equality with the object’s `countryOfOrigin` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Checks for equality with the object’s `customerLineNumber` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Checks for equality with the object’s `customerLotReference`
    field.
    '''

    shelf_life_days_override = sgqlc.types.Field(Int, graphql_name='shelfLifeDaysOverride')
    '''Checks for equality with the object’s `shelfLifeDaysOverride`
    field.
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class InboundOrderDetailsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundOrderDetailsRaw` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'shelf_life_days_override', 'is_archived', 'inbound_order_id', 'item_id', 'lot_id', 'customer_id', 'weight_uom', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    expiration_date = sgqlc.types.Field(DateFilter, graphql_name='expirationDate')
    '''Filter by the object’s `expirationDate` field.'''

    code_date = sgqlc.types.Field(DateFilter, graphql_name='codeDate')
    '''Filter by the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(DateFilter, graphql_name='bestByDate')
    '''Filter by the object’s `bestByDate` field.'''

    production_date = sgqlc.types.Field(DateFilter, graphql_name='productionDate')
    '''Filter by the object’s `productionDate` field.'''

    slaughter_date = sgqlc.types.Field(DateFilter, graphql_name='slaughterDate')
    '''Filter by the object’s `slaughterDate` field.'''

    shelf_life_days = sgqlc.types.Field('IntFilter', graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    customer_line_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLineReference')
    '''Filter by the object’s `customerLineReference` field.'''

    country_of_origin = sgqlc.types.Field('StringFilter', graphql_name='countryOfOrigin')
    '''Filter by the object’s `countryOfOrigin` field.'''

    quantity = sgqlc.types.Field('IntFilter', graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field('IntFilter', graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(FloatFilter, graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    customer_line_number = sgqlc.types.Field('StringFilter', graphql_name='customerLineNumber')
    '''Filter by the object’s `customerLineNumber` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLotReference')
    '''Filter by the object’s `customerLotReference` field.'''

    shelf_life_days_override = sgqlc.types.Field('IntFilter', graphql_name='shelfLifeDaysOverride')
    '''Filter by the object’s `shelfLifeDaysOverride` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundOrderDetailsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundOrderDetailsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InboundOrderDetailsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'shelf_life_days_override', 'is_archived', 'inbound_order_id', 'item_id', 'lot_id', 'customer_id', 'weight_uom')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Expiration Date for the item or product'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the item or product'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By Date for the item or product'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Production date for the item or product'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Slaughter date for the item or product'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Deprecated'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Hold code for the product on the time of receipt'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Reservation code for the product to assign to later outbound order
    requests
    '''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Line reference provided by the customer'''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Country of Origin Code for the product'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets for this line item'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Customer notes on the order detail'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Customer override of line number for this record'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Customer provided lot reference to assign to the product while in
    inventory
    '''

    shelf_life_days_override = sgqlc.types.Field(Int, graphql_name='shelfLifeDaysOverride')
    '''Override number of days of shelf life needed for the product by
    the customer
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InboundOrderDetailsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InboundOrderDetailsRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'shelf_life_days_override', 'is_archived', 'inbound_order_id', 'item_id', 'lot_id', 'customer_id', 'weight_uom')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Expiration Date for the item or product'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the item or product'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By Date for the item or product'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Production date for the item or product'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Slaughter date for the item or product'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Deprecated'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Hold code for the product on the time of receipt'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Reservation code for the product to assign to later outbound order
    requests
    '''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Line reference provided by the customer'''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Country of Origin Code for the product'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets for this line item'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Customer notes on the order detail'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Customer override of line number for this record'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Customer provided lot reference to assign to the product while in
    inventory
    '''

    shelf_life_days_override = sgqlc.types.Field(Int, graphql_name='shelfLifeDaysOverride')
    '''Override number of days of shelf life needed for the product by
    the customer
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InboundOrderFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundOrder` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'carrier_id', 'origin_party_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'facility_id', 'supplier_id', 'inbound_load_id', 'load_reference_number', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'carrier_code', 'quantity', 'warehouse_gross_weight', 'origin_party_code', 'customer_code', 'weight_uom', 'is_quick_receive', 'order_confirmation_datetime', 'notes', 'purchase_order_number', 'received_datetime', 'scan_finish_datetime', 'scan_start_datetime', 'supplier_code', 'transportation_method', 'edi_type', 'version_number', 'finish_datetime', 'comments', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'signin_datetime', 'signout_datetime', 'start_datetime', 'origin_location_code', 'origin_location_name', 'origin_address_line1', 'origin_address_line2', 'origin_address_line3', 'origin_city', 'origin_state', 'origin_country', 'origin_zip', 'origin_email', 'origin_phone', 'origin_fax', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_canceled', 'is_transfer_order', 'transfer_warehouse_customer_id', 'transfer_customer_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    carrier_id = sgqlc.types.Field('StringFilter', graphql_name='carrierId')
    '''Filter by the object’s `carrierId` field.'''

    origin_party_id = sgqlc.types.Field('StringFilter', graphql_name='originPartyId')
    '''Filter by the object’s `originPartyId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    facility_id = sgqlc.types.Field('IntFilter', graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    supplier_id = sgqlc.types.Field('StringFilter', graphql_name='supplierId')
    '''Filter by the object’s `supplierId` field.'''

    inbound_load_id = sgqlc.types.Field('StringFilter', graphql_name='inboundLoadId')
    '''Filter by the object’s `inboundLoadId` field.'''

    load_reference_number = sgqlc.types.Field('StringFilter', graphql_name='loadReferenceNumber')
    '''Filter by the object’s `loadReferenceNumber` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    carrier_code = sgqlc.types.Field('StringFilter', graphql_name='carrierCode')
    '''Filter by the object’s `carrierCode` field.'''

    quantity = sgqlc.types.Field('IntFilter', graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    warehouse_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='warehouseGrossWeight')
    '''Filter by the object’s `warehouseGrossWeight` field.'''

    origin_party_code = sgqlc.types.Field('StringFilter', graphql_name='originPartyCode')
    '''Filter by the object’s `originPartyCode` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    is_quick_receive = sgqlc.types.Field(BooleanFilter, graphql_name='isQuickReceive')
    '''Filter by the object’s `isQuickReceive` field.'''

    order_confirmation_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='orderConfirmationDatetime')
    '''Filter by the object’s `orderConfirmationDatetime` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    purchase_order_number = sgqlc.types.Field('StringFilter', graphql_name='purchaseOrderNumber')
    '''Filter by the object’s `purchaseOrderNumber` field.'''

    received_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='receivedDatetime')
    '''Filter by the object’s `receivedDatetime` field.'''

    scan_finish_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scanFinishDatetime')
    '''Filter by the object’s `scanFinishDatetime` field.'''

    scan_start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scanStartDatetime')
    '''Filter by the object’s `scanStartDatetime` field.'''

    supplier_code = sgqlc.types.Field('StringFilter', graphql_name='supplierCode')
    '''Filter by the object’s `supplierCode` field.'''

    transportation_method = sgqlc.types.Field('StringFilter', graphql_name='transportationMethod')
    '''Filter by the object’s `transportationMethod` field.'''

    edi_type = sgqlc.types.Field('StringFilter', graphql_name='ediType')
    '''Filter by the object’s `ediType` field.'''

    version_number = sgqlc.types.Field('StringFilter', graphql_name='versionNumber')
    '''Filter by the object’s `versionNumber` field.'''

    finish_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='finishDatetime')
    '''Filter by the object’s `finishDatetime` field.'''

    comments = sgqlc.types.Field('StringFilter', graphql_name='comments')
    '''Filter by the object’s `comments` field.'''

    expected_receive_datetime_start = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedReceiveDatetimeStart')
    '''Filter by the object’s `expectedReceiveDatetimeStart` field.'''

    expected_receive_datetime_end = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedReceiveDatetimeEnd')
    '''Filter by the object’s `expectedReceiveDatetimeEnd` field.'''

    signin_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signinDatetime')
    '''Filter by the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signoutDatetime')
    '''Filter by the object’s `signoutDatetime` field.'''

    start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='startDatetime')
    '''Filter by the object’s `startDatetime` field.'''

    origin_location_code = sgqlc.types.Field('StringFilter', graphql_name='originLocationCode')
    '''Filter by the object’s `originLocationCode` field.'''

    origin_location_name = sgqlc.types.Field('StringFilter', graphql_name='originLocationName')
    '''Filter by the object’s `originLocationName` field.'''

    origin_address_line1 = sgqlc.types.Field('StringFilter', graphql_name='originAddressLine1')
    '''Filter by the object’s `originAddressLine1` field.'''

    origin_address_line2 = sgqlc.types.Field('StringFilter', graphql_name='originAddressLine2')
    '''Filter by the object’s `originAddressLine2` field.'''

    origin_address_line3 = sgqlc.types.Field('StringFilter', graphql_name='originAddressLine3')
    '''Filter by the object’s `originAddressLine3` field.'''

    origin_city = sgqlc.types.Field('StringFilter', graphql_name='originCity')
    '''Filter by the object’s `originCity` field.'''

    origin_state = sgqlc.types.Field('StringFilter', graphql_name='originState')
    '''Filter by the object’s `originState` field.'''

    origin_country = sgqlc.types.Field('StringFilter', graphql_name='originCountry')
    '''Filter by the object’s `originCountry` field.'''

    origin_zip = sgqlc.types.Field('StringFilter', graphql_name='originZip')
    '''Filter by the object’s `originZip` field.'''

    origin_email = sgqlc.types.Field('StringFilter', graphql_name='originEmail')
    '''Filter by the object’s `originEmail` field.'''

    origin_phone = sgqlc.types.Field('StringFilter', graphql_name='originPhone')
    '''Filter by the object’s `originPhone` field.'''

    origin_fax = sgqlc.types.Field('StringFilter', graphql_name='originFax')
    '''Filter by the object’s `originFax` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    is_canceled = sgqlc.types.Field(BooleanFilter, graphql_name='isCanceled')
    '''Filter by the object’s `isCanceled` field.'''

    is_transfer_order = sgqlc.types.Field(BooleanFilter, graphql_name='isTransferOrder')
    '''Filter by the object’s `isTransferOrder` field.'''

    transfer_warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='transferWarehouseCustomerId')
    '''Filter by the object’s `transferWarehouseCustomerId` field.'''

    transfer_customer_id = sgqlc.types.Field('StringFilter', graphql_name='transferCustomerId')
    '''Filter by the object’s `transferCustomerId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundOrderFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundOrderReferenceCodeCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundOrderReferenceCode` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'inbound_order_id', 'warehouse_order_number', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Checks for equality with the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Checks for equality with the object’s `referenceValue` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class InboundOrderReferenceCodeFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundOrderReferenceCode` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'inbound_order_id', 'warehouse_order_number', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    reference_type = sgqlc.types.Field('StringFilter', graphql_name='referenceType')
    '''Filter by the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field('StringFilter', graphql_name='referenceValue')
    '''Filter by the object’s `referenceValue` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderReferenceCodeFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderReferenceCodeFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundOrderReferenceCodeFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundOrderReferenceCodeInput(sgqlc.types.Input):
    '''An input for mutations affecting `InboundOrderReferenceCode`'''
    __schema__ = base
    __field_names__ = ('id', 'inbound_order_id', 'warehouse_order_number', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class InboundOrderReferenceCodesRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundOrderReferenceCodesRaw`
    object types. All fields are tested for equality and combined with
    a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_order_number', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', '_id', 'id', 'warehouse_facility_id', 'is_archived', 'inbound_order_id')
    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Checks for equality with the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Checks for equality with the object’s `referenceValue` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''



class InboundOrderReferenceCodesRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundOrderReferenceCodesRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_order_number', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', '_id', 'id', 'warehouse_facility_id', 'is_archived', 'inbound_order_id', 'and_', 'or_', 'not_')
    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    reference_type = sgqlc.types.Field('StringFilter', graphql_name='referenceType')
    '''Filter by the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field('StringFilter', graphql_name='referenceValue')
    '''Filter by the object’s `referenceValue` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderReferenceCodesRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderReferenceCodesRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundOrderReferenceCodesRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundOrderReferenceCodesRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InboundOrderReferenceCodesRaw`'''
    __schema__ = base
    __field_names__ = ('warehouse_order_number', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', '_id', 'id', 'warehouse_facility_id', 'is_archived', 'inbound_order_id')
    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    reference_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='referenceType')
    '''Reference type identifier'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Value for the reference code'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''



class InboundOrderReferenceCodesRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InboundOrderReferenceCodesRaw`. Fields
    that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('warehouse_order_number', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', '_id', 'id', 'warehouse_facility_id', 'is_archived', 'inbound_order_id')
    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Reference type identifier'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Value for the reference code'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''



class InboundOrdersExecutionRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundOrdersExecutionRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'inbound_order_id', 'warehouse_order_number', 'customer_id', 'customer_code', 'front_temperature', 'middle_temperature', 'back_temperature', 'temperature_uom', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    front_temperature = sgqlc.types.Field(String, graphql_name='frontTemperature')
    '''Checks for equality with the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field(String, graphql_name='middleTemperature')
    '''Checks for equality with the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field(String, graphql_name='backTemperature')
    '''Checks for equality with the object’s `backTemperature` field.'''

    temperature_uom = sgqlc.types.Field(String, graphql_name='temperatureUom')
    '''Checks for equality with the object’s `temperatureUom` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''



class InboundOrdersExecutionRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundOrdersExecutionRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'inbound_order_id', 'warehouse_order_number', 'customer_id', 'customer_code', 'front_temperature', 'middle_temperature', 'back_temperature', 'temperature_uom', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    front_temperature = sgqlc.types.Field('StringFilter', graphql_name='frontTemperature')
    '''Filter by the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field('StringFilter', graphql_name='middleTemperature')
    '''Filter by the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field('StringFilter', graphql_name='backTemperature')
    '''Filter by the object’s `backTemperature` field.'''

    temperature_uom = sgqlc.types.Field('StringFilter', graphql_name='temperatureUom')
    '''Filter by the object’s `temperatureUom` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrdersExecutionRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrdersExecutionRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundOrdersExecutionRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundOrdersExecutionRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InboundOrdersExecutionRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'inbound_order_id', 'warehouse_order_number', 'customer_id', 'customer_code', 'front_temperature', 'middle_temperature', 'back_temperature', 'temperature_uom', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    front_temperature = sgqlc.types.Field(String, graphql_name='frontTemperature')
    '''Temperature from the front of the order in the truck'''

    middle_temperature = sgqlc.types.Field(String, graphql_name='middleTemperature')
    '''Temperature from the middle of the order in the truck'''

    back_temperature = sgqlc.types.Field(String, graphql_name='backTemperature')
    '''Temperature from the back of the order in the truck'''

    temperature_uom = sgqlc.types.Field(String, graphql_name='temperatureUom')
    '''Unit of measure for temperature (fahrenheit or celsius)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''



class InboundOrdersExecutionRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InboundOrdersExecutionRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'inbound_order_id', 'warehouse_order_number', 'customer_id', 'customer_code', 'front_temperature', 'middle_temperature', 'back_temperature', 'temperature_uom', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    front_temperature = sgqlc.types.Field(String, graphql_name='frontTemperature')
    '''Temperature from the front of the order in the truck'''

    middle_temperature = sgqlc.types.Field(String, graphql_name='middleTemperature')
    '''Temperature from the middle of the order in the truck'''

    back_temperature = sgqlc.types.Field(String, graphql_name='backTemperature')
    '''Temperature from the back of the order in the truck'''

    temperature_uom = sgqlc.types.Field(String, graphql_name='temperatureUom')
    '''Unit of measure for temperature (fahrenheit or celsius)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''



class InboundOrdersRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundOrdersRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'carrier_code', 'quantity', 'warehouse_gross_weight', 'origin_party_code', 'customer_code', 'is_quick_receive', 'order_confirmation_datetime', 'notes', 'purchase_order_number', 'received_datetime', 'scan_finish_datetime', 'scan_start_datetime', 'supplier_code', 'transportation_method', 'edi_type', 'version_number', 'finish_datetime', 'comments', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'signin_datetime', 'signout_datetime', 'start_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'origin_location_code', 'origin_location_name', 'origin_address_line1', 'origin_address_line2', 'origin_address_line3', 'origin_city', 'origin_state', 'origin_country', 'origin_zip', 'origin_email', 'origin_phone', 'origin_fax', 'weight_uom', 'load_reference_number', '_id', 'id', 'is_canceled', 'transfer_customer_code', 'is_transfer_order', 'is_archived', 'inbound_load_id', 'customer_id', 'transfer_customer_id', 'average_temperature', 'front_temperature', 'middle_temperature', 'back_temperature', 'wms_last_updated_by', 'wms_last_updated_datetime', 'supplier_name')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Checks for equality with the object’s `carrierCode` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')
    '''Checks for equality with the object’s `warehouseGrossWeight`
    field.
    '''

    origin_party_code = sgqlc.types.Field(String, graphql_name='originPartyCode')
    '''Checks for equality with the object’s `originPartyCode` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    is_quick_receive = sgqlc.types.Field(Boolean, graphql_name='isQuickReceive')
    '''Checks for equality with the object’s `isQuickReceive` field.'''

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')
    '''Checks for equality with the object’s `orderConfirmationDatetime`
    field.
    '''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')
    '''Checks for equality with the object’s `purchaseOrderNumber` field.'''

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')
    '''Checks for equality with the object’s `receivedDatetime` field.'''

    scan_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='scanFinishDatetime')
    '''Checks for equality with the object’s `scanFinishDatetime` field.'''

    scan_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scanStartDatetime')
    '''Checks for equality with the object’s `scanStartDatetime` field.'''

    supplier_code = sgqlc.types.Field(String, graphql_name='supplierCode')
    '''Checks for equality with the object’s `supplierCode` field.'''

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')
    '''Checks for equality with the object’s `transportationMethod`
    field.
    '''

    edi_type = sgqlc.types.Field(String, graphql_name='ediType')
    '''Checks for equality with the object’s `ediType` field.'''

    version_number = sgqlc.types.Field(String, graphql_name='versionNumber')
    '''Checks for equality with the object’s `versionNumber` field.'''

    finish_datetime = sgqlc.types.Field(Datetime, graphql_name='finishDatetime')
    '''Checks for equality with the object’s `finishDatetime` field.'''

    comments = sgqlc.types.Field(String, graphql_name='comments')
    '''Checks for equality with the object’s `comments` field.'''

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')
    '''Checks for equality with the object’s
    `expectedReceiveDatetimeStart` field.
    '''

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')
    '''Checks for equality with the object’s `expectedReceiveDatetimeEnd`
    field.
    '''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Checks for equality with the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Checks for equality with the object’s `signoutDatetime` field.'''

    start_datetime = sgqlc.types.Field(Datetime, graphql_name='startDatetime')
    '''Checks for equality with the object’s `startDatetime` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    origin_location_code = sgqlc.types.Field(String, graphql_name='originLocationCode')
    '''Checks for equality with the object’s `originLocationCode` field.'''

    origin_location_name = sgqlc.types.Field(String, graphql_name='originLocationName')
    '''Checks for equality with the object’s `originLocationName` field.'''

    origin_address_line1 = sgqlc.types.Field(String, graphql_name='originAddressLine1')
    '''Checks for equality with the object’s `originAddressLine1` field.'''

    origin_address_line2 = sgqlc.types.Field(String, graphql_name='originAddressLine2')
    '''Checks for equality with the object’s `originAddressLine2` field.'''

    origin_address_line3 = sgqlc.types.Field(String, graphql_name='originAddressLine3')
    '''Checks for equality with the object’s `originAddressLine3` field.'''

    origin_city = sgqlc.types.Field(String, graphql_name='originCity')
    '''Checks for equality with the object’s `originCity` field.'''

    origin_state = sgqlc.types.Field(String, graphql_name='originState')
    '''Checks for equality with the object’s `originState` field.'''

    origin_country = sgqlc.types.Field(String, graphql_name='originCountry')
    '''Checks for equality with the object’s `originCountry` field.'''

    origin_zip = sgqlc.types.Field(String, graphql_name='originZip')
    '''Checks for equality with the object’s `originZip` field.'''

    origin_email = sgqlc.types.Field(String, graphql_name='originEmail')
    '''Checks for equality with the object’s `originEmail` field.'''

    origin_phone = sgqlc.types.Field(String, graphql_name='originPhone')
    '''Checks for equality with the object’s `originPhone` field.'''

    origin_fax = sgqlc.types.Field(String, graphql_name='originFax')
    '''Checks for equality with the object’s `originFax` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Checks for equality with the object’s `loadReferenceNumber` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')
    '''Checks for equality with the object’s `isCanceled` field.'''

    transfer_customer_code = sgqlc.types.Field(String, graphql_name='transferCustomerCode')
    '''Checks for equality with the object’s `transferCustomerCode`
    field.
    '''

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')
    '''Checks for equality with the object’s `isTransferOrder` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    inbound_load_id = sgqlc.types.Field(String, graphql_name='inboundLoadId')
    '''Checks for equality with the object’s `inboundLoadId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')
    '''Checks for equality with the object’s `transferCustomerId` field.'''

    average_temperature = sgqlc.types.Field(String, graphql_name='averageTemperature')
    '''Checks for equality with the object’s `averageTemperature` field.'''

    front_temperature = sgqlc.types.Field(String, graphql_name='frontTemperature')
    '''Checks for equality with the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field(String, graphql_name='middleTemperature')
    '''Checks for equality with the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field(String, graphql_name='backTemperature')
    '''Checks for equality with the object’s `backTemperature` field.'''

    wms_last_updated_by = sgqlc.types.Field(String, graphql_name='wmsLastUpdatedBy')
    '''Checks for equality with the object’s `wmsLastUpdatedBy` field.'''

    wms_last_updated_datetime = sgqlc.types.Field(Datetime, graphql_name='wmsLastUpdatedDatetime')
    '''Checks for equality with the object’s `wmsLastUpdatedDatetime`
    field.
    '''

    supplier_name = sgqlc.types.Field(String, graphql_name='supplierName')
    '''Checks for equality with the object’s `supplierName` field.'''



class InboundOrdersRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundOrdersRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'carrier_code', 'quantity', 'warehouse_gross_weight', 'origin_party_code', 'customer_code', 'is_quick_receive', 'order_confirmation_datetime', 'notes', 'purchase_order_number', 'received_datetime', 'scan_finish_datetime', 'scan_start_datetime', 'supplier_code', 'transportation_method', 'edi_type', 'version_number', 'finish_datetime', 'comments', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'signin_datetime', 'signout_datetime', 'start_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'origin_location_code', 'origin_location_name', 'origin_address_line1', 'origin_address_line2', 'origin_address_line3', 'origin_city', 'origin_state', 'origin_country', 'origin_zip', 'origin_email', 'origin_phone', 'origin_fax', 'weight_uom', 'load_reference_number', '_id', 'id', 'is_canceled', 'transfer_customer_code', 'is_transfer_order', 'is_archived', 'inbound_load_id', 'customer_id', 'transfer_customer_id', 'average_temperature', 'front_temperature', 'middle_temperature', 'back_temperature', 'wms_last_updated_by', 'wms_last_updated_datetime', 'supplier_name', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    carrier_code = sgqlc.types.Field('StringFilter', graphql_name='carrierCode')
    '''Filter by the object’s `carrierCode` field.'''

    quantity = sgqlc.types.Field('IntFilter', graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    warehouse_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='warehouseGrossWeight')
    '''Filter by the object’s `warehouseGrossWeight` field.'''

    origin_party_code = sgqlc.types.Field('StringFilter', graphql_name='originPartyCode')
    '''Filter by the object’s `originPartyCode` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    is_quick_receive = sgqlc.types.Field(BooleanFilter, graphql_name='isQuickReceive')
    '''Filter by the object’s `isQuickReceive` field.'''

    order_confirmation_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='orderConfirmationDatetime')
    '''Filter by the object’s `orderConfirmationDatetime` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    purchase_order_number = sgqlc.types.Field('StringFilter', graphql_name='purchaseOrderNumber')
    '''Filter by the object’s `purchaseOrderNumber` field.'''

    received_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='receivedDatetime')
    '''Filter by the object’s `receivedDatetime` field.'''

    scan_finish_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scanFinishDatetime')
    '''Filter by the object’s `scanFinishDatetime` field.'''

    scan_start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scanStartDatetime')
    '''Filter by the object’s `scanStartDatetime` field.'''

    supplier_code = sgqlc.types.Field('StringFilter', graphql_name='supplierCode')
    '''Filter by the object’s `supplierCode` field.'''

    transportation_method = sgqlc.types.Field('StringFilter', graphql_name='transportationMethod')
    '''Filter by the object’s `transportationMethod` field.'''

    edi_type = sgqlc.types.Field('StringFilter', graphql_name='ediType')
    '''Filter by the object’s `ediType` field.'''

    version_number = sgqlc.types.Field('StringFilter', graphql_name='versionNumber')
    '''Filter by the object’s `versionNumber` field.'''

    finish_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='finishDatetime')
    '''Filter by the object’s `finishDatetime` field.'''

    comments = sgqlc.types.Field('StringFilter', graphql_name='comments')
    '''Filter by the object’s `comments` field.'''

    expected_receive_datetime_start = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedReceiveDatetimeStart')
    '''Filter by the object’s `expectedReceiveDatetimeStart` field.'''

    expected_receive_datetime_end = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedReceiveDatetimeEnd')
    '''Filter by the object’s `expectedReceiveDatetimeEnd` field.'''

    signin_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signinDatetime')
    '''Filter by the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signoutDatetime')
    '''Filter by the object’s `signoutDatetime` field.'''

    start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='startDatetime')
    '''Filter by the object’s `startDatetime` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    origin_location_code = sgqlc.types.Field('StringFilter', graphql_name='originLocationCode')
    '''Filter by the object’s `originLocationCode` field.'''

    origin_location_name = sgqlc.types.Field('StringFilter', graphql_name='originLocationName')
    '''Filter by the object’s `originLocationName` field.'''

    origin_address_line1 = sgqlc.types.Field('StringFilter', graphql_name='originAddressLine1')
    '''Filter by the object’s `originAddressLine1` field.'''

    origin_address_line2 = sgqlc.types.Field('StringFilter', graphql_name='originAddressLine2')
    '''Filter by the object’s `originAddressLine2` field.'''

    origin_address_line3 = sgqlc.types.Field('StringFilter', graphql_name='originAddressLine3')
    '''Filter by the object’s `originAddressLine3` field.'''

    origin_city = sgqlc.types.Field('StringFilter', graphql_name='originCity')
    '''Filter by the object’s `originCity` field.'''

    origin_state = sgqlc.types.Field('StringFilter', graphql_name='originState')
    '''Filter by the object’s `originState` field.'''

    origin_country = sgqlc.types.Field('StringFilter', graphql_name='originCountry')
    '''Filter by the object’s `originCountry` field.'''

    origin_zip = sgqlc.types.Field('StringFilter', graphql_name='originZip')
    '''Filter by the object’s `originZip` field.'''

    origin_email = sgqlc.types.Field('StringFilter', graphql_name='originEmail')
    '''Filter by the object’s `originEmail` field.'''

    origin_phone = sgqlc.types.Field('StringFilter', graphql_name='originPhone')
    '''Filter by the object’s `originPhone` field.'''

    origin_fax = sgqlc.types.Field('StringFilter', graphql_name='originFax')
    '''Filter by the object’s `originFax` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    load_reference_number = sgqlc.types.Field('StringFilter', graphql_name='loadReferenceNumber')
    '''Filter by the object’s `loadReferenceNumber` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    is_canceled = sgqlc.types.Field(BooleanFilter, graphql_name='isCanceled')
    '''Filter by the object’s `isCanceled` field.'''

    transfer_customer_code = sgqlc.types.Field('StringFilter', graphql_name='transferCustomerCode')
    '''Filter by the object’s `transferCustomerCode` field.'''

    is_transfer_order = sgqlc.types.Field(BooleanFilter, graphql_name='isTransferOrder')
    '''Filter by the object’s `isTransferOrder` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    inbound_load_id = sgqlc.types.Field('StringFilter', graphql_name='inboundLoadId')
    '''Filter by the object’s `inboundLoadId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    transfer_customer_id = sgqlc.types.Field('StringFilter', graphql_name='transferCustomerId')
    '''Filter by the object’s `transferCustomerId` field.'''

    average_temperature = sgqlc.types.Field('StringFilter', graphql_name='averageTemperature')
    '''Filter by the object’s `averageTemperature` field.'''

    front_temperature = sgqlc.types.Field('StringFilter', graphql_name='frontTemperature')
    '''Filter by the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field('StringFilter', graphql_name='middleTemperature')
    '''Filter by the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field('StringFilter', graphql_name='backTemperature')
    '''Filter by the object’s `backTemperature` field.'''

    wms_last_updated_by = sgqlc.types.Field('StringFilter', graphql_name='wmsLastUpdatedBy')
    '''Filter by the object’s `wmsLastUpdatedBy` field.'''

    wms_last_updated_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='wmsLastUpdatedDatetime')
    '''Filter by the object’s `wmsLastUpdatedDatetime` field.'''

    supplier_name = sgqlc.types.Field('StringFilter', graphql_name='supplierName')
    '''Filter by the object’s `supplierName` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrdersRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrdersRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundOrdersRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundOrdersRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InboundOrdersRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'carrier_code', 'quantity', 'warehouse_gross_weight', 'origin_party_code', 'customer_code', 'is_quick_receive', 'order_confirmation_datetime', 'notes', 'purchase_order_number', 'received_datetime', 'scan_finish_datetime', 'scan_start_datetime', 'supplier_code', 'transportation_method', 'edi_type', 'version_number', 'finish_datetime', 'comments', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'signin_datetime', 'signout_datetime', 'start_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'origin_location_code', 'origin_location_name', 'origin_address_line1', 'origin_address_line2', 'origin_address_line3', 'origin_city', 'origin_state', 'origin_country', 'origin_zip', 'origin_email', 'origin_phone', 'origin_fax', 'weight_uom', 'load_reference_number', '_id', 'id', 'is_canceled', 'transfer_customer_code', 'is_transfer_order', 'is_archived', 'inbound_load_id', 'customer_id', 'transfer_customer_id', 'average_temperature', 'front_temperature', 'middle_temperature', 'back_temperature', 'wms_last_updated_by', 'wms_last_updated_datetime', 'supplier_name')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Carrier identifier for the order.  If the WMS supports a SCAC,
    that is what is populated
    '''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Total number of cases for the order'''

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')
    '''Gross weight of the product in the order (in pounds)'''

    origin_party_code = sgqlc.types.Field(String, graphql_name='originPartyCode')
    '''WMS Code for the inbound consignor'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_quick_receive = sgqlc.types.Field(Boolean, graphql_name='isQuickReceive')
    '''Flag for whether outbound order is automatically created for the
    inbound order
    '''

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')
    '''Date and time the order was confirmed on an appointment (in
    facility local time)
    '''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Notes for the order'''

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')
    '''Purchase order number for the order'''

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')
    '''Date and time the order is received into inventory at the facility
    (in facility local time)
    '''

    scan_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='scanFinishDatetime')
    '''Date and time the first product for this order is scanned coming
    off the trailer (in facility local time)
    '''

    scan_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scanStartDatetime')
    '''Date and time the last product for this order is scanned coming
    off the trailer (in facility local time)
    '''

    supplier_code = sgqlc.types.Field(String, graphql_name='supplierCode')
    '''Inbound supplier number'''

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')
    '''Transportation method for the order'''

    edi_type = sgqlc.types.Field(String, graphql_name='ediType')
    '''Type of EDI'''

    version_number = sgqlc.types.Field(String, graphql_name='versionNumber')
    '''EDI Version number'''

    finish_datetime = sgqlc.types.Field(Datetime, graphql_name='finishDatetime')
    '''Date and time the order was expected at the facility (in facility
    local time)
    '''

    comments = sgqlc.types.Field(String, graphql_name='comments')
    '''Comments for the inbound order'''

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')
    '''Date and time the order was expected at the facility (in facility
    local time)
    '''

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')
    '''Date and time the order was expected to finish unloading at the
    facility (in facility local time)
    '''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Date and time the driver signed in at the facility (in facility
    local time)
    '''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Date and time the driver signed in at the facility (in facility
    local time)
    '''

    start_datetime = sgqlc.types.Field(Datetime, graphql_name='startDatetime')
    '''Date and time the product was unloaded from the trailer (in
    facility local time)
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    origin_location_code = sgqlc.types.Field(String, graphql_name='originLocationCode')
    '''Origin Location code for the order'''

    origin_location_name = sgqlc.types.Field(String, graphql_name='originLocationName')
    '''Origin Location name for the order'''

    origin_address_line1 = sgqlc.types.Field(String, graphql_name='originAddressLine1')
    '''Origin Address line1 for the order'''

    origin_address_line2 = sgqlc.types.Field(String, graphql_name='originAddressLine2')
    '''Origin Address line2 for the order'''

    origin_address_line3 = sgqlc.types.Field(String, graphql_name='originAddressLine3')
    '''Origin Address line3 for the order'''

    origin_city = sgqlc.types.Field(String, graphql_name='originCity')
    '''Origin city for the order'''

    origin_state = sgqlc.types.Field(String, graphql_name='originState')
    '''Origin state for the order'''

    origin_country = sgqlc.types.Field(String, graphql_name='originCountry')
    '''Origin country for the order'''

    origin_zip = sgqlc.types.Field(String, graphql_name='originZip')
    '''Origin zip for the order'''

    origin_email = sgqlc.types.Field(String, graphql_name='originEmail')
    '''Origin email for the order'''

    origin_phone = sgqlc.types.Field(String, graphql_name='originPhone')
    '''Origin phone for the order'''

    origin_fax = sgqlc.types.Field(String, graphql_name='originFax')
    '''Origin fax for the order'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight unit of measure for the order'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Load Reference number for the order'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')
    '''Is canceled for the order'''

    transfer_customer_code = sgqlc.types.Field(String, graphql_name='transferCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')
    '''Is Transfer order for the order'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_load_id = sgqlc.types.Field(String, graphql_name='inboundLoadId')
    '''Inbound Load id for the order'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')
    '''Transfer Customer id for the order'''

    average_temperature = sgqlc.types.Field(String, graphql_name='averageTemperature')
    '''Average measured temperature for the inbound order pallets in the
    truck (in Fahrenheit)
    '''

    front_temperature = sgqlc.types.Field(String, graphql_name='frontTemperature')
    '''Measured temperature at the front of the inbound order pallets in
    the truck (in Fahrenheit)
    '''

    middle_temperature = sgqlc.types.Field(String, graphql_name='middleTemperature')
    '''Measured temperature at the middle of the inbound order pallets in
    the truck (in Fahrenheit)
    '''

    back_temperature = sgqlc.types.Field(String, graphql_name='backTemperature')
    '''Measured temperature at the back of the inbound order pallets in
    the truck (in Fahrenheit)
    '''

    wms_last_updated_by = sgqlc.types.Field(String, graphql_name='wmsLastUpdatedBy')
    '''User that last modified the order in the WMS'''

    wms_last_updated_datetime = sgqlc.types.Field(Datetime, graphql_name='wmsLastUpdatedDatetime')
    '''Date and time the order was last modified in the WMS (as reported
    by the WMS)
    '''

    supplier_name = sgqlc.types.Field(String, graphql_name='supplierName')
    '''Supplier name'''



class InboundOrdersRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InboundOrdersRaw`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'carrier_code', 'quantity', 'warehouse_gross_weight', 'origin_party_code', 'customer_code', 'is_quick_receive', 'order_confirmation_datetime', 'notes', 'purchase_order_number', 'received_datetime', 'scan_finish_datetime', 'scan_start_datetime', 'supplier_code', 'transportation_method', 'edi_type', 'version_number', 'finish_datetime', 'comments', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'signin_datetime', 'signout_datetime', 'start_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'origin_location_code', 'origin_location_name', 'origin_address_line1', 'origin_address_line2', 'origin_address_line3', 'origin_city', 'origin_state', 'origin_country', 'origin_zip', 'origin_email', 'origin_phone', 'origin_fax', 'weight_uom', 'load_reference_number', '_id', 'id', 'is_canceled', 'transfer_customer_code', 'is_transfer_order', 'is_archived', 'inbound_load_id', 'customer_id', 'transfer_customer_id', 'average_temperature', 'front_temperature', 'middle_temperature', 'back_temperature', 'wms_last_updated_by', 'wms_last_updated_datetime', 'supplier_name')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Carrier identifier for the order.  If the WMS supports a SCAC,
    that is what is populated
    '''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Total number of cases for the order'''

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')
    '''Gross weight of the product in the order (in pounds)'''

    origin_party_code = sgqlc.types.Field(String, graphql_name='originPartyCode')
    '''WMS Code for the inbound consignor'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_quick_receive = sgqlc.types.Field(Boolean, graphql_name='isQuickReceive')
    '''Flag for whether outbound order is automatically created for the
    inbound order
    '''

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')
    '''Date and time the order was confirmed on an appointment (in
    facility local time)
    '''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Notes for the order'''

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')
    '''Purchase order number for the order'''

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')
    '''Date and time the order is received into inventory at the facility
    (in facility local time)
    '''

    scan_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='scanFinishDatetime')
    '''Date and time the first product for this order is scanned coming
    off the trailer (in facility local time)
    '''

    scan_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scanStartDatetime')
    '''Date and time the last product for this order is scanned coming
    off the trailer (in facility local time)
    '''

    supplier_code = sgqlc.types.Field(String, graphql_name='supplierCode')
    '''Inbound supplier number'''

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')
    '''Transportation method for the order'''

    edi_type = sgqlc.types.Field(String, graphql_name='ediType')
    '''Type of EDI'''

    version_number = sgqlc.types.Field(String, graphql_name='versionNumber')
    '''EDI Version number'''

    finish_datetime = sgqlc.types.Field(Datetime, graphql_name='finishDatetime')
    '''Date and time the order was expected at the facility (in facility
    local time)
    '''

    comments = sgqlc.types.Field(String, graphql_name='comments')
    '''Comments for the inbound order'''

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')
    '''Date and time the order was expected at the facility (in facility
    local time)
    '''

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')
    '''Date and time the order was expected to finish unloading at the
    facility (in facility local time)
    '''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Date and time the driver signed in at the facility (in facility
    local time)
    '''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Date and time the driver signed in at the facility (in facility
    local time)
    '''

    start_datetime = sgqlc.types.Field(Datetime, graphql_name='startDatetime')
    '''Date and time the product was unloaded from the trailer (in
    facility local time)
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    origin_location_code = sgqlc.types.Field(String, graphql_name='originLocationCode')
    '''Origin Location code for the order'''

    origin_location_name = sgqlc.types.Field(String, graphql_name='originLocationName')
    '''Origin Location name for the order'''

    origin_address_line1 = sgqlc.types.Field(String, graphql_name='originAddressLine1')
    '''Origin Address line1 for the order'''

    origin_address_line2 = sgqlc.types.Field(String, graphql_name='originAddressLine2')
    '''Origin Address line2 for the order'''

    origin_address_line3 = sgqlc.types.Field(String, graphql_name='originAddressLine3')
    '''Origin Address line3 for the order'''

    origin_city = sgqlc.types.Field(String, graphql_name='originCity')
    '''Origin city for the order'''

    origin_state = sgqlc.types.Field(String, graphql_name='originState')
    '''Origin state for the order'''

    origin_country = sgqlc.types.Field(String, graphql_name='originCountry')
    '''Origin country for the order'''

    origin_zip = sgqlc.types.Field(String, graphql_name='originZip')
    '''Origin zip for the order'''

    origin_email = sgqlc.types.Field(String, graphql_name='originEmail')
    '''Origin email for the order'''

    origin_phone = sgqlc.types.Field(String, graphql_name='originPhone')
    '''Origin phone for the order'''

    origin_fax = sgqlc.types.Field(String, graphql_name='originFax')
    '''Origin fax for the order'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight unit of measure for the order'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Load Reference number for the order'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')
    '''Is canceled for the order'''

    transfer_customer_code = sgqlc.types.Field(String, graphql_name='transferCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')
    '''Is Transfer order for the order'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_load_id = sgqlc.types.Field(String, graphql_name='inboundLoadId')
    '''Inbound Load id for the order'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')
    '''Transfer Customer id for the order'''

    average_temperature = sgqlc.types.Field(String, graphql_name='averageTemperature')
    '''Average measured temperature for the inbound order pallets in the
    truck (in Fahrenheit)
    '''

    front_temperature = sgqlc.types.Field(String, graphql_name='frontTemperature')
    '''Measured temperature at the front of the inbound order pallets in
    the truck (in Fahrenheit)
    '''

    middle_temperature = sgqlc.types.Field(String, graphql_name='middleTemperature')
    '''Measured temperature at the middle of the inbound order pallets in
    the truck (in Fahrenheit)
    '''

    back_temperature = sgqlc.types.Field(String, graphql_name='backTemperature')
    '''Measured temperature at the back of the inbound order pallets in
    the truck (in Fahrenheit)
    '''

    wms_last_updated_by = sgqlc.types.Field(String, graphql_name='wmsLastUpdatedBy')
    '''User that last modified the order in the WMS'''

    wms_last_updated_datetime = sgqlc.types.Field(Datetime, graphql_name='wmsLastUpdatedDatetime')
    '''Date and time the order was last modified in the WMS (as reported
    by the WMS)
    '''

    supplier_name = sgqlc.types.Field(String, graphql_name='supplierName')
    '''Supplier name'''



class InboundPalletsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundPalletsRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'customer_code', 'warehouse_pallet_code', 'case_quantity', 'gross_weight', 'net_weight', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'item_code', 'is_archived', 'inbound_order_id', 'item_id', 'customer_id', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Checks for equality with the object’s `warehousePalletCode` field.'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Checks for equality with the object’s `caseQuantity` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    pallet_count = sgqlc.types.Field(Float, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class InboundPalletsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundPalletsRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'customer_code', 'warehouse_pallet_code', 'case_quantity', 'gross_weight', 'net_weight', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'item_code', 'is_archived', 'inbound_order_id', 'item_id', 'customer_id', 'weight_uom', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    warehouse_pallet_code = sgqlc.types.Field('StringFilter', graphql_name='warehousePalletCode')
    '''Filter by the object’s `warehousePalletCode` field.'''

    case_quantity = sgqlc.types.Field('IntFilter', graphql_name='caseQuantity')
    '''Filter by the object’s `caseQuantity` field.'''

    gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(FloatFilter, graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    pallet_count = sgqlc.types.Field(FloatFilter, graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundPalletsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundPalletsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundPalletsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundPalletsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InboundPalletsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'customer_code', 'warehouse_pallet_code', 'case_quantity', 'gross_weight', 'net_weight', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'item_code', 'is_archived', 'inbound_order_id', 'item_id', 'customer_id', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.      This is
    used by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.      This is
    used by the ODS to map to the customer enterprise id
    '''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Warehouse Pallet code for the palle'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Case quantity for the palle'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product on the pallet(s) (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product on the pallet(s) (in pounds)'''

    pallet_count = sgqlc.types.Field(Float, graphql_name='palletCount')
    '''Pallet count for the palle'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InboundPalletsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InboundPalletsRaw`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'customer_code', 'warehouse_pallet_code', 'case_quantity', 'gross_weight', 'net_weight', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'item_code', 'is_archived', 'inbound_order_id', 'item_id', 'customer_id', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.      This is
    used by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.      This is
    used by the ODS to map to the customer enterprise id
    '''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Warehouse Pallet code for the palle'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Case quantity for the palle'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product on the pallet(s) (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product on the pallet(s) (in pounds)'''

    pallet_count = sgqlc.types.Field(Float, graphql_name='palletCount')
    '''Pallet count for the palle'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InboundTruckLogRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InboundTruckLogRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'inbound_order_id', 'customer_code', 'customer_id', 'cooler_quantity', 'cooler_shortage_quantity', 'cooler_damaged_quantity', 'cooler_over_quantity', 'cooler_other_quantity', 'cooler_comment', 'freezer_quantity', 'freezer_shortage_quantity', 'freezer_damaged_quantity', 'freezer_over_quantity', 'freezer_other_quantity', 'freezer_comment', 'dry_quantity', 'dry_shortage_quantity', 'dry_damaged_quantity', 'dry_over_quantity', 'dry_other_quantity', 'dry_comment', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    cooler_quantity = sgqlc.types.Field(Int, graphql_name='coolerQuantity')
    '''Checks for equality with the object’s `coolerQuantity` field.'''

    cooler_shortage_quantity = sgqlc.types.Field(Int, graphql_name='coolerShortageQuantity')
    '''Checks for equality with the object’s `coolerShortageQuantity`
    field.
    '''

    cooler_damaged_quantity = sgqlc.types.Field(Int, graphql_name='coolerDamagedQuantity')
    '''Checks for equality with the object’s `coolerDamagedQuantity`
    field.
    '''

    cooler_over_quantity = sgqlc.types.Field(Int, graphql_name='coolerOverQuantity')
    '''Checks for equality with the object’s `coolerOverQuantity` field.'''

    cooler_other_quantity = sgqlc.types.Field(Int, graphql_name='coolerOtherQuantity')
    '''Checks for equality with the object’s `coolerOtherQuantity` field.'''

    cooler_comment = sgqlc.types.Field(String, graphql_name='coolerComment')
    '''Checks for equality with the object’s `coolerComment` field.'''

    freezer_quantity = sgqlc.types.Field(Int, graphql_name='freezerQuantity')
    '''Checks for equality with the object’s `freezerQuantity` field.'''

    freezer_shortage_quantity = sgqlc.types.Field(Int, graphql_name='freezerShortageQuantity')
    '''Checks for equality with the object’s `freezerShortageQuantity`
    field.
    '''

    freezer_damaged_quantity = sgqlc.types.Field(Int, graphql_name='freezerDamagedQuantity')
    '''Checks for equality with the object’s `freezerDamagedQuantity`
    field.
    '''

    freezer_over_quantity = sgqlc.types.Field(Int, graphql_name='freezerOverQuantity')
    '''Checks for equality with the object’s `freezerOverQuantity` field.'''

    freezer_other_quantity = sgqlc.types.Field(Int, graphql_name='freezerOtherQuantity')
    '''Checks for equality with the object’s `freezerOtherQuantity`
    field.
    '''

    freezer_comment = sgqlc.types.Field(String, graphql_name='freezerComment')
    '''Checks for equality with the object’s `freezerComment` field.'''

    dry_quantity = sgqlc.types.Field(Int, graphql_name='dryQuantity')
    '''Checks for equality with the object’s `dryQuantity` field.'''

    dry_shortage_quantity = sgqlc.types.Field(Int, graphql_name='dryShortageQuantity')
    '''Checks for equality with the object’s `dryShortageQuantity` field.'''

    dry_damaged_quantity = sgqlc.types.Field(Int, graphql_name='dryDamagedQuantity')
    '''Checks for equality with the object’s `dryDamagedQuantity` field.'''

    dry_over_quantity = sgqlc.types.Field(Int, graphql_name='dryOverQuantity')
    '''Checks for equality with the object’s `dryOverQuantity` field.'''

    dry_other_quantity = sgqlc.types.Field(Int, graphql_name='dryOtherQuantity')
    '''Checks for equality with the object’s `dryOtherQuantity` field.'''

    dry_comment = sgqlc.types.Field(String, graphql_name='dryComment')
    '''Checks for equality with the object’s `dryComment` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class InboundTruckLogRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InboundTruckLogRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'inbound_order_id', 'customer_code', 'customer_id', 'cooler_quantity', 'cooler_shortage_quantity', 'cooler_damaged_quantity', 'cooler_over_quantity', 'cooler_other_quantity', 'cooler_comment', 'freezer_quantity', 'freezer_shortage_quantity', 'freezer_damaged_quantity', 'freezer_over_quantity', 'freezer_other_quantity', 'freezer_comment', 'dry_quantity', 'dry_shortage_quantity', 'dry_damaged_quantity', 'dry_over_quantity', 'dry_other_quantity', 'dry_comment', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field('IntFilter', graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    cooler_quantity = sgqlc.types.Field('IntFilter', graphql_name='coolerQuantity')
    '''Filter by the object’s `coolerQuantity` field.'''

    cooler_shortage_quantity = sgqlc.types.Field('IntFilter', graphql_name='coolerShortageQuantity')
    '''Filter by the object’s `coolerShortageQuantity` field.'''

    cooler_damaged_quantity = sgqlc.types.Field('IntFilter', graphql_name='coolerDamagedQuantity')
    '''Filter by the object’s `coolerDamagedQuantity` field.'''

    cooler_over_quantity = sgqlc.types.Field('IntFilter', graphql_name='coolerOverQuantity')
    '''Filter by the object’s `coolerOverQuantity` field.'''

    cooler_other_quantity = sgqlc.types.Field('IntFilter', graphql_name='coolerOtherQuantity')
    '''Filter by the object’s `coolerOtherQuantity` field.'''

    cooler_comment = sgqlc.types.Field('StringFilter', graphql_name='coolerComment')
    '''Filter by the object’s `coolerComment` field.'''

    freezer_quantity = sgqlc.types.Field('IntFilter', graphql_name='freezerQuantity')
    '''Filter by the object’s `freezerQuantity` field.'''

    freezer_shortage_quantity = sgqlc.types.Field('IntFilter', graphql_name='freezerShortageQuantity')
    '''Filter by the object’s `freezerShortageQuantity` field.'''

    freezer_damaged_quantity = sgqlc.types.Field('IntFilter', graphql_name='freezerDamagedQuantity')
    '''Filter by the object’s `freezerDamagedQuantity` field.'''

    freezer_over_quantity = sgqlc.types.Field('IntFilter', graphql_name='freezerOverQuantity')
    '''Filter by the object’s `freezerOverQuantity` field.'''

    freezer_other_quantity = sgqlc.types.Field('IntFilter', graphql_name='freezerOtherQuantity')
    '''Filter by the object’s `freezerOtherQuantity` field.'''

    freezer_comment = sgqlc.types.Field('StringFilter', graphql_name='freezerComment')
    '''Filter by the object’s `freezerComment` field.'''

    dry_quantity = sgqlc.types.Field('IntFilter', graphql_name='dryQuantity')
    '''Filter by the object’s `dryQuantity` field.'''

    dry_shortage_quantity = sgqlc.types.Field('IntFilter', graphql_name='dryShortageQuantity')
    '''Filter by the object’s `dryShortageQuantity` field.'''

    dry_damaged_quantity = sgqlc.types.Field('IntFilter', graphql_name='dryDamagedQuantity')
    '''Filter by the object’s `dryDamagedQuantity` field.'''

    dry_over_quantity = sgqlc.types.Field('IntFilter', graphql_name='dryOverQuantity')
    '''Filter by the object’s `dryOverQuantity` field.'''

    dry_other_quantity = sgqlc.types.Field('IntFilter', graphql_name='dryOtherQuantity')
    '''Filter by the object’s `dryOtherQuantity` field.'''

    dry_comment = sgqlc.types.Field('StringFilter', graphql_name='dryComment')
    '''Filter by the object’s `dryComment` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field('IntFilter', graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundTruckLogRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InboundTruckLogRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InboundTruckLogRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InboundTruckLogRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InboundTruckLogRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'inbound_order_id', 'customer_code', 'customer_id', 'cooler_quantity', 'cooler_shortage_quantity', 'cooler_damaged_quantity', 'cooler_over_quantity', 'cooler_other_quantity', 'cooler_comment', 'freezer_quantity', 'freezer_shortage_quantity', 'freezer_damaged_quantity', 'freezer_over_quantity', 'freezer_other_quantity', 'freezer_comment', 'dry_quantity', 'dry_shortage_quantity', 'dry_damaged_quantity', 'dry_over_quantity', 'dry_other_quantity', 'dry_comment', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    cooler_quantity = sgqlc.types.Field(Int, graphql_name='coolerQuantity')
    '''Cooler quantity for the truck'''

    cooler_shortage_quantity = sgqlc.types.Field(Int, graphql_name='coolerShortageQuantity')
    '''Cooler Shortage quantity for the truck'''

    cooler_damaged_quantity = sgqlc.types.Field(Int, graphql_name='coolerDamagedQuantity')
    '''Cooler Damaged quantity for the truck'''

    cooler_over_quantity = sgqlc.types.Field(Int, graphql_name='coolerOverQuantity')
    '''Cooler Over quantity for the truck'''

    cooler_other_quantity = sgqlc.types.Field(Int, graphql_name='coolerOtherQuantity')
    '''Cooler Other quantity for the truck'''

    cooler_comment = sgqlc.types.Field(String, graphql_name='coolerComment')
    '''Cooler comment for the truck'''

    freezer_quantity = sgqlc.types.Field(Int, graphql_name='freezerQuantity')
    '''Freezer quantity for the truck'''

    freezer_shortage_quantity = sgqlc.types.Field(Int, graphql_name='freezerShortageQuantity')
    '''Freezer Shortage quantity for the truck'''

    freezer_damaged_quantity = sgqlc.types.Field(Int, graphql_name='freezerDamagedQuantity')
    '''Freezer Damaged quantity for the truck'''

    freezer_over_quantity = sgqlc.types.Field(Int, graphql_name='freezerOverQuantity')
    '''Freezer Over quantity for the truck'''

    freezer_other_quantity = sgqlc.types.Field(Int, graphql_name='freezerOtherQuantity')
    '''Freezer Other quantity for the truck'''

    freezer_comment = sgqlc.types.Field(String, graphql_name='freezerComment')
    '''Freezer comment for the truck'''

    dry_quantity = sgqlc.types.Field(Int, graphql_name='dryQuantity')
    '''Dry quantity for the truck'''

    dry_shortage_quantity = sgqlc.types.Field(Int, graphql_name='dryShortageQuantity')
    '''Dry Shortage quantity for the truck'''

    dry_damaged_quantity = sgqlc.types.Field(Int, graphql_name='dryDamagedQuantity')
    '''Dry Damaged quantity for the truck'''

    dry_over_quantity = sgqlc.types.Field(Int, graphql_name='dryOverQuantity')
    '''Dry Over quantity for the truck'''

    dry_other_quantity = sgqlc.types.Field(Int, graphql_name='dryOtherQuantity')
    '''Dry Other quantity for the truck'''

    dry_comment = sgqlc.types.Field(String, graphql_name='dryComment')
    '''Dry comment for the truck'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class InboundTruckLogRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InboundTruckLogRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'inbound_order_id', 'customer_code', 'customer_id', 'cooler_quantity', 'cooler_shortage_quantity', 'cooler_damaged_quantity', 'cooler_over_quantity', 'cooler_other_quantity', 'cooler_comment', 'freezer_quantity', 'freezer_shortage_quantity', 'freezer_damaged_quantity', 'freezer_over_quantity', 'freezer_other_quantity', 'freezer_comment', 'dry_quantity', 'dry_shortage_quantity', 'dry_damaged_quantity', 'dry_over_quantity', 'dry_other_quantity', 'dry_comment', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    cooler_quantity = sgqlc.types.Field(Int, graphql_name='coolerQuantity')
    '''Cooler quantity for the truck'''

    cooler_shortage_quantity = sgqlc.types.Field(Int, graphql_name='coolerShortageQuantity')
    '''Cooler Shortage quantity for the truck'''

    cooler_damaged_quantity = sgqlc.types.Field(Int, graphql_name='coolerDamagedQuantity')
    '''Cooler Damaged quantity for the truck'''

    cooler_over_quantity = sgqlc.types.Field(Int, graphql_name='coolerOverQuantity')
    '''Cooler Over quantity for the truck'''

    cooler_other_quantity = sgqlc.types.Field(Int, graphql_name='coolerOtherQuantity')
    '''Cooler Other quantity for the truck'''

    cooler_comment = sgqlc.types.Field(String, graphql_name='coolerComment')
    '''Cooler comment for the truck'''

    freezer_quantity = sgqlc.types.Field(Int, graphql_name='freezerQuantity')
    '''Freezer quantity for the truck'''

    freezer_shortage_quantity = sgqlc.types.Field(Int, graphql_name='freezerShortageQuantity')
    '''Freezer Shortage quantity for the truck'''

    freezer_damaged_quantity = sgqlc.types.Field(Int, graphql_name='freezerDamagedQuantity')
    '''Freezer Damaged quantity for the truck'''

    freezer_over_quantity = sgqlc.types.Field(Int, graphql_name='freezerOverQuantity')
    '''Freezer Over quantity for the truck'''

    freezer_other_quantity = sgqlc.types.Field(Int, graphql_name='freezerOtherQuantity')
    '''Freezer Other quantity for the truck'''

    freezer_comment = sgqlc.types.Field(String, graphql_name='freezerComment')
    '''Freezer comment for the truck'''

    dry_quantity = sgqlc.types.Field(Int, graphql_name='dryQuantity')
    '''Dry quantity for the truck'''

    dry_shortage_quantity = sgqlc.types.Field(Int, graphql_name='dryShortageQuantity')
    '''Dry Shortage quantity for the truck'''

    dry_damaged_quantity = sgqlc.types.Field(Int, graphql_name='dryDamagedQuantity')
    '''Dry Damaged quantity for the truck'''

    dry_over_quantity = sgqlc.types.Field(Int, graphql_name='dryOverQuantity')
    '''Dry Over quantity for the truck'''

    dry_other_quantity = sgqlc.types.Field(Int, graphql_name='dryOtherQuantity')
    '''Dry Other quantity for the truck'''

    dry_comment = sgqlc.types.Field(String, graphql_name='dryComment')
    '''Dry comment for the truck'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class IntFilter(sgqlc.types.Input):
    '''A filter to be used against Int fields. All fields are combined
    with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(Int, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(Int, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(Int, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(Int, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(Int, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(Int, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(Int, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(Int, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class IntListFilter(sgqlc.types.Input):
    '''A filter to be used against Int List fields. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to', 'contains', 'contained_by', 'overlaps', 'any_equal_to', 'any_not_equal_to', 'any_less_than', 'any_less_than_or_equal_to', 'any_greater_than', 'any_greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    less_than = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''

    contains = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='contains')
    '''Contains the specified list of values.'''

    contained_by = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='containedBy')
    '''Contained by the specified list of values.'''

    overlaps = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='overlaps')
    '''Overlaps the specified list of values.'''

    any_equal_to = sgqlc.types.Field(Int, graphql_name='anyEqualTo')
    '''Any array item is equal to the specified value.'''

    any_not_equal_to = sgqlc.types.Field(Int, graphql_name='anyNotEqualTo')
    '''Any array item is not equal to the specified value.'''

    any_less_than = sgqlc.types.Field(Int, graphql_name='anyLessThan')
    '''Any array item is less than the specified value.'''

    any_less_than_or_equal_to = sgqlc.types.Field(Int, graphql_name='anyLessThanOrEqualTo')
    '''Any array item is less than or equal to the specified value.'''

    any_greater_than = sgqlc.types.Field(Int, graphql_name='anyGreaterThan')
    '''Any array item is greater than the specified value.'''

    any_greater_than_or_equal_to = sgqlc.types.Field(Int, graphql_name='anyGreaterThanOrEqualTo')
    '''Any array item is greater than or equal to the specified value.'''



class IntervalFilter(sgqlc.types.Input):
    '''A filter to be used against Interval fields. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field('IntervalInput', graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field('IntervalInput', graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field('IntervalInput', graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field('IntervalInput', graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('IntervalInput')), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('IntervalInput')), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field('IntervalInput', graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field('IntervalInput', graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field('IntervalInput', graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field('IntervalInput', graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class IntervalInput(sgqlc.types.Input):
    '''An interval of time that has passed where the smallest distinct
    unit is a second.
    '''
    __schema__ = base
    __field_names__ = ('seconds', 'minutes', 'hours', 'days', 'months', 'years')
    seconds = sgqlc.types.Field(Float, graphql_name='seconds')
    '''A quantity of seconds. This is the only non-integer field, as all
    the other fields will dump their overflow into a smaller unit of
    time. Intervals don’t have a smaller unit than seconds.
    '''

    minutes = sgqlc.types.Field(Int, graphql_name='minutes')
    '''A quantity of minutes.'''

    hours = sgqlc.types.Field(Int, graphql_name='hours')
    '''A quantity of hours.'''

    days = sgqlc.types.Field(Int, graphql_name='days')
    '''A quantity of days.'''

    months = sgqlc.types.Field(Int, graphql_name='months')
    '''A quantity of months.'''

    years = sgqlc.types.Field(Int, graphql_name='years')
    '''A quantity of years.'''



class InventoryAdjustmentCondition(sgqlc.types.Input):
    '''A condition to be used against `InventoryAdjustment` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'facility_id', 'customer_enterprise_id', 'adjustment_number', 'warehouse_customer_id', 'customer_id', 'customer_code', 'transaction_type', 'lot_id', 'item_code', 'item_id', 'adjustment_date', 'adjustment_type', 'adjustment_type_description', 'pallet_count_delta', 'quantity_delta', 'weight_uom', 'gross_weight_delta', 'net_weight_delta', 'comment', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_archived', 'lot_depleted_date')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Checks for equality with the object’s `adjustmentNumber` field.'''

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    transaction_type = sgqlc.types.Field(String, graphql_name='transactionType')
    '''Checks for equality with the object’s `transactionType` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    adjustment_date = sgqlc.types.Field(Datetime, graphql_name='adjustmentDate')
    '''Checks for equality with the object’s `adjustmentDate` field.'''

    adjustment_type = sgqlc.types.Field(String, graphql_name='adjustmentType')
    '''Checks for equality with the object’s `adjustmentType` field.'''

    adjustment_type_description = sgqlc.types.Field(String, graphql_name='adjustmentTypeDescription')
    '''Checks for equality with the object’s `adjustmentTypeDescription`
    field.
    '''

    pallet_count_delta = sgqlc.types.Field(Int, graphql_name='palletCountDelta')
    '''Checks for equality with the object’s `palletCountDelta` field.'''

    quantity_delta = sgqlc.types.Field(Float, graphql_name='quantityDelta')
    '''Checks for equality with the object’s `quantityDelta` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''

    gross_weight_delta = sgqlc.types.Field(Float, graphql_name='grossWeightDelta')
    '''Checks for equality with the object’s `grossWeightDelta` field.'''

    net_weight_delta = sgqlc.types.Field(Float, graphql_name='netWeightDelta')
    '''Checks for equality with the object’s `netWeightDelta` field.'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Checks for equality with the object’s `comment` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    lot_depleted_date = sgqlc.types.Field(Datetime, graphql_name='lotDepletedDate')
    '''Checks for equality with the object’s `lotDepletedDate` field.'''



class InventoryAdjustmentFilter(sgqlc.types.Input):
    '''A filter to be used against `InventoryAdjustment` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'facility_id', 'customer_enterprise_id', 'adjustment_number', 'warehouse_customer_id', 'customer_id', 'customer_code', 'transaction_type', 'lot_id', 'item_code', 'item_id', 'adjustment_date', 'adjustment_type', 'adjustment_type_description', 'pallet_count_delta', 'quantity_delta', 'weight_uom', 'gross_weight_delta', 'net_weight_delta', 'comment', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_archived', 'lot_depleted_date', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    adjustment_number = sgqlc.types.Field('StringFilter', graphql_name='adjustmentNumber')
    '''Filter by the object’s `adjustmentNumber` field.'''

    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    transaction_type = sgqlc.types.Field('StringFilter', graphql_name='transactionType')
    '''Filter by the object’s `transactionType` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    adjustment_date = sgqlc.types.Field(DatetimeFilter, graphql_name='adjustmentDate')
    '''Filter by the object’s `adjustmentDate` field.'''

    adjustment_type = sgqlc.types.Field('StringFilter', graphql_name='adjustmentType')
    '''Filter by the object’s `adjustmentType` field.'''

    adjustment_type_description = sgqlc.types.Field('StringFilter', graphql_name='adjustmentTypeDescription')
    '''Filter by the object’s `adjustmentTypeDescription` field.'''

    pallet_count_delta = sgqlc.types.Field(IntFilter, graphql_name='palletCountDelta')
    '''Filter by the object’s `palletCountDelta` field.'''

    quantity_delta = sgqlc.types.Field(FloatFilter, graphql_name='quantityDelta')
    '''Filter by the object’s `quantityDelta` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    gross_weight_delta = sgqlc.types.Field(FloatFilter, graphql_name='grossWeightDelta')
    '''Filter by the object’s `grossWeightDelta` field.'''

    net_weight_delta = sgqlc.types.Field(FloatFilter, graphql_name='netWeightDelta')
    '''Filter by the object’s `netWeightDelta` field.'''

    comment = sgqlc.types.Field('StringFilter', graphql_name='comment')
    '''Filter by the object’s `comment` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    lot_depleted_date = sgqlc.types.Field(DatetimeFilter, graphql_name='lotDepletedDate')
    '''Filter by the object’s `lotDepletedDate` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InventoryAdjustmentFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InventoryAdjustmentFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InventoryAdjustmentFilter', graphql_name='not')
    '''Negates the expression.'''



class InventoryAdjustmentsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InventoryAdjustmentsRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'adjustment_number', 'customer_code', 'transaction_type', 'item_code', 'net_pallets', 'adjustment_date', 'adjusted_quantity', 'adjustment_type', 'warehouse_order_number', 'line_number', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_archived', 'gross_weight', 'item_id', 'customer_id', 'comment', 'net_weight', 'lot_id', 'adjustment_type_description', 'net_weight_delta', 'gross_weight_delta', 'pallet_count_delta', 'quantity_delta', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Checks for equality with the object’s `adjustmentNumber` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    transaction_type = sgqlc.types.Field(String, graphql_name='transactionType')
    '''Checks for equality with the object’s `transactionType` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    net_pallets = sgqlc.types.Field(Int, graphql_name='netPallets')
    '''Checks for equality with the object’s `netPallets` field.'''

    adjustment_date = sgqlc.types.Field(Datetime, graphql_name='adjustmentDate')
    '''Checks for equality with the object’s `adjustmentDate` field.'''

    adjusted_quantity = sgqlc.types.Field(Float, graphql_name='adjustedQuantity')
    '''Checks for equality with the object’s `adjustedQuantity` field.'''

    adjustment_type = sgqlc.types.Field(String, graphql_name='adjustmentType')
    '''Checks for equality with the object’s `adjustmentType` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Checks for equality with the object’s `comment` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    adjustment_type_description = sgqlc.types.Field(String, graphql_name='adjustmentTypeDescription')
    '''Checks for equality with the object’s `adjustmentTypeDescription`
    field.
    '''

    net_weight_delta = sgqlc.types.Field(Float, graphql_name='netWeightDelta')
    '''Checks for equality with the object’s `netWeightDelta` field.'''

    gross_weight_delta = sgqlc.types.Field(Float, graphql_name='grossWeightDelta')
    '''Checks for equality with the object’s `grossWeightDelta` field.'''

    pallet_count_delta = sgqlc.types.Field(Int, graphql_name='palletCountDelta')
    '''Checks for equality with the object’s `palletCountDelta` field.'''

    quantity_delta = sgqlc.types.Field(Int, graphql_name='quantityDelta')
    '''Checks for equality with the object’s `quantityDelta` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class InventoryAdjustmentsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InventoryAdjustmentsRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'adjustment_number', 'customer_code', 'transaction_type', 'item_code', 'net_pallets', 'adjustment_date', 'adjusted_quantity', 'adjustment_type', 'warehouse_order_number', 'line_number', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_archived', 'gross_weight', 'item_id', 'customer_id', 'comment', 'net_weight', 'lot_id', 'adjustment_type_description', 'net_weight_delta', 'gross_weight_delta', 'pallet_count_delta', 'quantity_delta', 'weight_uom', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    adjustment_number = sgqlc.types.Field('StringFilter', graphql_name='adjustmentNumber')
    '''Filter by the object’s `adjustmentNumber` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    transaction_type = sgqlc.types.Field('StringFilter', graphql_name='transactionType')
    '''Filter by the object’s `transactionType` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    net_pallets = sgqlc.types.Field(IntFilter, graphql_name='netPallets')
    '''Filter by the object’s `netPallets` field.'''

    adjustment_date = sgqlc.types.Field(DatetimeFilter, graphql_name='adjustmentDate')
    '''Filter by the object’s `adjustmentDate` field.'''

    adjusted_quantity = sgqlc.types.Field(FloatFilter, graphql_name='adjustedQuantity')
    '''Filter by the object’s `adjustedQuantity` field.'''

    adjustment_type = sgqlc.types.Field('StringFilter', graphql_name='adjustmentType')
    '''Filter by the object’s `adjustmentType` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    comment = sgqlc.types.Field('StringFilter', graphql_name='comment')
    '''Filter by the object’s `comment` field.'''

    net_weight = sgqlc.types.Field(FloatFilter, graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    adjustment_type_description = sgqlc.types.Field('StringFilter', graphql_name='adjustmentTypeDescription')
    '''Filter by the object’s `adjustmentTypeDescription` field.'''

    net_weight_delta = sgqlc.types.Field(FloatFilter, graphql_name='netWeightDelta')
    '''Filter by the object’s `netWeightDelta` field.'''

    gross_weight_delta = sgqlc.types.Field(FloatFilter, graphql_name='grossWeightDelta')
    '''Filter by the object’s `grossWeightDelta` field.'''

    pallet_count_delta = sgqlc.types.Field(IntFilter, graphql_name='palletCountDelta')
    '''Filter by the object’s `palletCountDelta` field.'''

    quantity_delta = sgqlc.types.Field(IntFilter, graphql_name='quantityDelta')
    '''Filter by the object’s `quantityDelta` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InventoryAdjustmentsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InventoryAdjustmentsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InventoryAdjustmentsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InventoryAdjustmentsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InventoryAdjustmentsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'adjustment_number', 'customer_code', 'transaction_type', 'item_code', 'net_pallets', 'adjustment_date', 'adjusted_quantity', 'adjustment_type', 'warehouse_order_number', 'line_number', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_archived', 'gross_weight', 'item_id', 'customer_id', 'comment', 'net_weight', 'lot_id', 'adjustment_type_description', 'net_weight_delta', 'gross_weight_delta', 'pallet_count_delta', 'quantity_delta', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Adjustment number for the adjus'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    transaction_type = sgqlc.types.Field(String, graphql_name='transactionType')
    '''Transaction type for the adjus'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    net_pallets = sgqlc.types.Field(Int, graphql_name='netPallets')
    '''Net pallets for the adjus'''

    adjustment_date = sgqlc.types.Field(Datetime, graphql_name='adjustmentDate')
    '''Adjustment date for the adjus'''

    adjusted_quantity = sgqlc.types.Field(Float, graphql_name='adjustedQuantity')
    '''Adjusted quantity for the adjus'''

    adjustment_type = sgqlc.types.Field(String, graphql_name='adjustmentType')
    '''Adjustment type for the adjus'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Warehouse Order number for the adjus'''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product involved in the adjustment (in pounds)'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment comment for the adjus'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product involved in the adjustment (in pounds)'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    adjustment_type_description = sgqlc.types.Field(String, graphql_name='adjustmentTypeDescription')

    net_weight_delta = sgqlc.types.Field(Float, graphql_name='netWeightDelta')

    gross_weight_delta = sgqlc.types.Field(Float, graphql_name='grossWeightDelta')

    pallet_count_delta = sgqlc.types.Field(Int, graphql_name='palletCountDelta')

    quantity_delta = sgqlc.types.Field(Int, graphql_name='quantityDelta')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InventoryAdjustmentsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InventoryAdjustmentsRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'adjustment_number', 'customer_code', 'transaction_type', 'item_code', 'net_pallets', 'adjustment_date', 'adjusted_quantity', 'adjustment_type', 'warehouse_order_number', 'line_number', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_archived', 'gross_weight', 'item_id', 'customer_id', 'comment', 'net_weight', 'lot_id', 'adjustment_type_description', 'net_weight_delta', 'gross_weight_delta', 'pallet_count_delta', 'quantity_delta', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Adjustment number for the adjus'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    transaction_type = sgqlc.types.Field(String, graphql_name='transactionType')
    '''Transaction type for the adjus'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    net_pallets = sgqlc.types.Field(Int, graphql_name='netPallets')
    '''Net pallets for the adjus'''

    adjustment_date = sgqlc.types.Field(Datetime, graphql_name='adjustmentDate')
    '''Adjustment date for the adjus'''

    adjusted_quantity = sgqlc.types.Field(Float, graphql_name='adjustedQuantity')
    '''Adjusted quantity for the adjus'''

    adjustment_type = sgqlc.types.Field(String, graphql_name='adjustmentType')
    '''Adjustment type for the adjus'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Warehouse Order number for the adjus'''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product involved in the adjustment (in pounds)'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment comment for the adjus'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product involved in the adjustment (in pounds)'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    adjustment_type_description = sgqlc.types.Field(String, graphql_name='adjustmentTypeDescription')

    net_weight_delta = sgqlc.types.Field(Float, graphql_name='netWeightDelta')

    gross_weight_delta = sgqlc.types.Field(Float, graphql_name='grossWeightDelta')

    pallet_count_delta = sgqlc.types.Field(Int, graphql_name='palletCountDelta')

    quantity_delta = sgqlc.types.Field(Int, graphql_name='quantityDelta')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InventoryControlCondition(sgqlc.types.Input):
    '''A condition to be used against `InventoryControl` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'exception_id', 'operator_id', 'problem_time', 'work_type', 'warehouse_order_number', 'line_number', 'problem_description', 'pallet_code', 'assign_location', 'scan_location', 'location_audit', 'product_audit', 'pallet_audit', 'lot_audit', 'is_resolved', 'resolved_time', 'is_working', 'bol_number', 'quantity', 'audit_quantity', 'is_audited', 'created_at', 'updated_at', 'deleted_at', '_version', 'source_row_id', '_id')
    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    exception_id = sgqlc.types.Field(String, graphql_name='exceptionId')
    '''Checks for equality with the object’s `exceptionId` field.'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Checks for equality with the object’s `operatorId` field.'''

    problem_time = sgqlc.types.Field(Datetime, graphql_name='problemTime')
    '''Checks for equality with the object’s `problemTime` field.'''

    work_type = sgqlc.types.Field(String, graphql_name='workType')
    '''Checks for equality with the object’s `workType` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    problem_description = sgqlc.types.Field(String, graphql_name='problemDescription')
    '''Checks for equality with the object’s `problemDescription` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    assign_location = sgqlc.types.Field(String, graphql_name='assignLocation')
    '''Checks for equality with the object’s `assignLocation` field.'''

    scan_location = sgqlc.types.Field(String, graphql_name='scanLocation')
    '''Checks for equality with the object’s `scanLocation` field.'''

    location_audit = sgqlc.types.Field(Boolean, graphql_name='locationAudit')
    '''Checks for equality with the object’s `locationAudit` field.'''

    product_audit = sgqlc.types.Field(Boolean, graphql_name='productAudit')
    '''Checks for equality with the object’s `productAudit` field.'''

    pallet_audit = sgqlc.types.Field(Boolean, graphql_name='palletAudit')
    '''Checks for equality with the object’s `palletAudit` field.'''

    lot_audit = sgqlc.types.Field(Boolean, graphql_name='lotAudit')
    '''Checks for equality with the object’s `lotAudit` field.'''

    is_resolved = sgqlc.types.Field(Boolean, graphql_name='isResolved')
    '''Checks for equality with the object’s `isResolved` field.'''

    resolved_time = sgqlc.types.Field(Datetime, graphql_name='resolvedTime')
    '''Checks for equality with the object’s `resolvedTime` field.'''

    is_working = sgqlc.types.Field(Boolean, graphql_name='isWorking')
    '''Checks for equality with the object’s `isWorking` field.'''

    bol_number = sgqlc.types.Field(String, graphql_name='bolNumber')
    '''Checks for equality with the object’s `bolNumber` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    audit_quantity = sgqlc.types.Field(Int, graphql_name='auditQuantity')
    '''Checks for equality with the object’s `auditQuantity` field.'''

    is_audited = sgqlc.types.Field(Boolean, graphql_name='isAudited')
    '''Checks for equality with the object’s `isAudited` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class InventoryControlFilter(sgqlc.types.Input):
    '''A filter to be used against `InventoryControl` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'exception_id', 'operator_id', 'problem_time', 'work_type', 'warehouse_order_number', 'line_number', 'problem_description', 'pallet_code', 'assign_location', 'scan_location', 'location_audit', 'product_audit', 'pallet_audit', 'lot_audit', 'is_resolved', 'resolved_time', 'is_working', 'bol_number', 'quantity', 'audit_quantity', 'is_audited', 'created_at', 'updated_at', 'deleted_at', '_version', 'source_row_id', '_id', 'and_', 'or_', 'not_')
    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    exception_id = sgqlc.types.Field('StringFilter', graphql_name='exceptionId')
    '''Filter by the object’s `exceptionId` field.'''

    operator_id = sgqlc.types.Field('StringFilter', graphql_name='operatorId')
    '''Filter by the object’s `operatorId` field.'''

    problem_time = sgqlc.types.Field(DatetimeFilter, graphql_name='problemTime')
    '''Filter by the object’s `problemTime` field.'''

    work_type = sgqlc.types.Field('StringFilter', graphql_name='workType')
    '''Filter by the object’s `workType` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    problem_description = sgqlc.types.Field('StringFilter', graphql_name='problemDescription')
    '''Filter by the object’s `problemDescription` field.'''

    pallet_code = sgqlc.types.Field('StringFilter', graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    assign_location = sgqlc.types.Field('StringFilter', graphql_name='assignLocation')
    '''Filter by the object’s `assignLocation` field.'''

    scan_location = sgqlc.types.Field('StringFilter', graphql_name='scanLocation')
    '''Filter by the object’s `scanLocation` field.'''

    location_audit = sgqlc.types.Field(BooleanFilter, graphql_name='locationAudit')
    '''Filter by the object’s `locationAudit` field.'''

    product_audit = sgqlc.types.Field(BooleanFilter, graphql_name='productAudit')
    '''Filter by the object’s `productAudit` field.'''

    pallet_audit = sgqlc.types.Field(BooleanFilter, graphql_name='palletAudit')
    '''Filter by the object’s `palletAudit` field.'''

    lot_audit = sgqlc.types.Field(BooleanFilter, graphql_name='lotAudit')
    '''Filter by the object’s `lotAudit` field.'''

    is_resolved = sgqlc.types.Field(BooleanFilter, graphql_name='isResolved')
    '''Filter by the object’s `isResolved` field.'''

    resolved_time = sgqlc.types.Field(DatetimeFilter, graphql_name='resolvedTime')
    '''Filter by the object’s `resolvedTime` field.'''

    is_working = sgqlc.types.Field(BooleanFilter, graphql_name='isWorking')
    '''Filter by the object’s `isWorking` field.'''

    bol_number = sgqlc.types.Field('StringFilter', graphql_name='bolNumber')
    '''Filter by the object’s `bolNumber` field.'''

    quantity = sgqlc.types.Field(IntFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    audit_quantity = sgqlc.types.Field(IntFilter, graphql_name='auditQuantity')
    '''Filter by the object’s `auditQuantity` field.'''

    is_audited = sgqlc.types.Field(BooleanFilter, graphql_name='isAudited')
    '''Filter by the object’s `isAudited` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InventoryControlFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InventoryControlFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InventoryControlFilter', graphql_name='not')
    '''Negates the expression.'''



class InventoryControlRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InventoryControlRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'exception_id', 'operator_id', 'problem_time', 'work_type', 'warehouse_order_number', 'line_number', 'problem_description', 'pallet_code', 'assign_location', 'scan_location', 'location_audit', 'product_audit', 'pallet_audit', 'lot_audit', 'is_resolved', 'resolved_time', 'is_working', 'bol_number', 'quantity', 'audit_quantity', 'is_audited', 'created_at', 'updated_at', 'deleted_at', '_version', 'source_row_id', '_id', 'customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    exception_id = sgqlc.types.Field(String, graphql_name='exceptionId')
    '''Checks for equality with the object’s `exceptionId` field.'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Checks for equality with the object’s `operatorId` field.'''

    problem_time = sgqlc.types.Field(Datetime, graphql_name='problemTime')
    '''Checks for equality with the object’s `problemTime` field.'''

    work_type = sgqlc.types.Field(String, graphql_name='workType')
    '''Checks for equality with the object’s `workType` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    problem_description = sgqlc.types.Field(String, graphql_name='problemDescription')
    '''Checks for equality with the object’s `problemDescription` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    assign_location = sgqlc.types.Field(String, graphql_name='assignLocation')
    '''Checks for equality with the object’s `assignLocation` field.'''

    scan_location = sgqlc.types.Field(String, graphql_name='scanLocation')
    '''Checks for equality with the object’s `scanLocation` field.'''

    location_audit = sgqlc.types.Field(Boolean, graphql_name='locationAudit')
    '''Checks for equality with the object’s `locationAudit` field.'''

    product_audit = sgqlc.types.Field(Boolean, graphql_name='productAudit')
    '''Checks for equality with the object’s `productAudit` field.'''

    pallet_audit = sgqlc.types.Field(Boolean, graphql_name='palletAudit')
    '''Checks for equality with the object’s `palletAudit` field.'''

    lot_audit = sgqlc.types.Field(Boolean, graphql_name='lotAudit')
    '''Checks for equality with the object’s `lotAudit` field.'''

    is_resolved = sgqlc.types.Field(Boolean, graphql_name='isResolved')
    '''Checks for equality with the object’s `isResolved` field.'''

    resolved_time = sgqlc.types.Field(Datetime, graphql_name='resolvedTime')
    '''Checks for equality with the object’s `resolvedTime` field.'''

    is_working = sgqlc.types.Field(Boolean, graphql_name='isWorking')
    '''Checks for equality with the object’s `isWorking` field.'''

    bol_number = sgqlc.types.Field(String, graphql_name='bolNumber')
    '''Checks for equality with the object’s `bolNumber` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    audit_quantity = sgqlc.types.Field(Int, graphql_name='auditQuantity')
    '''Checks for equality with the object’s `auditQuantity` field.'''

    is_audited = sgqlc.types.Field(Boolean, graphql_name='isAudited')
    '''Checks for equality with the object’s `isAudited` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''



class InventoryControlRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InventoryControlRaw` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'exception_id', 'operator_id', 'problem_time', 'work_type', 'warehouse_order_number', 'line_number', 'problem_description', 'pallet_code', 'assign_location', 'scan_location', 'location_audit', 'product_audit', 'pallet_audit', 'lot_audit', 'is_resolved', 'resolved_time', 'is_working', 'bol_number', 'quantity', 'audit_quantity', 'is_audited', 'created_at', 'updated_at', 'deleted_at', '_version', 'source_row_id', '_id', 'customer_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    exception_id = sgqlc.types.Field('StringFilter', graphql_name='exceptionId')
    '''Filter by the object’s `exceptionId` field.'''

    operator_id = sgqlc.types.Field('StringFilter', graphql_name='operatorId')
    '''Filter by the object’s `operatorId` field.'''

    problem_time = sgqlc.types.Field(DatetimeFilter, graphql_name='problemTime')
    '''Filter by the object’s `problemTime` field.'''

    work_type = sgqlc.types.Field('StringFilter', graphql_name='workType')
    '''Filter by the object’s `workType` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    problem_description = sgqlc.types.Field('StringFilter', graphql_name='problemDescription')
    '''Filter by the object’s `problemDescription` field.'''

    pallet_code = sgqlc.types.Field('StringFilter', graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    assign_location = sgqlc.types.Field('StringFilter', graphql_name='assignLocation')
    '''Filter by the object’s `assignLocation` field.'''

    scan_location = sgqlc.types.Field('StringFilter', graphql_name='scanLocation')
    '''Filter by the object’s `scanLocation` field.'''

    location_audit = sgqlc.types.Field(BooleanFilter, graphql_name='locationAudit')
    '''Filter by the object’s `locationAudit` field.'''

    product_audit = sgqlc.types.Field(BooleanFilter, graphql_name='productAudit')
    '''Filter by the object’s `productAudit` field.'''

    pallet_audit = sgqlc.types.Field(BooleanFilter, graphql_name='palletAudit')
    '''Filter by the object’s `palletAudit` field.'''

    lot_audit = sgqlc.types.Field(BooleanFilter, graphql_name='lotAudit')
    '''Filter by the object’s `lotAudit` field.'''

    is_resolved = sgqlc.types.Field(BooleanFilter, graphql_name='isResolved')
    '''Filter by the object’s `isResolved` field.'''

    resolved_time = sgqlc.types.Field(DatetimeFilter, graphql_name='resolvedTime')
    '''Filter by the object’s `resolvedTime` field.'''

    is_working = sgqlc.types.Field(BooleanFilter, graphql_name='isWorking')
    '''Filter by the object’s `isWorking` field.'''

    bol_number = sgqlc.types.Field('StringFilter', graphql_name='bolNumber')
    '''Filter by the object’s `bolNumber` field.'''

    quantity = sgqlc.types.Field(IntFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    audit_quantity = sgqlc.types.Field(IntFilter, graphql_name='auditQuantity')
    '''Filter by the object’s `auditQuantity` field.'''

    is_audited = sgqlc.types.Field(BooleanFilter, graphql_name='isAudited')
    '''Filter by the object’s `isAudited` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InventoryControlRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InventoryControlRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InventoryControlRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InventoryControlRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InventoryControlRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'exception_id', 'operator_id', 'problem_time', 'work_type', 'warehouse_order_number', 'line_number', 'problem_description', 'pallet_code', 'assign_location', 'scan_location', 'location_audit', 'product_audit', 'pallet_audit', 'lot_audit', 'is_resolved', 'resolved_time', 'is_working', 'bol_number', 'quantity', 'audit_quantity', 'is_audited', 'created_at', 'updated_at', 'deleted_at', '_version', 'source_row_id', '_id', 'customer_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    exception_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='exceptionId')
    '''Exception id for the contr'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Operator id for the contr'''

    problem_time = sgqlc.types.Field(Datetime, graphql_name='problemTime')
    '''Problem time for the contr'''

    work_type = sgqlc.types.Field(String, graphql_name='workType')
    '''Work type for the contr'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Warehouse Order number for the contr'''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    problem_description = sgqlc.types.Field(String, graphql_name='problemDescription')
    '''Problem description for the contr'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    assign_location = sgqlc.types.Field(String, graphql_name='assignLocation')
    '''Assign location for the contr'''

    scan_location = sgqlc.types.Field(String, graphql_name='scanLocation')
    '''Scan location for the contr'''

    location_audit = sgqlc.types.Field(Boolean, graphql_name='locationAudit')
    '''Location audit for the contr'''

    product_audit = sgqlc.types.Field(Boolean, graphql_name='productAudit')
    '''Product audit for the contr'''

    pallet_audit = sgqlc.types.Field(Boolean, graphql_name='palletAudit')
    '''Pallet audit for the contr'''

    lot_audit = sgqlc.types.Field(Boolean, graphql_name='lotAudit')
    '''Lot audit for the contr'''

    is_resolved = sgqlc.types.Field(Boolean, graphql_name='isResolved')
    '''Is resolved for the contr'''

    resolved_time = sgqlc.types.Field(Datetime, graphql_name='resolvedTime')
    '''Resolved time for the contr'''

    is_working = sgqlc.types.Field(Boolean, graphql_name='isWorking')
    '''Is working for the contr'''

    bol_number = sgqlc.types.Field(String, graphql_name='bolNumber')
    '''Bol number for the contr'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases'''

    audit_quantity = sgqlc.types.Field(Int, graphql_name='auditQuantity')
    '''Audit quantity for the contr'''

    is_audited = sgqlc.types.Field(Boolean, graphql_name='isAudited')
    '''Is audited for the contr'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class InventoryControlRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InventoryControlRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'exception_id', 'operator_id', 'problem_time', 'work_type', 'warehouse_order_number', 'line_number', 'problem_description', 'pallet_code', 'assign_location', 'scan_location', 'location_audit', 'product_audit', 'pallet_audit', 'lot_audit', 'is_resolved', 'resolved_time', 'is_working', 'bol_number', 'quantity', 'audit_quantity', 'is_audited', 'created_at', 'updated_at', 'deleted_at', '_version', 'source_row_id', '_id', 'customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    exception_id = sgqlc.types.Field(String, graphql_name='exceptionId')
    '''Exception id for the contr'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Operator id for the contr'''

    problem_time = sgqlc.types.Field(Datetime, graphql_name='problemTime')
    '''Problem time for the contr'''

    work_type = sgqlc.types.Field(String, graphql_name='workType')
    '''Work type for the contr'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Warehouse Order number for the contr'''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    problem_description = sgqlc.types.Field(String, graphql_name='problemDescription')
    '''Problem description for the contr'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    assign_location = sgqlc.types.Field(String, graphql_name='assignLocation')
    '''Assign location for the contr'''

    scan_location = sgqlc.types.Field(String, graphql_name='scanLocation')
    '''Scan location for the contr'''

    location_audit = sgqlc.types.Field(Boolean, graphql_name='locationAudit')
    '''Location audit for the contr'''

    product_audit = sgqlc.types.Field(Boolean, graphql_name='productAudit')
    '''Product audit for the contr'''

    pallet_audit = sgqlc.types.Field(Boolean, graphql_name='palletAudit')
    '''Pallet audit for the contr'''

    lot_audit = sgqlc.types.Field(Boolean, graphql_name='lotAudit')
    '''Lot audit for the contr'''

    is_resolved = sgqlc.types.Field(Boolean, graphql_name='isResolved')
    '''Is resolved for the contr'''

    resolved_time = sgqlc.types.Field(Datetime, graphql_name='resolvedTime')
    '''Resolved time for the contr'''

    is_working = sgqlc.types.Field(Boolean, graphql_name='isWorking')
    '''Is working for the contr'''

    bol_number = sgqlc.types.Field(String, graphql_name='bolNumber')
    '''Bol number for the contr'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases'''

    audit_quantity = sgqlc.types.Field(Int, graphql_name='auditQuantity')
    '''Audit quantity for the contr'''

    is_audited = sgqlc.types.Field(Boolean, graphql_name='isAudited')
    '''Is audited for the contr'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class InventoryHoldHistoryRawCondition(sgqlc.types.Input):
    '''A condition to be used against `InventoryHoldHistoryRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'lot_code', 'lot_id', 'customer_code', 'customer_id', 'warehouse_license_plate_number', 'inventory_hold_date', 'inventory_type', 'previous_hold_code', 'changed_hold_code', 'comment', 'updated_by', 'owner_customer_code', 'owner_customer_id', 'quantity', 'committed_quantity', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Checks for equality with the object’s
    `warehouseLicensePlateNumber` field.
    '''

    inventory_hold_date = sgqlc.types.Field(Datetime, graphql_name='inventoryHoldDate')
    '''Checks for equality with the object’s `inventoryHoldDate` field.'''

    inventory_type = sgqlc.types.Field(String, graphql_name='inventoryType')
    '''Checks for equality with the object’s `inventoryType` field.'''

    previous_hold_code = sgqlc.types.Field(String, graphql_name='previousHoldCode')
    '''Checks for equality with the object’s `previousHoldCode` field.'''

    changed_hold_code = sgqlc.types.Field(String, graphql_name='changedHoldCode')
    '''Checks for equality with the object’s `changedHoldCode` field.'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Checks for equality with the object’s `comment` field.'''

    updated_by = sgqlc.types.Field(String, graphql_name='updatedBy')
    '''Checks for equality with the object’s `updatedBy` field.'''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Checks for equality with the object’s `ownerCustomerCode` field.'''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')
    '''Checks for equality with the object’s `ownerCustomerId` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Checks for equality with the object’s `committedQuantity` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class InventoryHoldHistoryRawFilter(sgqlc.types.Input):
    '''A filter to be used against `InventoryHoldHistoryRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'lot_code', 'lot_id', 'customer_code', 'customer_id', 'warehouse_license_plate_number', 'inventory_hold_date', 'inventory_type', 'previous_hold_code', 'changed_hold_code', 'comment', 'updated_by', 'owner_customer_code', 'owner_customer_id', 'quantity', 'committed_quantity', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    warehouse_license_plate_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseLicensePlateNumber')
    '''Filter by the object’s `warehouseLicensePlateNumber` field.'''

    inventory_hold_date = sgqlc.types.Field(DatetimeFilter, graphql_name='inventoryHoldDate')
    '''Filter by the object’s `inventoryHoldDate` field.'''

    inventory_type = sgqlc.types.Field('StringFilter', graphql_name='inventoryType')
    '''Filter by the object’s `inventoryType` field.'''

    previous_hold_code = sgqlc.types.Field('StringFilter', graphql_name='previousHoldCode')
    '''Filter by the object’s `previousHoldCode` field.'''

    changed_hold_code = sgqlc.types.Field('StringFilter', graphql_name='changedHoldCode')
    '''Filter by the object’s `changedHoldCode` field.'''

    comment = sgqlc.types.Field('StringFilter', graphql_name='comment')
    '''Filter by the object’s `comment` field.'''

    updated_by = sgqlc.types.Field('StringFilter', graphql_name='updatedBy')
    '''Filter by the object’s `updatedBy` field.'''

    owner_customer_code = sgqlc.types.Field('StringFilter', graphql_name='ownerCustomerCode')
    '''Filter by the object’s `ownerCustomerCode` field.'''

    owner_customer_id = sgqlc.types.Field('StringFilter', graphql_name='ownerCustomerId')
    '''Filter by the object’s `ownerCustomerId` field.'''

    quantity = sgqlc.types.Field(IntFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    committed_quantity = sgqlc.types.Field(IntFilter, graphql_name='committedQuantity')
    '''Filter by the object’s `committedQuantity` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InventoryHoldHistoryRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InventoryHoldHistoryRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('InventoryHoldHistoryRawFilter', graphql_name='not')
    '''Negates the expression.'''



class InventoryHoldHistoryRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `InventoryHoldHistoryRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'lot_code', 'lot_id', 'customer_code', 'customer_id', 'warehouse_license_plate_number', 'inventory_hold_date', 'inventory_type', 'previous_hold_code', 'changed_hold_code', 'comment', 'updated_by', 'owner_customer_code', 'owner_customer_id', 'quantity', 'committed_quantity', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Warehouse_License_Plate number for the hold_'''

    inventory_hold_date = sgqlc.types.Field(Datetime, graphql_name='inventoryHoldDate')
    '''Inventory Hold date for the hold_'''

    inventory_type = sgqlc.types.Field(String, graphql_name='inventoryType')
    '''Inventory type for the hold_'''

    previous_hold_code = sgqlc.types.Field(String, graphql_name='previousHoldCode')
    '''Previous Hold code for the hold_'''

    changed_hold_code = sgqlc.types.Field(String, graphql_name='changedHoldCode')
    '''Changed Hold code for the hold_'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment comment for the hold_'''

    updated_by = sgqlc.types.Field(String, graphql_name='updatedBy')
    '''Updated by for the hold_'''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')
    '''Owner Customer id for the hold_'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases added or removed from hold'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Committed quantity for the hold_'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class InventoryHoldHistoryRawPatch(sgqlc.types.Input):
    '''Represents an update to a `InventoryHoldHistoryRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'lot_code', 'lot_id', 'customer_code', 'customer_id', 'warehouse_license_plate_number', 'inventory_hold_date', 'inventory_type', 'previous_hold_code', 'changed_hold_code', 'comment', 'updated_by', 'owner_customer_code', 'owner_customer_id', 'quantity', 'committed_quantity', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Warehouse_License_Plate number for the hold_'''

    inventory_hold_date = sgqlc.types.Field(Datetime, graphql_name='inventoryHoldDate')
    '''Inventory Hold date for the hold_'''

    inventory_type = sgqlc.types.Field(String, graphql_name='inventoryType')
    '''Inventory type for the hold_'''

    previous_hold_code = sgqlc.types.Field(String, graphql_name='previousHoldCode')
    '''Previous Hold code for the hold_'''

    changed_hold_code = sgqlc.types.Field(String, graphql_name='changedHoldCode')
    '''Changed Hold code for the hold_'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment comment for the hold_'''

    updated_by = sgqlc.types.Field(String, graphql_name='updatedBy')
    '''Updated by for the hold_'''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')
    '''Owner Customer id for the hold_'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases added or removed from hold'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Committed quantity for the hold_'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class ItemCondition(sgqlc.types.Input):
    '''A condition to be used against `Item` object types. All fields are
    tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'billing_warehouse_customer_id', 'owner_warehouse_customer_id', 'customer_id', 'billing_customer_id', 'owner_customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'item_code', 'warehouse_facility_id', 'source_row_id', 'is_active', 'catch_weight_type', 'case_dimensions_uom', 'case_height', 'case_length', 'case_width', 'item_category', 'customer_code', 'description', 'high', 'max_acceptable_temperature', 'temperature_uom', 'is_stackable', 'max_stack_count', 'min_acceptable_temperature', 'net_weight', 'is_odor_sensitive', 'billing_customer_code', 'owner_customer_code', 'receive_on_hold_code', 'rotation_type', 'shelf_life_days', 'package_tare_weight', 'weight_uom', 'ti', 'item_uom', 'created_at', 'updated_at', 'deleted_at', '_version', 'product_code', '_id', 'is_product', 'room_type', 'freight_type', 'tonnage_group', 'shelf_life_on_delivery_days', 'is_warehouse_supply', 'quantity_per_pallet', 'supplier_product_code')
    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    billing_warehouse_customer_id = sgqlc.types.Field(String, graphql_name='billingWarehouseCustomerId')
    '''Checks for equality with the object’s `billingWarehouseCustomerId`
    field.
    '''

    owner_warehouse_customer_id = sgqlc.types.Field(String, graphql_name='ownerWarehouseCustomerId')
    '''Checks for equality with the object’s `ownerWarehouseCustomerId`
    field.
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    billing_customer_id = sgqlc.types.Field(String, graphql_name='billingCustomerId')
    '''Checks for equality with the object’s `billingCustomerId` field.'''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')
    '''Checks for equality with the object’s `ownerCustomerId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Checks for equality with the object’s `isActive` field.'''

    catch_weight_type = sgqlc.types.Field(String, graphql_name='catchWeightType')
    '''Checks for equality with the object’s `catchWeightType` field.'''

    case_dimensions_uom = sgqlc.types.Field(String, graphql_name='caseDimensionsUom')
    '''Checks for equality with the object’s `caseDimensionsUom` field.'''

    case_height = sgqlc.types.Field(Float, graphql_name='caseHeight')
    '''Checks for equality with the object’s `caseHeight` field.'''

    case_length = sgqlc.types.Field(Float, graphql_name='caseLength')
    '''Checks for equality with the object’s `caseLength` field.'''

    case_width = sgqlc.types.Field(Float, graphql_name='caseWidth')
    '''Checks for equality with the object’s `caseWidth` field.'''

    item_category = sgqlc.types.Field(String, graphql_name='itemCategory')
    '''Checks for equality with the object’s `itemCategory` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Checks for equality with the object’s `description` field.'''

    high = sgqlc.types.Field(Int, graphql_name='high')
    '''Checks for equality with the object’s `high` field.'''

    max_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='maxAcceptableTemperature')
    '''Checks for equality with the object’s `maxAcceptableTemperature`
    field.
    '''

    temperature_uom = sgqlc.types.Field(String, graphql_name='temperatureUom')
    '''Checks for equality with the object’s `temperatureUom` field.'''

    is_stackable = sgqlc.types.Field(Boolean, graphql_name='isStackable')
    '''Checks for equality with the object’s `isStackable` field.'''

    max_stack_count = sgqlc.types.Field(Int, graphql_name='maxStackCount')
    '''Checks for equality with the object’s `maxStackCount` field.'''

    min_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='minAcceptableTemperature')
    '''Checks for equality with the object’s `minAcceptableTemperature`
    field.
    '''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    is_odor_sensitive = sgqlc.types.Field(Boolean, graphql_name='isOdorSensitive')
    '''Checks for equality with the object’s `isOdorSensitive` field.'''

    billing_customer_code = sgqlc.types.Field(String, graphql_name='billingCustomerCode')
    '''Checks for equality with the object’s `billingCustomerCode` field.'''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Checks for equality with the object’s `ownerCustomerCode` field.'''

    receive_on_hold_code = sgqlc.types.Field(String, graphql_name='receiveOnHoldCode')
    '''Checks for equality with the object’s `receiveOnHoldCode` field.'''

    rotation_type = sgqlc.types.Field(String, graphql_name='rotationType')
    '''Checks for equality with the object’s `rotationType` field.'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    package_tare_weight = sgqlc.types.Field(Float, graphql_name='packageTareWeight')
    '''Checks for equality with the object’s `packageTareWeight` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''

    ti = sgqlc.types.Field(Int, graphql_name='ti')
    '''Checks for equality with the object’s `ti` field.'''

    item_uom = sgqlc.types.Field(String, graphql_name='itemUom')
    '''Checks for equality with the object’s `itemUom` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    product_code = sgqlc.types.Field(String, graphql_name='productCode')
    '''Checks for equality with the object’s `productCode` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    is_product = sgqlc.types.Field(Boolean, graphql_name='isProduct')
    '''Checks for equality with the object’s `isProduct` field.'''

    room_type = sgqlc.types.Field(String, graphql_name='roomType')
    '''Checks for equality with the object’s `roomType` field.'''

    freight_type = sgqlc.types.Field(String, graphql_name='freightType')
    '''Checks for equality with the object’s `freightType` field.'''

    tonnage_group = sgqlc.types.Field(String, graphql_name='tonnageGroup')
    '''Checks for equality with the object’s `tonnageGroup` field.'''

    shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='shelfLifeOnDeliveryDays')
    '''Checks for equality with the object’s `shelfLifeOnDeliveryDays`
    field.
    '''

    is_warehouse_supply = sgqlc.types.Field(Boolean, graphql_name='isWarehouseSupply')
    '''Checks for equality with the object’s `isWarehouseSupply` field.'''

    quantity_per_pallet = sgqlc.types.Field(Int, graphql_name='quantityPerPallet')
    '''Checks for equality with the object’s `quantityPerPallet` field.'''

    supplier_product_code = sgqlc.types.Field(String, graphql_name='supplierProductCode')
    '''Checks for equality with the object’s `supplierProductCode` field.'''



class ItemFilter(sgqlc.types.Input):
    '''A filter to be used against `Item` object types. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'billing_warehouse_customer_id', 'owner_warehouse_customer_id', 'customer_id', 'billing_customer_id', 'owner_customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'item_code', 'warehouse_facility_id', 'source_row_id', 'is_active', 'catch_weight_type', 'case_dimensions_uom', 'case_height', 'case_length', 'case_width', 'item_category', 'customer_code', 'description', 'high', 'max_acceptable_temperature', 'temperature_uom', 'is_stackable', 'max_stack_count', 'min_acceptable_temperature', 'net_weight', 'is_odor_sensitive', 'billing_customer_code', 'owner_customer_code', 'receive_on_hold_code', 'rotation_type', 'shelf_life_days', 'package_tare_weight', 'weight_uom', 'ti', 'item_uom', 'created_at', 'updated_at', 'deleted_at', '_version', 'product_code', '_id', 'is_product', 'room_type', 'freight_type', 'tonnage_group', 'shelf_life_on_delivery_days', 'is_warehouse_supply', 'quantity_per_pallet', 'supplier_product_code', 'and_', 'or_', 'not_')
    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    billing_warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='billingWarehouseCustomerId')
    '''Filter by the object’s `billingWarehouseCustomerId` field.'''

    owner_warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='ownerWarehouseCustomerId')
    '''Filter by the object’s `ownerWarehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    billing_customer_id = sgqlc.types.Field('StringFilter', graphql_name='billingCustomerId')
    '''Filter by the object’s `billingCustomerId` field.'''

    owner_customer_id = sgqlc.types.Field('StringFilter', graphql_name='ownerCustomerId')
    '''Filter by the object’s `ownerCustomerId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    is_active = sgqlc.types.Field(BooleanFilter, graphql_name='isActive')
    '''Filter by the object’s `isActive` field.'''

    catch_weight_type = sgqlc.types.Field('StringFilter', graphql_name='catchWeightType')
    '''Filter by the object’s `catchWeightType` field.'''

    case_dimensions_uom = sgqlc.types.Field('StringFilter', graphql_name='caseDimensionsUom')
    '''Filter by the object’s `caseDimensionsUom` field.'''

    case_height = sgqlc.types.Field(FloatFilter, graphql_name='caseHeight')
    '''Filter by the object’s `caseHeight` field.'''

    case_length = sgqlc.types.Field(FloatFilter, graphql_name='caseLength')
    '''Filter by the object’s `caseLength` field.'''

    case_width = sgqlc.types.Field(FloatFilter, graphql_name='caseWidth')
    '''Filter by the object’s `caseWidth` field.'''

    item_category = sgqlc.types.Field('StringFilter', graphql_name='itemCategory')
    '''Filter by the object’s `itemCategory` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    description = sgqlc.types.Field('StringFilter', graphql_name='description')
    '''Filter by the object’s `description` field.'''

    high = sgqlc.types.Field(IntFilter, graphql_name='high')
    '''Filter by the object’s `high` field.'''

    max_acceptable_temperature = sgqlc.types.Field(FloatFilter, graphql_name='maxAcceptableTemperature')
    '''Filter by the object’s `maxAcceptableTemperature` field.'''

    temperature_uom = sgqlc.types.Field('StringFilter', graphql_name='temperatureUom')
    '''Filter by the object’s `temperatureUom` field.'''

    is_stackable = sgqlc.types.Field(BooleanFilter, graphql_name='isStackable')
    '''Filter by the object’s `isStackable` field.'''

    max_stack_count = sgqlc.types.Field(IntFilter, graphql_name='maxStackCount')
    '''Filter by the object’s `maxStackCount` field.'''

    min_acceptable_temperature = sgqlc.types.Field(FloatFilter, graphql_name='minAcceptableTemperature')
    '''Filter by the object’s `minAcceptableTemperature` field.'''

    net_weight = sgqlc.types.Field(FloatFilter, graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    is_odor_sensitive = sgqlc.types.Field(BooleanFilter, graphql_name='isOdorSensitive')
    '''Filter by the object’s `isOdorSensitive` field.'''

    billing_customer_code = sgqlc.types.Field('StringFilter', graphql_name='billingCustomerCode')
    '''Filter by the object’s `billingCustomerCode` field.'''

    owner_customer_code = sgqlc.types.Field('StringFilter', graphql_name='ownerCustomerCode')
    '''Filter by the object’s `ownerCustomerCode` field.'''

    receive_on_hold_code = sgqlc.types.Field('StringFilter', graphql_name='receiveOnHoldCode')
    '''Filter by the object’s `receiveOnHoldCode` field.'''

    rotation_type = sgqlc.types.Field('StringFilter', graphql_name='rotationType')
    '''Filter by the object’s `rotationType` field.'''

    shelf_life_days = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    package_tare_weight = sgqlc.types.Field(FloatFilter, graphql_name='packageTareWeight')
    '''Filter by the object’s `packageTareWeight` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    ti = sgqlc.types.Field(IntFilter, graphql_name='ti')
    '''Filter by the object’s `ti` field.'''

    item_uom = sgqlc.types.Field('StringFilter', graphql_name='itemUom')
    '''Filter by the object’s `itemUom` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    product_code = sgqlc.types.Field('StringFilter', graphql_name='productCode')
    '''Filter by the object’s `productCode` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    is_product = sgqlc.types.Field(BooleanFilter, graphql_name='isProduct')
    '''Filter by the object’s `isProduct` field.'''

    room_type = sgqlc.types.Field('StringFilter', graphql_name='roomType')
    '''Filter by the object’s `roomType` field.'''

    freight_type = sgqlc.types.Field('StringFilter', graphql_name='freightType')
    '''Filter by the object’s `freightType` field.'''

    tonnage_group = sgqlc.types.Field('StringFilter', graphql_name='tonnageGroup')
    '''Filter by the object’s `tonnageGroup` field.'''

    shelf_life_on_delivery_days = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeOnDeliveryDays')
    '''Filter by the object’s `shelfLifeOnDeliveryDays` field.'''

    is_warehouse_supply = sgqlc.types.Field(BooleanFilter, graphql_name='isWarehouseSupply')
    '''Filter by the object’s `isWarehouseSupply` field.'''

    quantity_per_pallet = sgqlc.types.Field(IntFilter, graphql_name='quantityPerPallet')
    '''Filter by the object’s `quantityPerPallet` field.'''

    supplier_product_code = sgqlc.types.Field('StringFilter', graphql_name='supplierProductCode')
    '''Filter by the object’s `supplierProductCode` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ItemFilter', graphql_name='not')
    '''Negates the expression.'''



class ItemFreezeTimeCondition(sgqlc.types.Input):
    '''A condition to be used against `ItemFreezeTime` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'wms_item_id', 'freeze_hours', 'for_blast_cell_type_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    wms_item_id = sgqlc.types.Field(String, graphql_name='wmsItemId')
    '''Checks for equality with the object’s `wmsItemId` field.'''

    freeze_hours = sgqlc.types.Field(Float, graphql_name='freezeHours')
    '''Checks for equality with the object’s `freezeHours` field.'''

    for_blast_cell_type_id = sgqlc.types.Field(String, graphql_name='forBlastCellTypeId')
    '''Checks for equality with the object’s `forBlastCellTypeId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class ItemFreezeTimeFilter(sgqlc.types.Input):
    '''A filter to be used against `ItemFreezeTime` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'wms_item_id', 'freeze_hours', 'for_blast_cell_type_id', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('UUIDFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    wms_item_id = sgqlc.types.Field('StringFilter', graphql_name='wmsItemId')
    '''Filter by the object’s `wmsItemId` field.'''

    freeze_hours = sgqlc.types.Field(FloatFilter, graphql_name='freezeHours')
    '''Filter by the object’s `freezeHours` field.'''

    for_blast_cell_type_id = sgqlc.types.Field('StringFilter', graphql_name='forBlastCellTypeId')
    '''Filter by the object’s `forBlastCellTypeId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemFreezeTimeFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemFreezeTimeFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ItemFreezeTimeFilter', graphql_name='not')
    '''Negates the expression.'''



class ItemFreezeTimeInput(sgqlc.types.Input):
    '''An input for mutations affecting `ItemFreezeTime`'''
    __schema__ = base
    __field_names__ = ('id', 'wms_item_id', 'freeze_hours', 'for_blast_cell_type_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    wms_item_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsItemId')

    freeze_hours = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='freezeHours')

    for_blast_cell_type_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='forBlastCellTypeId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class ItemFreezeTimePatch(sgqlc.types.Input):
    '''Represents an update to a `ItemFreezeTime`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'wms_item_id', 'freeze_hours', 'for_blast_cell_type_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    wms_item_id = sgqlc.types.Field(String, graphql_name='wmsItemId')

    freeze_hours = sgqlc.types.Field(Float, graphql_name='freezeHours')

    for_blast_cell_type_id = sgqlc.types.Field(String, graphql_name='forBlastCellTypeId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class ItemReferenceCodeCondition(sgqlc.types.Input):
    '''A condition to be used against `ItemReferenceCode` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'item_id', 'item_code', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Checks for equality with the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Checks for equality with the object’s `referenceValue` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''



class ItemReferenceCodeFilter(sgqlc.types.Input):
    '''A filter to be used against `ItemReferenceCode` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'item_id', 'item_code', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    reference_type = sgqlc.types.Field('StringFilter', graphql_name='referenceType')
    '''Filter by the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field('StringFilter', graphql_name='referenceValue')
    '''Filter by the object’s `referenceValue` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemReferenceCodeFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemReferenceCodeFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ItemReferenceCodeFilter', graphql_name='not')
    '''Negates the expression.'''



class ItemReferenceCodeInput(sgqlc.types.Input):
    '''An input for mutations affecting `ItemReferenceCode`'''
    __schema__ = base
    __field_names__ = ('id', 'item_id', 'item_code', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(String, graphql_name='id')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')



class ItemReferenceCodesRawCondition(sgqlc.types.Input):
    '''A condition to be used against `ItemReferenceCodesRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('item_code', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', 'id', 'item_id', '_id', 'warehouse_facility_id')
    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Checks for equality with the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Checks for equality with the object’s `referenceValue` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''



class ItemReferenceCodesRawFilter(sgqlc.types.Input):
    '''A filter to be used against `ItemReferenceCodesRaw` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('item_code', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', 'id', 'item_id', '_id', 'warehouse_facility_id', 'and_', 'or_', 'not_')
    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    reference_type = sgqlc.types.Field('StringFilter', graphql_name='referenceType')
    '''Filter by the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field('StringFilter', graphql_name='referenceValue')
    '''Filter by the object’s `referenceValue` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemReferenceCodesRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemReferenceCodesRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ItemReferenceCodesRawFilter', graphql_name='not')
    '''Negates the expression.'''



class ItemReferenceCodesRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `ItemReferenceCodesRaw`'''
    __schema__ = base
    __field_names__ = ('item_code', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', 'id', 'item_id', '_id', 'warehouse_facility_id')
    item_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product'''

    reference_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='referenceType')
    '''Reference type for the refer'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Reference value for the refer'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''



class ItemReferenceCodesRawPatch(sgqlc.types.Input):
    '''Represents an update to a `ItemReferenceCodesRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('item_code', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', 'id', 'item_id', '_id', 'warehouse_facility_id')
    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product'''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Reference type for the refer'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Reference value for the refer'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''



class ItemShortCategoryNameCondition(sgqlc.types.Input):
    '''A condition to be used against `ItemShortCategoryName` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'wms_item_id', 'label', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    wms_item_id = sgqlc.types.Field(String, graphql_name='wmsItemId')
    '''Checks for equality with the object’s `wmsItemId` field.'''

    label = sgqlc.types.Field(String, graphql_name='label')
    '''Checks for equality with the object’s `label` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class ItemShortCategoryNameFilter(sgqlc.types.Input):
    '''A filter to be used against `ItemShortCategoryName` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'wms_item_id', 'label', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('UUIDFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    wms_item_id = sgqlc.types.Field('StringFilter', graphql_name='wmsItemId')
    '''Filter by the object’s `wmsItemId` field.'''

    label = sgqlc.types.Field('StringFilter', graphql_name='label')
    '''Filter by the object’s `label` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemShortCategoryNameFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemShortCategoryNameFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ItemShortCategoryNameFilter', graphql_name='not')
    '''Negates the expression.'''



class ItemShortCategoryNameInput(sgqlc.types.Input):
    '''An input for mutations affecting `ItemShortCategoryName`'''
    __schema__ = base
    __field_names__ = ('id', 'wms_item_id', 'label', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    wms_item_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsItemId')

    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='label')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class ItemShortCategoryNamePatch(sgqlc.types.Input):
    '''Represents an update to a `ItemShortCategoryName`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'wms_item_id', 'label', 'created_at', 'updated_at')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    wms_item_id = sgqlc.types.Field(String, graphql_name='wmsItemId')

    label = sgqlc.types.Field(String, graphql_name='label')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class ItemsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `ItemsRaw` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'item_code', 'warehouse_facility_id', 'source_row_id', 'is_active', 'catch_weight_type', 'case_dimensions_uom', 'case_height', 'case_length', 'case_width', 'item_category', 'customer_code', 'description', 'high', 'max_acceptable_temperature', 'temperature_uom', 'is_stackable', 'max_stack_count', 'min_acceptable_temperature', 'net_weight', 'is_odor_sensitive', 'billing_customer_code', 'owner_customer_code', 'receive_on_hold_code', 'rotation_type', 'shelf_life_days', 'package_tare_weight', 'weight_uom', 'ti', 'item_uom', 'created_at', 'updated_at', 'deleted_at', '_version', 'product_code', '_id', 'id', 'is_product', 'room_type', 'freight_type', 'tonnage_group', 'shelf_life_after_delivery_override', 'shelf_life_on_delivery_days', 'is_warehouse_supply', 'quantity_per_pallet', 'customer_id', 'billing_customer_id', 'owner_customer_id', 'best_by_date_type', 'code_date_type', 'case_cube', 'item_category_description', 'is_expiry_date_control', 'is_capture_production_date', 'universal_product_code', 'supplier_product_code')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Checks for equality with the object’s `isActive` field.'''

    catch_weight_type = sgqlc.types.Field(String, graphql_name='catchWeightType')
    '''Checks for equality with the object’s `catchWeightType` field.'''

    case_dimensions_uom = sgqlc.types.Field(String, graphql_name='caseDimensionsUom')
    '''Checks for equality with the object’s `caseDimensionsUom` field.'''

    case_height = sgqlc.types.Field(Float, graphql_name='caseHeight')
    '''Checks for equality with the object’s `caseHeight` field.'''

    case_length = sgqlc.types.Field(Float, graphql_name='caseLength')
    '''Checks for equality with the object’s `caseLength` field.'''

    case_width = sgqlc.types.Field(Float, graphql_name='caseWidth')
    '''Checks for equality with the object’s `caseWidth` field.'''

    item_category = sgqlc.types.Field(String, graphql_name='itemCategory')
    '''Checks for equality with the object’s `itemCategory` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Checks for equality with the object’s `description` field.'''

    high = sgqlc.types.Field(Int, graphql_name='high')
    '''Checks for equality with the object’s `high` field.'''

    max_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='maxAcceptableTemperature')
    '''Checks for equality with the object’s `maxAcceptableTemperature`
    field.
    '''

    temperature_uom = sgqlc.types.Field(String, graphql_name='temperatureUom')
    '''Checks for equality with the object’s `temperatureUom` field.'''

    is_stackable = sgqlc.types.Field(Boolean, graphql_name='isStackable')
    '''Checks for equality with the object’s `isStackable` field.'''

    max_stack_count = sgqlc.types.Field(Int, graphql_name='maxStackCount')
    '''Checks for equality with the object’s `maxStackCount` field.'''

    min_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='minAcceptableTemperature')
    '''Checks for equality with the object’s `minAcceptableTemperature`
    field.
    '''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    is_odor_sensitive = sgqlc.types.Field(Boolean, graphql_name='isOdorSensitive')
    '''Checks for equality with the object’s `isOdorSensitive` field.'''

    billing_customer_code = sgqlc.types.Field(String, graphql_name='billingCustomerCode')
    '''Checks for equality with the object’s `billingCustomerCode` field.'''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Checks for equality with the object’s `ownerCustomerCode` field.'''

    receive_on_hold_code = sgqlc.types.Field(String, graphql_name='receiveOnHoldCode')
    '''Checks for equality with the object’s `receiveOnHoldCode` field.'''

    rotation_type = sgqlc.types.Field(String, graphql_name='rotationType')
    '''Checks for equality with the object’s `rotationType` field.'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    package_tare_weight = sgqlc.types.Field(Float, graphql_name='packageTareWeight')
    '''Checks for equality with the object’s `packageTareWeight` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''

    ti = sgqlc.types.Field(Int, graphql_name='ti')
    '''Checks for equality with the object’s `ti` field.'''

    item_uom = sgqlc.types.Field(String, graphql_name='itemUom')
    '''Checks for equality with the object’s `itemUom` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    product_code = sgqlc.types.Field(String, graphql_name='productCode')
    '''Checks for equality with the object’s `productCode` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    is_product = sgqlc.types.Field(Boolean, graphql_name='isProduct')
    '''Checks for equality with the object’s `isProduct` field.'''

    room_type = sgqlc.types.Field(String, graphql_name='roomType')
    '''Checks for equality with the object’s `roomType` field.'''

    freight_type = sgqlc.types.Field(String, graphql_name='freightType')
    '''Checks for equality with the object’s `freightType` field.'''

    tonnage_group = sgqlc.types.Field(String, graphql_name='tonnageGroup')
    '''Checks for equality with the object’s `tonnageGroup` field.'''

    shelf_life_after_delivery_override = sgqlc.types.Field(Int, graphql_name='shelfLifeAfterDeliveryOverride')
    '''Checks for equality with the object’s
    `shelfLifeAfterDeliveryOverride` field.
    '''

    shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='shelfLifeOnDeliveryDays')
    '''Checks for equality with the object’s `shelfLifeOnDeliveryDays`
    field.
    '''

    is_warehouse_supply = sgqlc.types.Field(Boolean, graphql_name='isWarehouseSupply')
    '''Checks for equality with the object’s `isWarehouseSupply` field.'''

    quantity_per_pallet = sgqlc.types.Field(Int, graphql_name='quantityPerPallet')
    '''Checks for equality with the object’s `quantityPerPallet` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    billing_customer_id = sgqlc.types.Field(String, graphql_name='billingCustomerId')
    '''Checks for equality with the object’s `billingCustomerId` field.'''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')
    '''Checks for equality with the object’s `ownerCustomerId` field.'''

    best_by_date_type = sgqlc.types.Field(String, graphql_name='bestByDateType')
    '''Checks for equality with the object’s `bestByDateType` field.'''

    code_date_type = sgqlc.types.Field(String, graphql_name='codeDateType')
    '''Checks for equality with the object’s `codeDateType` field.'''

    case_cube = sgqlc.types.Field(Float, graphql_name='caseCube')
    '''Checks for equality with the object’s `caseCube` field.'''

    item_category_description = sgqlc.types.Field(String, graphql_name='itemCategoryDescription')
    '''Checks for equality with the object’s `itemCategoryDescription`
    field.
    '''

    is_expiry_date_control = sgqlc.types.Field(Boolean, graphql_name='isExpiryDateControl')
    '''Checks for equality with the object’s `isExpiryDateControl` field.'''

    is_capture_production_date = sgqlc.types.Field(Boolean, graphql_name='isCaptureProductionDate')
    '''Checks for equality with the object’s `isCaptureProductionDate`
    field.
    '''

    universal_product_code = sgqlc.types.Field(String, graphql_name='universalProductCode')
    '''Checks for equality with the object’s `universalProductCode`
    field.
    '''

    supplier_product_code = sgqlc.types.Field(String, graphql_name='supplierProductCode')
    '''Checks for equality with the object’s `supplierProductCode` field.'''



class ItemsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `ItemsRaw` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'item_code', 'warehouse_facility_id', 'source_row_id', 'is_active', 'catch_weight_type', 'case_dimensions_uom', 'case_height', 'case_length', 'case_width', 'item_category', 'customer_code', 'description', 'high', 'max_acceptable_temperature', 'temperature_uom', 'is_stackable', 'max_stack_count', 'min_acceptable_temperature', 'net_weight', 'is_odor_sensitive', 'billing_customer_code', 'owner_customer_code', 'receive_on_hold_code', 'rotation_type', 'shelf_life_days', 'package_tare_weight', 'weight_uom', 'ti', 'item_uom', 'created_at', 'updated_at', 'deleted_at', '_version', 'product_code', '_id', 'id', 'is_product', 'room_type', 'freight_type', 'tonnage_group', 'shelf_life_after_delivery_override', 'shelf_life_on_delivery_days', 'is_warehouse_supply', 'quantity_per_pallet', 'customer_id', 'billing_customer_id', 'owner_customer_id', 'best_by_date_type', 'code_date_type', 'case_cube', 'item_category_description', 'is_expiry_date_control', 'is_capture_production_date', 'universal_product_code', 'supplier_product_code', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    is_active = sgqlc.types.Field(BooleanFilter, graphql_name='isActive')
    '''Filter by the object’s `isActive` field.'''

    catch_weight_type = sgqlc.types.Field('StringFilter', graphql_name='catchWeightType')
    '''Filter by the object’s `catchWeightType` field.'''

    case_dimensions_uom = sgqlc.types.Field('StringFilter', graphql_name='caseDimensionsUom')
    '''Filter by the object’s `caseDimensionsUom` field.'''

    case_height = sgqlc.types.Field(FloatFilter, graphql_name='caseHeight')
    '''Filter by the object’s `caseHeight` field.'''

    case_length = sgqlc.types.Field(FloatFilter, graphql_name='caseLength')
    '''Filter by the object’s `caseLength` field.'''

    case_width = sgqlc.types.Field(FloatFilter, graphql_name='caseWidth')
    '''Filter by the object’s `caseWidth` field.'''

    item_category = sgqlc.types.Field('StringFilter', graphql_name='itemCategory')
    '''Filter by the object’s `itemCategory` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    description = sgqlc.types.Field('StringFilter', graphql_name='description')
    '''Filter by the object’s `description` field.'''

    high = sgqlc.types.Field(IntFilter, graphql_name='high')
    '''Filter by the object’s `high` field.'''

    max_acceptable_temperature = sgqlc.types.Field(FloatFilter, graphql_name='maxAcceptableTemperature')
    '''Filter by the object’s `maxAcceptableTemperature` field.'''

    temperature_uom = sgqlc.types.Field('StringFilter', graphql_name='temperatureUom')
    '''Filter by the object’s `temperatureUom` field.'''

    is_stackable = sgqlc.types.Field(BooleanFilter, graphql_name='isStackable')
    '''Filter by the object’s `isStackable` field.'''

    max_stack_count = sgqlc.types.Field(IntFilter, graphql_name='maxStackCount')
    '''Filter by the object’s `maxStackCount` field.'''

    min_acceptable_temperature = sgqlc.types.Field(FloatFilter, graphql_name='minAcceptableTemperature')
    '''Filter by the object’s `minAcceptableTemperature` field.'''

    net_weight = sgqlc.types.Field(FloatFilter, graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    is_odor_sensitive = sgqlc.types.Field(BooleanFilter, graphql_name='isOdorSensitive')
    '''Filter by the object’s `isOdorSensitive` field.'''

    billing_customer_code = sgqlc.types.Field('StringFilter', graphql_name='billingCustomerCode')
    '''Filter by the object’s `billingCustomerCode` field.'''

    owner_customer_code = sgqlc.types.Field('StringFilter', graphql_name='ownerCustomerCode')
    '''Filter by the object’s `ownerCustomerCode` field.'''

    receive_on_hold_code = sgqlc.types.Field('StringFilter', graphql_name='receiveOnHoldCode')
    '''Filter by the object’s `receiveOnHoldCode` field.'''

    rotation_type = sgqlc.types.Field('StringFilter', graphql_name='rotationType')
    '''Filter by the object’s `rotationType` field.'''

    shelf_life_days = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    package_tare_weight = sgqlc.types.Field(FloatFilter, graphql_name='packageTareWeight')
    '''Filter by the object’s `packageTareWeight` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    ti = sgqlc.types.Field(IntFilter, graphql_name='ti')
    '''Filter by the object’s `ti` field.'''

    item_uom = sgqlc.types.Field('StringFilter', graphql_name='itemUom')
    '''Filter by the object’s `itemUom` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    product_code = sgqlc.types.Field('StringFilter', graphql_name='productCode')
    '''Filter by the object’s `productCode` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    is_product = sgqlc.types.Field(BooleanFilter, graphql_name='isProduct')
    '''Filter by the object’s `isProduct` field.'''

    room_type = sgqlc.types.Field('StringFilter', graphql_name='roomType')
    '''Filter by the object’s `roomType` field.'''

    freight_type = sgqlc.types.Field('StringFilter', graphql_name='freightType')
    '''Filter by the object’s `freightType` field.'''

    tonnage_group = sgqlc.types.Field('StringFilter', graphql_name='tonnageGroup')
    '''Filter by the object’s `tonnageGroup` field.'''

    shelf_life_after_delivery_override = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeAfterDeliveryOverride')
    '''Filter by the object’s `shelfLifeAfterDeliveryOverride` field.'''

    shelf_life_on_delivery_days = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeOnDeliveryDays')
    '''Filter by the object’s `shelfLifeOnDeliveryDays` field.'''

    is_warehouse_supply = sgqlc.types.Field(BooleanFilter, graphql_name='isWarehouseSupply')
    '''Filter by the object’s `isWarehouseSupply` field.'''

    quantity_per_pallet = sgqlc.types.Field(IntFilter, graphql_name='quantityPerPallet')
    '''Filter by the object’s `quantityPerPallet` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    billing_customer_id = sgqlc.types.Field('StringFilter', graphql_name='billingCustomerId')
    '''Filter by the object’s `billingCustomerId` field.'''

    owner_customer_id = sgqlc.types.Field('StringFilter', graphql_name='ownerCustomerId')
    '''Filter by the object’s `ownerCustomerId` field.'''

    best_by_date_type = sgqlc.types.Field('StringFilter', graphql_name='bestByDateType')
    '''Filter by the object’s `bestByDateType` field.'''

    code_date_type = sgqlc.types.Field('StringFilter', graphql_name='codeDateType')
    '''Filter by the object’s `codeDateType` field.'''

    case_cube = sgqlc.types.Field(FloatFilter, graphql_name='caseCube')
    '''Filter by the object’s `caseCube` field.'''

    item_category_description = sgqlc.types.Field('StringFilter', graphql_name='itemCategoryDescription')
    '''Filter by the object’s `itemCategoryDescription` field.'''

    is_expiry_date_control = sgqlc.types.Field(BooleanFilter, graphql_name='isExpiryDateControl')
    '''Filter by the object’s `isExpiryDateControl` field.'''

    is_capture_production_date = sgqlc.types.Field(BooleanFilter, graphql_name='isCaptureProductionDate')
    '''Filter by the object’s `isCaptureProductionDate` field.'''

    universal_product_code = sgqlc.types.Field('StringFilter', graphql_name='universalProductCode')
    '''Filter by the object’s `universalProductCode` field.'''

    supplier_product_code = sgqlc.types.Field('StringFilter', graphql_name='supplierProductCode')
    '''Filter by the object’s `supplierProductCode` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ItemsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('ItemsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class ItemsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `ItemsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'item_code', 'warehouse_facility_id', 'source_row_id', 'is_active', 'catch_weight_type', 'case_dimensions_uom', 'case_height', 'case_length', 'case_width', 'item_category', 'customer_code', 'description', 'high', 'max_acceptable_temperature', 'temperature_uom', 'is_stackable', 'max_stack_count', 'min_acceptable_temperature', 'net_weight', 'is_odor_sensitive', 'billing_customer_code', 'owner_customer_code', 'receive_on_hold_code', 'rotation_type', 'shelf_life_days', 'package_tare_weight', 'weight_uom', 'ti', 'item_uom', 'created_at', 'updated_at', 'deleted_at', '_version', 'product_code', '_id', 'id', 'is_product', 'room_type', 'freight_type', 'tonnage_group', 'shelf_life_after_delivery_override', 'shelf_life_on_delivery_days', 'is_warehouse_supply', 'quantity_per_pallet', 'customer_id', 'billing_customer_id', 'owner_customer_id', 'best_by_date_type', 'code_date_type', 'case_cube', 'item_category_description', 'is_expiry_date_control', 'is_capture_production_date', 'universal_product_code', 'supplier_product_code')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    item_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Flag for whether this item master entry is active in the source
    system
    '''

    catch_weight_type = sgqlc.types.Field(String, graphql_name='catchWeightType')
    '''Defines when catch weights apply (Possible values: inbound_only,
    outbound_only, inbound_outbound)
    '''

    case_dimensions_uom = sgqlc.types.Field(String, graphql_name='caseDimensionsUom')
    '''Unit of measure for case measurements used by this item (inches or
    centimeters)
    '''

    case_height = sgqlc.types.Field(Float, graphql_name='caseHeight')
    '''Height of the case'''

    case_length = sgqlc.types.Field(Float, graphql_name='caseLength')
    '''Length of the case'''

    case_width = sgqlc.types.Field(Float, graphql_name='caseWidth')
    '''Width of the case'''

    item_category = sgqlc.types.Field(String, graphql_name='itemCategory')
    '''Item category or product group description'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Text description of the item as provided by the customer'''

    high = sgqlc.types.Field(Int, graphql_name='high')
    '''How many layers of cases can be put on a typical pallet'''

    max_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='maxAcceptableTemperature')
    '''Maximum temperature for the product before it fails quality
    control
    '''

    temperature_uom = sgqlc.types.Field(String, graphql_name='temperatureUom')
    '''Unit of measure used by this item (fahrenheit or celsius)'''

    is_stackable = sgqlc.types.Field(Boolean, graphql_name='isStackable')
    '''Flag for whether pallets containing this item may be stacked'''

    max_stack_count = sgqlc.types.Field(Int, graphql_name='maxStackCount')
    '''(unused)'''

    min_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='minAcceptableTemperature')
    '''Minimum temperature for the product before it fails quality
    control
    '''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the item (in pounds)'''

    is_odor_sensitive = sgqlc.types.Field(Boolean, graphql_name='isOdorSensitive')
    '''Flag for whether the item is senstive to order when storing in the
    facility
    '''

    billing_customer_code = sgqlc.types.Field(String, graphql_name='billingCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    receive_on_hold_code = sgqlc.types.Field(String, graphql_name='receiveOnHoldCode')
    '''Hold code to automatically apply when a pallet/lot with this item
    enters inventory
    '''

    rotation_type = sgqlc.types.Field(String, graphql_name='rotationType')
    '''Picking Code used by the item while in inventory'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''How many days of shelf life the product has.'''

    package_tare_weight = sgqlc.types.Field(Float, graphql_name='packageTareWeight')
    '''Weight of the case packaging (in the specified weight uom)'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight unit of measure (pounds or kilograms)'''

    ti = sgqlc.types.Field(Int, graphql_name='ti')
    '''How many cases are in a typical layer on a pallet'''

    item_uom = sgqlc.types.Field(String, graphql_name='itemUom')
    '''Packaging unit for the item (ie. Case, Pallet, Box, Barrel, …)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    product_code = sgqlc.types.Field(String, graphql_name='productCode')
    '''Customer identifiable product code'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    is_product = sgqlc.types.Field(Boolean, graphql_name='isProduct')
    '''Flag for whether the item represents a product-level (higher
    level) entity.  (Product-level items are used only in MRS)
    '''

    room_type = sgqlc.types.Field(String, graphql_name='roomType')
    '''Type of room this product is normally stored in'''

    freight_type = sgqlc.types.Field(String, graphql_name='freightType')
    '''Freight Class (ie. Frozen, Fresh, Ice Cream, Dry, …)'''

    tonnage_group = sgqlc.types.Field(String, graphql_name='tonnageGroup')
    '''Tonnage Group'''

    shelf_life_after_delivery_override = sgqlc.types.Field(Int, graphql_name='shelfLifeAfterDeliveryOverride')
    '''(not used)'''

    shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='shelfLifeOnDeliveryDays')
    '''How many days of shelf life the product needs on delivery'''

    is_warehouse_supply = sgqlc.types.Field(Boolean, graphql_name='isWarehouseSupply')
    '''Flag for whether the product is used by the warehouse in
    operations as opposed to customer product
    '''

    quantity_per_pallet = sgqlc.types.Field(Int, graphql_name='quantityPerPallet')
    '''Count of cases per pallet (should be ti * high)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    billing_customer_id = sgqlc.types.Field(String, graphql_name='billingCustomerId')
    '''ODS identifier for the billing customer (references
    wms.warehouse_customers_raw.id)
    '''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')
    '''ODS identifier for the owner (references
    wms.warehouse_customers_raw.id)
    '''

    best_by_date_type = sgqlc.types.Field(String, graphql_name='bestByDateType')
    '''Flag for how the Best By Date is calculated'''

    code_date_type = sgqlc.types.Field(String, graphql_name='codeDateType')
    '''Flag for how the Code Date is calculated'''

    case_cube = sgqlc.types.Field(Float, graphql_name='caseCube')
    '''Volume of the product'''

    item_category_description = sgqlc.types.Field(String, graphql_name='itemCategoryDescription')
    '''Full description of the item category'''

    is_expiry_date_control = sgqlc.types.Field(Boolean, graphql_name='isExpiryDateControl')

    is_capture_production_date = sgqlc.types.Field(Boolean, graphql_name='isCaptureProductionDate')
    '''Flag to check if production date is captured'''

    universal_product_code = sgqlc.types.Field(String, graphql_name='universalProductCode')
    '''Type of code printed on retail product packaging to aid in
    identifying a particular item
    '''

    supplier_product_code = sgqlc.types.Field(String, graphql_name='supplierProductCode')
    '''Customer identifiable product code that potentially varies by
    supplier
    '''



class ItemsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `ItemsRaw`. Fields that are set will be
    updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'item_code', 'warehouse_facility_id', 'source_row_id', 'is_active', 'catch_weight_type', 'case_dimensions_uom', 'case_height', 'case_length', 'case_width', 'item_category', 'customer_code', 'description', 'high', 'max_acceptable_temperature', 'temperature_uom', 'is_stackable', 'max_stack_count', 'min_acceptable_temperature', 'net_weight', 'is_odor_sensitive', 'billing_customer_code', 'owner_customer_code', 'receive_on_hold_code', 'rotation_type', 'shelf_life_days', 'package_tare_weight', 'weight_uom', 'ti', 'item_uom', 'created_at', 'updated_at', 'deleted_at', '_version', 'product_code', '_id', 'id', 'is_product', 'room_type', 'freight_type', 'tonnage_group', 'shelf_life_after_delivery_override', 'shelf_life_on_delivery_days', 'is_warehouse_supply', 'quantity_per_pallet', 'customer_id', 'billing_customer_id', 'owner_customer_id', 'best_by_date_type', 'code_date_type', 'case_cube', 'item_category_description', 'is_expiry_date_control', 'is_capture_production_date', 'universal_product_code', 'supplier_product_code')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Flag for whether this item master entry is active in the source
    system
    '''

    catch_weight_type = sgqlc.types.Field(String, graphql_name='catchWeightType')
    '''Defines when catch weights apply (Possible values: inbound_only,
    outbound_only, inbound_outbound)
    '''

    case_dimensions_uom = sgqlc.types.Field(String, graphql_name='caseDimensionsUom')
    '''Unit of measure for case measurements used by this item (inches or
    centimeters)
    '''

    case_height = sgqlc.types.Field(Float, graphql_name='caseHeight')
    '''Height of the case'''

    case_length = sgqlc.types.Field(Float, graphql_name='caseLength')
    '''Length of the case'''

    case_width = sgqlc.types.Field(Float, graphql_name='caseWidth')
    '''Width of the case'''

    item_category = sgqlc.types.Field(String, graphql_name='itemCategory')
    '''Item category or product group description'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Text description of the item as provided by the customer'''

    high = sgqlc.types.Field(Int, graphql_name='high')
    '''How many layers of cases can be put on a typical pallet'''

    max_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='maxAcceptableTemperature')
    '''Maximum temperature for the product before it fails quality
    control
    '''

    temperature_uom = sgqlc.types.Field(String, graphql_name='temperatureUom')
    '''Unit of measure used by this item (fahrenheit or celsius)'''

    is_stackable = sgqlc.types.Field(Boolean, graphql_name='isStackable')
    '''Flag for whether pallets containing this item may be stacked'''

    max_stack_count = sgqlc.types.Field(Int, graphql_name='maxStackCount')
    '''(unused)'''

    min_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='minAcceptableTemperature')
    '''Minimum temperature for the product before it fails quality
    control
    '''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the item (in pounds)'''

    is_odor_sensitive = sgqlc.types.Field(Boolean, graphql_name='isOdorSensitive')
    '''Flag for whether the item is senstive to order when storing in the
    facility
    '''

    billing_customer_code = sgqlc.types.Field(String, graphql_name='billingCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    receive_on_hold_code = sgqlc.types.Field(String, graphql_name='receiveOnHoldCode')
    '''Hold code to automatically apply when a pallet/lot with this item
    enters inventory
    '''

    rotation_type = sgqlc.types.Field(String, graphql_name='rotationType')
    '''Picking Code used by the item while in inventory'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''How many days of shelf life the product has.'''

    package_tare_weight = sgqlc.types.Field(Float, graphql_name='packageTareWeight')
    '''Weight of the case packaging (in the specified weight uom)'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight unit of measure (pounds or kilograms)'''

    ti = sgqlc.types.Field(Int, graphql_name='ti')
    '''How many cases are in a typical layer on a pallet'''

    item_uom = sgqlc.types.Field(String, graphql_name='itemUom')
    '''Packaging unit for the item (ie. Case, Pallet, Box, Barrel, …)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    product_code = sgqlc.types.Field(String, graphql_name='productCode')
    '''Customer identifiable product code'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    is_product = sgqlc.types.Field(Boolean, graphql_name='isProduct')
    '''Flag for whether the item represents a product-level (higher
    level) entity.  (Product-level items are used only in MRS)
    '''

    room_type = sgqlc.types.Field(String, graphql_name='roomType')
    '''Type of room this product is normally stored in'''

    freight_type = sgqlc.types.Field(String, graphql_name='freightType')
    '''Freight Class (ie. Frozen, Fresh, Ice Cream, Dry, …)'''

    tonnage_group = sgqlc.types.Field(String, graphql_name='tonnageGroup')
    '''Tonnage Group'''

    shelf_life_after_delivery_override = sgqlc.types.Field(Int, graphql_name='shelfLifeAfterDeliveryOverride')
    '''(not used)'''

    shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='shelfLifeOnDeliveryDays')
    '''How many days of shelf life the product needs on delivery'''

    is_warehouse_supply = sgqlc.types.Field(Boolean, graphql_name='isWarehouseSupply')
    '''Flag for whether the product is used by the warehouse in
    operations as opposed to customer product
    '''

    quantity_per_pallet = sgqlc.types.Field(Int, graphql_name='quantityPerPallet')
    '''Count of cases per pallet (should be ti * high)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    billing_customer_id = sgqlc.types.Field(String, graphql_name='billingCustomerId')
    '''ODS identifier for the billing customer (references
    wms.warehouse_customers_raw.id)
    '''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')
    '''ODS identifier for the owner (references
    wms.warehouse_customers_raw.id)
    '''

    best_by_date_type = sgqlc.types.Field(String, graphql_name='bestByDateType')
    '''Flag for how the Best By Date is calculated'''

    code_date_type = sgqlc.types.Field(String, graphql_name='codeDateType')
    '''Flag for how the Code Date is calculated'''

    case_cube = sgqlc.types.Field(Float, graphql_name='caseCube')
    '''Volume of the product'''

    item_category_description = sgqlc.types.Field(String, graphql_name='itemCategoryDescription')
    '''Full description of the item category'''

    is_expiry_date_control = sgqlc.types.Field(Boolean, graphql_name='isExpiryDateControl')

    is_capture_production_date = sgqlc.types.Field(Boolean, graphql_name='isCaptureProductionDate')
    '''Flag to check if production date is captured'''

    universal_product_code = sgqlc.types.Field(String, graphql_name='universalProductCode')
    '''Type of code printed on retail product packaging to aid in
    identifying a particular item
    '''

    supplier_product_code = sgqlc.types.Field(String, graphql_name='supplierProductCode')
    '''Customer identifiable product code that potentially varies by
    supplier
    '''



class JSONFilter(sgqlc.types.Input):
    '''A filter to be used against JSON fields. All fields are combined
    with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to', 'contains', 'contains_key', 'contains_all_keys', 'contains_any_keys', 'contained_by')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(JSON, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(JSON, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(JSON, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(JSON, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(JSON)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(JSON)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(JSON, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(JSON, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(JSON, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(JSON, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''

    contains = sgqlc.types.Field(JSON, graphql_name='contains')
    '''Contains the specified JSON.'''

    contains_key = sgqlc.types.Field(String, graphql_name='containsKey')
    '''Contains the specified key.'''

    contains_all_keys = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='containsAllKeys')
    '''Contains all of the specified keys.'''

    contains_any_keys = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='containsAnyKeys')
    '''Contains any of the specified keys.'''

    contained_by = sgqlc.types.Field(JSON, graphql_name='containedBy')
    '''Contained by the specified JSON.'''



class LotCondition(sgqlc.types.Input):
    '''A condition to be used against `Lot` object types. All fields are
    tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'customer_enterprise_id', 'item_id', 'warehouse_customer_id', 'customer_id', 'facility_id', 'is_depleted', 'lot_reference', 'inventory_status', 'customer_lot_reference', 'weight_uom', 'original_gross_weight', 'original_net_weight', 'original_pallet_count', 'original_quantity', 'available_gross_weight', 'available_net_weight', 'available_pallet_count', 'available_quantity', 'expected_gross_weight', 'expected_net_weight', 'expected_pallet_count', 'expected_quantity', 'committed_gross_weight', 'committed_net_weight', 'committed_pallet_count', 'committed_quantity', 'on_hold_gross_weight', 'on_hold_net_weight', 'on_hold_pallet_count', 'on_hold_quantity', 'on_hand_gross_weight', 'on_hand_net_weight', 'on_hand_pallet_count', 'on_hand_quantity', 'production_date', 'best_by_date', 'code_date', 'slaughter_date', 'expiration_date', 'depleted_date', 'reservation_code', 'hold_code', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', 'lot_code', '_version', '_id', 'shelf_life_on_delivery_days', 'shelf_life_days', 'pallets_on_hold_committed_pallet_count', 'pallets_on_hold_committed_quantity')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Checks for equality with the object’s `isDepleted` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Checks for equality with the object’s `inventoryStatus` field.'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Checks for equality with the object’s `customerLotReference`
    field.
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''

    original_gross_weight = sgqlc.types.Field(Float, graphql_name='originalGrossWeight')
    '''Checks for equality with the object’s `originalGrossWeight` field.'''

    original_net_weight = sgqlc.types.Field(Float, graphql_name='originalNetWeight')
    '''Checks for equality with the object’s `originalNetWeight` field.'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Checks for equality with the object’s `originalPalletCount` field.'''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Checks for equality with the object’s `originalQuantity` field.'''

    available_gross_weight = sgqlc.types.Field(Float, graphql_name='availableGrossWeight')
    '''Checks for equality with the object’s `availableGrossWeight`
    field.
    '''

    available_net_weight = sgqlc.types.Field(Float, graphql_name='availableNetWeight')
    '''Checks for equality with the object’s `availableNetWeight` field.'''

    available_pallet_count = sgqlc.types.Field(BigInt, graphql_name='availablePalletCount')
    '''Checks for equality with the object’s `availablePalletCount`
    field.
    '''

    available_quantity = sgqlc.types.Field(BigInt, graphql_name='availableQuantity')
    '''Checks for equality with the object’s `availableQuantity` field.'''

    expected_gross_weight = sgqlc.types.Field(Float, graphql_name='expectedGrossWeight')
    '''Checks for equality with the object’s `expectedGrossWeight` field.'''

    expected_net_weight = sgqlc.types.Field(Float, graphql_name='expectedNetWeight')
    '''Checks for equality with the object’s `expectedNetWeight` field.'''

    expected_pallet_count = sgqlc.types.Field(Int, graphql_name='expectedPalletCount')
    '''Checks for equality with the object’s `expectedPalletCount` field.'''

    expected_quantity = sgqlc.types.Field(Int, graphql_name='expectedQuantity')
    '''Checks for equality with the object’s `expectedQuantity` field.'''

    committed_gross_weight = sgqlc.types.Field(Float, graphql_name='committedGrossWeight')
    '''Checks for equality with the object’s `committedGrossWeight`
    field.
    '''

    committed_net_weight = sgqlc.types.Field(Float, graphql_name='committedNetWeight')
    '''Checks for equality with the object’s `committedNetWeight` field.'''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Checks for equality with the object’s `committedPalletCount`
    field.
    '''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Checks for equality with the object’s `committedQuantity` field.'''

    on_hold_gross_weight = sgqlc.types.Field(Float, graphql_name='onHoldGrossWeight')
    '''Checks for equality with the object’s `onHoldGrossWeight` field.'''

    on_hold_net_weight = sgqlc.types.Field(Float, graphql_name='onHoldNetWeight')
    '''Checks for equality with the object’s `onHoldNetWeight` field.'''

    on_hold_pallet_count = sgqlc.types.Field(BigInt, graphql_name='onHoldPalletCount')
    '''Checks for equality with the object’s `onHoldPalletCount` field.'''

    on_hold_quantity = sgqlc.types.Field(BigInt, graphql_name='onHoldQuantity')
    '''Checks for equality with the object’s `onHoldQuantity` field.'''

    on_hand_gross_weight = sgqlc.types.Field(Float, graphql_name='onHandGrossWeight')
    '''Checks for equality with the object’s `onHandGrossWeight` field.'''

    on_hand_net_weight = sgqlc.types.Field(Float, graphql_name='onHandNetWeight')
    '''Checks for equality with the object’s `onHandNetWeight` field.'''

    on_hand_pallet_count = sgqlc.types.Field(Int, graphql_name='onHandPalletCount')
    '''Checks for equality with the object’s `onHandPalletCount` field.'''

    on_hand_quantity = sgqlc.types.Field(Int, graphql_name='onHandQuantity')
    '''Checks for equality with the object’s `onHandQuantity` field.'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Checks for equality with the object’s `productionDate` field.'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Checks for equality with the object’s `bestByDate` field.'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Checks for equality with the object’s `codeDate` field.'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Checks for equality with the object’s `slaughterDate` field.'''

    expiration_date = sgqlc.types.Field(String, graphql_name='expirationDate')
    '''Checks for equality with the object’s `expirationDate` field.'''

    depleted_date = sgqlc.types.Field(Datetime, graphql_name='depletedDate')
    '''Checks for equality with the object’s `depletedDate` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='shelfLifeOnDeliveryDays')
    '''Checks for equality with the object’s `shelfLifeOnDeliveryDays`
    field.
    '''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    pallets_on_hold_committed_pallet_count = sgqlc.types.Field(BigInt, graphql_name='palletsOnHoldCommittedPalletCount')
    '''Checks for equality with the object’s
    `palletsOnHoldCommittedPalletCount` field.
    '''

    pallets_on_hold_committed_quantity = sgqlc.types.Field(BigInt, graphql_name='palletsOnHoldCommittedQuantity')
    '''Checks for equality with the object’s
    `palletsOnHoldCommittedQuantity` field.
    '''



class LotFilter(sgqlc.types.Input):
    '''A filter to be used against `Lot` object types. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'customer_enterprise_id', 'item_id', 'warehouse_customer_id', 'customer_id', 'facility_id', 'is_depleted', 'lot_reference', 'inventory_status', 'customer_lot_reference', 'weight_uom', 'original_gross_weight', 'original_net_weight', 'original_pallet_count', 'original_quantity', 'available_gross_weight', 'available_net_weight', 'available_pallet_count', 'available_quantity', 'expected_gross_weight', 'expected_net_weight', 'expected_pallet_count', 'expected_quantity', 'committed_gross_weight', 'committed_net_weight', 'committed_pallet_count', 'committed_quantity', 'on_hold_gross_weight', 'on_hold_net_weight', 'on_hold_pallet_count', 'on_hold_quantity', 'on_hand_gross_weight', 'on_hand_net_weight', 'on_hand_pallet_count', 'on_hand_quantity', 'production_date', 'best_by_date', 'code_date', 'slaughter_date', 'expiration_date', 'depleted_date', 'reservation_code', 'hold_code', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', 'lot_code', '_version', '_id', 'shelf_life_on_delivery_days', 'shelf_life_days', 'pallets_on_hold_committed_pallet_count', 'pallets_on_hold_committed_quantity', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    is_depleted = sgqlc.types.Field(BooleanFilter, graphql_name='isDepleted')
    '''Filter by the object’s `isDepleted` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    inventory_status = sgqlc.types.Field('StringFilter', graphql_name='inventoryStatus')
    '''Filter by the object’s `inventoryStatus` field.'''

    customer_lot_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLotReference')
    '''Filter by the object’s `customerLotReference` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    original_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='originalGrossWeight')
    '''Filter by the object’s `originalGrossWeight` field.'''

    original_net_weight = sgqlc.types.Field(FloatFilter, graphql_name='originalNetWeight')
    '''Filter by the object’s `originalNetWeight` field.'''

    original_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='originalPalletCount')
    '''Filter by the object’s `originalPalletCount` field.'''

    original_quantity = sgqlc.types.Field(IntFilter, graphql_name='originalQuantity')
    '''Filter by the object’s `originalQuantity` field.'''

    available_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='availableGrossWeight')
    '''Filter by the object’s `availableGrossWeight` field.'''

    available_net_weight = sgqlc.types.Field(FloatFilter, graphql_name='availableNetWeight')
    '''Filter by the object’s `availableNetWeight` field.'''

    available_pallet_count = sgqlc.types.Field(BigIntFilter, graphql_name='availablePalletCount')
    '''Filter by the object’s `availablePalletCount` field.'''

    available_quantity = sgqlc.types.Field(BigIntFilter, graphql_name='availableQuantity')
    '''Filter by the object’s `availableQuantity` field.'''

    expected_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='expectedGrossWeight')
    '''Filter by the object’s `expectedGrossWeight` field.'''

    expected_net_weight = sgqlc.types.Field(FloatFilter, graphql_name='expectedNetWeight')
    '''Filter by the object’s `expectedNetWeight` field.'''

    expected_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='expectedPalletCount')
    '''Filter by the object’s `expectedPalletCount` field.'''

    expected_quantity = sgqlc.types.Field(IntFilter, graphql_name='expectedQuantity')
    '''Filter by the object’s `expectedQuantity` field.'''

    committed_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='committedGrossWeight')
    '''Filter by the object’s `committedGrossWeight` field.'''

    committed_net_weight = sgqlc.types.Field(FloatFilter, graphql_name='committedNetWeight')
    '''Filter by the object’s `committedNetWeight` field.'''

    committed_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='committedPalletCount')
    '''Filter by the object’s `committedPalletCount` field.'''

    committed_quantity = sgqlc.types.Field(IntFilter, graphql_name='committedQuantity')
    '''Filter by the object’s `committedQuantity` field.'''

    on_hold_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='onHoldGrossWeight')
    '''Filter by the object’s `onHoldGrossWeight` field.'''

    on_hold_net_weight = sgqlc.types.Field(FloatFilter, graphql_name='onHoldNetWeight')
    '''Filter by the object’s `onHoldNetWeight` field.'''

    on_hold_pallet_count = sgqlc.types.Field(BigIntFilter, graphql_name='onHoldPalletCount')
    '''Filter by the object’s `onHoldPalletCount` field.'''

    on_hold_quantity = sgqlc.types.Field(BigIntFilter, graphql_name='onHoldQuantity')
    '''Filter by the object’s `onHoldQuantity` field.'''

    on_hand_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='onHandGrossWeight')
    '''Filter by the object’s `onHandGrossWeight` field.'''

    on_hand_net_weight = sgqlc.types.Field(FloatFilter, graphql_name='onHandNetWeight')
    '''Filter by the object’s `onHandNetWeight` field.'''

    on_hand_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='onHandPalletCount')
    '''Filter by the object’s `onHandPalletCount` field.'''

    on_hand_quantity = sgqlc.types.Field(IntFilter, graphql_name='onHandQuantity')
    '''Filter by the object’s `onHandQuantity` field.'''

    production_date = sgqlc.types.Field(DateFilter, graphql_name='productionDate')
    '''Filter by the object’s `productionDate` field.'''

    best_by_date = sgqlc.types.Field(DateFilter, graphql_name='bestByDate')
    '''Filter by the object’s `bestByDate` field.'''

    code_date = sgqlc.types.Field(DateFilter, graphql_name='codeDate')
    '''Filter by the object’s `codeDate` field.'''

    slaughter_date = sgqlc.types.Field(DateFilter, graphql_name='slaughterDate')
    '''Filter by the object’s `slaughterDate` field.'''

    expiration_date = sgqlc.types.Field('StringFilter', graphql_name='expirationDate')
    '''Filter by the object’s `expirationDate` field.'''

    depleted_date = sgqlc.types.Field(DatetimeFilter, graphql_name='depletedDate')
    '''Filter by the object’s `depletedDate` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    shelf_life_on_delivery_days = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeOnDeliveryDays')
    '''Filter by the object’s `shelfLifeOnDeliveryDays` field.'''

    shelf_life_days = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    pallets_on_hold_committed_pallet_count = sgqlc.types.Field(BigIntFilter, graphql_name='palletsOnHoldCommittedPalletCount')
    '''Filter by the object’s `palletsOnHoldCommittedPalletCount` field.'''

    pallets_on_hold_committed_quantity = sgqlc.types.Field(BigIntFilter, graphql_name='palletsOnHoldCommittedQuantity')
    '''Filter by the object’s `palletsOnHoldCommittedQuantity` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LotFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LotFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('LotFilter', graphql_name='not')
    '''Negates the expression.'''



class LotReferenceCodeCondition(sgqlc.types.Input):
    '''A condition to be used against `LotReferenceCode` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'lot_id', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Checks for equality with the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Checks for equality with the object’s `referenceValue` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''



class LotReferenceCodeFilter(sgqlc.types.Input):
    '''A filter to be used against `LotReferenceCode` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'lot_id', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    reference_type = sgqlc.types.Field('StringFilter', graphql_name='referenceType')
    '''Filter by the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field('StringFilter', graphql_name='referenceValue')
    '''Filter by the object’s `referenceValue` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LotReferenceCodeFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LotReferenceCodeFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('LotReferenceCodeFilter', graphql_name='not')
    '''Negates the expression.'''



class LotReferenceCodeInput(sgqlc.types.Input):
    '''An input for mutations affecting `LotReferenceCode`'''
    __schema__ = base
    __field_names__ = ('id', 'lot_id', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(String, graphql_name='id')

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')



class LotReferenceCodesRawCondition(sgqlc.types.Input):
    '''A condition to be used against `LotReferenceCodesRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', 'lot_code', '_id', 'warehouse_facility_id', 'lot_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Checks for equality with the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Checks for equality with the object’s `referenceValue` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''



class LotReferenceCodesRawFilter(sgqlc.types.Input):
    '''A filter to be used against `LotReferenceCodesRaw` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', 'lot_code', '_id', 'warehouse_facility_id', 'lot_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    reference_type = sgqlc.types.Field('StringFilter', graphql_name='referenceType')
    '''Filter by the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field('StringFilter', graphql_name='referenceValue')
    '''Filter by the object’s `referenceValue` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LotReferenceCodesRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LotReferenceCodesRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('LotReferenceCodesRawFilter', graphql_name='not')
    '''Negates the expression.'''



class LotReferenceCodesRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `LotReferenceCodesRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', 'lot_code', '_id', 'warehouse_facility_id', 'lot_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    reference_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='referenceType')
    '''Reference type for the refer'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Reference value for the refer'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    lot_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''



class LotReferenceCodesRawPatch(sgqlc.types.Input):
    '''Represents an update to a `LotReferenceCodesRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', 'lot_code', '_id', 'warehouse_facility_id', 'lot_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Reference type for the refer'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Reference value for the refer'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''



class LotTransactionsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `LotTransactionsRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'lot_code', 'lot_id', 'customer_id', 'outbound_order_id', 'transaction_status', 'transaction_status_description', 'lot_transaction_date', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'source_row_id', 'adjusted_reason', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'adjustment_number', 'item_id', 'line_number', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    transaction_status = sgqlc.types.Field(String, graphql_name='transactionStatus')
    '''Checks for equality with the object’s `transactionStatus` field.'''

    transaction_status_description = sgqlc.types.Field(String, graphql_name='transactionStatusDescription')
    '''Checks for equality with the object’s
    `transactionStatusDescription` field.
    '''

    lot_transaction_date = sgqlc.types.Field(Datetime, graphql_name='lotTransactionDate')
    '''Checks for equality with the object’s `lotTransactionDate` field.'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    adjusted_reason = sgqlc.types.Field(String, graphql_name='adjustedReason')
    '''Checks for equality with the object’s `adjustedReason` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Checks for equality with the object’s `adjustmentNumber` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class LotTransactionsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `LotTransactionsRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'lot_code', 'lot_id', 'customer_id', 'outbound_order_id', 'transaction_status', 'transaction_status_description', 'lot_transaction_date', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'source_row_id', 'adjusted_reason', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'adjustment_number', 'item_id', 'line_number', 'weight_uom', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    transaction_status = sgqlc.types.Field('StringFilter', graphql_name='transactionStatus')
    '''Filter by the object’s `transactionStatus` field.'''

    transaction_status_description = sgqlc.types.Field('StringFilter', graphql_name='transactionStatusDescription')
    '''Filter by the object’s `transactionStatusDescription` field.'''

    lot_transaction_date = sgqlc.types.Field(DatetimeFilter, graphql_name='lotTransactionDate')
    '''Filter by the object’s `lotTransactionDate` field.'''

    quantity = sgqlc.types.Field(FloatFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(IntFilter, graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(FloatFilter, graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    adjusted_reason = sgqlc.types.Field('StringFilter', graphql_name='adjustedReason')
    '''Filter by the object’s `adjustedReason` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    adjustment_number = sgqlc.types.Field('StringFilter', graphql_name='adjustmentNumber')
    '''Filter by the object’s `adjustmentNumber` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LotTransactionsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LotTransactionsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('LotTransactionsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class LotTransactionsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `LotTransactionsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'lot_code', 'lot_id', 'customer_id', 'outbound_order_id', 'transaction_status', 'transaction_status_description', 'lot_transaction_date', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'source_row_id', 'adjusted_reason', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'adjustment_number', 'item_id', 'line_number', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    transaction_status = sgqlc.types.Field(String, graphql_name='transactionStatus')
    '''Transaction status for the trans'''

    transaction_status_description = sgqlc.types.Field(String, graphql_name='transactionStatusDescription')
    '''Transaction Status description for the trans'''

    lot_transaction_date = sgqlc.types.Field(Datetime, graphql_name='lotTransactionDate')
    '''Lot Transaction date for the trans'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Number of cases involved with the transaction'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Pallet count for the trans'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product involved in the transaction (in
    pounds)
    '''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product involved in the transaction (in pounds)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    adjusted_reason = sgqlc.types.Field(String, graphql_name='adjustedReason')
    '''Adjusted reason for the trans'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Adjustment number for the trans'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class LotTransactionsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `LotTransactionsRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'lot_code', 'lot_id', 'customer_id', 'outbound_order_id', 'transaction_status', 'transaction_status_description', 'lot_transaction_date', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'source_row_id', 'adjusted_reason', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'adjustment_number', 'item_id', 'line_number', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    transaction_status = sgqlc.types.Field(String, graphql_name='transactionStatus')
    '''Transaction status for the trans'''

    transaction_status_description = sgqlc.types.Field(String, graphql_name='transactionStatusDescription')
    '''Transaction Status description for the trans'''

    lot_transaction_date = sgqlc.types.Field(Datetime, graphql_name='lotTransactionDate')
    '''Lot Transaction date for the trans'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Number of cases involved with the transaction'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Pallet count for the trans'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product involved in the transaction (in
    pounds)
    '''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product involved in the transaction (in pounds)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    adjusted_reason = sgqlc.types.Field(String, graphql_name='adjustedReason')
    '''Adjusted reason for the trans'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Adjustment number for the trans'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class LotsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `LotsRaw` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'lot_code', 'source_row_id', 'item_code', 'weight_uom', 'current_net_weight', 'current_pallet_count', 'warehouse_facility_id', 'production_date', 'best_by_date', 'code_date', 'slaughter_date', 'expiration_date', 'quantity', 'customer_code', 'lot_reference', 'customer_lot_reference', 'current_gross_weight', 'original_pallet_count', 'original_net_weight', 'original_gross_weight', 'original_quantity', 'depleted_date', 'is_depleted', 'reservation_code', 'inventory_status', 'hold_code', 'created_at', 'updated_at', 'deleted_at', '_version', 'committed_pallet_count', 'committed_net_weight', 'committed_gross_weight', 'committed_quantity', '_id', 'id', 'shelf_life_after_delivery_override', 'shelf_life_days_override', 'item_id', 'customer_id', 'receive_date', 'over_quantity', 'short_quantity', 'damaged_quantity', 'over_temperature', 'inbound_order_id')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''

    current_net_weight = sgqlc.types.Field(Float, graphql_name='currentNetWeight')
    '''Checks for equality with the object’s `currentNetWeight` field.'''

    current_pallet_count = sgqlc.types.Field(Int, graphql_name='currentPalletCount')
    '''Checks for equality with the object’s `currentPalletCount` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Checks for equality with the object’s `productionDate` field.'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Checks for equality with the object’s `bestByDate` field.'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Checks for equality with the object’s `codeDate` field.'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Checks for equality with the object’s `slaughterDate` field.'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Checks for equality with the object’s `expirationDate` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Checks for equality with the object’s `customerLotReference`
    field.
    '''

    current_gross_weight = sgqlc.types.Field(Float, graphql_name='currentGrossWeight')
    '''Checks for equality with the object’s `currentGrossWeight` field.'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Checks for equality with the object’s `originalPalletCount` field.'''

    original_net_weight = sgqlc.types.Field(Float, graphql_name='originalNetWeight')
    '''Checks for equality with the object’s `originalNetWeight` field.'''

    original_gross_weight = sgqlc.types.Field(Float, graphql_name='originalGrossWeight')
    '''Checks for equality with the object’s `originalGrossWeight` field.'''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Checks for equality with the object’s `originalQuantity` field.'''

    depleted_date = sgqlc.types.Field(Datetime, graphql_name='depletedDate')
    '''Checks for equality with the object’s `depletedDate` field.'''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Checks for equality with the object’s `isDepleted` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Checks for equality with the object’s `inventoryStatus` field.'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Checks for equality with the object’s `committedPalletCount`
    field.
    '''

    committed_net_weight = sgqlc.types.Field(Float, graphql_name='committedNetWeight')
    '''Checks for equality with the object’s `committedNetWeight` field.'''

    committed_gross_weight = sgqlc.types.Field(Float, graphql_name='committedGrossWeight')
    '''Checks for equality with the object’s `committedGrossWeight`
    field.
    '''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Checks for equality with the object’s `committedQuantity` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    shelf_life_after_delivery_override = sgqlc.types.Field(Int, graphql_name='shelfLifeAfterDeliveryOverride')
    '''Checks for equality with the object’s
    `shelfLifeAfterDeliveryOverride` field.
    '''

    shelf_life_days_override = sgqlc.types.Field(Int, graphql_name='shelfLifeDaysOverride')
    '''Checks for equality with the object’s `shelfLifeDaysOverride`
    field.
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    receive_date = sgqlc.types.Field(Date, graphql_name='receiveDate')
    '''Checks for equality with the object’s `receiveDate` field.'''

    over_quantity = sgqlc.types.Field(Int, graphql_name='overQuantity')
    '''Checks for equality with the object’s `overQuantity` field.'''

    short_quantity = sgqlc.types.Field(Int, graphql_name='shortQuantity')
    '''Checks for equality with the object’s `shortQuantity` field.'''

    damaged_quantity = sgqlc.types.Field(Int, graphql_name='damagedQuantity')
    '''Checks for equality with the object’s `damagedQuantity` field.'''

    over_temperature = sgqlc.types.Field(Float, graphql_name='overTemperature')
    '''Checks for equality with the object’s `overTemperature` field.'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Checks for equality with the object’s `inboundOrderId` field.'''



class LotsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `LotsRaw` object types. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'lot_code', 'source_row_id', 'item_code', 'weight_uom', 'current_net_weight', 'current_pallet_count', 'warehouse_facility_id', 'production_date', 'best_by_date', 'code_date', 'slaughter_date', 'expiration_date', 'quantity', 'customer_code', 'lot_reference', 'customer_lot_reference', 'current_gross_weight', 'original_pallet_count', 'original_net_weight', 'original_gross_weight', 'original_quantity', 'depleted_date', 'is_depleted', 'reservation_code', 'inventory_status', 'hold_code', 'created_at', 'updated_at', 'deleted_at', '_version', 'committed_pallet_count', 'committed_net_weight', 'committed_gross_weight', 'committed_quantity', '_id', 'id', 'shelf_life_after_delivery_override', 'shelf_life_days_override', 'item_id', 'customer_id', 'receive_date', 'over_quantity', 'short_quantity', 'damaged_quantity', 'over_temperature', 'inbound_order_id', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    current_net_weight = sgqlc.types.Field(FloatFilter, graphql_name='currentNetWeight')
    '''Filter by the object’s `currentNetWeight` field.'''

    current_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='currentPalletCount')
    '''Filter by the object’s `currentPalletCount` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    production_date = sgqlc.types.Field(DateFilter, graphql_name='productionDate')
    '''Filter by the object’s `productionDate` field.'''

    best_by_date = sgqlc.types.Field(DateFilter, graphql_name='bestByDate')
    '''Filter by the object’s `bestByDate` field.'''

    code_date = sgqlc.types.Field(DateFilter, graphql_name='codeDate')
    '''Filter by the object’s `codeDate` field.'''

    slaughter_date = sgqlc.types.Field(DateFilter, graphql_name='slaughterDate')
    '''Filter by the object’s `slaughterDate` field.'''

    expiration_date = sgqlc.types.Field(DateFilter, graphql_name='expirationDate')
    '''Filter by the object’s `expirationDate` field.'''

    quantity = sgqlc.types.Field(IntFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLotReference')
    '''Filter by the object’s `customerLotReference` field.'''

    current_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='currentGrossWeight')
    '''Filter by the object’s `currentGrossWeight` field.'''

    original_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='originalPalletCount')
    '''Filter by the object’s `originalPalletCount` field.'''

    original_net_weight = sgqlc.types.Field(FloatFilter, graphql_name='originalNetWeight')
    '''Filter by the object’s `originalNetWeight` field.'''

    original_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='originalGrossWeight')
    '''Filter by the object’s `originalGrossWeight` field.'''

    original_quantity = sgqlc.types.Field(IntFilter, graphql_name='originalQuantity')
    '''Filter by the object’s `originalQuantity` field.'''

    depleted_date = sgqlc.types.Field(DatetimeFilter, graphql_name='depletedDate')
    '''Filter by the object’s `depletedDate` field.'''

    is_depleted = sgqlc.types.Field(BooleanFilter, graphql_name='isDepleted')
    '''Filter by the object’s `isDepleted` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    inventory_status = sgqlc.types.Field('StringFilter', graphql_name='inventoryStatus')
    '''Filter by the object’s `inventoryStatus` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    committed_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='committedPalletCount')
    '''Filter by the object’s `committedPalletCount` field.'''

    committed_net_weight = sgqlc.types.Field(FloatFilter, graphql_name='committedNetWeight')
    '''Filter by the object’s `committedNetWeight` field.'''

    committed_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='committedGrossWeight')
    '''Filter by the object’s `committedGrossWeight` field.'''

    committed_quantity = sgqlc.types.Field(IntFilter, graphql_name='committedQuantity')
    '''Filter by the object’s `committedQuantity` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    shelf_life_after_delivery_override = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeAfterDeliveryOverride')
    '''Filter by the object’s `shelfLifeAfterDeliveryOverride` field.'''

    shelf_life_days_override = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeDaysOverride')
    '''Filter by the object’s `shelfLifeDaysOverride` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    receive_date = sgqlc.types.Field(DateFilter, graphql_name='receiveDate')
    '''Filter by the object’s `receiveDate` field.'''

    over_quantity = sgqlc.types.Field(IntFilter, graphql_name='overQuantity')
    '''Filter by the object’s `overQuantity` field.'''

    short_quantity = sgqlc.types.Field(IntFilter, graphql_name='shortQuantity')
    '''Filter by the object’s `shortQuantity` field.'''

    damaged_quantity = sgqlc.types.Field(IntFilter, graphql_name='damagedQuantity')
    '''Filter by the object’s `damagedQuantity` field.'''

    over_temperature = sgqlc.types.Field(FloatFilter, graphql_name='overTemperature')
    '''Filter by the object’s `overTemperature` field.'''

    inbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='inboundOrderId')
    '''Filter by the object’s `inboundOrderId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LotsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LotsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('LotsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class LotsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `LotsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'lot_code', 'source_row_id', 'item_code', 'weight_uom', 'current_net_weight', 'current_pallet_count', 'warehouse_facility_id', 'production_date', 'best_by_date', 'code_date', 'slaughter_date', 'expiration_date', 'quantity', 'customer_code', 'lot_reference', 'customer_lot_reference', 'current_gross_weight', 'original_pallet_count', 'original_net_weight', 'original_gross_weight', 'original_quantity', 'depleted_date', 'is_depleted', 'reservation_code', 'inventory_status', 'hold_code', 'created_at', 'updated_at', 'deleted_at', '_version', 'committed_pallet_count', 'committed_net_weight', 'committed_gross_weight', 'committed_quantity', '_id', 'id', 'shelf_life_after_delivery_override', 'shelf_life_days_override', 'item_id', 'customer_id', 'receive_date', 'over_quantity', 'short_quantity', 'damaged_quantity', 'over_temperature', 'inbound_order_id')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    lot_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item on the lot'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight unit of measure (pounds or kilograms)'''

    current_net_weight = sgqlc.types.Field(Float, graphql_name='currentNetWeight')
    '''Current net weight of the lot in inventory'''

    current_pallet_count = sgqlc.types.Field(Int, graphql_name='currentPalletCount')
    '''Current count of pallets in the lot'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Date that the product on the lot was produced'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best by date for the lot'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the lot'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Slaughter date for the lot'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Expiration date for the lot'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases left on the lot'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Customer-assigned reference for the lot'''

    current_gross_weight = sgqlc.types.Field(Float, graphql_name='currentGrossWeight')
    '''Current gross weight of the lot'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Original pallet count for the lot when it entered inventory'''

    original_net_weight = sgqlc.types.Field(Float, graphql_name='originalNetWeight')
    '''Original net weight for the lot when it entered inventory'''

    original_gross_weight = sgqlc.types.Field(Float, graphql_name='originalGrossWeight')
    '''Original gross weight for the lot when it entered inventory'''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Original case quantityfor the lot when it entered inventory'''

    depleted_date = sgqlc.types.Field(Datetime, graphql_name='depletedDate')
    '''Date that the lot was depleted.  (If this is still on hand, the
    value will be null)
    '''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Flag for whether this lot has been depleted'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Code placed on lot for the customer to reserve for specific
    customers (normally used in grading product)
    '''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Status of the lot (O = On Hand, X = Expected)'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Current hold code on the lot.  If no hold, then null'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Count of pallets committed to an outbound order'''

    committed_net_weight = sgqlc.types.Field(Float, graphql_name='committedNetWeight')
    '''Net weight  committed to an outbound order'''

    committed_gross_weight = sgqlc.types.Field(Float, graphql_name='committedGrossWeight')
    '''Gross weight committed to an outbound order'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Case quantity  committed to an outbound order'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    shelf_life_after_delivery_override = sgqlc.types.Field(Int, graphql_name='shelfLifeAfterDeliveryOverride')
    '''(not used)'''

    shelf_life_days_override = sgqlc.types.Field(Int, graphql_name='shelfLifeDaysOverride')
    '''Override value for shelf life at the lot level'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    receive_date = sgqlc.types.Field(Date, graphql_name='receiveDate')

    over_quantity = sgqlc.types.Field(Int, graphql_name='overQuantity')
    '''Number of cases over what was expected on the inbound order'''

    short_quantity = sgqlc.types.Field(Int, graphql_name='shortQuantity')
    '''Number of cases under what was expected on the inbound order'''

    damaged_quantity = sgqlc.types.Field(Int, graphql_name='damagedQuantity')
    '''Number of cases deemed damage when delived to the warehouse'''

    over_temperature = sgqlc.types.Field(Float, graphql_name='overTemperature')
    '''Temperature of the lot when it enters inventory (in Fahrenheit)'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''



class LotsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `LotsRaw`. Fields that are set will be
    updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'lot_code', 'source_row_id', 'item_code', 'weight_uom', 'current_net_weight', 'current_pallet_count', 'warehouse_facility_id', 'production_date', 'best_by_date', 'code_date', 'slaughter_date', 'expiration_date', 'quantity', 'customer_code', 'lot_reference', 'customer_lot_reference', 'current_gross_weight', 'original_pallet_count', 'original_net_weight', 'original_gross_weight', 'original_quantity', 'depleted_date', 'is_depleted', 'reservation_code', 'inventory_status', 'hold_code', 'created_at', 'updated_at', 'deleted_at', '_version', 'committed_pallet_count', 'committed_net_weight', 'committed_gross_weight', 'committed_quantity', '_id', 'id', 'shelf_life_after_delivery_override', 'shelf_life_days_override', 'item_id', 'customer_id', 'receive_date', 'over_quantity', 'short_quantity', 'damaged_quantity', 'over_temperature', 'inbound_order_id')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item on the lot'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight unit of measure (pounds or kilograms)'''

    current_net_weight = sgqlc.types.Field(Float, graphql_name='currentNetWeight')
    '''Current net weight of the lot in inventory'''

    current_pallet_count = sgqlc.types.Field(Int, graphql_name='currentPalletCount')
    '''Current count of pallets in the lot'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Date that the product on the lot was produced'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best by date for the lot'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the lot'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Slaughter date for the lot'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Expiration date for the lot'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases left on the lot'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Customer-assigned reference for the lot'''

    current_gross_weight = sgqlc.types.Field(Float, graphql_name='currentGrossWeight')
    '''Current gross weight of the lot'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Original pallet count for the lot when it entered inventory'''

    original_net_weight = sgqlc.types.Field(Float, graphql_name='originalNetWeight')
    '''Original net weight for the lot when it entered inventory'''

    original_gross_weight = sgqlc.types.Field(Float, graphql_name='originalGrossWeight')
    '''Original gross weight for the lot when it entered inventory'''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Original case quantityfor the lot when it entered inventory'''

    depleted_date = sgqlc.types.Field(Datetime, graphql_name='depletedDate')
    '''Date that the lot was depleted.  (If this is still on hand, the
    value will be null)
    '''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Flag for whether this lot has been depleted'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Code placed on lot for the customer to reserve for specific
    customers (normally used in grading product)
    '''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Status of the lot (O = On Hand, X = Expected)'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Current hold code on the lot.  If no hold, then null'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Count of pallets committed to an outbound order'''

    committed_net_weight = sgqlc.types.Field(Float, graphql_name='committedNetWeight')
    '''Net weight  committed to an outbound order'''

    committed_gross_weight = sgqlc.types.Field(Float, graphql_name='committedGrossWeight')
    '''Gross weight committed to an outbound order'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Case quantity  committed to an outbound order'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    shelf_life_after_delivery_override = sgqlc.types.Field(Int, graphql_name='shelfLifeAfterDeliveryOverride')
    '''(not used)'''

    shelf_life_days_override = sgqlc.types.Field(Int, graphql_name='shelfLifeDaysOverride')
    '''Override value for shelf life at the lot level'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    receive_date = sgqlc.types.Field(Date, graphql_name='receiveDate')

    over_quantity = sgqlc.types.Field(Int, graphql_name='overQuantity')
    '''Number of cases over what was expected on the inbound order'''

    short_quantity = sgqlc.types.Field(Int, graphql_name='shortQuantity')
    '''Number of cases under what was expected on the inbound order'''

    damaged_quantity = sgqlc.types.Field(Int, graphql_name='damagedQuantity')
    '''Number of cases deemed damage when delived to the warehouse'''

    over_temperature = sgqlc.types.Field(Float, graphql_name='overTemperature')
    '''Temperature of the lot when it enters inventory (in Fahrenheit)'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''



class OutboundCatchWeightRawCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundCatchWeightRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_license_plate_number', 'customer_id', 'item_code', 'item_id', 'warehouse_order_number', 'serial_number', 'catch_weight', 'outbound_order_id', 'lot_reference', 'lot_id', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Checks for equality with the object’s
    `warehouseLicensePlateNumber` field.
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    serial_number = sgqlc.types.Field(String, graphql_name='serialNumber')
    '''Checks for equality with the object’s `serialNumber` field.'''

    catch_weight = sgqlc.types.Field(Float, graphql_name='catchWeight')
    '''Checks for equality with the object’s `catchWeight` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class OutboundCatchWeightRawFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundCatchWeightRaw` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_license_plate_number', 'customer_id', 'item_code', 'item_id', 'warehouse_order_number', 'serial_number', 'catch_weight', 'outbound_order_id', 'lot_reference', 'lot_id', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_license_plate_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseLicensePlateNumber')
    '''Filter by the object’s `warehouseLicensePlateNumber` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    serial_number = sgqlc.types.Field('StringFilter', graphql_name='serialNumber')
    '''Filter by the object’s `serialNumber` field.'''

    catch_weight = sgqlc.types.Field(FloatFilter, graphql_name='catchWeight')
    '''Filter by the object’s `catchWeight` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundCatchWeightRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundCatchWeightRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundCatchWeightRawFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundCatchWeightRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `OutboundCatchWeightRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_license_plate_number', 'customer_id', 'item_code', 'item_id', 'warehouse_order_number', 'serial_number', 'catch_weight', 'outbound_order_id', 'lot_reference', 'lot_id', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Number assigned to pallet for identification purposes'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Unique Identifier for the customer'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Unique value for item'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Unique identifier for item'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    serial_number = sgqlc.types.Field(String, graphql_name='serialNumber')
    '''Serial number for item in the case of pallet'''

    catch_weight = sgqlc.types.Field(Float, graphql_name='catchWeight')
    '''Size of food item in case'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Unique identifier for outbound orders'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Unique value for the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Unique identifier for the lot'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to identify the archived or not'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class OutboundCatchWeightRawPatch(sgqlc.types.Input):
    '''Represents an update to a `OutboundCatchWeightRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_license_plate_number', 'customer_id', 'item_code', 'item_id', 'warehouse_order_number', 'serial_number', 'catch_weight', 'outbound_order_id', 'lot_reference', 'lot_id', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Number assigned to pallet for identification purposes'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Unique Identifier for the customer'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Unique value for item'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Unique identifier for item'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    serial_number = sgqlc.types.Field(String, graphql_name='serialNumber')
    '''Serial number for item in the case of pallet'''

    catch_weight = sgqlc.types.Field(Float, graphql_name='catchWeight')
    '''Size of food item in case'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Unique identifier for outbound orders'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Unique value for the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Unique identifier for the lot'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to identify the archived or not'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class OutboundLoadCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundLoad` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'source_system_id', 'warehouse_facility_id', 'load_reference_number', 'primary_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'shipped_datetime', 'requested_delivery_date', 'arrival_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_in_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_ship_datetime_start', 'expected_ship_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'payment_method_type', '_id', 'id', 'appointment_comment', 'is_archived')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Checks for equality with the object’s `loadReferenceNumber` field.'''

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')
    '''Checks for equality with the object’s `primaryReferenceNumber`
    field.
    '''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Checks for equality with the object’s `trailerNumber` field.'''

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')
    '''Checks for equality with the object’s `trailerLoadType` field.'''

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')
    '''Checks for equality with the object’s `customerLoadNumber` field.'''

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')
    '''Checks for equality with the object’s `actualCarrierCode` field.'''

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')
    '''Checks for equality with the object’s `tenderCarrierCode` field.'''

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')
    '''Checks for equality with the object’s `shippedDatetime` field.'''

    requested_delivery_date = sgqlc.types.Field(Date, graphql_name='requestedDeliveryDate')
    '''Checks for equality with the object’s `requestedDeliveryDate`
    field.
    '''

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')
    '''Checks for equality with the object’s `arrivalDatetime` field.'''

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')
    '''Checks for equality with the object’s `loadStartDatetime` field.'''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Checks for equality with the object’s `loadFinishDatetime` field.'''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Checks for equality with the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Checks for equality with the object’s `signoutDatetime` field.'''

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')
    '''Checks for equality with the object’s `dockInDatetime` field.'''

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')
    '''Checks for equality with the object’s `dockOutDatetime` field.'''

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')
    '''Checks for equality with the object’s `departureDatetime` field.'''

    expected_ship_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeStart')
    '''Checks for equality with the object’s `expectedShipDatetimeStart`
    field.
    '''

    expected_ship_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeEnd')
    '''Checks for equality with the object’s `expectedShipDatetimeEnd`
    field.
    '''

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')
    '''Checks for equality with the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')
    '''Checks for equality with the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')
    '''Checks for equality with the object’s `backTemperature` field.'''

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')
    '''Checks for equality with the object’s `numberOfStops` field.'''

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')
    '''Checks for equality with the object’s `isPlannedLineage` field.'''

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')
    '''Checks for equality with the object’s `driverName` field.'''

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')
    '''Checks for equality with the object’s `driverPhoneNumber` field.'''

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')
    '''Checks for equality with the object’s `appointmentNumber` field.'''

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')
    '''Checks for equality with the object’s `confirmationDatetime`
    field.
    '''

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')
    '''Checks for equality with the object’s `confirmedBy` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')
    '''Checks for equality with the object’s `dockDoorNumber` field.'''

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')
    '''Checks for equality with the object’s `originalScheduledDatetime`
    field.
    '''

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')
    '''Checks for equality with the object’s `scheduledStartDatetime`
    field.
    '''

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')
    '''Checks for equality with the object’s `scheduledEndDatetime`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')
    '''Checks for equality with the object’s `paymentMethodType` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')
    '''Checks for equality with the object’s `appointmentComment` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''



class OutboundLoadFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundLoad` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'source_system_id', 'warehouse_facility_id', 'load_reference_number', 'primary_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'shipped_datetime', 'requested_delivery_date', 'arrival_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_in_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_ship_datetime_start', 'expected_ship_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'payment_method_type', '_id', 'id', 'appointment_comment', 'is_archived', 'and_', 'or_', 'not_')
    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    load_reference_number = sgqlc.types.Field('StringFilter', graphql_name='loadReferenceNumber')
    '''Filter by the object’s `loadReferenceNumber` field.'''

    primary_reference_number = sgqlc.types.Field('StringFilter', graphql_name='primaryReferenceNumber')
    '''Filter by the object’s `primaryReferenceNumber` field.'''

    trailer_number = sgqlc.types.Field('StringFilter', graphql_name='trailerNumber')
    '''Filter by the object’s `trailerNumber` field.'''

    trailer_load_type = sgqlc.types.Field('StringFilter', graphql_name='trailerLoadType')
    '''Filter by the object’s `trailerLoadType` field.'''

    customer_load_number = sgqlc.types.Field('StringFilter', graphql_name='customerLoadNumber')
    '''Filter by the object’s `customerLoadNumber` field.'''

    actual_carrier_code = sgqlc.types.Field('StringFilter', graphql_name='actualCarrierCode')
    '''Filter by the object’s `actualCarrierCode` field.'''

    tender_carrier_code = sgqlc.types.Field('StringFilter', graphql_name='tenderCarrierCode')
    '''Filter by the object’s `tenderCarrierCode` field.'''

    shipped_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='shippedDatetime')
    '''Filter by the object’s `shippedDatetime` field.'''

    requested_delivery_date = sgqlc.types.Field(DateFilter, graphql_name='requestedDeliveryDate')
    '''Filter by the object’s `requestedDeliveryDate` field.'''

    arrival_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='arrivalDatetime')
    '''Filter by the object’s `arrivalDatetime` field.'''

    load_start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='loadStartDatetime')
    '''Filter by the object’s `loadStartDatetime` field.'''

    load_finish_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='loadFinishDatetime')
    '''Filter by the object’s `loadFinishDatetime` field.'''

    signin_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signinDatetime')
    '''Filter by the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signoutDatetime')
    '''Filter by the object’s `signoutDatetime` field.'''

    dock_in_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='dockInDatetime')
    '''Filter by the object’s `dockInDatetime` field.'''

    dock_out_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='dockOutDatetime')
    '''Filter by the object’s `dockOutDatetime` field.'''

    departure_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='departureDatetime')
    '''Filter by the object’s `departureDatetime` field.'''

    expected_ship_datetime_start = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedShipDatetimeStart')
    '''Filter by the object’s `expectedShipDatetimeStart` field.'''

    expected_ship_datetime_end = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedShipDatetimeEnd')
    '''Filter by the object’s `expectedShipDatetimeEnd` field.'''

    front_temperature = sgqlc.types.Field(FloatFilter, graphql_name='frontTemperature')
    '''Filter by the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field(FloatFilter, graphql_name='middleTemperature')
    '''Filter by the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field(FloatFilter, graphql_name='backTemperature')
    '''Filter by the object’s `backTemperature` field.'''

    number_of_stops = sgqlc.types.Field(IntFilter, graphql_name='numberOfStops')
    '''Filter by the object’s `numberOfStops` field.'''

    is_planned_lineage = sgqlc.types.Field(BooleanFilter, graphql_name='isPlannedLineage')
    '''Filter by the object’s `isPlannedLineage` field.'''

    driver_name = sgqlc.types.Field('StringFilter', graphql_name='driverName')
    '''Filter by the object’s `driverName` field.'''

    driver_phone_number = sgqlc.types.Field('StringFilter', graphql_name='driverPhoneNumber')
    '''Filter by the object’s `driverPhoneNumber` field.'''

    appointment_number = sgqlc.types.Field('StringFilter', graphql_name='appointmentNumber')
    '''Filter by the object’s `appointmentNumber` field.'''

    confirmation_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='confirmationDatetime')
    '''Filter by the object’s `confirmationDatetime` field.'''

    confirmed_by = sgqlc.types.Field('StringFilter', graphql_name='confirmedBy')
    '''Filter by the object’s `confirmedBy` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    dock_door_number = sgqlc.types.Field('StringFilter', graphql_name='dockDoorNumber')
    '''Filter by the object’s `dockDoorNumber` field.'''

    original_scheduled_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='originalScheduledDatetime')
    '''Filter by the object’s `originalScheduledDatetime` field.'''

    scheduled_start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scheduledStartDatetime')
    '''Filter by the object’s `scheduledStartDatetime` field.'''

    scheduled_end_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scheduledEndDatetime')
    '''Filter by the object’s `scheduledEndDatetime` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    payment_method_type = sgqlc.types.Field('StringFilter', graphql_name='paymentMethodType')
    '''Filter by the object’s `paymentMethodType` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    appointment_comment = sgqlc.types.Field('StringFilter', graphql_name='appointmentComment')
    '''Filter by the object’s `appointmentComment` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundLoadFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundLoadFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundLoadFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundLoadsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundLoadsRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'load_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'shipped_datetime', 'requested_delivery_date', 'arrival_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_in_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_ship_datetime_start', 'expected_ship_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'payment_method_type', '_id', 'id', 'appointment_comment', 'is_archived', 'primary_reference_number', 'customer_id', 'lading_type')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Checks for equality with the object’s `loadReferenceNumber` field.'''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Checks for equality with the object’s `trailerNumber` field.'''

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')
    '''Checks for equality with the object’s `trailerLoadType` field.'''

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')
    '''Checks for equality with the object’s `customerLoadNumber` field.'''

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')
    '''Checks for equality with the object’s `actualCarrierCode` field.'''

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')
    '''Checks for equality with the object’s `tenderCarrierCode` field.'''

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')
    '''Checks for equality with the object’s `shippedDatetime` field.'''

    requested_delivery_date = sgqlc.types.Field(Date, graphql_name='requestedDeliveryDate')
    '''Checks for equality with the object’s `requestedDeliveryDate`
    field.
    '''

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')
    '''Checks for equality with the object’s `arrivalDatetime` field.'''

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')
    '''Checks for equality with the object’s `loadStartDatetime` field.'''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Checks for equality with the object’s `loadFinishDatetime` field.'''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Checks for equality with the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Checks for equality with the object’s `signoutDatetime` field.'''

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')
    '''Checks for equality with the object’s `dockInDatetime` field.'''

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')
    '''Checks for equality with the object’s `dockOutDatetime` field.'''

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')
    '''Checks for equality with the object’s `departureDatetime` field.'''

    expected_ship_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeStart')
    '''Checks for equality with the object’s `expectedShipDatetimeStart`
    field.
    '''

    expected_ship_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeEnd')
    '''Checks for equality with the object’s `expectedShipDatetimeEnd`
    field.
    '''

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')
    '''Checks for equality with the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')
    '''Checks for equality with the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')
    '''Checks for equality with the object’s `backTemperature` field.'''

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')
    '''Checks for equality with the object’s `numberOfStops` field.'''

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')
    '''Checks for equality with the object’s `isPlannedLineage` field.'''

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')
    '''Checks for equality with the object’s `driverName` field.'''

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')
    '''Checks for equality with the object’s `driverPhoneNumber` field.'''

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')
    '''Checks for equality with the object’s `appointmentNumber` field.'''

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')
    '''Checks for equality with the object’s `confirmationDatetime`
    field.
    '''

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')
    '''Checks for equality with the object’s `confirmedBy` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')
    '''Checks for equality with the object’s `dockDoorNumber` field.'''

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')
    '''Checks for equality with the object’s `originalScheduledDatetime`
    field.
    '''

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')
    '''Checks for equality with the object’s `scheduledStartDatetime`
    field.
    '''

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')
    '''Checks for equality with the object’s `scheduledEndDatetime`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')
    '''Checks for equality with the object’s `paymentMethodType` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')
    '''Checks for equality with the object’s `appointmentComment` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')
    '''Checks for equality with the object’s `primaryReferenceNumber`
    field.
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Checks for equality with the object’s `ladingType` field.'''



class OutboundLoadsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundLoadsRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'load_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'shipped_datetime', 'requested_delivery_date', 'arrival_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_in_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_ship_datetime_start', 'expected_ship_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'payment_method_type', '_id', 'id', 'appointment_comment', 'is_archived', 'primary_reference_number', 'customer_id', 'lading_type', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    load_reference_number = sgqlc.types.Field('StringFilter', graphql_name='loadReferenceNumber')
    '''Filter by the object’s `loadReferenceNumber` field.'''

    trailer_number = sgqlc.types.Field('StringFilter', graphql_name='trailerNumber')
    '''Filter by the object’s `trailerNumber` field.'''

    trailer_load_type = sgqlc.types.Field('StringFilter', graphql_name='trailerLoadType')
    '''Filter by the object’s `trailerLoadType` field.'''

    customer_load_number = sgqlc.types.Field('StringFilter', graphql_name='customerLoadNumber')
    '''Filter by the object’s `customerLoadNumber` field.'''

    actual_carrier_code = sgqlc.types.Field('StringFilter', graphql_name='actualCarrierCode')
    '''Filter by the object’s `actualCarrierCode` field.'''

    tender_carrier_code = sgqlc.types.Field('StringFilter', graphql_name='tenderCarrierCode')
    '''Filter by the object’s `tenderCarrierCode` field.'''

    shipped_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='shippedDatetime')
    '''Filter by the object’s `shippedDatetime` field.'''

    requested_delivery_date = sgqlc.types.Field(DateFilter, graphql_name='requestedDeliveryDate')
    '''Filter by the object’s `requestedDeliveryDate` field.'''

    arrival_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='arrivalDatetime')
    '''Filter by the object’s `arrivalDatetime` field.'''

    load_start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='loadStartDatetime')
    '''Filter by the object’s `loadStartDatetime` field.'''

    load_finish_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='loadFinishDatetime')
    '''Filter by the object’s `loadFinishDatetime` field.'''

    signin_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signinDatetime')
    '''Filter by the object’s `signinDatetime` field.'''

    signout_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='signoutDatetime')
    '''Filter by the object’s `signoutDatetime` field.'''

    dock_in_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='dockInDatetime')
    '''Filter by the object’s `dockInDatetime` field.'''

    dock_out_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='dockOutDatetime')
    '''Filter by the object’s `dockOutDatetime` field.'''

    departure_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='departureDatetime')
    '''Filter by the object’s `departureDatetime` field.'''

    expected_ship_datetime_start = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedShipDatetimeStart')
    '''Filter by the object’s `expectedShipDatetimeStart` field.'''

    expected_ship_datetime_end = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedShipDatetimeEnd')
    '''Filter by the object’s `expectedShipDatetimeEnd` field.'''

    front_temperature = sgqlc.types.Field(FloatFilter, graphql_name='frontTemperature')
    '''Filter by the object’s `frontTemperature` field.'''

    middle_temperature = sgqlc.types.Field(FloatFilter, graphql_name='middleTemperature')
    '''Filter by the object’s `middleTemperature` field.'''

    back_temperature = sgqlc.types.Field(FloatFilter, graphql_name='backTemperature')
    '''Filter by the object’s `backTemperature` field.'''

    number_of_stops = sgqlc.types.Field(IntFilter, graphql_name='numberOfStops')
    '''Filter by the object’s `numberOfStops` field.'''

    is_planned_lineage = sgqlc.types.Field(BooleanFilter, graphql_name='isPlannedLineage')
    '''Filter by the object’s `isPlannedLineage` field.'''

    driver_name = sgqlc.types.Field('StringFilter', graphql_name='driverName')
    '''Filter by the object’s `driverName` field.'''

    driver_phone_number = sgqlc.types.Field('StringFilter', graphql_name='driverPhoneNumber')
    '''Filter by the object’s `driverPhoneNumber` field.'''

    appointment_number = sgqlc.types.Field('StringFilter', graphql_name='appointmentNumber')
    '''Filter by the object’s `appointmentNumber` field.'''

    confirmation_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='confirmationDatetime')
    '''Filter by the object’s `confirmationDatetime` field.'''

    confirmed_by = sgqlc.types.Field('StringFilter', graphql_name='confirmedBy')
    '''Filter by the object’s `confirmedBy` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    dock_door_number = sgqlc.types.Field('StringFilter', graphql_name='dockDoorNumber')
    '''Filter by the object’s `dockDoorNumber` field.'''

    original_scheduled_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='originalScheduledDatetime')
    '''Filter by the object’s `originalScheduledDatetime` field.'''

    scheduled_start_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scheduledStartDatetime')
    '''Filter by the object’s `scheduledStartDatetime` field.'''

    scheduled_end_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='scheduledEndDatetime')
    '''Filter by the object’s `scheduledEndDatetime` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    payment_method_type = sgqlc.types.Field('StringFilter', graphql_name='paymentMethodType')
    '''Filter by the object’s `paymentMethodType` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    appointment_comment = sgqlc.types.Field('StringFilter', graphql_name='appointmentComment')
    '''Filter by the object’s `appointmentComment` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    primary_reference_number = sgqlc.types.Field('StringFilter', graphql_name='primaryReferenceNumber')
    '''Filter by the object’s `primaryReferenceNumber` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    lading_type = sgqlc.types.Field('StringFilter', graphql_name='ladingType')
    '''Filter by the object’s `ladingType` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundLoadsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundLoadsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundLoadsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundLoadsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `OutboundLoadsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'load_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'shipped_datetime', 'requested_delivery_date', 'arrival_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_in_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_ship_datetime_start', 'expected_ship_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'payment_method_type', '_id', 'id', 'appointment_comment', 'is_archived', 'primary_reference_number', 'customer_id', 'lading_type')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    load_reference_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='loadReferenceNumber')
    '''Load Reference number for the loads'''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Trailer number for the loads'''

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')
    '''Trailer Load type for the loads'''

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')
    '''Customer Load number for the loads'''

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')
    '''Actual Carrier code for the loads'''

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')
    '''Tender Carrier code for the loads'''

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')
    '''Shipped datetime for the loads'''

    requested_delivery_date = sgqlc.types.Field(Date, graphql_name='requestedDeliveryDate')
    '''Requested Delivery date for the loads'''

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')
    '''Arrival datetime for the loads'''

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')
    '''Load Start datetime for the loads'''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Load Finish datetime for the loads'''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Signin datetime for the loads'''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Signout datetime for the loads'''

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')
    '''Dock In datetime for the loads'''

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')
    '''Dock Out datetime for the loads'''

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')
    '''Departure datetime for the loads'''

    expected_ship_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeStart')
    '''Expected_Ship_Datetime start for the loads'''

    expected_ship_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeEnd')
    '''Expected_Ship_Datetime end for the loads'''

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')
    '''Temperature at the nose of the trailer at the end of loading  (in
    Fahrenheit)
    '''

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')
    '''Temperature at the middle of the trailer at the end of loading
    (in Fahrenheit)
    '''

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')
    '''Temperature at the tail of the trailer at the end of loading  (in
    Fahrenheit)
    '''

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')
    '''Number Of stops for the loads'''

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')
    '''Is Planned lineage for the loads'''

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')
    '''Driver name for the loads'''

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')
    '''Driver Phone number for the loads'''

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')
    '''Appointment number for the loads'''

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')
    '''Confirmation datetime for the loads'''

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')
    '''Confirmed by for the loads'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')
    '''Dock Door number for the loads'''

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')
    '''Original Scheduled datetime for the loads'''

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')
    '''Scheduled Start datetime for the loads'''

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')
    '''Scheduled End datetime for the loads'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')
    '''Payment Method type for the loads'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')
    '''Appointment comment for the loads'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')
    '''Primary Reference number for the loads'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Lading type for the loads'''



class OutboundLoadsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `OutboundLoadsRaw`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'load_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'shipped_datetime', 'requested_delivery_date', 'arrival_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_in_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_ship_datetime_start', 'expected_ship_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'payment_method_type', '_id', 'id', 'appointment_comment', 'is_archived', 'primary_reference_number', 'customer_id', 'lading_type')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Load Reference number for the loads'''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Trailer number for the loads'''

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')
    '''Trailer Load type for the loads'''

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')
    '''Customer Load number for the loads'''

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')
    '''Actual Carrier code for the loads'''

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')
    '''Tender Carrier code for the loads'''

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')
    '''Shipped datetime for the loads'''

    requested_delivery_date = sgqlc.types.Field(Date, graphql_name='requestedDeliveryDate')
    '''Requested Delivery date for the loads'''

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')
    '''Arrival datetime for the loads'''

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')
    '''Load Start datetime for the loads'''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Load Finish datetime for the loads'''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Signin datetime for the loads'''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Signout datetime for the loads'''

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')
    '''Dock In datetime for the loads'''

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')
    '''Dock Out datetime for the loads'''

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')
    '''Departure datetime for the loads'''

    expected_ship_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeStart')
    '''Expected_Ship_Datetime start for the loads'''

    expected_ship_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeEnd')
    '''Expected_Ship_Datetime end for the loads'''

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')
    '''Temperature at the nose of the trailer at the end of loading  (in
    Fahrenheit)
    '''

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')
    '''Temperature at the middle of the trailer at the end of loading
    (in Fahrenheit)
    '''

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')
    '''Temperature at the tail of the trailer at the end of loading  (in
    Fahrenheit)
    '''

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')
    '''Number Of stops for the loads'''

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')
    '''Is Planned lineage for the loads'''

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')
    '''Driver name for the loads'''

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')
    '''Driver Phone number for the loads'''

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')
    '''Appointment number for the loads'''

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')
    '''Confirmation datetime for the loads'''

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')
    '''Confirmed by for the loads'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')
    '''Dock Door number for the loads'''

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')
    '''Original Scheduled datetime for the loads'''

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')
    '''Scheduled Start datetime for the loads'''

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')
    '''Scheduled End datetime for the loads'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')
    '''Payment Method type for the loads'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')
    '''Appointment comment for the loads'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')
    '''Primary Reference number for the loads'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Lading type for the loads'''



class OutboundOrderCommentsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundOrderCommentsRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'warehouse_order_number', 'comment', 'comment_datetime', 'comment_type', 'comment_sequence', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Checks for equality with the object’s `comment` field.'''

    comment_datetime = sgqlc.types.Field(Datetime, graphql_name='commentDatetime')
    '''Checks for equality with the object’s `commentDatetime` field.'''

    comment_type = sgqlc.types.Field(String, graphql_name='commentType')
    '''Checks for equality with the object’s `commentType` field.'''

    comment_sequence = sgqlc.types.Field(Int, graphql_name='commentSequence')
    '''Checks for equality with the object’s `commentSequence` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class OutboundOrderCommentsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundOrderCommentsRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'warehouse_order_number', 'comment', 'comment_datetime', 'comment_type', 'comment_sequence', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    comment = sgqlc.types.Field('StringFilter', graphql_name='comment')
    '''Filter by the object’s `comment` field.'''

    comment_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='commentDatetime')
    '''Filter by the object’s `commentDatetime` field.'''

    comment_type = sgqlc.types.Field('StringFilter', graphql_name='commentType')
    '''Filter by the object’s `commentType` field.'''

    comment_sequence = sgqlc.types.Field(IntFilter, graphql_name='commentSequence')
    '''Filter by the object’s `commentSequence` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderCommentsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderCommentsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundOrderCommentsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundOrderCommentsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `OutboundOrderCommentsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'warehouse_order_number', 'comment', 'comment_datetime', 'comment_type', 'comment_sequence', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Unique identifier for outbound orders'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment for an order'''

    comment_datetime = sgqlc.types.Field(Datetime, graphql_name='commentDatetime')
    '''Date when comment was recorded (in facility local time)'''

    comment_type = sgqlc.types.Field(String, graphql_name='commentType')
    '''Comment type identifier. Valid values are S – Shipping
    Instructions (dates, backorders, etc.),D – Delivery instructions
    (CFA, phone, etc.),B – BOL comments,M – Miscellaneous, I – Ship To
    Address, W – Warehouse (Default)
    '''

    comment_sequence = sgqlc.types.Field(Int, graphql_name='commentSequence')
    '''Sequence to represent identity in series of comment'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class OutboundOrderCommentsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `OutboundOrderCommentsRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'warehouse_order_number', 'comment', 'comment_datetime', 'comment_type', 'comment_sequence', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Unique identifier for outbound orders'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment for an order'''

    comment_datetime = sgqlc.types.Field(Datetime, graphql_name='commentDatetime')
    '''Date when comment was recorded (in facility local time)'''

    comment_type = sgqlc.types.Field(String, graphql_name='commentType')
    '''Comment type identifier. Valid values are S – Shipping
    Instructions (dates, backorders, etc.),D – Delivery instructions
    (CFA, phone, etc.),B – BOL comments,M – Miscellaneous, I – Ship To
    Address, W – Warehouse (Default)
    '''

    comment_sequence = sgqlc.types.Field(Int, graphql_name='commentSequence')
    '''Sequence to represent identity in series of comment'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class OutboundOrderCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundOrder` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'carrier_id', 'destination_stop_location_id', 'destination_party_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'facility_id', 'outbound_load_id', 'load_reference_number', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'customer_code', 'comments', 'notes', 'requested_pickup_datetime', 'expected_pickup_datetime', 'requested_delivery_datetime', 'actual_delivery_datetime', 'pallet_exchange_type', 'payment_method_type', 'sales_order_number', 'shipped_datetime', 'transportation_method', 'lading_type', 'quantity', 'warehouse_gross_weight', 'weight_uom', 'requested_pallet_platform_type', 'stop_sequence_number', 'carrier_code', 'stop_location_code', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'destination_location_code', 'destination_location_name', 'destination_address_line1', 'destination_address_line2', 'destination_address_line3', 'destination_city', 'destination_state', 'destination_country', 'destination_zip', 'destination_email', 'destination_phone', 'destination_fax', 'order_confirmation_datetime', 'is_canceled', 'is_transfer_order', 'transfer_warehouse_customer_id', 'transfer_customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    carrier_id = sgqlc.types.Field(String, graphql_name='carrierId')
    '''Checks for equality with the object’s `carrierId` field.'''

    destination_stop_location_id = sgqlc.types.Field(String, graphql_name='destinationStopLocationId')
    '''Checks for equality with the object’s `destinationStopLocationId`
    field.
    '''

    destination_party_id = sgqlc.types.Field(String, graphql_name='destinationPartyId')
    '''Checks for equality with the object’s `destinationPartyId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    outbound_load_id = sgqlc.types.Field(String, graphql_name='outboundLoadId')
    '''Checks for equality with the object’s `outboundLoadId` field.'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Checks for equality with the object’s `loadReferenceNumber` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    comments = sgqlc.types.Field(String, graphql_name='comments')
    '''Checks for equality with the object’s `comments` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')
    '''Checks for equality with the object’s `requestedPickupDatetime`
    field.
    '''

    expected_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='expectedPickupDatetime')
    '''Checks for equality with the object’s `expectedPickupDatetime`
    field.
    '''

    requested_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedDeliveryDatetime')
    '''Checks for equality with the object’s `requestedDeliveryDatetime`
    field.
    '''

    actual_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='actualDeliveryDatetime')
    '''Checks for equality with the object’s `actualDeliveryDatetime`
    field.
    '''

    pallet_exchange_type = sgqlc.types.Field(String, graphql_name='palletExchangeType')
    '''Checks for equality with the object’s `palletExchangeType` field.'''

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')
    '''Checks for equality with the object’s `paymentMethodType` field.'''

    sales_order_number = sgqlc.types.Field(String, graphql_name='salesOrderNumber')
    '''Checks for equality with the object’s `salesOrderNumber` field.'''

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')
    '''Checks for equality with the object’s `shippedDatetime` field.'''

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')
    '''Checks for equality with the object’s `transportationMethod`
    field.
    '''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Checks for equality with the object’s `ladingType` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')
    '''Checks for equality with the object’s `warehouseGrossWeight`
    field.
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''

    requested_pallet_platform_type = sgqlc.types.Field(String, graphql_name='requestedPalletPlatformType')
    '''Checks for equality with the object’s
    `requestedPalletPlatformType` field.
    '''

    stop_sequence_number = sgqlc.types.Field(Int, graphql_name='stopSequenceNumber')
    '''Checks for equality with the object’s `stopSequenceNumber` field.'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Checks for equality with the object’s `carrierCode` field.'''

    stop_location_code = sgqlc.types.Field(String, graphql_name='stopLocationCode')
    '''Checks for equality with the object’s `stopLocationCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    destination_location_code = sgqlc.types.Field(String, graphql_name='destinationLocationCode')
    '''Checks for equality with the object’s `destinationLocationCode`
    field.
    '''

    destination_location_name = sgqlc.types.Field(String, graphql_name='destinationLocationName')
    '''Checks for equality with the object’s `destinationLocationName`
    field.
    '''

    destination_address_line1 = sgqlc.types.Field(String, graphql_name='destinationAddressLine1')
    '''Checks for equality with the object’s `destinationAddressLine1`
    field.
    '''

    destination_address_line2 = sgqlc.types.Field(String, graphql_name='destinationAddressLine2')
    '''Checks for equality with the object’s `destinationAddressLine2`
    field.
    '''

    destination_address_line3 = sgqlc.types.Field(String, graphql_name='destinationAddressLine3')
    '''Checks for equality with the object’s `destinationAddressLine3`
    field.
    '''

    destination_city = sgqlc.types.Field(String, graphql_name='destinationCity')
    '''Checks for equality with the object’s `destinationCity` field.'''

    destination_state = sgqlc.types.Field(String, graphql_name='destinationState')
    '''Checks for equality with the object’s `destinationState` field.'''

    destination_country = sgqlc.types.Field(String, graphql_name='destinationCountry')
    '''Checks for equality with the object’s `destinationCountry` field.'''

    destination_zip = sgqlc.types.Field(String, graphql_name='destinationZip')
    '''Checks for equality with the object’s `destinationZip` field.'''

    destination_email = sgqlc.types.Field(String, graphql_name='destinationEmail')
    '''Checks for equality with the object’s `destinationEmail` field.'''

    destination_phone = sgqlc.types.Field(String, graphql_name='destinationPhone')
    '''Checks for equality with the object’s `destinationPhone` field.'''

    destination_fax = sgqlc.types.Field(String, graphql_name='destinationFax')
    '''Checks for equality with the object’s `destinationFax` field.'''

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')
    '''Checks for equality with the object’s `orderConfirmationDatetime`
    field.
    '''

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')
    '''Checks for equality with the object’s `isCanceled` field.'''

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')
    '''Checks for equality with the object’s `isTransferOrder` field.'''

    transfer_warehouse_customer_id = sgqlc.types.Field(String, graphql_name='transferWarehouseCustomerId')
    '''Checks for equality with the object’s
    `transferWarehouseCustomerId` field.
    '''

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')
    '''Checks for equality with the object’s `transferCustomerId` field.'''



class OutboundOrderDetailCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundOrderDetail` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'outbound_order_id', 'item_id', 'lot_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'lot_reference', 'customer_lot_reference', 'required_shelf_life_on_delivery_days', 'is_archived')
    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Checks for equality with the object’s `customerLineNumber` field.'''

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')
    '''Checks for equality with the object’s `tiOverride` field.'''

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')
    '''Checks for equality with the object’s `highOverride` field.'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Checks for equality with the object’s `customerLineReference`
    field.
    '''

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')
    '''Checks for equality with the object’s `shelfLifeDate` field.'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')
    '''Checks for equality with the object’s `positionInTruck` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Checks for equality with the object’s `pickCode` field.'''

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')
    '''Checks for equality with the object’s `labelNumber` field.'''

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')
    '''Checks for equality with the object’s `stickerNumber` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Checks for equality with the object’s `customerLotReference`
    field.
    '''

    required_shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='requiredShelfLifeOnDeliveryDays')
    '''Checks for equality with the object’s
    `requiredShelfLifeOnDeliveryDays` field.
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''



class OutboundOrderDetailFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundOrderDetail` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'outbound_order_id', 'item_id', 'lot_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'lot_reference', 'customer_lot_reference', 'required_shelf_life_on_delivery_days', 'is_archived', 'and_', 'or_', 'not_')
    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    customer_line_number = sgqlc.types.Field('StringFilter', graphql_name='customerLineNumber')
    '''Filter by the object’s `customerLineNumber` field.'''

    ti_override = sgqlc.types.Field(IntFilter, graphql_name='tiOverride')
    '''Filter by the object’s `tiOverride` field.'''

    high_override = sgqlc.types.Field(IntFilter, graphql_name='highOverride')
    '''Filter by the object’s `highOverride` field.'''

    customer_line_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLineReference')
    '''Filter by the object’s `customerLineReference` field.'''

    shelf_life_date = sgqlc.types.Field(DateFilter, graphql_name='shelfLifeDate')
    '''Filter by the object’s `shelfLifeDate` field.'''

    shelf_life_days = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    quantity = sgqlc.types.Field(FloatFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(IntFilter, graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(FloatFilter, graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    position_in_truck = sgqlc.types.Field('StringFilter', graphql_name='positionInTruck')
    '''Filter by the object’s `positionInTruck` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    pick_code = sgqlc.types.Field('StringFilter', graphql_name='pickCode')
    '''Filter by the object’s `pickCode` field.'''

    label_number = sgqlc.types.Field('StringFilter', graphql_name='labelNumber')
    '''Filter by the object’s `labelNumber` field.'''

    sticker_number = sgqlc.types.Field('StringFilter', graphql_name='stickerNumber')
    '''Filter by the object’s `stickerNumber` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    customer_lot_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLotReference')
    '''Filter by the object’s `customerLotReference` field.'''

    required_shelf_life_on_delivery_days = sgqlc.types.Field(IntFilter, graphql_name='requiredShelfLifeOnDeliveryDays')
    '''Filter by the object’s `requiredShelfLifeOnDeliveryDays` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundOrderDetailFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundOrderDetailsExecutionRawCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundOrderDetailsExecutionRaw`
    object types. All fields are tested for equality and combined with
    a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'warehouse_order_number', 'expected_outbound_order_detail_id', 'line_number', 'customer_id', 'customer_code', 'planned_quantity', 'picked_quantity', 'unallocated_planned_quantity', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    expected_outbound_order_detail_id = sgqlc.types.Field(String, graphql_name='expectedOutboundOrderDetailId')
    '''Checks for equality with the object’s
    `expectedOutboundOrderDetailId` field.
    '''

    line_number = sgqlc.types.Field(Int, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    planned_quantity = sgqlc.types.Field(Float, graphql_name='plannedQuantity')
    '''Checks for equality with the object’s `plannedQuantity` field.'''

    picked_quantity = sgqlc.types.Field(Float, graphql_name='pickedQuantity')
    '''Checks for equality with the object’s `pickedQuantity` field.'''

    unallocated_planned_quantity = sgqlc.types.Field(Float, graphql_name='unallocatedPlannedQuantity')
    '''Checks for equality with the object’s `unallocatedPlannedQuantity`
    field.
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class OutboundOrderDetailsExecutionRawFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundOrderDetailsExecutionRaw`
    object types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'warehouse_order_number', 'expected_outbound_order_detail_id', 'line_number', 'customer_id', 'customer_code', 'planned_quantity', 'picked_quantity', 'unallocated_planned_quantity', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    expected_outbound_order_detail_id = sgqlc.types.Field('StringFilter', graphql_name='expectedOutboundOrderDetailId')
    '''Filter by the object’s `expectedOutboundOrderDetailId` field.'''

    line_number = sgqlc.types.Field(IntFilter, graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    planned_quantity = sgqlc.types.Field(FloatFilter, graphql_name='plannedQuantity')
    '''Filter by the object’s `plannedQuantity` field.'''

    picked_quantity = sgqlc.types.Field(FloatFilter, graphql_name='pickedQuantity')
    '''Filter by the object’s `pickedQuantity` field.'''

    unallocated_planned_quantity = sgqlc.types.Field(FloatFilter, graphql_name='unallocatedPlannedQuantity')
    '''Filter by the object’s `unallocatedPlannedQuantity` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailsExecutionRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailsExecutionRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundOrderDetailsExecutionRawFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundOrderDetailsExecutionRawInput(sgqlc.types.Input):
    '''An input for mutations affecting
    `OutboundOrderDetailsExecutionRaw`
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'warehouse_order_number', 'expected_outbound_order_detail_id', 'line_number', 'customer_id', 'customer_code', 'planned_quantity', 'picked_quantity', 'unallocated_planned_quantity', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    expected_outbound_order_detail_id = sgqlc.types.Field(String, graphql_name='expectedOutboundOrderDetailId')
    '''ODS identifier for the expected outbound order detail (references
    wms.expected_outbound_order_details_raw.id)
    '''

    line_number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    planned_quantity = sgqlc.types.Field(Float, graphql_name='plannedQuantity')
    '''Number of cases planned for the order detail'''

    picked_quantity = sgqlc.types.Field(Float, graphql_name='pickedQuantity')
    '''Number of cases currently picked for the order detail'''

    unallocated_planned_quantity = sgqlc.types.Field(Float, graphql_name='unallocatedPlannedQuantity')
    '''Number of planned cases that have not been allocated yet'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class OutboundOrderDetailsExecutionRawPatch(sgqlc.types.Input):
    '''Represents an update to a `OutboundOrderDetailsExecutionRaw`.
    Fields that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'warehouse_order_number', 'expected_outbound_order_detail_id', 'line_number', 'customer_id', 'customer_code', 'planned_quantity', 'picked_quantity', 'unallocated_planned_quantity', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    expected_outbound_order_detail_id = sgqlc.types.Field(String, graphql_name='expectedOutboundOrderDetailId')
    '''ODS identifier for the expected outbound order detail (references
    wms.expected_outbound_order_details_raw.id)
    '''

    line_number = sgqlc.types.Field(Int, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    planned_quantity = sgqlc.types.Field(Float, graphql_name='plannedQuantity')
    '''Number of cases planned for the order detail'''

    picked_quantity = sgqlc.types.Field(Float, graphql_name='pickedQuantity')
    '''Number of cases currently picked for the order detail'''

    unallocated_planned_quantity = sgqlc.types.Field(Float, graphql_name='unallocatedPlannedQuantity')
    '''Number of planned cases that have not been allocated yet'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class OutboundOrderDetailsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundOrderDetailsRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'required_shelf_life_on_delivery_days', 'is_archived', 'outbound_order_id', 'item_id', 'lot_id', 'customer_id', 'code_date', 'best_by_date', 'expiration_date', 'production_date', 'customer_lot_reference', 'weight_uom')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Checks for equality with the object’s `customerLineNumber` field.'''

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')
    '''Checks for equality with the object’s `tiOverride` field.'''

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')
    '''Checks for equality with the object’s `highOverride` field.'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Checks for equality with the object’s `customerLineReference`
    field.
    '''

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')
    '''Checks for equality with the object’s `shelfLifeDate` field.'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Checks for equality with the object’s `shelfLifeDays` field.'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')
    '''Checks for equality with the object’s `positionInTruck` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Checks for equality with the object’s `pickCode` field.'''

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')
    '''Checks for equality with the object’s `labelNumber` field.'''

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')
    '''Checks for equality with the object’s `stickerNumber` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Checks for equality with the object’s `lotReference` field.'''

    required_shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='requiredShelfLifeOnDeliveryDays')
    '''Checks for equality with the object’s
    `requiredShelfLifeOnDeliveryDays` field.
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Checks for equality with the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Checks for equality with the object’s `bestByDate` field.'''

    expiration_date = sgqlc.types.Field(Datetime, graphql_name='expirationDate')
    '''Checks for equality with the object’s `expirationDate` field.'''

    production_date = sgqlc.types.Field(Datetime, graphql_name='productionDate')
    '''Checks for equality with the object’s `productionDate` field.'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Checks for equality with the object’s `customerLotReference`
    field.
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class OutboundOrderDetailsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundOrderDetailsRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'required_shelf_life_on_delivery_days', 'is_archived', 'outbound_order_id', 'item_id', 'lot_id', 'customer_id', 'code_date', 'best_by_date', 'expiration_date', 'production_date', 'customer_lot_reference', 'weight_uom', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field('StringFilter', graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    customer_line_number = sgqlc.types.Field('StringFilter', graphql_name='customerLineNumber')
    '''Filter by the object’s `customerLineNumber` field.'''

    ti_override = sgqlc.types.Field(IntFilter, graphql_name='tiOverride')
    '''Filter by the object’s `tiOverride` field.'''

    high_override = sgqlc.types.Field(IntFilter, graphql_name='highOverride')
    '''Filter by the object’s `highOverride` field.'''

    customer_line_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLineReference')
    '''Filter by the object’s `customerLineReference` field.'''

    shelf_life_date = sgqlc.types.Field(DateFilter, graphql_name='shelfLifeDate')
    '''Filter by the object’s `shelfLifeDate` field.'''

    shelf_life_days = sgqlc.types.Field(IntFilter, graphql_name='shelfLifeDays')
    '''Filter by the object’s `shelfLifeDays` field.'''

    quantity = sgqlc.types.Field(FloatFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    pallet_count = sgqlc.types.Field(IntFilter, graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(FloatFilter, graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    position_in_truck = sgqlc.types.Field('StringFilter', graphql_name='positionInTruck')
    '''Filter by the object’s `positionInTruck` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    pick_code = sgqlc.types.Field('StringFilter', graphql_name='pickCode')
    '''Filter by the object’s `pickCode` field.'''

    label_number = sgqlc.types.Field('StringFilter', graphql_name='labelNumber')
    '''Filter by the object’s `labelNumber` field.'''

    sticker_number = sgqlc.types.Field('StringFilter', graphql_name='stickerNumber')
    '''Filter by the object’s `stickerNumber` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    lot_reference = sgqlc.types.Field('StringFilter', graphql_name='lotReference')
    '''Filter by the object’s `lotReference` field.'''

    required_shelf_life_on_delivery_days = sgqlc.types.Field(IntFilter, graphql_name='requiredShelfLifeOnDeliveryDays')
    '''Filter by the object’s `requiredShelfLifeOnDeliveryDays` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    code_date = sgqlc.types.Field(DateFilter, graphql_name='codeDate')
    '''Filter by the object’s `codeDate` field.'''

    best_by_date = sgqlc.types.Field(DateFilter, graphql_name='bestByDate')
    '''Filter by the object’s `bestByDate` field.'''

    expiration_date = sgqlc.types.Field(DatetimeFilter, graphql_name='expirationDate')
    '''Filter by the object’s `expirationDate` field.'''

    production_date = sgqlc.types.Field(DatetimeFilter, graphql_name='productionDate')
    '''Filter by the object’s `productionDate` field.'''

    customer_lot_reference = sgqlc.types.Field('StringFilter', graphql_name='customerLotReference')
    '''Filter by the object’s `customerLotReference` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundOrderDetailsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundOrderDetailsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `OutboundOrderDetailsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'required_shelf_life_on_delivery_days', 'is_archived', 'outbound_order_id', 'item_id', 'lot_id', 'customer_id', 'code_date', 'best_by_date', 'expiration_date', 'production_date', 'customer_lot_reference', 'weight_uom')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot that fulfilled this
    outbound order detail
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Customer override of line number for this record'''

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')
    '''Ti override for the order'''

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')
    '''High override for the order'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Customer Line reference for the order'''

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')
    '''Shelf Life date for the order'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Shelf Life days for the order'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Pallet count for the order'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')
    '''Position In truck for the order'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Notes notes for the order'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Reservation code for the order'''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Pick code for the order'''

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')
    '''Label number for the order'''

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')
    '''Sticker number for the order'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    required_shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='requiredShelfLifeOnDeliveryDays')
    '''Required_Shelf_Life_On_Delivery days for the order'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the order'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By date for the order'''

    expiration_date = sgqlc.types.Field(Datetime, graphql_name='expirationDate')
    '''Expiration_date of outbound order'''

    production_date = sgqlc.types.Field(Datetime, graphql_name='productionDate')
    '''production_date of outbound order'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Secondary customer-provided reference number for the lot'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class OutboundOrderDetailsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `OutboundOrderDetailsRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'required_shelf_life_on_delivery_days', 'is_archived', 'outbound_order_id', 'item_id', 'lot_id', 'customer_id', 'code_date', 'best_by_date', 'expiration_date', 'production_date', 'customer_lot_reference', 'weight_uom')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot that fulfilled this
    outbound order detail
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Customer override of line number for this record'''

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')
    '''Ti override for the order'''

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')
    '''High override for the order'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Customer Line reference for the order'''

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')
    '''Shelf Life date for the order'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Shelf Life days for the order'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Pallet count for the order'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')
    '''Position In truck for the order'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Notes notes for the order'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Reservation code for the order'''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Pick code for the order'''

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')
    '''Label number for the order'''

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')
    '''Sticker number for the order'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    required_shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='requiredShelfLifeOnDeliveryDays')
    '''Required_Shelf_Life_On_Delivery days for the order'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the order'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By date for the order'''

    expiration_date = sgqlc.types.Field(Datetime, graphql_name='expirationDate')
    '''Expiration_date of outbound order'''

    production_date = sgqlc.types.Field(Datetime, graphql_name='productionDate')
    '''production_date of outbound order'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Secondary customer-provided reference number for the lot'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class OutboundOrderFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundOrder` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'carrier_id', 'destination_stop_location_id', 'destination_party_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'facility_id', 'outbound_load_id', 'load_reference_number', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'customer_code', 'comments', 'notes', 'requested_pickup_datetime', 'expected_pickup_datetime', 'requested_delivery_datetime', 'actual_delivery_datetime', 'pallet_exchange_type', 'payment_method_type', 'sales_order_number', 'shipped_datetime', 'transportation_method', 'lading_type', 'quantity', 'warehouse_gross_weight', 'weight_uom', 'requested_pallet_platform_type', 'stop_sequence_number', 'carrier_code', 'stop_location_code', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'destination_location_code', 'destination_location_name', 'destination_address_line1', 'destination_address_line2', 'destination_address_line3', 'destination_city', 'destination_state', 'destination_country', 'destination_zip', 'destination_email', 'destination_phone', 'destination_fax', 'order_confirmation_datetime', 'is_canceled', 'is_transfer_order', 'transfer_warehouse_customer_id', 'transfer_customer_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    carrier_id = sgqlc.types.Field('StringFilter', graphql_name='carrierId')
    '''Filter by the object’s `carrierId` field.'''

    destination_stop_location_id = sgqlc.types.Field('StringFilter', graphql_name='destinationStopLocationId')
    '''Filter by the object’s `destinationStopLocationId` field.'''

    destination_party_id = sgqlc.types.Field('StringFilter', graphql_name='destinationPartyId')
    '''Filter by the object’s `destinationPartyId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    outbound_load_id = sgqlc.types.Field('StringFilter', graphql_name='outboundLoadId')
    '''Filter by the object’s `outboundLoadId` field.'''

    load_reference_number = sgqlc.types.Field('StringFilter', graphql_name='loadReferenceNumber')
    '''Filter by the object’s `loadReferenceNumber` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    comments = sgqlc.types.Field('StringFilter', graphql_name='comments')
    '''Filter by the object’s `comments` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    requested_pickup_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='requestedPickupDatetime')
    '''Filter by the object’s `requestedPickupDatetime` field.'''

    expected_pickup_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='expectedPickupDatetime')
    '''Filter by the object’s `expectedPickupDatetime` field.'''

    requested_delivery_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='requestedDeliveryDatetime')
    '''Filter by the object’s `requestedDeliveryDatetime` field.'''

    actual_delivery_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='actualDeliveryDatetime')
    '''Filter by the object’s `actualDeliveryDatetime` field.'''

    pallet_exchange_type = sgqlc.types.Field('StringFilter', graphql_name='palletExchangeType')
    '''Filter by the object’s `palletExchangeType` field.'''

    payment_method_type = sgqlc.types.Field('StringFilter', graphql_name='paymentMethodType')
    '''Filter by the object’s `paymentMethodType` field.'''

    sales_order_number = sgqlc.types.Field('StringFilter', graphql_name='salesOrderNumber')
    '''Filter by the object’s `salesOrderNumber` field.'''

    shipped_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='shippedDatetime')
    '''Filter by the object’s `shippedDatetime` field.'''

    transportation_method = sgqlc.types.Field('StringFilter', graphql_name='transportationMethod')
    '''Filter by the object’s `transportationMethod` field.'''

    lading_type = sgqlc.types.Field('StringFilter', graphql_name='ladingType')
    '''Filter by the object’s `ladingType` field.'''

    quantity = sgqlc.types.Field(IntFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    warehouse_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='warehouseGrossWeight')
    '''Filter by the object’s `warehouseGrossWeight` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    requested_pallet_platform_type = sgqlc.types.Field('StringFilter', graphql_name='requestedPalletPlatformType')
    '''Filter by the object’s `requestedPalletPlatformType` field.'''

    stop_sequence_number = sgqlc.types.Field(IntFilter, graphql_name='stopSequenceNumber')
    '''Filter by the object’s `stopSequenceNumber` field.'''

    carrier_code = sgqlc.types.Field('StringFilter', graphql_name='carrierCode')
    '''Filter by the object’s `carrierCode` field.'''

    stop_location_code = sgqlc.types.Field('StringFilter', graphql_name='stopLocationCode')
    '''Filter by the object’s `stopLocationCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    destination_location_code = sgqlc.types.Field('StringFilter', graphql_name='destinationLocationCode')
    '''Filter by the object’s `destinationLocationCode` field.'''

    destination_location_name = sgqlc.types.Field('StringFilter', graphql_name='destinationLocationName')
    '''Filter by the object’s `destinationLocationName` field.'''

    destination_address_line1 = sgqlc.types.Field('StringFilter', graphql_name='destinationAddressLine1')
    '''Filter by the object’s `destinationAddressLine1` field.'''

    destination_address_line2 = sgqlc.types.Field('StringFilter', graphql_name='destinationAddressLine2')
    '''Filter by the object’s `destinationAddressLine2` field.'''

    destination_address_line3 = sgqlc.types.Field('StringFilter', graphql_name='destinationAddressLine3')
    '''Filter by the object’s `destinationAddressLine3` field.'''

    destination_city = sgqlc.types.Field('StringFilter', graphql_name='destinationCity')
    '''Filter by the object’s `destinationCity` field.'''

    destination_state = sgqlc.types.Field('StringFilter', graphql_name='destinationState')
    '''Filter by the object’s `destinationState` field.'''

    destination_country = sgqlc.types.Field('StringFilter', graphql_name='destinationCountry')
    '''Filter by the object’s `destinationCountry` field.'''

    destination_zip = sgqlc.types.Field('StringFilter', graphql_name='destinationZip')
    '''Filter by the object’s `destinationZip` field.'''

    destination_email = sgqlc.types.Field('StringFilter', graphql_name='destinationEmail')
    '''Filter by the object’s `destinationEmail` field.'''

    destination_phone = sgqlc.types.Field('StringFilter', graphql_name='destinationPhone')
    '''Filter by the object’s `destinationPhone` field.'''

    destination_fax = sgqlc.types.Field('StringFilter', graphql_name='destinationFax')
    '''Filter by the object’s `destinationFax` field.'''

    order_confirmation_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='orderConfirmationDatetime')
    '''Filter by the object’s `orderConfirmationDatetime` field.'''

    is_canceled = sgqlc.types.Field(BooleanFilter, graphql_name='isCanceled')
    '''Filter by the object’s `isCanceled` field.'''

    is_transfer_order = sgqlc.types.Field(BooleanFilter, graphql_name='isTransferOrder')
    '''Filter by the object’s `isTransferOrder` field.'''

    transfer_warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='transferWarehouseCustomerId')
    '''Filter by the object’s `transferWarehouseCustomerId` field.'''

    transfer_customer_id = sgqlc.types.Field('StringFilter', graphql_name='transferCustomerId')
    '''Filter by the object’s `transferCustomerId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundOrderFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundOrderReferenceCodeCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundOrderReferenceCode` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'outbound_order_id', 'warehouse_order_number', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Checks for equality with the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Checks for equality with the object’s `referenceValue` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class OutboundOrderReferenceCodeFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundOrderReferenceCode` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'outbound_order_id', 'warehouse_order_number', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    reference_type = sgqlc.types.Field('StringFilter', graphql_name='referenceType')
    '''Filter by the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field('StringFilter', graphql_name='referenceValue')
    '''Filter by the object’s `referenceValue` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderReferenceCodeFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderReferenceCodeFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundOrderReferenceCodeFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundOrderReferenceCodeInput(sgqlc.types.Input):
    '''An input for mutations affecting `OutboundOrderReferenceCode`'''
    __schema__ = base
    __field_names__ = ('id', 'outbound_order_id', 'warehouse_order_number', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class OutboundOrderReferenceCodesRawCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundOrderReferenceCodesRaw`
    object types. All fields are tested for equality and combined with
    a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_order_number', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', '_id', 'id', 'warehouse_facility_id', 'is_archived', 'outbound_order_id')
    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Checks for equality with the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Checks for equality with the object’s `referenceValue` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''



class OutboundOrderReferenceCodesRawFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundOrderReferenceCodesRaw`
    object types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_order_number', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', '_id', 'id', 'warehouse_facility_id', 'is_archived', 'outbound_order_id', 'and_', 'or_', 'not_')
    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    reference_type = sgqlc.types.Field('StringFilter', graphql_name='referenceType')
    '''Filter by the object’s `referenceType` field.'''

    reference_value = sgqlc.types.Field('StringFilter', graphql_name='referenceValue')
    '''Filter by the object’s `referenceValue` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderReferenceCodesRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderReferenceCodesRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundOrderReferenceCodesRawFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundOrderReferenceCodesRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `OutboundOrderReferenceCodesRaw`'''
    __schema__ = base
    __field_names__ = ('warehouse_order_number', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', '_id', 'id', 'warehouse_facility_id', 'is_archived', 'outbound_order_id')
    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    reference_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='referenceType')
    '''Reference type for the order'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Reference value for the order'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''



class OutboundOrderReferenceCodesRawPatch(sgqlc.types.Input):
    '''Represents an update to a `OutboundOrderReferenceCodesRaw`. Fields
    that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('warehouse_order_number', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', '_id', 'id', 'warehouse_facility_id', 'is_archived', 'outbound_order_id')
    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')
    '''Reference type for the order'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Reference value for the order'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''



class OutboundOrdersExecutionRawCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundOrdersExecutionRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'outbound_order_id', 'customer_id', 'customer_code', 'middle_temperature', 'front_temperature', 'back_temperature', 'average_temperature', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    middle_temperature = sgqlc.types.Field(Int, graphql_name='middleTemperature')
    '''Checks for equality with the object’s `middleTemperature` field.'''

    front_temperature = sgqlc.types.Field(Int, graphql_name='frontTemperature')
    '''Checks for equality with the object’s `frontTemperature` field.'''

    back_temperature = sgqlc.types.Field(Int, graphql_name='backTemperature')
    '''Checks for equality with the object’s `backTemperature` field.'''

    average_temperature = sgqlc.types.Field(String, graphql_name='averageTemperature')
    '''Checks for equality with the object’s `averageTemperature` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''



class OutboundOrdersExecutionRawFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundOrdersExecutionRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'outbound_order_id', 'customer_id', 'customer_code', 'middle_temperature', 'front_temperature', 'back_temperature', 'average_temperature', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    middle_temperature = sgqlc.types.Field(IntFilter, graphql_name='middleTemperature')
    '''Filter by the object’s `middleTemperature` field.'''

    front_temperature = sgqlc.types.Field(IntFilter, graphql_name='frontTemperature')
    '''Filter by the object’s `frontTemperature` field.'''

    back_temperature = sgqlc.types.Field(IntFilter, graphql_name='backTemperature')
    '''Filter by the object’s `backTemperature` field.'''

    average_temperature = sgqlc.types.Field('StringFilter', graphql_name='averageTemperature')
    '''Filter by the object’s `averageTemperature` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrdersExecutionRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrdersExecutionRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundOrdersExecutionRawFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundOrdersExecutionRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `OutboundOrdersExecutionRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'outbound_order_id', 'customer_id', 'customer_code', 'middle_temperature', 'front_temperature', 'back_temperature', 'average_temperature', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Order identifier'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Foreign Key for Order'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Foreign Key for Customer Code'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Customer Code'''

    middle_temperature = sgqlc.types.Field(Int, graphql_name='middleTemperature')
    '''Middle temperature'''

    front_temperature = sgqlc.types.Field(Int, graphql_name='frontTemperature')
    '''front Temperature'''

    back_temperature = sgqlc.types.Field(Int, graphql_name='backTemperature')
    '''back Temperature'''

    average_temperature = sgqlc.types.Field(String, graphql_name='averageTemperature')
    '''This is the average outbound truck temperature.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''



class OutboundOrdersExecutionRawPatch(sgqlc.types.Input):
    '''Represents an update to a `OutboundOrdersExecutionRaw`. Fields
    that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'outbound_order_id', 'customer_id', 'customer_code', 'middle_temperature', 'front_temperature', 'back_temperature', 'average_temperature', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Order identifier'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Foreign Key for Order'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Foreign Key for Customer Code'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Customer Code'''

    middle_temperature = sgqlc.types.Field(Int, graphql_name='middleTemperature')
    '''Middle temperature'''

    front_temperature = sgqlc.types.Field(Int, graphql_name='frontTemperature')
    '''front Temperature'''

    back_temperature = sgqlc.types.Field(Int, graphql_name='backTemperature')
    '''back Temperature'''

    average_temperature = sgqlc.types.Field(String, graphql_name='averageTemperature')
    '''This is the average outbound truck temperature.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''



class OutboundOrdersRawCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundOrdersRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'customer_code', 'comments', 'notes', 'requested_delivery_datetime', 'actual_delivery_datetime', 'pallet_exchange_type', 'payment_method_type', 'sales_order_number', 'shipped_datetime', 'transportation_method', 'lading_type', 'quantity', 'warehouse_gross_weight', 'weight_uom', 'requested_pallet_platform_type', 'stop_sequence_number', 'carrier_code', 'stop_location_code', 'created_at', 'updated_at', 'deleted_at', '_version', 'order_confirmation_datetime', 'destination_location_code', 'destination_location_name', 'destination_address_line1', 'destination_address_line2', 'destination_address_line3', 'destination_city', 'destination_state', 'destination_country', 'destination_zip', 'destination_email', 'destination_phone', 'destination_fax', 'requested_pickup_datetime', '_id', 'id', 'load_reference_number', 'is_canceled', 'transfer_customer_code', 'is_transfer_order', 'is_archived', 'outbound_load_id', 'customer_id', 'transfer_customer_id')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    comments = sgqlc.types.Field(String, graphql_name='comments')
    '''Checks for equality with the object’s `comments` field.'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Checks for equality with the object’s `notes` field.'''

    requested_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedDeliveryDatetime')
    '''Checks for equality with the object’s `requestedDeliveryDatetime`
    field.
    '''

    actual_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='actualDeliveryDatetime')
    '''Checks for equality with the object’s `actualDeliveryDatetime`
    field.
    '''

    pallet_exchange_type = sgqlc.types.Field(String, graphql_name='palletExchangeType')
    '''Checks for equality with the object’s `palletExchangeType` field.'''

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')
    '''Checks for equality with the object’s `paymentMethodType` field.'''

    sales_order_number = sgqlc.types.Field(String, graphql_name='salesOrderNumber')
    '''Checks for equality with the object’s `salesOrderNumber` field.'''

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')
    '''Checks for equality with the object’s `shippedDatetime` field.'''

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')
    '''Checks for equality with the object’s `transportationMethod`
    field.
    '''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Checks for equality with the object’s `ladingType` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')
    '''Checks for equality with the object’s `warehouseGrossWeight`
    field.
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''

    requested_pallet_platform_type = sgqlc.types.Field(String, graphql_name='requestedPalletPlatformType')
    '''Checks for equality with the object’s
    `requestedPalletPlatformType` field.
    '''

    stop_sequence_number = sgqlc.types.Field(Int, graphql_name='stopSequenceNumber')
    '''Checks for equality with the object’s `stopSequenceNumber` field.'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Checks for equality with the object’s `carrierCode` field.'''

    stop_location_code = sgqlc.types.Field(String, graphql_name='stopLocationCode')
    '''Checks for equality with the object’s `stopLocationCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')
    '''Checks for equality with the object’s `orderConfirmationDatetime`
    field.
    '''

    destination_location_code = sgqlc.types.Field(String, graphql_name='destinationLocationCode')
    '''Checks for equality with the object’s `destinationLocationCode`
    field.
    '''

    destination_location_name = sgqlc.types.Field(String, graphql_name='destinationLocationName')
    '''Checks for equality with the object’s `destinationLocationName`
    field.
    '''

    destination_address_line1 = sgqlc.types.Field(String, graphql_name='destinationAddressLine1')
    '''Checks for equality with the object’s `destinationAddressLine1`
    field.
    '''

    destination_address_line2 = sgqlc.types.Field(String, graphql_name='destinationAddressLine2')
    '''Checks for equality with the object’s `destinationAddressLine2`
    field.
    '''

    destination_address_line3 = sgqlc.types.Field(String, graphql_name='destinationAddressLine3')
    '''Checks for equality with the object’s `destinationAddressLine3`
    field.
    '''

    destination_city = sgqlc.types.Field(String, graphql_name='destinationCity')
    '''Checks for equality with the object’s `destinationCity` field.'''

    destination_state = sgqlc.types.Field(String, graphql_name='destinationState')
    '''Checks for equality with the object’s `destinationState` field.'''

    destination_country = sgqlc.types.Field(String, graphql_name='destinationCountry')
    '''Checks for equality with the object’s `destinationCountry` field.'''

    destination_zip = sgqlc.types.Field(String, graphql_name='destinationZip')
    '''Checks for equality with the object’s `destinationZip` field.'''

    destination_email = sgqlc.types.Field(String, graphql_name='destinationEmail')
    '''Checks for equality with the object’s `destinationEmail` field.'''

    destination_phone = sgqlc.types.Field(String, graphql_name='destinationPhone')
    '''Checks for equality with the object’s `destinationPhone` field.'''

    destination_fax = sgqlc.types.Field(String, graphql_name='destinationFax')
    '''Checks for equality with the object’s `destinationFax` field.'''

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')
    '''Checks for equality with the object’s `requestedPickupDatetime`
    field.
    '''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Checks for equality with the object’s `loadReferenceNumber` field.'''

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')
    '''Checks for equality with the object’s `isCanceled` field.'''

    transfer_customer_code = sgqlc.types.Field(String, graphql_name='transferCustomerCode')
    '''Checks for equality with the object’s `transferCustomerCode`
    field.
    '''

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')
    '''Checks for equality with the object’s `isTransferOrder` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    outbound_load_id = sgqlc.types.Field(String, graphql_name='outboundLoadId')
    '''Checks for equality with the object’s `outboundLoadId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')
    '''Checks for equality with the object’s `transferCustomerId` field.'''



class OutboundOrdersRawFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundOrdersRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'customer_code', 'comments', 'notes', 'requested_delivery_datetime', 'actual_delivery_datetime', 'pallet_exchange_type', 'payment_method_type', 'sales_order_number', 'shipped_datetime', 'transportation_method', 'lading_type', 'quantity', 'warehouse_gross_weight', 'weight_uom', 'requested_pallet_platform_type', 'stop_sequence_number', 'carrier_code', 'stop_location_code', 'created_at', 'updated_at', 'deleted_at', '_version', 'order_confirmation_datetime', 'destination_location_code', 'destination_location_name', 'destination_address_line1', 'destination_address_line2', 'destination_address_line3', 'destination_city', 'destination_state', 'destination_country', 'destination_zip', 'destination_email', 'destination_phone', 'destination_fax', 'requested_pickup_datetime', '_id', 'id', 'load_reference_number', 'is_canceled', 'transfer_customer_code', 'is_transfer_order', 'is_archived', 'outbound_load_id', 'customer_id', 'transfer_customer_id', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    comments = sgqlc.types.Field('StringFilter', graphql_name='comments')
    '''Filter by the object’s `comments` field.'''

    notes = sgqlc.types.Field('StringFilter', graphql_name='notes')
    '''Filter by the object’s `notes` field.'''

    requested_delivery_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='requestedDeliveryDatetime')
    '''Filter by the object’s `requestedDeliveryDatetime` field.'''

    actual_delivery_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='actualDeliveryDatetime')
    '''Filter by the object’s `actualDeliveryDatetime` field.'''

    pallet_exchange_type = sgqlc.types.Field('StringFilter', graphql_name='palletExchangeType')
    '''Filter by the object’s `palletExchangeType` field.'''

    payment_method_type = sgqlc.types.Field('StringFilter', graphql_name='paymentMethodType')
    '''Filter by the object’s `paymentMethodType` field.'''

    sales_order_number = sgqlc.types.Field('StringFilter', graphql_name='salesOrderNumber')
    '''Filter by the object’s `salesOrderNumber` field.'''

    shipped_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='shippedDatetime')
    '''Filter by the object’s `shippedDatetime` field.'''

    transportation_method = sgqlc.types.Field('StringFilter', graphql_name='transportationMethod')
    '''Filter by the object’s `transportationMethod` field.'''

    lading_type = sgqlc.types.Field('StringFilter', graphql_name='ladingType')
    '''Filter by the object’s `ladingType` field.'''

    quantity = sgqlc.types.Field(IntFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    warehouse_gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='warehouseGrossWeight')
    '''Filter by the object’s `warehouseGrossWeight` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    requested_pallet_platform_type = sgqlc.types.Field('StringFilter', graphql_name='requestedPalletPlatformType')
    '''Filter by the object’s `requestedPalletPlatformType` field.'''

    stop_sequence_number = sgqlc.types.Field(IntFilter, graphql_name='stopSequenceNumber')
    '''Filter by the object’s `stopSequenceNumber` field.'''

    carrier_code = sgqlc.types.Field('StringFilter', graphql_name='carrierCode')
    '''Filter by the object’s `carrierCode` field.'''

    stop_location_code = sgqlc.types.Field('StringFilter', graphql_name='stopLocationCode')
    '''Filter by the object’s `stopLocationCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    order_confirmation_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='orderConfirmationDatetime')
    '''Filter by the object’s `orderConfirmationDatetime` field.'''

    destination_location_code = sgqlc.types.Field('StringFilter', graphql_name='destinationLocationCode')
    '''Filter by the object’s `destinationLocationCode` field.'''

    destination_location_name = sgqlc.types.Field('StringFilter', graphql_name='destinationLocationName')
    '''Filter by the object’s `destinationLocationName` field.'''

    destination_address_line1 = sgqlc.types.Field('StringFilter', graphql_name='destinationAddressLine1')
    '''Filter by the object’s `destinationAddressLine1` field.'''

    destination_address_line2 = sgqlc.types.Field('StringFilter', graphql_name='destinationAddressLine2')
    '''Filter by the object’s `destinationAddressLine2` field.'''

    destination_address_line3 = sgqlc.types.Field('StringFilter', graphql_name='destinationAddressLine3')
    '''Filter by the object’s `destinationAddressLine3` field.'''

    destination_city = sgqlc.types.Field('StringFilter', graphql_name='destinationCity')
    '''Filter by the object’s `destinationCity` field.'''

    destination_state = sgqlc.types.Field('StringFilter', graphql_name='destinationState')
    '''Filter by the object’s `destinationState` field.'''

    destination_country = sgqlc.types.Field('StringFilter', graphql_name='destinationCountry')
    '''Filter by the object’s `destinationCountry` field.'''

    destination_zip = sgqlc.types.Field('StringFilter', graphql_name='destinationZip')
    '''Filter by the object’s `destinationZip` field.'''

    destination_email = sgqlc.types.Field('StringFilter', graphql_name='destinationEmail')
    '''Filter by the object’s `destinationEmail` field.'''

    destination_phone = sgqlc.types.Field('StringFilter', graphql_name='destinationPhone')
    '''Filter by the object’s `destinationPhone` field.'''

    destination_fax = sgqlc.types.Field('StringFilter', graphql_name='destinationFax')
    '''Filter by the object’s `destinationFax` field.'''

    requested_pickup_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='requestedPickupDatetime')
    '''Filter by the object’s `requestedPickupDatetime` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    load_reference_number = sgqlc.types.Field('StringFilter', graphql_name='loadReferenceNumber')
    '''Filter by the object’s `loadReferenceNumber` field.'''

    is_canceled = sgqlc.types.Field(BooleanFilter, graphql_name='isCanceled')
    '''Filter by the object’s `isCanceled` field.'''

    transfer_customer_code = sgqlc.types.Field('StringFilter', graphql_name='transferCustomerCode')
    '''Filter by the object’s `transferCustomerCode` field.'''

    is_transfer_order = sgqlc.types.Field(BooleanFilter, graphql_name='isTransferOrder')
    '''Filter by the object’s `isTransferOrder` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    outbound_load_id = sgqlc.types.Field('StringFilter', graphql_name='outboundLoadId')
    '''Filter by the object’s `outboundLoadId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    transfer_customer_id = sgqlc.types.Field('StringFilter', graphql_name='transferCustomerId')
    '''Filter by the object’s `transferCustomerId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrdersRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrdersRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundOrdersRawFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundOrdersRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `OutboundOrdersRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'customer_code', 'comments', 'notes', 'requested_delivery_datetime', 'actual_delivery_datetime', 'pallet_exchange_type', 'payment_method_type', 'sales_order_number', 'shipped_datetime', 'transportation_method', 'lading_type', 'quantity', 'warehouse_gross_weight', 'weight_uom', 'requested_pallet_platform_type', 'stop_sequence_number', 'carrier_code', 'stop_location_code', 'created_at', 'updated_at', 'deleted_at', '_version', 'order_confirmation_datetime', 'destination_location_code', 'destination_location_name', 'destination_address_line1', 'destination_address_line2', 'destination_address_line3', 'destination_city', 'destination_state', 'destination_country', 'destination_zip', 'destination_email', 'destination_phone', 'destination_fax', 'requested_pickup_datetime', '_id', 'id', 'load_reference_number', 'is_canceled', 'transfer_customer_code', 'is_transfer_order', 'is_archived', 'outbound_load_id', 'customer_id', 'transfer_customer_id')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    comments = sgqlc.types.Field(String, graphql_name='comments')
    '''Comments comments for the order'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Notes notes for the order'''

    requested_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedDeliveryDatetime')
    '''Requested Delivery datetime for the order'''

    actual_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='actualDeliveryDatetime')
    '''Actual Delivery datetime for the order'''

    pallet_exchange_type = sgqlc.types.Field(String, graphql_name='palletExchangeType')
    '''Pallet Exchange type for the order'''

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')
    '''Payment Method type for the order'''

    sales_order_number = sgqlc.types.Field(String, graphql_name='salesOrderNumber')
    '''Sales Order number for the order'''

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')
    '''Shipped datetime for the order'''

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')
    '''Transportation method for the order'''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Lading type for the order'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Total number of cases for the order'''

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')
    '''Warehouse Gross weight for the order'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight uom for the order'''

    requested_pallet_platform_type = sgqlc.types.Field(String, graphql_name='requestedPalletPlatformType')
    '''Requested_Pallet_Platform type for the order'''

    stop_sequence_number = sgqlc.types.Field(Int, graphql_name='stopSequenceNumber')
    '''Stop Sequence number for the order'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Carrier code for the order'''

    stop_location_code = sgqlc.types.Field(String, graphql_name='stopLocationCode')
    '''Stop Location code for the order'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')
    '''Order Confirmation datetime for the order'''

    destination_location_code = sgqlc.types.Field(String, graphql_name='destinationLocationCode')
    '''Destination Location code for the order'''

    destination_location_name = sgqlc.types.Field(String, graphql_name='destinationLocationName')
    '''Destination Location name for the order'''

    destination_address_line1 = sgqlc.types.Field(String, graphql_name='destinationAddressLine1')
    '''Destination Address line1 for the order'''

    destination_address_line2 = sgqlc.types.Field(String, graphql_name='destinationAddressLine2')
    '''Destination Address line2 for the order'''

    destination_address_line3 = sgqlc.types.Field(String, graphql_name='destinationAddressLine3')
    '''Destination Address line3 for the order'''

    destination_city = sgqlc.types.Field(String, graphql_name='destinationCity')
    '''Destination city for the order'''

    destination_state = sgqlc.types.Field(String, graphql_name='destinationState')
    '''Destination state for the order'''

    destination_country = sgqlc.types.Field(String, graphql_name='destinationCountry')
    '''Destination country for the order'''

    destination_zip = sgqlc.types.Field(String, graphql_name='destinationZip')
    '''Destination zip for the order'''

    destination_email = sgqlc.types.Field(String, graphql_name='destinationEmail')
    '''Destination email for the order'''

    destination_phone = sgqlc.types.Field(String, graphql_name='destinationPhone')
    '''Destination phone for the order'''

    destination_fax = sgqlc.types.Field(String, graphql_name='destinationFax')
    '''Destination fax for the order'''

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')
    '''Requested Pickup datetime for the order'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Load Reference number for the order'''

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')
    '''Is canceled for the order'''

    transfer_customer_code = sgqlc.types.Field(String, graphql_name='transferCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')
    '''Is Transfer order for the order'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_load_id = sgqlc.types.Field(String, graphql_name='outboundLoadId')
    '''Outbound Load id for the order'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')
    '''Transfer Customer id for the order'''



class OutboundOrdersRawPatch(sgqlc.types.Input):
    '''Represents an update to a `OutboundOrdersRaw`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'customer_code', 'comments', 'notes', 'requested_delivery_datetime', 'actual_delivery_datetime', 'pallet_exchange_type', 'payment_method_type', 'sales_order_number', 'shipped_datetime', 'transportation_method', 'lading_type', 'quantity', 'warehouse_gross_weight', 'weight_uom', 'requested_pallet_platform_type', 'stop_sequence_number', 'carrier_code', 'stop_location_code', 'created_at', 'updated_at', 'deleted_at', '_version', 'order_confirmation_datetime', 'destination_location_code', 'destination_location_name', 'destination_address_line1', 'destination_address_line2', 'destination_address_line3', 'destination_city', 'destination_state', 'destination_country', 'destination_zip', 'destination_email', 'destination_phone', 'destination_fax', 'requested_pickup_datetime', '_id', 'id', 'load_reference_number', 'is_canceled', 'transfer_customer_code', 'is_transfer_order', 'is_archived', 'outbound_load_id', 'customer_id', 'transfer_customer_id')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    comments = sgqlc.types.Field(String, graphql_name='comments')
    '''Comments comments for the order'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Notes notes for the order'''

    requested_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedDeliveryDatetime')
    '''Requested Delivery datetime for the order'''

    actual_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='actualDeliveryDatetime')
    '''Actual Delivery datetime for the order'''

    pallet_exchange_type = sgqlc.types.Field(String, graphql_name='palletExchangeType')
    '''Pallet Exchange type for the order'''

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')
    '''Payment Method type for the order'''

    sales_order_number = sgqlc.types.Field(String, graphql_name='salesOrderNumber')
    '''Sales Order number for the order'''

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')
    '''Shipped datetime for the order'''

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')
    '''Transportation method for the order'''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Lading type for the order'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Total number of cases for the order'''

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')
    '''Warehouse Gross weight for the order'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight uom for the order'''

    requested_pallet_platform_type = sgqlc.types.Field(String, graphql_name='requestedPalletPlatformType')
    '''Requested_Pallet_Platform type for the order'''

    stop_sequence_number = sgqlc.types.Field(Int, graphql_name='stopSequenceNumber')
    '''Stop Sequence number for the order'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Carrier code for the order'''

    stop_location_code = sgqlc.types.Field(String, graphql_name='stopLocationCode')
    '''Stop Location code for the order'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')
    '''Order Confirmation datetime for the order'''

    destination_location_code = sgqlc.types.Field(String, graphql_name='destinationLocationCode')
    '''Destination Location code for the order'''

    destination_location_name = sgqlc.types.Field(String, graphql_name='destinationLocationName')
    '''Destination Location name for the order'''

    destination_address_line1 = sgqlc.types.Field(String, graphql_name='destinationAddressLine1')
    '''Destination Address line1 for the order'''

    destination_address_line2 = sgqlc.types.Field(String, graphql_name='destinationAddressLine2')
    '''Destination Address line2 for the order'''

    destination_address_line3 = sgqlc.types.Field(String, graphql_name='destinationAddressLine3')
    '''Destination Address line3 for the order'''

    destination_city = sgqlc.types.Field(String, graphql_name='destinationCity')
    '''Destination city for the order'''

    destination_state = sgqlc.types.Field(String, graphql_name='destinationState')
    '''Destination state for the order'''

    destination_country = sgqlc.types.Field(String, graphql_name='destinationCountry')
    '''Destination country for the order'''

    destination_zip = sgqlc.types.Field(String, graphql_name='destinationZip')
    '''Destination zip for the order'''

    destination_email = sgqlc.types.Field(String, graphql_name='destinationEmail')
    '''Destination email for the order'''

    destination_phone = sgqlc.types.Field(String, graphql_name='destinationPhone')
    '''Destination phone for the order'''

    destination_fax = sgqlc.types.Field(String, graphql_name='destinationFax')
    '''Destination fax for the order'''

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')
    '''Requested Pickup datetime for the order'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Load Reference number for the order'''

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')
    '''Is canceled for the order'''

    transfer_customer_code = sgqlc.types.Field(String, graphql_name='transferCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')
    '''Is Transfer order for the order'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_load_id = sgqlc.types.Field(String, graphql_name='outboundLoadId')
    '''Outbound Load id for the order'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')
    '''Transfer Customer id for the order'''



class OutboundPalletsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundPalletsRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'customer_code', 'outbound_pallet_code', 'warehouse_pallet_code', 'case_quantity', 'gross_weight', 'net_weight', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'item_code', 'is_archived', 'outbound_order_id', 'item_id', 'customer_id', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    outbound_pallet_code = sgqlc.types.Field(String, graphql_name='outboundPalletCode')
    '''Checks for equality with the object’s `outboundPalletCode` field.'''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Checks for equality with the object’s `warehousePalletCode` field.'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Checks for equality with the object’s `caseQuantity` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Checks for equality with the object’s `netWeight` field.'''

    pallet_count = sgqlc.types.Field(Float, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class OutboundPalletsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundPalletsRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'customer_code', 'outbound_pallet_code', 'warehouse_pallet_code', 'case_quantity', 'gross_weight', 'net_weight', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'item_code', 'is_archived', 'outbound_order_id', 'item_id', 'customer_id', 'weight_uom', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    outbound_pallet_code = sgqlc.types.Field('StringFilter', graphql_name='outboundPalletCode')
    '''Filter by the object’s `outboundPalletCode` field.'''

    warehouse_pallet_code = sgqlc.types.Field('StringFilter', graphql_name='warehousePalletCode')
    '''Filter by the object’s `warehousePalletCode` field.'''

    case_quantity = sgqlc.types.Field(IntFilter, graphql_name='caseQuantity')
    '''Filter by the object’s `caseQuantity` field.'''

    gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    net_weight = sgqlc.types.Field(FloatFilter, graphql_name='netWeight')
    '''Filter by the object’s `netWeight` field.'''

    pallet_count = sgqlc.types.Field(FloatFilter, graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundPalletsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundPalletsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundPalletsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundPalletsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `OutboundPalletsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'customer_code', 'outbound_pallet_code', 'warehouse_pallet_code', 'case_quantity', 'gross_weight', 'net_weight', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'item_code', 'is_archived', 'outbound_order_id', 'item_id', 'customer_id', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    outbound_pallet_code = sgqlc.types.Field(String, graphql_name='outboundPalletCode')
    '''Outbound Pallet code for the palle'''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Warehouse Pallet code for the palle'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Case quantity for the palle'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product on the pallet(s) (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product on the pallet(s) (in pounds)'''

    pallet_count = sgqlc.types.Field(Float, graphql_name='palletCount')
    '''Pallet count for the palle'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class OutboundPalletsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `OutboundPalletsRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'customer_code', 'outbound_pallet_code', 'warehouse_pallet_code', 'case_quantity', 'gross_weight', 'net_weight', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'item_code', 'is_archived', 'outbound_order_id', 'item_id', 'customer_id', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    outbound_pallet_code = sgqlc.types.Field(String, graphql_name='outboundPalletCode')
    '''Outbound Pallet code for the palle'''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Warehouse Pallet code for the palle'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Case quantity for the palle'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product on the pallet(s) (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product on the pallet(s) (in pounds)'''

    pallet_count = sgqlc.types.Field(Float, graphql_name='palletCount')
    '''Pallet count for the palle'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class OutboundTruckLogRawCondition(sgqlc.types.Input):
    '''A condition to be used against `OutboundTruckLogRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'outbound_order_id', 'customer_code', 'customer_id', 'cooler_quantity', 'cooler_warehouse_cut_quantity', 'cooler_not_enough_quantity', 'cooler_qa_hold_quantity', 'cooler_other_quantity', 'cooler_comment', 'freezer_quantity', 'freezer_warehouse_cut_quantity', 'freezer_not_enough_quantity', 'freezer_qa_hold_quantity', 'freezer_other_quantity', 'freezer_comment', 'dry_quantity', 'dry_warehouse_cut_quantity', 'dry_not_enough_quantity', 'dry_qa_hold_quantity', 'dry_other_quantity', 'dry_comment', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    cooler_quantity = sgqlc.types.Field(Int, graphql_name='coolerQuantity')
    '''Checks for equality with the object’s `coolerQuantity` field.'''

    cooler_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='coolerWarehouseCutQuantity')
    '''Checks for equality with the object’s `coolerWarehouseCutQuantity`
    field.
    '''

    cooler_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='coolerNotEnoughQuantity')
    '''Checks for equality with the object’s `coolerNotEnoughQuantity`
    field.
    '''

    cooler_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='coolerQaHoldQuantity')
    '''Checks for equality with the object’s `coolerQaHoldQuantity`
    field.
    '''

    cooler_other_quantity = sgqlc.types.Field(Int, graphql_name='coolerOtherQuantity')
    '''Checks for equality with the object’s `coolerOtherQuantity` field.'''

    cooler_comment = sgqlc.types.Field(String, graphql_name='coolerComment')
    '''Checks for equality with the object’s `coolerComment` field.'''

    freezer_quantity = sgqlc.types.Field(Int, graphql_name='freezerQuantity')
    '''Checks for equality with the object’s `freezerQuantity` field.'''

    freezer_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='freezerWarehouseCutQuantity')
    '''Checks for equality with the object’s
    `freezerWarehouseCutQuantity` field.
    '''

    freezer_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='freezerNotEnoughQuantity')
    '''Checks for equality with the object’s `freezerNotEnoughQuantity`
    field.
    '''

    freezer_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='freezerQaHoldQuantity')
    '''Checks for equality with the object’s `freezerQaHoldQuantity`
    field.
    '''

    freezer_other_quantity = sgqlc.types.Field(Int, graphql_name='freezerOtherQuantity')
    '''Checks for equality with the object’s `freezerOtherQuantity`
    field.
    '''

    freezer_comment = sgqlc.types.Field(String, graphql_name='freezerComment')
    '''Checks for equality with the object’s `freezerComment` field.'''

    dry_quantity = sgqlc.types.Field(Int, graphql_name='dryQuantity')
    '''Checks for equality with the object’s `dryQuantity` field.'''

    dry_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='dryWarehouseCutQuantity')
    '''Checks for equality with the object’s `dryWarehouseCutQuantity`
    field.
    '''

    dry_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='dryNotEnoughQuantity')
    '''Checks for equality with the object’s `dryNotEnoughQuantity`
    field.
    '''

    dry_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='dryQaHoldQuantity')
    '''Checks for equality with the object’s `dryQaHoldQuantity` field.'''

    dry_other_quantity = sgqlc.types.Field(Int, graphql_name='dryOtherQuantity')
    '''Checks for equality with the object’s `dryOtherQuantity` field.'''

    dry_comment = sgqlc.types.Field(String, graphql_name='dryComment')
    '''Checks for equality with the object’s `dryComment` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class OutboundTruckLogRawFilter(sgqlc.types.Input):
    '''A filter to be used against `OutboundTruckLogRaw` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'outbound_order_id', 'customer_code', 'customer_id', 'cooler_quantity', 'cooler_warehouse_cut_quantity', 'cooler_not_enough_quantity', 'cooler_qa_hold_quantity', 'cooler_other_quantity', 'cooler_comment', 'freezer_quantity', 'freezer_warehouse_cut_quantity', 'freezer_not_enough_quantity', 'freezer_qa_hold_quantity', 'freezer_other_quantity', 'freezer_comment', 'dry_quantity', 'dry_warehouse_cut_quantity', 'dry_not_enough_quantity', 'dry_qa_hold_quantity', 'dry_other_quantity', 'dry_comment', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    cooler_quantity = sgqlc.types.Field(IntFilter, graphql_name='coolerQuantity')
    '''Filter by the object’s `coolerQuantity` field.'''

    cooler_warehouse_cut_quantity = sgqlc.types.Field(IntFilter, graphql_name='coolerWarehouseCutQuantity')
    '''Filter by the object’s `coolerWarehouseCutQuantity` field.'''

    cooler_not_enough_quantity = sgqlc.types.Field(IntFilter, graphql_name='coolerNotEnoughQuantity')
    '''Filter by the object’s `coolerNotEnoughQuantity` field.'''

    cooler_qa_hold_quantity = sgqlc.types.Field(IntFilter, graphql_name='coolerQaHoldQuantity')
    '''Filter by the object’s `coolerQaHoldQuantity` field.'''

    cooler_other_quantity = sgqlc.types.Field(IntFilter, graphql_name='coolerOtherQuantity')
    '''Filter by the object’s `coolerOtherQuantity` field.'''

    cooler_comment = sgqlc.types.Field('StringFilter', graphql_name='coolerComment')
    '''Filter by the object’s `coolerComment` field.'''

    freezer_quantity = sgqlc.types.Field(IntFilter, graphql_name='freezerQuantity')
    '''Filter by the object’s `freezerQuantity` field.'''

    freezer_warehouse_cut_quantity = sgqlc.types.Field(IntFilter, graphql_name='freezerWarehouseCutQuantity')
    '''Filter by the object’s `freezerWarehouseCutQuantity` field.'''

    freezer_not_enough_quantity = sgqlc.types.Field(IntFilter, graphql_name='freezerNotEnoughQuantity')
    '''Filter by the object’s `freezerNotEnoughQuantity` field.'''

    freezer_qa_hold_quantity = sgqlc.types.Field(IntFilter, graphql_name='freezerQaHoldQuantity')
    '''Filter by the object’s `freezerQaHoldQuantity` field.'''

    freezer_other_quantity = sgqlc.types.Field(IntFilter, graphql_name='freezerOtherQuantity')
    '''Filter by the object’s `freezerOtherQuantity` field.'''

    freezer_comment = sgqlc.types.Field('StringFilter', graphql_name='freezerComment')
    '''Filter by the object’s `freezerComment` field.'''

    dry_quantity = sgqlc.types.Field(IntFilter, graphql_name='dryQuantity')
    '''Filter by the object’s `dryQuantity` field.'''

    dry_warehouse_cut_quantity = sgqlc.types.Field(IntFilter, graphql_name='dryWarehouseCutQuantity')
    '''Filter by the object’s `dryWarehouseCutQuantity` field.'''

    dry_not_enough_quantity = sgqlc.types.Field(IntFilter, graphql_name='dryNotEnoughQuantity')
    '''Filter by the object’s `dryNotEnoughQuantity` field.'''

    dry_qa_hold_quantity = sgqlc.types.Field(IntFilter, graphql_name='dryQaHoldQuantity')
    '''Filter by the object’s `dryQaHoldQuantity` field.'''

    dry_other_quantity = sgqlc.types.Field(IntFilter, graphql_name='dryOtherQuantity')
    '''Filter by the object’s `dryOtherQuantity` field.'''

    dry_comment = sgqlc.types.Field('StringFilter', graphql_name='dryComment')
    '''Filter by the object’s `dryComment` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundTruckLogRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutboundTruckLogRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('OutboundTruckLogRawFilter', graphql_name='not')
    '''Negates the expression.'''



class OutboundTruckLogRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `OutboundTruckLogRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'outbound_order_id', 'customer_code', 'customer_id', 'cooler_quantity', 'cooler_warehouse_cut_quantity', 'cooler_not_enough_quantity', 'cooler_qa_hold_quantity', 'cooler_other_quantity', 'cooler_comment', 'freezer_quantity', 'freezer_warehouse_cut_quantity', 'freezer_not_enough_quantity', 'freezer_qa_hold_quantity', 'freezer_other_quantity', 'freezer_comment', 'dry_quantity', 'dry_warehouse_cut_quantity', 'dry_not_enough_quantity', 'dry_qa_hold_quantity', 'dry_other_quantity', 'dry_comment', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    cooler_quantity = sgqlc.types.Field(Int, graphql_name='coolerQuantity')
    '''Cooler quantity for the truck'''

    cooler_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='coolerWarehouseCutQuantity')
    '''Cooler_Warehouse_Cut quantity for the truck'''

    cooler_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='coolerNotEnoughQuantity')
    '''Cooler_Not_Enough quantity for the truck'''

    cooler_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='coolerQaHoldQuantity')
    '''Cooler_Qa_Hold quantity for the truck'''

    cooler_other_quantity = sgqlc.types.Field(Int, graphql_name='coolerOtherQuantity')
    '''Cooler Other quantity for the truck'''

    cooler_comment = sgqlc.types.Field(String, graphql_name='coolerComment')
    '''Cooler comment for the truck'''

    freezer_quantity = sgqlc.types.Field(Int, graphql_name='freezerQuantity')
    '''Freezer quantity for the truck'''

    freezer_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='freezerWarehouseCutQuantity')
    '''Freezer_Warehouse_Cut quantity for the truck'''

    freezer_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='freezerNotEnoughQuantity')
    '''Freezer_Not_Enough quantity for the truck'''

    freezer_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='freezerQaHoldQuantity')
    '''Freezer_Qa_Hold quantity for the truck'''

    freezer_other_quantity = sgqlc.types.Field(Int, graphql_name='freezerOtherQuantity')
    '''Freezer Other quantity for the truck'''

    freezer_comment = sgqlc.types.Field(String, graphql_name='freezerComment')
    '''Freezer comment for the truck'''

    dry_quantity = sgqlc.types.Field(Int, graphql_name='dryQuantity')
    '''Dry quantity for the truck'''

    dry_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='dryWarehouseCutQuantity')
    '''Dry_Warehouse_Cut quantity for the truck'''

    dry_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='dryNotEnoughQuantity')
    '''Dry_Not_Enough quantity for the truck'''

    dry_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='dryQaHoldQuantity')
    '''Dry_Qa_Hold quantity for the truck'''

    dry_other_quantity = sgqlc.types.Field(Int, graphql_name='dryOtherQuantity')
    '''Dry Other quantity for the truck'''

    dry_comment = sgqlc.types.Field(String, graphql_name='dryComment')
    '''Dry comment for the truck'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class OutboundTruckLogRawPatch(sgqlc.types.Input):
    '''Represents an update to a `OutboundTruckLogRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'outbound_order_id', 'customer_code', 'customer_id', 'cooler_quantity', 'cooler_warehouse_cut_quantity', 'cooler_not_enough_quantity', 'cooler_qa_hold_quantity', 'cooler_other_quantity', 'cooler_comment', 'freezer_quantity', 'freezer_warehouse_cut_quantity', 'freezer_not_enough_quantity', 'freezer_qa_hold_quantity', 'freezer_other_quantity', 'freezer_comment', 'dry_quantity', 'dry_warehouse_cut_quantity', 'dry_not_enough_quantity', 'dry_qa_hold_quantity', 'dry_other_quantity', 'dry_comment', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    cooler_quantity = sgqlc.types.Field(Int, graphql_name='coolerQuantity')
    '''Cooler quantity for the truck'''

    cooler_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='coolerWarehouseCutQuantity')
    '''Cooler_Warehouse_Cut quantity for the truck'''

    cooler_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='coolerNotEnoughQuantity')
    '''Cooler_Not_Enough quantity for the truck'''

    cooler_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='coolerQaHoldQuantity')
    '''Cooler_Qa_Hold quantity for the truck'''

    cooler_other_quantity = sgqlc.types.Field(Int, graphql_name='coolerOtherQuantity')
    '''Cooler Other quantity for the truck'''

    cooler_comment = sgqlc.types.Field(String, graphql_name='coolerComment')
    '''Cooler comment for the truck'''

    freezer_quantity = sgqlc.types.Field(Int, graphql_name='freezerQuantity')
    '''Freezer quantity for the truck'''

    freezer_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='freezerWarehouseCutQuantity')
    '''Freezer_Warehouse_Cut quantity for the truck'''

    freezer_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='freezerNotEnoughQuantity')
    '''Freezer_Not_Enough quantity for the truck'''

    freezer_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='freezerQaHoldQuantity')
    '''Freezer_Qa_Hold quantity for the truck'''

    freezer_other_quantity = sgqlc.types.Field(Int, graphql_name='freezerOtherQuantity')
    '''Freezer Other quantity for the truck'''

    freezer_comment = sgqlc.types.Field(String, graphql_name='freezerComment')
    '''Freezer comment for the truck'''

    dry_quantity = sgqlc.types.Field(Int, graphql_name='dryQuantity')
    '''Dry quantity for the truck'''

    dry_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='dryWarehouseCutQuantity')
    '''Dry_Warehouse_Cut quantity for the truck'''

    dry_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='dryNotEnoughQuantity')
    '''Dry_Not_Enough quantity for the truck'''

    dry_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='dryQaHoldQuantity')
    '''Dry_Qa_Hold quantity for the truck'''

    dry_other_quantity = sgqlc.types.Field(Int, graphql_name='dryOtherQuantity')
    '''Dry Other quantity for the truck'''

    dry_comment = sgqlc.types.Field(String, graphql_name='dryComment')
    '''Dry comment for the truck'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class PalletCondition(sgqlc.types.Input):
    '''A condition to be used against `Pallet` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('lot_id', 'item_id', 'warehouse_customer_id', 'customer_id', 'warehouse_location_id', 'customer_enterprise_id', 'facility_id', 'expected_pallet_count', 'expected_quantity', 'on_hold_pallet_count', 'on_hold_quantity', 'available_quantity', 'available_pallet_count', 'on_hand_quantity', 'on_hand_pallet_count', 'committed_quantity', 'committed_pallet_count', 'original_quantity', 'original_pallet_count', 'warehouse_location_code', 'warehouse_license_plate_number', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'pallet_received_date', 'pallet_code', 'reservation_code', 'lot_code', 'item_code', 'is_hpp', 'is_depleted', 'is_blast', 'inventory_status', 'id', 'hold_code', 'depleted_date', 'customer_license_plate_number', 'customer_code', 'blast_out_datetime', 'blast_in_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', '_id')
    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    warehouse_location_id = sgqlc.types.Field(String, graphql_name='warehouseLocationId')
    '''Checks for equality with the object’s `warehouseLocationId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    expected_pallet_count = sgqlc.types.Field(Int, graphql_name='expectedPalletCount')
    '''Checks for equality with the object’s `expectedPalletCount` field.'''

    expected_quantity = sgqlc.types.Field(Int, graphql_name='expectedQuantity')
    '''Checks for equality with the object’s `expectedQuantity` field.'''

    on_hold_pallet_count = sgqlc.types.Field(Int, graphql_name='onHoldPalletCount')
    '''Checks for equality with the object’s `onHoldPalletCount` field.'''

    on_hold_quantity = sgqlc.types.Field(Int, graphql_name='onHoldQuantity')
    '''Checks for equality with the object’s `onHoldQuantity` field.'''

    available_quantity = sgqlc.types.Field(Int, graphql_name='availableQuantity')
    '''Checks for equality with the object’s `availableQuantity` field.'''

    available_pallet_count = sgqlc.types.Field(Int, graphql_name='availablePalletCount')
    '''Checks for equality with the object’s `availablePalletCount`
    field.
    '''

    on_hand_quantity = sgqlc.types.Field(Int, graphql_name='onHandQuantity')
    '''Checks for equality with the object’s `onHandQuantity` field.'''

    on_hand_pallet_count = sgqlc.types.Field(Int, graphql_name='onHandPalletCount')
    '''Checks for equality with the object’s `onHandPalletCount` field.'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Checks for equality with the object’s `committedQuantity` field.'''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Checks for equality with the object’s `committedPalletCount`
    field.
    '''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Checks for equality with the object’s `originalQuantity` field.'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Checks for equality with the object’s `originalPalletCount` field.'''

    warehouse_location_code = sgqlc.types.Field(String, graphql_name='warehouseLocationCode')
    '''Checks for equality with the object’s `warehouseLocationCode`
    field.
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Checks for equality with the object’s
    `warehouseLicensePlateNumber` field.
    '''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    pallet_received_date = sgqlc.types.Field(Datetime, graphql_name='palletReceivedDate')
    '''Checks for equality with the object’s `palletReceivedDate` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    is_hpp = sgqlc.types.Field(Boolean, graphql_name='isHpp')
    '''Checks for equality with the object’s `isHpp` field.'''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Checks for equality with the object’s `isDepleted` field.'''

    is_blast = sgqlc.types.Field(Boolean, graphql_name='isBlast')
    '''Checks for equality with the object’s `isBlast` field.'''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Checks for equality with the object’s `inventoryStatus` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    depleted_date = sgqlc.types.Field(Date, graphql_name='depletedDate')
    '''Checks for equality with the object’s `depletedDate` field.'''

    customer_license_plate_number = sgqlc.types.Field(String, graphql_name='customerLicensePlateNumber')
    '''Checks for equality with the object’s `customerLicensePlateNumber`
    field.
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    blast_out_datetime = sgqlc.types.Field(Datetime, graphql_name='blastOutDatetime')
    '''Checks for equality with the object’s `blastOutDatetime` field.'''

    blast_in_datetime = sgqlc.types.Field(Datetime, graphql_name='blastInDatetime')
    '''Checks for equality with the object’s `blastInDatetime` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class PalletFilter(sgqlc.types.Input):
    '''A filter to be used against `Pallet` object types. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('lot_id', 'item_id', 'warehouse_customer_id', 'customer_id', 'warehouse_location_id', 'customer_enterprise_id', 'facility_id', 'expected_pallet_count', 'expected_quantity', 'on_hold_pallet_count', 'on_hold_quantity', 'available_quantity', 'available_pallet_count', 'on_hand_quantity', 'on_hand_pallet_count', 'committed_quantity', 'committed_pallet_count', 'original_quantity', 'original_pallet_count', 'warehouse_location_code', 'warehouse_license_plate_number', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'pallet_received_date', 'pallet_code', 'reservation_code', 'lot_code', 'item_code', 'is_hpp', 'is_depleted', 'is_blast', 'inventory_status', 'id', 'hold_code', 'depleted_date', 'customer_license_plate_number', 'customer_code', 'blast_out_datetime', 'blast_in_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'and_', 'or_', 'not_')
    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    warehouse_location_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseLocationId')
    '''Filter by the object’s `warehouseLocationId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    expected_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='expectedPalletCount')
    '''Filter by the object’s `expectedPalletCount` field.'''

    expected_quantity = sgqlc.types.Field(IntFilter, graphql_name='expectedQuantity')
    '''Filter by the object’s `expectedQuantity` field.'''

    on_hold_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='onHoldPalletCount')
    '''Filter by the object’s `onHoldPalletCount` field.'''

    on_hold_quantity = sgqlc.types.Field(IntFilter, graphql_name='onHoldQuantity')
    '''Filter by the object’s `onHoldQuantity` field.'''

    available_quantity = sgqlc.types.Field(IntFilter, graphql_name='availableQuantity')
    '''Filter by the object’s `availableQuantity` field.'''

    available_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='availablePalletCount')
    '''Filter by the object’s `availablePalletCount` field.'''

    on_hand_quantity = sgqlc.types.Field(IntFilter, graphql_name='onHandQuantity')
    '''Filter by the object’s `onHandQuantity` field.'''

    on_hand_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='onHandPalletCount')
    '''Filter by the object’s `onHandPalletCount` field.'''

    committed_quantity = sgqlc.types.Field(IntFilter, graphql_name='committedQuantity')
    '''Filter by the object’s `committedQuantity` field.'''

    committed_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='committedPalletCount')
    '''Filter by the object’s `committedPalletCount` field.'''

    original_quantity = sgqlc.types.Field(IntFilter, graphql_name='originalQuantity')
    '''Filter by the object’s `originalQuantity` field.'''

    original_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='originalPalletCount')
    '''Filter by the object’s `originalPalletCount` field.'''

    warehouse_location_code = sgqlc.types.Field('StringFilter', graphql_name='warehouseLocationCode')
    '''Filter by the object’s `warehouseLocationCode` field.'''

    warehouse_license_plate_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseLicensePlateNumber')
    '''Filter by the object’s `warehouseLicensePlateNumber` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    pallet_received_date = sgqlc.types.Field(DatetimeFilter, graphql_name='palletReceivedDate')
    '''Filter by the object’s `palletReceivedDate` field.'''

    pallet_code = sgqlc.types.Field('StringFilter', graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    is_hpp = sgqlc.types.Field(BooleanFilter, graphql_name='isHpp')
    '''Filter by the object’s `isHpp` field.'''

    is_depleted = sgqlc.types.Field(BooleanFilter, graphql_name='isDepleted')
    '''Filter by the object’s `isDepleted` field.'''

    is_blast = sgqlc.types.Field(BooleanFilter, graphql_name='isBlast')
    '''Filter by the object’s `isBlast` field.'''

    inventory_status = sgqlc.types.Field('StringFilter', graphql_name='inventoryStatus')
    '''Filter by the object’s `inventoryStatus` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    depleted_date = sgqlc.types.Field(DateFilter, graphql_name='depletedDate')
    '''Filter by the object’s `depletedDate` field.'''

    customer_license_plate_number = sgqlc.types.Field('StringFilter', graphql_name='customerLicensePlateNumber')
    '''Filter by the object’s `customerLicensePlateNumber` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    blast_out_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='blastOutDatetime')
    '''Filter by the object’s `blastOutDatetime` field.'''

    blast_in_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='blastInDatetime')
    '''Filter by the object’s `blastInDatetime` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('PalletFilter', graphql_name='not')
    '''Negates the expression.'''



class PalletHistoryCondition(sgqlc.types.Input):
    '''A condition to be used against `PalletHistory` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'pallet_code', 'customer_code', 'from_location_code', 'to_location_code', 'transaction_date', 'is_hand_keyed_pallet_number', 'is_hand_keyed_location', 'operator_id', 'quantity', 'work_type', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')
    '''Checks for equality with the object’s `warehouseCustomerId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    from_location_code = sgqlc.types.Field(String, graphql_name='fromLocationCode')
    '''Checks for equality with the object’s `fromLocationCode` field.'''

    to_location_code = sgqlc.types.Field(String, graphql_name='toLocationCode')
    '''Checks for equality with the object’s `toLocationCode` field.'''

    transaction_date = sgqlc.types.Field(Datetime, graphql_name='transactionDate')
    '''Checks for equality with the object’s `transactionDate` field.'''

    is_hand_keyed_pallet_number = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedPalletNumber')
    '''Checks for equality with the object’s `isHandKeyedPalletNumber`
    field.
    '''

    is_hand_keyed_location = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedLocation')
    '''Checks for equality with the object’s `isHandKeyedLocation` field.'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Checks for equality with the object’s `operatorId` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    work_type = sgqlc.types.Field(String, graphql_name='workType')
    '''Checks for equality with the object’s `workType` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''



class PalletHistoryFilter(sgqlc.types.Input):
    '''A filter to be used against `PalletHistory` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'pallet_code', 'customer_code', 'from_location_code', 'to_location_code', 'transaction_date', 'is_hand_keyed_pallet_number', 'is_hand_keyed_location', 'operator_id', 'quantity', 'work_type', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'and_', 'or_', 'not_')
    warehouse_customer_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseCustomerId')
    '''Filter by the object’s `warehouseCustomerId` field.'''

    customer_enterprise_id = sgqlc.types.Field('StringFilter', graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    pallet_code = sgqlc.types.Field('StringFilter', graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    from_location_code = sgqlc.types.Field('StringFilter', graphql_name='fromLocationCode')
    '''Filter by the object’s `fromLocationCode` field.'''

    to_location_code = sgqlc.types.Field('StringFilter', graphql_name='toLocationCode')
    '''Filter by the object’s `toLocationCode` field.'''

    transaction_date = sgqlc.types.Field(DatetimeFilter, graphql_name='transactionDate')
    '''Filter by the object’s `transactionDate` field.'''

    is_hand_keyed_pallet_number = sgqlc.types.Field(BooleanFilter, graphql_name='isHandKeyedPalletNumber')
    '''Filter by the object’s `isHandKeyedPalletNumber` field.'''

    is_hand_keyed_location = sgqlc.types.Field(BooleanFilter, graphql_name='isHandKeyedLocation')
    '''Filter by the object’s `isHandKeyedLocation` field.'''

    operator_id = sgqlc.types.Field('StringFilter', graphql_name='operatorId')
    '''Filter by the object’s `operatorId` field.'''

    quantity = sgqlc.types.Field(IntFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    work_type = sgqlc.types.Field('StringFilter', graphql_name='workType')
    '''Filter by the object’s `workType` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletHistoryFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletHistoryFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('PalletHistoryFilter', graphql_name='not')
    '''Negates the expression.'''



class PalletHistoryRawCondition(sgqlc.types.Input):
    '''A condition to be used against `PalletHistoryRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'pallet_code', 'customer_code', 'from_location_code', 'to_location_code', 'transaction_date', 'is_hand_keyed_pallet_number', 'is_hand_keyed_location', 'operator_id', 'quantity', 'work_type', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'customer_id', 'pallet_id', 'weight_delta', 'tran_type', 'work_order_number', 'final_pallet_code', 'item_id', 'is_archived', 'current_net_weight', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    from_location_code = sgqlc.types.Field(String, graphql_name='fromLocationCode')
    '''Checks for equality with the object’s `fromLocationCode` field.'''

    to_location_code = sgqlc.types.Field(String, graphql_name='toLocationCode')
    '''Checks for equality with the object’s `toLocationCode` field.'''

    transaction_date = sgqlc.types.Field(Datetime, graphql_name='transactionDate')
    '''Checks for equality with the object’s `transactionDate` field.'''

    is_hand_keyed_pallet_number = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedPalletNumber')
    '''Checks for equality with the object’s `isHandKeyedPalletNumber`
    field.
    '''

    is_hand_keyed_location = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedLocation')
    '''Checks for equality with the object’s `isHandKeyedLocation` field.'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Checks for equality with the object’s `operatorId` field.'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Checks for equality with the object’s `quantity` field.'''

    work_type = sgqlc.types.Field(String, graphql_name='workType')
    '''Checks for equality with the object’s `workType` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''Checks for equality with the object’s `palletId` field.'''

    weight_delta = sgqlc.types.Field(Float, graphql_name='weightDelta')
    '''Checks for equality with the object’s `weightDelta` field.'''

    tran_type = sgqlc.types.Field(String, graphql_name='tranType')
    '''Checks for equality with the object’s `tranType` field.'''

    work_order_number = sgqlc.types.Field(String, graphql_name='workOrderNumber')
    '''Checks for equality with the object’s `workOrderNumber` field.'''

    final_pallet_code = sgqlc.types.Field(String, graphql_name='finalPalletCode')
    '''Checks for equality with the object’s `finalPalletCode` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''

    current_net_weight = sgqlc.types.Field(Float, graphql_name='currentNetWeight')
    '''Checks for equality with the object’s `currentNetWeight` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class PalletHistoryRawFilter(sgqlc.types.Input):
    '''A filter to be used against `PalletHistoryRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'pallet_code', 'customer_code', 'from_location_code', 'to_location_code', 'transaction_date', 'is_hand_keyed_pallet_number', 'is_hand_keyed_location', 'operator_id', 'quantity', 'work_type', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'customer_id', 'pallet_id', 'weight_delta', 'tran_type', 'work_order_number', 'final_pallet_code', 'item_id', 'is_archived', 'current_net_weight', 'weight_uom', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    pallet_code = sgqlc.types.Field('StringFilter', graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    from_location_code = sgqlc.types.Field('StringFilter', graphql_name='fromLocationCode')
    '''Filter by the object’s `fromLocationCode` field.'''

    to_location_code = sgqlc.types.Field('StringFilter', graphql_name='toLocationCode')
    '''Filter by the object’s `toLocationCode` field.'''

    transaction_date = sgqlc.types.Field(DatetimeFilter, graphql_name='transactionDate')
    '''Filter by the object’s `transactionDate` field.'''

    is_hand_keyed_pallet_number = sgqlc.types.Field(BooleanFilter, graphql_name='isHandKeyedPalletNumber')
    '''Filter by the object’s `isHandKeyedPalletNumber` field.'''

    is_hand_keyed_location = sgqlc.types.Field(BooleanFilter, graphql_name='isHandKeyedLocation')
    '''Filter by the object’s `isHandKeyedLocation` field.'''

    operator_id = sgqlc.types.Field('StringFilter', graphql_name='operatorId')
    '''Filter by the object’s `operatorId` field.'''

    quantity = sgqlc.types.Field(IntFilter, graphql_name='quantity')
    '''Filter by the object’s `quantity` field.'''

    work_type = sgqlc.types.Field('StringFilter', graphql_name='workType')
    '''Filter by the object’s `workType` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    pallet_id = sgqlc.types.Field('StringFilter', graphql_name='palletId')
    '''Filter by the object’s `palletId` field.'''

    weight_delta = sgqlc.types.Field(FloatFilter, graphql_name='weightDelta')
    '''Filter by the object’s `weightDelta` field.'''

    tran_type = sgqlc.types.Field('StringFilter', graphql_name='tranType')
    '''Filter by the object’s `tranType` field.'''

    work_order_number = sgqlc.types.Field('StringFilter', graphql_name='workOrderNumber')
    '''Filter by the object’s `workOrderNumber` field.'''

    final_pallet_code = sgqlc.types.Field('StringFilter', graphql_name='finalPalletCode')
    '''Filter by the object’s `finalPalletCode` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    current_net_weight = sgqlc.types.Field(FloatFilter, graphql_name='currentNetWeight')
    '''Filter by the object’s `currentNetWeight` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletHistoryRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletHistoryRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('PalletHistoryRawFilter', graphql_name='not')
    '''Negates the expression.'''



class PalletHistoryRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `PalletHistoryRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'pallet_code', 'customer_code', 'from_location_code', 'to_location_code', 'transaction_date', 'is_hand_keyed_pallet_number', 'is_hand_keyed_location', 'operator_id', 'quantity', 'work_type', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'customer_id', 'pallet_id', 'weight_delta', 'tran_type', 'work_order_number', 'final_pallet_code', 'item_id', 'is_archived', 'current_net_weight', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    from_location_code = sgqlc.types.Field(String, graphql_name='fromLocationCode')
    '''From Location code for the histo'''

    to_location_code = sgqlc.types.Field(String, graphql_name='toLocationCode')
    '''To Location code for the histo'''

    transaction_date = sgqlc.types.Field(Datetime, graphql_name='transactionDate')
    '''Transaction date for the histo'''

    is_hand_keyed_pallet_number = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedPalletNumber')
    '''Is_Hand_Keyed_Pallet number for the histo'''

    is_hand_keyed_location = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedLocation')
    '''Is_Hand_Keyed location for the histo'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Operator id for the histo'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases'''

    work_type = sgqlc.types.Field(String, graphql_name='workType')
    '''Work type for the histo'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''Pallet id for the history ('''

    weight_delta = sgqlc.types.Field(Float, graphql_name='weightDelta')

    tran_type = sgqlc.types.Field(String, graphql_name='tranType')

    work_order_number = sgqlc.types.Field(String, graphql_name='workOrderNumber')

    final_pallet_code = sgqlc.types.Field(String, graphql_name='finalPalletCode')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')

    current_net_weight = sgqlc.types.Field(Float, graphql_name='currentNetWeight')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class PalletHistoryRawPatch(sgqlc.types.Input):
    '''Represents an update to a `PalletHistoryRaw`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'pallet_code', 'customer_code', 'from_location_code', 'to_location_code', 'transaction_date', 'is_hand_keyed_pallet_number', 'is_hand_keyed_location', 'operator_id', 'quantity', 'work_type', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'customer_id', 'pallet_id', 'weight_delta', 'tran_type', 'work_order_number', 'final_pallet_code', 'item_id', 'is_archived', 'current_net_weight', 'weight_uom')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    from_location_code = sgqlc.types.Field(String, graphql_name='fromLocationCode')
    '''From Location code for the histo'''

    to_location_code = sgqlc.types.Field(String, graphql_name='toLocationCode')
    '''To Location code for the histo'''

    transaction_date = sgqlc.types.Field(Datetime, graphql_name='transactionDate')
    '''Transaction date for the histo'''

    is_hand_keyed_pallet_number = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedPalletNumber')
    '''Is_Hand_Keyed_Pallet number for the histo'''

    is_hand_keyed_location = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedLocation')
    '''Is_Hand_Keyed location for the histo'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Operator id for the histo'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases'''

    work_type = sgqlc.types.Field(String, graphql_name='workType')
    '''Work type for the histo'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''Pallet id for the history ('''

    weight_delta = sgqlc.types.Field(Float, graphql_name='weightDelta')

    tran_type = sgqlc.types.Field(String, graphql_name='tranType')

    work_order_number = sgqlc.types.Field(String, graphql_name='workOrderNumber')

    final_pallet_code = sgqlc.types.Field(String, graphql_name='finalPalletCode')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')

    current_net_weight = sgqlc.types.Field(Float, graphql_name='currentNetWeight')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class PalletLocationCondition(sgqlc.types.Input):
    '''A condition to be used against `PalletLocation` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'name', 'aisle', 'bay', 'is_pick_area', 'room', 'zone', 'room_type', 'weight_capacity', 'height', 'length', 'depth', 'capacity', 'location_reported_pallets', 'max_pallets', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'location_status', 'is_active', 'is_pallet_storage', 'reporting_room', 'current_pallets')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    aisle = sgqlc.types.Field(String, graphql_name='aisle')
    '''Checks for equality with the object’s `aisle` field.'''

    bay = sgqlc.types.Field(String, graphql_name='bay')
    '''Checks for equality with the object’s `bay` field.'''

    is_pick_area = sgqlc.types.Field(Boolean, graphql_name='isPickArea')
    '''Checks for equality with the object’s `isPickArea` field.'''

    room = sgqlc.types.Field(String, graphql_name='room')
    '''Checks for equality with the object’s `room` field.'''

    zone = sgqlc.types.Field(String, graphql_name='zone')
    '''Checks for equality with the object’s `zone` field.'''

    room_type = sgqlc.types.Field(String, graphql_name='roomType')
    '''Checks for equality with the object’s `roomType` field.'''

    weight_capacity = sgqlc.types.Field(Float, graphql_name='weightCapacity')
    '''Checks for equality with the object’s `weightCapacity` field.'''

    height = sgqlc.types.Field(Float, graphql_name='height')
    '''Checks for equality with the object’s `height` field.'''

    length = sgqlc.types.Field(Float, graphql_name='length')
    '''Checks for equality with the object’s `length` field.'''

    depth = sgqlc.types.Field(Float, graphql_name='depth')
    '''Checks for equality with the object’s `depth` field.'''

    capacity = sgqlc.types.Field(Float, graphql_name='capacity')
    '''Checks for equality with the object’s `capacity` field.'''

    location_reported_pallets = sgqlc.types.Field(Float, graphql_name='locationReportedPallets')
    '''Checks for equality with the object’s `locationReportedPallets`
    field.
    '''

    max_pallets = sgqlc.types.Field(Float, graphql_name='maxPallets')
    '''Checks for equality with the object’s `maxPallets` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    location_status = sgqlc.types.Field(String, graphql_name='locationStatus')
    '''Checks for equality with the object’s `locationStatus` field.'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Checks for equality with the object’s `isActive` field.'''

    is_pallet_storage = sgqlc.types.Field(Boolean, graphql_name='isPalletStorage')
    '''Checks for equality with the object’s `isPalletStorage` field.'''

    reporting_room = sgqlc.types.Field(String, graphql_name='reportingRoom')
    '''Checks for equality with the object’s `reportingRoom` field.'''

    current_pallets = sgqlc.types.Field(Float, graphql_name='currentPallets')
    '''Checks for equality with the object’s `currentPallets` field.'''



class PalletLocationFilter(sgqlc.types.Input):
    '''A filter to be used against `PalletLocation` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'name', 'aisle', 'bay', 'is_pick_area', 'room', 'zone', 'room_type', 'weight_capacity', 'height', 'length', 'depth', 'capacity', 'location_reported_pallets', 'max_pallets', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'location_status', 'is_active', 'is_pallet_storage', 'reporting_room', 'current_pallets', 'and_', 'or_', 'not_')
    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    aisle = sgqlc.types.Field('StringFilter', graphql_name='aisle')
    '''Filter by the object’s `aisle` field.'''

    bay = sgqlc.types.Field('StringFilter', graphql_name='bay')
    '''Filter by the object’s `bay` field.'''

    is_pick_area = sgqlc.types.Field(BooleanFilter, graphql_name='isPickArea')
    '''Filter by the object’s `isPickArea` field.'''

    room = sgqlc.types.Field('StringFilter', graphql_name='room')
    '''Filter by the object’s `room` field.'''

    zone = sgqlc.types.Field('StringFilter', graphql_name='zone')
    '''Filter by the object’s `zone` field.'''

    room_type = sgqlc.types.Field('StringFilter', graphql_name='roomType')
    '''Filter by the object’s `roomType` field.'''

    weight_capacity = sgqlc.types.Field(FloatFilter, graphql_name='weightCapacity')
    '''Filter by the object’s `weightCapacity` field.'''

    height = sgqlc.types.Field(FloatFilter, graphql_name='height')
    '''Filter by the object’s `height` field.'''

    length = sgqlc.types.Field(FloatFilter, graphql_name='length')
    '''Filter by the object’s `length` field.'''

    depth = sgqlc.types.Field(FloatFilter, graphql_name='depth')
    '''Filter by the object’s `depth` field.'''

    capacity = sgqlc.types.Field(FloatFilter, graphql_name='capacity')
    '''Filter by the object’s `capacity` field.'''

    location_reported_pallets = sgqlc.types.Field(FloatFilter, graphql_name='locationReportedPallets')
    '''Filter by the object’s `locationReportedPallets` field.'''

    max_pallets = sgqlc.types.Field(FloatFilter, graphql_name='maxPallets')
    '''Filter by the object’s `maxPallets` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    location_status = sgqlc.types.Field('StringFilter', graphql_name='locationStatus')
    '''Filter by the object’s `locationStatus` field.'''

    is_active = sgqlc.types.Field(BooleanFilter, graphql_name='isActive')
    '''Filter by the object’s `isActive` field.'''

    is_pallet_storage = sgqlc.types.Field(BooleanFilter, graphql_name='isPalletStorage')
    '''Filter by the object’s `isPalletStorage` field.'''

    reporting_room = sgqlc.types.Field('StringFilter', graphql_name='reportingRoom')
    '''Filter by the object’s `reportingRoom` field.'''

    current_pallets = sgqlc.types.Field(FloatFilter, graphql_name='currentPallets')
    '''Filter by the object’s `currentPallets` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('PalletLocationFilter', graphql_name='not')
    '''Negates the expression.'''



class PalletLocationZoneCondition(sgqlc.types.Input):
    '''A condition to be used against `PalletLocationZone` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('wms_system_id', 'zone', 'description', 'classification', 'created_at', 'updated_at')
    wms_system_id = sgqlc.types.Field(Int, graphql_name='wmsSystemId')
    '''Checks for equality with the object’s `wmsSystemId` field.'''

    zone = sgqlc.types.Field(String, graphql_name='zone')
    '''Checks for equality with the object’s `zone` field.'''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Checks for equality with the object’s `description` field.'''

    classification = sgqlc.types.Field(String, graphql_name='classification')
    '''Checks for equality with the object’s `classification` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class PalletLocationZoneFilter(sgqlc.types.Input):
    '''A filter to be used against `PalletLocationZone` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('wms_system_id', 'zone', 'description', 'classification', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    wms_system_id = sgqlc.types.Field(IntFilter, graphql_name='wmsSystemId')
    '''Filter by the object’s `wmsSystemId` field.'''

    zone = sgqlc.types.Field('StringFilter', graphql_name='zone')
    '''Filter by the object’s `zone` field.'''

    description = sgqlc.types.Field('StringFilter', graphql_name='description')
    '''Filter by the object’s `description` field.'''

    classification = sgqlc.types.Field('StringFilter', graphql_name='classification')
    '''Filter by the object’s `classification` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationZoneFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationZoneFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('PalletLocationZoneFilter', graphql_name='not')
    '''Negates the expression.'''



class PalletLocationZoneInput(sgqlc.types.Input):
    '''An input for mutations affecting `PalletLocationZone`'''
    __schema__ = base
    __field_names__ = ('wms_system_id', 'zone', 'description', 'classification', 'created_at', 'updated_at')
    wms_system_id = sgqlc.types.Field(Int, graphql_name='wmsSystemId')

    zone = sgqlc.types.Field(String, graphql_name='zone')

    description = sgqlc.types.Field(String, graphql_name='description')

    classification = sgqlc.types.Field(String, graphql_name='classification')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class PalletLocationsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `PalletLocationsRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'source_row_id', 'name', 'aisle', 'bay', 'is_pick_area', 'room', 'zone', 'room_type', 'weight_capacity', 'height', 'length', 'depth', 'capacity', 'location_reported_pallets', 'max_pallets', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'location_status', 'is_active', 'is_pallet_storage', 'reporting_room', 'current_pallets', 'weight_uom')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    aisle = sgqlc.types.Field(String, graphql_name='aisle')
    '''Checks for equality with the object’s `aisle` field.'''

    bay = sgqlc.types.Field(String, graphql_name='bay')
    '''Checks for equality with the object’s `bay` field.'''

    is_pick_area = sgqlc.types.Field(Boolean, graphql_name='isPickArea')
    '''Checks for equality with the object’s `isPickArea` field.'''

    room = sgqlc.types.Field(String, graphql_name='room')
    '''Checks for equality with the object’s `room` field.'''

    zone = sgqlc.types.Field(String, graphql_name='zone')
    '''Checks for equality with the object’s `zone` field.'''

    room_type = sgqlc.types.Field(String, graphql_name='roomType')
    '''Checks for equality with the object’s `roomType` field.'''

    weight_capacity = sgqlc.types.Field(Float, graphql_name='weightCapacity')
    '''Checks for equality with the object’s `weightCapacity` field.'''

    height = sgqlc.types.Field(Float, graphql_name='height')
    '''Checks for equality with the object’s `height` field.'''

    length = sgqlc.types.Field(Float, graphql_name='length')
    '''Checks for equality with the object’s `length` field.'''

    depth = sgqlc.types.Field(Float, graphql_name='depth')
    '''Checks for equality with the object’s `depth` field.'''

    capacity = sgqlc.types.Field(Float, graphql_name='capacity')
    '''Checks for equality with the object’s `capacity` field.'''

    location_reported_pallets = sgqlc.types.Field(Float, graphql_name='locationReportedPallets')
    '''Checks for equality with the object’s `locationReportedPallets`
    field.
    '''

    max_pallets = sgqlc.types.Field(Float, graphql_name='maxPallets')
    '''Checks for equality with the object’s `maxPallets` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    location_status = sgqlc.types.Field(String, graphql_name='locationStatus')
    '''Checks for equality with the object’s `locationStatus` field.'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Checks for equality with the object’s `isActive` field.'''

    is_pallet_storage = sgqlc.types.Field(Boolean, graphql_name='isPalletStorage')
    '''Checks for equality with the object’s `isPalletStorage` field.'''

    reporting_room = sgqlc.types.Field(String, graphql_name='reportingRoom')
    '''Checks for equality with the object’s `reportingRoom` field.'''

    current_pallets = sgqlc.types.Field(Float, graphql_name='currentPallets')
    '''Checks for equality with the object’s `currentPallets` field.'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Checks for equality with the object’s `weightUom` field.'''



class PalletLocationsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `PalletLocationsRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'source_row_id', 'name', 'aisle', 'bay', 'is_pick_area', 'room', 'zone', 'room_type', 'weight_capacity', 'height', 'length', 'depth', 'capacity', 'location_reported_pallets', 'max_pallets', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'location_status', 'is_active', 'is_pallet_storage', 'reporting_room', 'current_pallets', 'weight_uom', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    aisle = sgqlc.types.Field('StringFilter', graphql_name='aisle')
    '''Filter by the object’s `aisle` field.'''

    bay = sgqlc.types.Field('StringFilter', graphql_name='bay')
    '''Filter by the object’s `bay` field.'''

    is_pick_area = sgqlc.types.Field(BooleanFilter, graphql_name='isPickArea')
    '''Filter by the object’s `isPickArea` field.'''

    room = sgqlc.types.Field('StringFilter', graphql_name='room')
    '''Filter by the object’s `room` field.'''

    zone = sgqlc.types.Field('StringFilter', graphql_name='zone')
    '''Filter by the object’s `zone` field.'''

    room_type = sgqlc.types.Field('StringFilter', graphql_name='roomType')
    '''Filter by the object’s `roomType` field.'''

    weight_capacity = sgqlc.types.Field(FloatFilter, graphql_name='weightCapacity')
    '''Filter by the object’s `weightCapacity` field.'''

    height = sgqlc.types.Field(FloatFilter, graphql_name='height')
    '''Filter by the object’s `height` field.'''

    length = sgqlc.types.Field(FloatFilter, graphql_name='length')
    '''Filter by the object’s `length` field.'''

    depth = sgqlc.types.Field(FloatFilter, graphql_name='depth')
    '''Filter by the object’s `depth` field.'''

    capacity = sgqlc.types.Field(FloatFilter, graphql_name='capacity')
    '''Filter by the object’s `capacity` field.'''

    location_reported_pallets = sgqlc.types.Field(FloatFilter, graphql_name='locationReportedPallets')
    '''Filter by the object’s `locationReportedPallets` field.'''

    max_pallets = sgqlc.types.Field(FloatFilter, graphql_name='maxPallets')
    '''Filter by the object’s `maxPallets` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    location_status = sgqlc.types.Field('StringFilter', graphql_name='locationStatus')
    '''Filter by the object’s `locationStatus` field.'''

    is_active = sgqlc.types.Field(BooleanFilter, graphql_name='isActive')
    '''Filter by the object’s `isActive` field.'''

    is_pallet_storage = sgqlc.types.Field(BooleanFilter, graphql_name='isPalletStorage')
    '''Filter by the object’s `isPalletStorage` field.'''

    reporting_room = sgqlc.types.Field('StringFilter', graphql_name='reportingRoom')
    '''Filter by the object’s `reportingRoom` field.'''

    current_pallets = sgqlc.types.Field(FloatFilter, graphql_name='currentPallets')
    '''Filter by the object’s `currentPallets` field.'''

    weight_uom = sgqlc.types.Field('StringFilter', graphql_name='weightUom')
    '''Filter by the object’s `weightUom` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('PalletLocationsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class PalletLocationsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `PalletLocationsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'source_row_id', 'name', 'aisle', 'bay', 'is_pick_area', 'room', 'zone', 'room_type', 'weight_capacity', 'height', 'length', 'depth', 'capacity', 'location_reported_pallets', 'max_pallets', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'location_status', 'is_active', 'is_pallet_storage', 'reporting_room', 'current_pallets', 'weight_uom')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    '''Name name for the locat'''

    aisle = sgqlc.types.Field(String, graphql_name='aisle')
    '''Aisle aisle for the locat'''

    bay = sgqlc.types.Field(String, graphql_name='bay')
    '''Bay bay for the locat'''

    is_pick_area = sgqlc.types.Field(Boolean, graphql_name='isPickArea')
    '''Is Pick area for the locat'''

    room = sgqlc.types.Field(String, graphql_name='room')
    '''Room room for the locat'''

    zone = sgqlc.types.Field(String, graphql_name='zone')
    '''Zone zone for the locat'''

    room_type = sgqlc.types.Field(String, graphql_name='roomType')
    '''Room type for the locat'''

    weight_capacity = sgqlc.types.Field(Float, graphql_name='weightCapacity')
    '''Weight capacity for the locat'''

    height = sgqlc.types.Field(Float, graphql_name='height')
    '''Height height for the locat'''

    length = sgqlc.types.Field(Float, graphql_name='length')
    '''Length length for the locat'''

    depth = sgqlc.types.Field(Float, graphql_name='depth')
    '''Depth depth for the locat'''

    capacity = sgqlc.types.Field(Float, graphql_name='capacity')
    '''Capacity capacity for the locat'''

    location_reported_pallets = sgqlc.types.Field(Float, graphql_name='locationReportedPallets')
    '''Location Reported pallets for the locat'''

    max_pallets = sgqlc.types.Field(Float, graphql_name='maxPallets')
    '''Max pallets for the locat'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    location_status = sgqlc.types.Field(String, graphql_name='locationStatus')
    '''Location status for the locat'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Is active for the locat'''

    is_pallet_storage = sgqlc.types.Field(Boolean, graphql_name='isPalletStorage')
    '''Is Pallet storage for the locat'''

    reporting_room = sgqlc.types.Field(String, graphql_name='reportingRoom')
    '''Reporting room for the locat'''

    current_pallets = sgqlc.types.Field(Float, graphql_name='currentPallets')
    '''Current pallets for the locat'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class PalletLocationsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `PalletLocationsRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'source_row_id', 'name', 'aisle', 'bay', 'is_pick_area', 'room', 'zone', 'room_type', 'weight_capacity', 'height', 'length', 'depth', 'capacity', 'location_reported_pallets', 'max_pallets', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'location_status', 'is_active', 'is_pallet_storage', 'reporting_room', 'current_pallets', 'weight_uom')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Name name for the locat'''

    aisle = sgqlc.types.Field(String, graphql_name='aisle')
    '''Aisle aisle for the locat'''

    bay = sgqlc.types.Field(String, graphql_name='bay')
    '''Bay bay for the locat'''

    is_pick_area = sgqlc.types.Field(Boolean, graphql_name='isPickArea')
    '''Is Pick area for the locat'''

    room = sgqlc.types.Field(String, graphql_name='room')
    '''Room room for the locat'''

    zone = sgqlc.types.Field(String, graphql_name='zone')
    '''Zone zone for the locat'''

    room_type = sgqlc.types.Field(String, graphql_name='roomType')
    '''Room type for the locat'''

    weight_capacity = sgqlc.types.Field(Float, graphql_name='weightCapacity')
    '''Weight capacity for the locat'''

    height = sgqlc.types.Field(Float, graphql_name='height')
    '''Height height for the locat'''

    length = sgqlc.types.Field(Float, graphql_name='length')
    '''Length length for the locat'''

    depth = sgqlc.types.Field(Float, graphql_name='depth')
    '''Depth depth for the locat'''

    capacity = sgqlc.types.Field(Float, graphql_name='capacity')
    '''Capacity capacity for the locat'''

    location_reported_pallets = sgqlc.types.Field(Float, graphql_name='locationReportedPallets')
    '''Location Reported pallets for the locat'''

    max_pallets = sgqlc.types.Field(Float, graphql_name='maxPallets')
    '''Max pallets for the locat'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    location_status = sgqlc.types.Field(String, graphql_name='locationStatus')
    '''Location status for the locat'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Is active for the locat'''

    is_pallet_storage = sgqlc.types.Field(Boolean, graphql_name='isPalletStorage')
    '''Is Pallet storage for the locat'''

    reporting_room = sgqlc.types.Field(String, graphql_name='reportingRoom')
    '''Reporting room for the locat'''

    current_pallets = sgqlc.types.Field(Float, graphql_name='currentPallets')
    '''Current pallets for the locat'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class PalletReferenceCodesRawCondition(sgqlc.types.Input):
    '''A condition to be used against `PalletReferenceCodesRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'pallet_id', 'is_depleted', 'purchase_order_number_at_receipt', 'plant_code', 'import_mark', 'production_line_hour', 'usda_stamp', 'country_of_origin', 'inception_date', 'container_number', 'alternate_lot_number', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''Checks for equality with the object’s `palletId` field.'''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Checks for equality with the object’s `isDepleted` field.'''

    purchase_order_number_at_receipt = sgqlc.types.Field(String, graphql_name='purchaseOrderNumberAtReceipt')
    '''Checks for equality with the object’s
    `purchaseOrderNumberAtReceipt` field.
    '''

    plant_code = sgqlc.types.Field(String, graphql_name='plantCode')
    '''Checks for equality with the object’s `plantCode` field.'''

    import_mark = sgqlc.types.Field(String, graphql_name='importMark')
    '''Checks for equality with the object’s `importMark` field.'''

    production_line_hour = sgqlc.types.Field(String, graphql_name='productionLineHour')
    '''Checks for equality with the object’s `productionLineHour` field.'''

    usda_stamp = sgqlc.types.Field(String, graphql_name='usdaStamp')
    '''Checks for equality with the object’s `usdaStamp` field.'''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Checks for equality with the object’s `countryOfOrigin` field.'''

    inception_date = sgqlc.types.Field(String, graphql_name='inceptionDate')
    '''Checks for equality with the object’s `inceptionDate` field.'''

    container_number = sgqlc.types.Field(String, graphql_name='containerNumber')
    '''Checks for equality with the object’s `containerNumber` field.'''

    alternate_lot_number = sgqlc.types.Field(String, graphql_name='alternateLotNumber')
    '''Checks for equality with the object’s `alternateLotNumber` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class PalletReferenceCodesRawFilter(sgqlc.types.Input):
    '''A filter to be used against `PalletReferenceCodesRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'pallet_id', 'is_depleted', 'purchase_order_number_at_receipt', 'plant_code', 'import_mark', 'production_line_hour', 'usda_stamp', 'country_of_origin', 'inception_date', 'container_number', 'alternate_lot_number', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    pallet_id = sgqlc.types.Field('StringFilter', graphql_name='palletId')
    '''Filter by the object’s `palletId` field.'''

    is_depleted = sgqlc.types.Field(BooleanFilter, graphql_name='isDepleted')
    '''Filter by the object’s `isDepleted` field.'''

    purchase_order_number_at_receipt = sgqlc.types.Field('StringFilter', graphql_name='purchaseOrderNumberAtReceipt')
    '''Filter by the object’s `purchaseOrderNumberAtReceipt` field.'''

    plant_code = sgqlc.types.Field('StringFilter', graphql_name='plantCode')
    '''Filter by the object’s `plantCode` field.'''

    import_mark = sgqlc.types.Field('StringFilter', graphql_name='importMark')
    '''Filter by the object’s `importMark` field.'''

    production_line_hour = sgqlc.types.Field('StringFilter', graphql_name='productionLineHour')
    '''Filter by the object’s `productionLineHour` field.'''

    usda_stamp = sgqlc.types.Field('StringFilter', graphql_name='usdaStamp')
    '''Filter by the object’s `usdaStamp` field.'''

    country_of_origin = sgqlc.types.Field('StringFilter', graphql_name='countryOfOrigin')
    '''Filter by the object’s `countryOfOrigin` field.'''

    inception_date = sgqlc.types.Field('StringFilter', graphql_name='inceptionDate')
    '''Filter by the object’s `inceptionDate` field.'''

    container_number = sgqlc.types.Field('StringFilter', graphql_name='containerNumber')
    '''Filter by the object’s `containerNumber` field.'''

    alternate_lot_number = sgqlc.types.Field('StringFilter', graphql_name='alternateLotNumber')
    '''Filter by the object’s `alternateLotNumber` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletReferenceCodesRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletReferenceCodesRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('PalletReferenceCodesRawFilter', graphql_name='not')
    '''Negates the expression.'''



class PalletReferenceCodesRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `PalletReferenceCodesRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'pallet_id', 'is_depleted', 'purchase_order_number_at_receipt', 'plant_code', 'import_mark', 'production_line_hour', 'usda_stamp', 'country_of_origin', 'inception_date', 'container_number', 'alternate_lot_number', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS identifier for the pallet (references wms.pallets_raw.id)'''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Flag for whether the pallet has been depleted or shipped from the
    warehouse
    '''

    purchase_order_number_at_receipt = sgqlc.types.Field(String, graphql_name='purchaseOrderNumberAtReceipt')
    '''Purchase order number at time of receipt'''

    plant_code = sgqlc.types.Field(String, graphql_name='plantCode')
    '''Code/Identifier for the Plant that manufactured the pallet's
    product
    '''

    import_mark = sgqlc.types.Field(String, graphql_name='importMark')
    '''Import mark'''

    production_line_hour = sgqlc.types.Field(String, graphql_name='productionLineHour')
    '''Production Line/Hour'''

    usda_stamp = sgqlc.types.Field(String, graphql_name='usdaStamp')
    '''USDA Stamp'''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Country of origin'''

    inception_date = sgqlc.types.Field(String, graphql_name='inceptionDate')
    '''Inception Date'''

    container_number = sgqlc.types.Field(String, graphql_name='containerNumber')
    '''Container number'''

    alternate_lot_number = sgqlc.types.Field(String, graphql_name='alternateLotNumber')
    '''Alternate Lot Number'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class PalletReferenceCodesRawPatch(sgqlc.types.Input):
    '''Represents an update to a `PalletReferenceCodesRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'pallet_id', 'is_depleted', 'purchase_order_number_at_receipt', 'plant_code', 'import_mark', 'production_line_hour', 'usda_stamp', 'country_of_origin', 'inception_date', 'container_number', 'alternate_lot_number', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS identifier for the pallet (references wms.pallets_raw.id)'''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Flag for whether the pallet has been depleted or shipped from the
    warehouse
    '''

    purchase_order_number_at_receipt = sgqlc.types.Field(String, graphql_name='purchaseOrderNumberAtReceipt')
    '''Purchase order number at time of receipt'''

    plant_code = sgqlc.types.Field(String, graphql_name='plantCode')
    '''Code/Identifier for the Plant that manufactured the pallet's
    product
    '''

    import_mark = sgqlc.types.Field(String, graphql_name='importMark')
    '''Import mark'''

    production_line_hour = sgqlc.types.Field(String, graphql_name='productionLineHour')
    '''Production Line/Hour'''

    usda_stamp = sgqlc.types.Field(String, graphql_name='usdaStamp')
    '''USDA Stamp'''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Country of origin'''

    inception_date = sgqlc.types.Field(String, graphql_name='inceptionDate')
    '''Inception Date'''

    container_number = sgqlc.types.Field(String, graphql_name='containerNumber')
    '''Container number'''

    alternate_lot_number = sgqlc.types.Field(String, graphql_name='alternateLotNumber')
    '''Alternate Lot Number'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class PalletTransactionsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `PalletTransactionsRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'pallet_id', 'warehouse_pallet_code', 'pallet_transaction_datetime', 'lot_id', 'customer_id', 'customer_code', 'transaction_status', 'transaction_status_description', 'outbound_order_id', 'outbound_warehouse_order_number', 'outbound_order_line_number', 'inventory_adjustment_id', 'adjustment_number', 'pick_code', 'pick_code_description', 'pick_type', 'pick_type_description', 'net_pallet_change', 'net_case_quantity_change', 'reservation_code', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''Checks for equality with the object’s `palletId` field.'''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Checks for equality with the object’s `warehousePalletCode` field.'''

    pallet_transaction_datetime = sgqlc.types.Field(Datetime, graphql_name='palletTransactionDatetime')
    '''Checks for equality with the object’s `palletTransactionDatetime`
    field.
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    transaction_status = sgqlc.types.Field(String, graphql_name='transactionStatus')
    '''Checks for equality with the object’s `transactionStatus` field.'''

    transaction_status_description = sgqlc.types.Field(String, graphql_name='transactionStatusDescription')
    '''Checks for equality with the object’s
    `transactionStatusDescription` field.
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    outbound_warehouse_order_number = sgqlc.types.Field(String, graphql_name='outboundWarehouseOrderNumber')
    '''Checks for equality with the object’s
    `outboundWarehouseOrderNumber` field.
    '''

    outbound_order_line_number = sgqlc.types.Field(String, graphql_name='outboundOrderLineNumber')
    '''Checks for equality with the object’s `outboundOrderLineNumber`
    field.
    '''

    inventory_adjustment_id = sgqlc.types.Field(String, graphql_name='inventoryAdjustmentId')
    '''Checks for equality with the object’s `inventoryAdjustmentId`
    field.
    '''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Checks for equality with the object’s `adjustmentNumber` field.'''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Checks for equality with the object’s `pickCode` field.'''

    pick_code_description = sgqlc.types.Field(String, graphql_name='pickCodeDescription')
    '''Checks for equality with the object’s `pickCodeDescription` field.'''

    pick_type = sgqlc.types.Field(String, graphql_name='pickType')
    '''Checks for equality with the object’s `pickType` field.'''

    pick_type_description = sgqlc.types.Field(String, graphql_name='pickTypeDescription')
    '''Checks for equality with the object’s `pickTypeDescription` field.'''

    net_pallet_change = sgqlc.types.Field(Int, graphql_name='netPalletChange')
    '''Checks for equality with the object’s `netPalletChange` field.'''

    net_case_quantity_change = sgqlc.types.Field(Int, graphql_name='netCaseQuantityChange')
    '''Checks for equality with the object’s `netCaseQuantityChange`
    field.
    '''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class PalletTransactionsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `PalletTransactionsRaw` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'pallet_id', 'warehouse_pallet_code', 'pallet_transaction_datetime', 'lot_id', 'customer_id', 'customer_code', 'transaction_status', 'transaction_status_description', 'outbound_order_id', 'outbound_warehouse_order_number', 'outbound_order_line_number', 'inventory_adjustment_id', 'adjustment_number', 'pick_code', 'pick_code_description', 'pick_type', 'pick_type_description', 'net_pallet_change', 'net_case_quantity_change', 'reservation_code', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    pallet_id = sgqlc.types.Field('StringFilter', graphql_name='palletId')
    '''Filter by the object’s `palletId` field.'''

    warehouse_pallet_code = sgqlc.types.Field('StringFilter', graphql_name='warehousePalletCode')
    '''Filter by the object’s `warehousePalletCode` field.'''

    pallet_transaction_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='palletTransactionDatetime')
    '''Filter by the object’s `palletTransactionDatetime` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    transaction_status = sgqlc.types.Field('StringFilter', graphql_name='transactionStatus')
    '''Filter by the object’s `transactionStatus` field.'''

    transaction_status_description = sgqlc.types.Field('StringFilter', graphql_name='transactionStatusDescription')
    '''Filter by the object’s `transactionStatusDescription` field.'''

    outbound_order_id = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    outbound_warehouse_order_number = sgqlc.types.Field('StringFilter', graphql_name='outboundWarehouseOrderNumber')
    '''Filter by the object’s `outboundWarehouseOrderNumber` field.'''

    outbound_order_line_number = sgqlc.types.Field('StringFilter', graphql_name='outboundOrderLineNumber')
    '''Filter by the object’s `outboundOrderLineNumber` field.'''

    inventory_adjustment_id = sgqlc.types.Field('StringFilter', graphql_name='inventoryAdjustmentId')
    '''Filter by the object’s `inventoryAdjustmentId` field.'''

    adjustment_number = sgqlc.types.Field('StringFilter', graphql_name='adjustmentNumber')
    '''Filter by the object’s `adjustmentNumber` field.'''

    pick_code = sgqlc.types.Field('StringFilter', graphql_name='pickCode')
    '''Filter by the object’s `pickCode` field.'''

    pick_code_description = sgqlc.types.Field('StringFilter', graphql_name='pickCodeDescription')
    '''Filter by the object’s `pickCodeDescription` field.'''

    pick_type = sgqlc.types.Field('StringFilter', graphql_name='pickType')
    '''Filter by the object’s `pickType` field.'''

    pick_type_description = sgqlc.types.Field('StringFilter', graphql_name='pickTypeDescription')
    '''Filter by the object’s `pickTypeDescription` field.'''

    net_pallet_change = sgqlc.types.Field(IntFilter, graphql_name='netPalletChange')
    '''Filter by the object’s `netPalletChange` field.'''

    net_case_quantity_change = sgqlc.types.Field(IntFilter, graphql_name='netCaseQuantityChange')
    '''Filter by the object’s `netCaseQuantityChange` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletTransactionsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletTransactionsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('PalletTransactionsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class PalletTransactionsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `PalletTransactionsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'pallet_id', 'warehouse_pallet_code', 'pallet_transaction_datetime', 'lot_id', 'customer_id', 'customer_code', 'transaction_status', 'transaction_status_description', 'outbound_order_id', 'outbound_warehouse_order_number', 'outbound_order_line_number', 'inventory_adjustment_id', 'adjustment_number', 'pick_code', 'pick_code_description', 'pick_type', 'pick_type_description', 'net_pallet_change', 'net_case_quantity_change', 'reservation_code', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS Pallet identifier (references wms.pallets_raw.id)'''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Internal WMS pallet code for tracking purposes'''

    pallet_transaction_datetime = sgqlc.types.Field(Datetime, graphql_name='palletTransactionDatetime')
    '''Date and time associated with the transaction'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS Lot identifier (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    transaction_status = sgqlc.types.Field(String, graphql_name='transactionStatus')
    '''Defines the type of transaction'''

    transaction_status_description = sgqlc.types.Field(String, graphql_name='transactionStatusDescription')
    '''Description of the transaction'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''If the transaction is for committed or shipped product, the ODS
    identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    outbound_warehouse_order_number = sgqlc.types.Field(String, graphql_name='outboundWarehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    outbound_order_line_number = sgqlc.types.Field(String, graphql_name='outboundOrderLineNumber')
    '''If the transaction is for committed or shipped product, the line
    number for the outbound order
    '''

    inventory_adjustment_id = sgqlc.types.Field(String, graphql_name='inventoryAdjustmentId')
    '''If the transaction is an adjustment, the ODS identifier for the
    adjustment (references wms.inventory_adjustments_raw.id)
    '''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Adjustment number used by the warehouse management system to
    identify the adjustment
    '''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''If fulfilling an outbound order, how the product was committed
    from the available inventory (ie.  FIFO, LIFO, etc)
    '''

    pick_code_description = sgqlc.types.Field(String, graphql_name='pickCodeDescription')
    '''Text description of the pick code'''

    pick_type = sgqlc.types.Field(String, graphql_name='pickType')
    '''If fulfilling an outbound order, how product was picked off the
    pallets (Full Pallet, Cherry Pick, Partial Pallet, etc)
    '''

    pick_type_description = sgqlc.types.Field(String, graphql_name='pickTypeDescription')
    '''Description of the pick type'''

    net_pallet_change = sgqlc.types.Field(Int, graphql_name='netPalletChange')
    '''Signifies the number of pallets involved with this transaction'''

    net_case_quantity_change = sgqlc.types.Field(Int, graphql_name='netCaseQuantityChange')
    '''Number of cases involved with this transaction'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Lot quality code provided by the customer'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class PalletTransactionsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `PalletTransactionsRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'pallet_id', 'warehouse_pallet_code', 'pallet_transaction_datetime', 'lot_id', 'customer_id', 'customer_code', 'transaction_status', 'transaction_status_description', 'outbound_order_id', 'outbound_warehouse_order_number', 'outbound_order_line_number', 'inventory_adjustment_id', 'adjustment_number', 'pick_code', 'pick_code_description', 'pick_type', 'pick_type_description', 'net_pallet_change', 'net_case_quantity_change', 'reservation_code', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS Pallet identifier (references wms.pallets_raw.id)'''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Internal WMS pallet code for tracking purposes'''

    pallet_transaction_datetime = sgqlc.types.Field(Datetime, graphql_name='palletTransactionDatetime')
    '''Date and time associated with the transaction'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS Lot identifier (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    transaction_status = sgqlc.types.Field(String, graphql_name='transactionStatus')
    '''Defines the type of transaction'''

    transaction_status_description = sgqlc.types.Field(String, graphql_name='transactionStatusDescription')
    '''Description of the transaction'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''If the transaction is for committed or shipped product, the ODS
    identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    outbound_warehouse_order_number = sgqlc.types.Field(String, graphql_name='outboundWarehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    outbound_order_line_number = sgqlc.types.Field(String, graphql_name='outboundOrderLineNumber')
    '''If the transaction is for committed or shipped product, the line
    number for the outbound order
    '''

    inventory_adjustment_id = sgqlc.types.Field(String, graphql_name='inventoryAdjustmentId')
    '''If the transaction is an adjustment, the ODS identifier for the
    adjustment (references wms.inventory_adjustments_raw.id)
    '''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Adjustment number used by the warehouse management system to
    identify the adjustment
    '''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''If fulfilling an outbound order, how the product was committed
    from the available inventory (ie.  FIFO, LIFO, etc)
    '''

    pick_code_description = sgqlc.types.Field(String, graphql_name='pickCodeDescription')
    '''Text description of the pick code'''

    pick_type = sgqlc.types.Field(String, graphql_name='pickType')
    '''If fulfilling an outbound order, how product was picked off the
    pallets (Full Pallet, Cherry Pick, Partial Pallet, etc)
    '''

    pick_type_description = sgqlc.types.Field(String, graphql_name='pickTypeDescription')
    '''Description of the pick type'''

    net_pallet_change = sgqlc.types.Field(Int, graphql_name='netPalletChange')
    '''Signifies the number of pallets involved with this transaction'''

    net_case_quantity_change = sgqlc.types.Field(Int, graphql_name='netCaseQuantityChange')
    '''Number of cases involved with this transaction'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Lot quality code provided by the customer'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class PalletsByLoadDateCondition(sgqlc.types.Input):
    '''A condition to be used against `PalletsByLoadDate` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('inbound_load_expected_receive_date', 'inbound_load_reference_number', 'inbound_load_trailer_number', 'inbound_load_dock_door_number', 'source_system_id', 'pallet_code', 'warehouse_facility_id', 'inventory_status', 'original_quantity', 'original_pallet_count', 'is_blast', 'blast_in_datetime', 'blast_out_datetime', 'is_hpp', 'customer_code', 'lot_code', 'warehouse_license_plate_number', 'customer_license_plate_number', 'is_depleted', 'depleted_date', 'current_quantity', 'current_pallet_count', 'warehouse_location_code', 'hold_code', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'pallet_received_date', 'committed_quantity', 'committed_pallet_count', '_id', 'id', 'item_code', 'lot_id', 'customer_id', 'pallet_location_id', 'item_id', 'hpp_in_datetime', 'hpp_out_datetime', 'is_in_assigned_location', 'reservation_code')
    inbound_load_expected_receive_date = sgqlc.types.Field(Date, graphql_name='inboundLoadExpectedReceiveDate')
    '''Checks for equality with the object’s
    `inboundLoadExpectedReceiveDate` field.
    '''

    inbound_load_reference_number = sgqlc.types.Field(String, graphql_name='inboundLoadReferenceNumber')
    '''Checks for equality with the object’s `inboundLoadReferenceNumber`
    field.
    '''

    inbound_load_trailer_number = sgqlc.types.Field(String, graphql_name='inboundLoadTrailerNumber')
    '''Checks for equality with the object’s `inboundLoadTrailerNumber`
    field.
    '''

    inbound_load_dock_door_number = sgqlc.types.Field(String, graphql_name='inboundLoadDockDoorNumber')
    '''Checks for equality with the object’s `inboundLoadDockDoorNumber`
    field.
    '''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Checks for equality with the object’s `inventoryStatus` field.'''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Checks for equality with the object’s `originalQuantity` field.'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Checks for equality with the object’s `originalPalletCount` field.'''

    is_blast = sgqlc.types.Field(Boolean, graphql_name='isBlast')
    '''Checks for equality with the object’s `isBlast` field.'''

    blast_in_datetime = sgqlc.types.Field(Datetime, graphql_name='blastInDatetime')
    '''Checks for equality with the object’s `blastInDatetime` field.'''

    blast_out_datetime = sgqlc.types.Field(Datetime, graphql_name='blastOutDatetime')
    '''Checks for equality with the object’s `blastOutDatetime` field.'''

    is_hpp = sgqlc.types.Field(Boolean, graphql_name='isHpp')
    '''Checks for equality with the object’s `isHpp` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Checks for equality with the object’s
    `warehouseLicensePlateNumber` field.
    '''

    customer_license_plate_number = sgqlc.types.Field(String, graphql_name='customerLicensePlateNumber')
    '''Checks for equality with the object’s `customerLicensePlateNumber`
    field.
    '''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Checks for equality with the object’s `isDepleted` field.'''

    depleted_date = sgqlc.types.Field(Date, graphql_name='depletedDate')
    '''Checks for equality with the object’s `depletedDate` field.'''

    current_quantity = sgqlc.types.Field(Int, graphql_name='currentQuantity')
    '''Checks for equality with the object’s `currentQuantity` field.'''

    current_pallet_count = sgqlc.types.Field(Int, graphql_name='currentPalletCount')
    '''Checks for equality with the object’s `currentPalletCount` field.'''

    warehouse_location_code = sgqlc.types.Field(String, graphql_name='warehouseLocationCode')
    '''Checks for equality with the object’s `warehouseLocationCode`
    field.
    '''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    pallet_received_date = sgqlc.types.Field(Datetime, graphql_name='palletReceivedDate')
    '''Checks for equality with the object’s `palletReceivedDate` field.'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Checks for equality with the object’s `committedQuantity` field.'''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Checks for equality with the object’s `committedPalletCount`
    field.
    '''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    pallet_location_id = sgqlc.types.Field(String, graphql_name='palletLocationId')
    '''Checks for equality with the object’s `palletLocationId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    hpp_in_datetime = sgqlc.types.Field(Datetime, graphql_name='hppInDatetime')
    '''Checks for equality with the object’s `hppInDatetime` field.'''

    hpp_out_datetime = sgqlc.types.Field(Datetime, graphql_name='hppOutDatetime')
    '''Checks for equality with the object’s `hppOutDatetime` field.'''

    is_in_assigned_location = sgqlc.types.Field(Boolean, graphql_name='isInAssignedLocation')
    '''Checks for equality with the object’s `isInAssignedLocation`
    field.
    '''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''



class PalletsByLoadDateFilter(sgqlc.types.Input):
    '''A filter to be used against `PalletsByLoadDate` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('inbound_load_expected_receive_date', 'inbound_load_reference_number', 'inbound_load_trailer_number', 'inbound_load_dock_door_number', 'source_system_id', 'pallet_code', 'warehouse_facility_id', 'inventory_status', 'original_quantity', 'original_pallet_count', 'is_blast', 'blast_in_datetime', 'blast_out_datetime', 'is_hpp', 'customer_code', 'lot_code', 'warehouse_license_plate_number', 'customer_license_plate_number', 'is_depleted', 'depleted_date', 'current_quantity', 'current_pallet_count', 'warehouse_location_code', 'hold_code', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'pallet_received_date', 'committed_quantity', 'committed_pallet_count', '_id', 'id', 'item_code', 'lot_id', 'customer_id', 'pallet_location_id', 'item_id', 'hpp_in_datetime', 'hpp_out_datetime', 'is_in_assigned_location', 'reservation_code', 'and_', 'or_', 'not_')
    inbound_load_expected_receive_date = sgqlc.types.Field(DateFilter, graphql_name='inboundLoadExpectedReceiveDate')
    '''Filter by the object’s `inboundLoadExpectedReceiveDate` field.'''

    inbound_load_reference_number = sgqlc.types.Field('StringFilter', graphql_name='inboundLoadReferenceNumber')
    '''Filter by the object’s `inboundLoadReferenceNumber` field.'''

    inbound_load_trailer_number = sgqlc.types.Field('StringFilter', graphql_name='inboundLoadTrailerNumber')
    '''Filter by the object’s `inboundLoadTrailerNumber` field.'''

    inbound_load_dock_door_number = sgqlc.types.Field('StringFilter', graphql_name='inboundLoadDockDoorNumber')
    '''Filter by the object’s `inboundLoadDockDoorNumber` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    pallet_code = sgqlc.types.Field('StringFilter', graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    inventory_status = sgqlc.types.Field('StringFilter', graphql_name='inventoryStatus')
    '''Filter by the object’s `inventoryStatus` field.'''

    original_quantity = sgqlc.types.Field(IntFilter, graphql_name='originalQuantity')
    '''Filter by the object’s `originalQuantity` field.'''

    original_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='originalPalletCount')
    '''Filter by the object’s `originalPalletCount` field.'''

    is_blast = sgqlc.types.Field(BooleanFilter, graphql_name='isBlast')
    '''Filter by the object’s `isBlast` field.'''

    blast_in_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='blastInDatetime')
    '''Filter by the object’s `blastInDatetime` field.'''

    blast_out_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='blastOutDatetime')
    '''Filter by the object’s `blastOutDatetime` field.'''

    is_hpp = sgqlc.types.Field(BooleanFilter, graphql_name='isHpp')
    '''Filter by the object’s `isHpp` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    warehouse_license_plate_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseLicensePlateNumber')
    '''Filter by the object’s `warehouseLicensePlateNumber` field.'''

    customer_license_plate_number = sgqlc.types.Field('StringFilter', graphql_name='customerLicensePlateNumber')
    '''Filter by the object’s `customerLicensePlateNumber` field.'''

    is_depleted = sgqlc.types.Field(BooleanFilter, graphql_name='isDepleted')
    '''Filter by the object’s `isDepleted` field.'''

    depleted_date = sgqlc.types.Field(DateFilter, graphql_name='depletedDate')
    '''Filter by the object’s `depletedDate` field.'''

    current_quantity = sgqlc.types.Field(IntFilter, graphql_name='currentQuantity')
    '''Filter by the object’s `currentQuantity` field.'''

    current_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='currentPalletCount')
    '''Filter by the object’s `currentPalletCount` field.'''

    warehouse_location_code = sgqlc.types.Field('StringFilter', graphql_name='warehouseLocationCode')
    '''Filter by the object’s `warehouseLocationCode` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    pallet_received_date = sgqlc.types.Field(DatetimeFilter, graphql_name='palletReceivedDate')
    '''Filter by the object’s `palletReceivedDate` field.'''

    committed_quantity = sgqlc.types.Field(IntFilter, graphql_name='committedQuantity')
    '''Filter by the object’s `committedQuantity` field.'''

    committed_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='committedPalletCount')
    '''Filter by the object’s `committedPalletCount` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    pallet_location_id = sgqlc.types.Field('StringFilter', graphql_name='palletLocationId')
    '''Filter by the object’s `palletLocationId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    hpp_in_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='hppInDatetime')
    '''Filter by the object’s `hppInDatetime` field.'''

    hpp_out_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='hppOutDatetime')
    '''Filter by the object’s `hppOutDatetime` field.'''

    is_in_assigned_location = sgqlc.types.Field(BooleanFilter, graphql_name='isInAssignedLocation')
    '''Filter by the object’s `isInAssignedLocation` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletsByLoadDateFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletsByLoadDateFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('PalletsByLoadDateFilter', graphql_name='not')
    '''Negates the expression.'''



class PalletsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `PalletsRaw` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'pallet_code', 'warehouse_facility_id', 'inventory_status', 'original_quantity', 'original_pallet_count', 'is_blast', 'blast_in_datetime', 'blast_out_datetime', 'is_hpp', 'customer_code', 'lot_code', 'warehouse_license_plate_number', 'customer_license_plate_number', 'is_depleted', 'depleted_date', 'current_quantity', 'current_pallet_count', 'warehouse_location_code', 'hold_code', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'pallet_received_date', 'committed_quantity', 'committed_pallet_count', '_id', 'id', 'item_code', 'lot_id', 'customer_id', 'pallet_location_id', 'item_id', 'hpp_in_datetime', 'hpp_out_datetime', 'is_in_assigned_location', 'reservation_code')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Checks for equality with the object’s `inventoryStatus` field.'''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Checks for equality with the object’s `originalQuantity` field.'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Checks for equality with the object’s `originalPalletCount` field.'''

    is_blast = sgqlc.types.Field(Boolean, graphql_name='isBlast')
    '''Checks for equality with the object’s `isBlast` field.'''

    blast_in_datetime = sgqlc.types.Field(Datetime, graphql_name='blastInDatetime')
    '''Checks for equality with the object’s `blastInDatetime` field.'''

    blast_out_datetime = sgqlc.types.Field(Datetime, graphql_name='blastOutDatetime')
    '''Checks for equality with the object’s `blastOutDatetime` field.'''

    is_hpp = sgqlc.types.Field(Boolean, graphql_name='isHpp')
    '''Checks for equality with the object’s `isHpp` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Checks for equality with the object’s `lotCode` field.'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Checks for equality with the object’s
    `warehouseLicensePlateNumber` field.
    '''

    customer_license_plate_number = sgqlc.types.Field(String, graphql_name='customerLicensePlateNumber')
    '''Checks for equality with the object’s `customerLicensePlateNumber`
    field.
    '''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Checks for equality with the object’s `isDepleted` field.'''

    depleted_date = sgqlc.types.Field(Date, graphql_name='depletedDate')
    '''Checks for equality with the object’s `depletedDate` field.'''

    current_quantity = sgqlc.types.Field(Int, graphql_name='currentQuantity')
    '''Checks for equality with the object’s `currentQuantity` field.'''

    current_pallet_count = sgqlc.types.Field(Int, graphql_name='currentPalletCount')
    '''Checks for equality with the object’s `currentPalletCount` field.'''

    warehouse_location_code = sgqlc.types.Field(String, graphql_name='warehouseLocationCode')
    '''Checks for equality with the object’s `warehouseLocationCode`
    field.
    '''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Checks for equality with the object’s `holdCode` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    pallet_received_date = sgqlc.types.Field(Datetime, graphql_name='palletReceivedDate')
    '''Checks for equality with the object’s `palletReceivedDate` field.'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Checks for equality with the object’s `committedQuantity` field.'''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Checks for equality with the object’s `committedPalletCount`
    field.
    '''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Checks for equality with the object’s `itemCode` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    pallet_location_id = sgqlc.types.Field(String, graphql_name='palletLocationId')
    '''Checks for equality with the object’s `palletLocationId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    hpp_in_datetime = sgqlc.types.Field(Datetime, graphql_name='hppInDatetime')
    '''Checks for equality with the object’s `hppInDatetime` field.'''

    hpp_out_datetime = sgqlc.types.Field(Datetime, graphql_name='hppOutDatetime')
    '''Checks for equality with the object’s `hppOutDatetime` field.'''

    is_in_assigned_location = sgqlc.types.Field(Boolean, graphql_name='isInAssignedLocation')
    '''Checks for equality with the object’s `isInAssignedLocation`
    field.
    '''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Checks for equality with the object’s `reservationCode` field.'''



class PalletsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `PalletsRaw` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'pallet_code', 'warehouse_facility_id', 'inventory_status', 'original_quantity', 'original_pallet_count', 'is_blast', 'blast_in_datetime', 'blast_out_datetime', 'is_hpp', 'customer_code', 'lot_code', 'warehouse_license_plate_number', 'customer_license_plate_number', 'is_depleted', 'depleted_date', 'current_quantity', 'current_pallet_count', 'warehouse_location_code', 'hold_code', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'pallet_received_date', 'committed_quantity', 'committed_pallet_count', '_id', 'id', 'item_code', 'lot_id', 'customer_id', 'pallet_location_id', 'item_id', 'hpp_in_datetime', 'hpp_out_datetime', 'is_in_assigned_location', 'reservation_code', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    pallet_code = sgqlc.types.Field('StringFilter', graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    inventory_status = sgqlc.types.Field('StringFilter', graphql_name='inventoryStatus')
    '''Filter by the object’s `inventoryStatus` field.'''

    original_quantity = sgqlc.types.Field(IntFilter, graphql_name='originalQuantity')
    '''Filter by the object’s `originalQuantity` field.'''

    original_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='originalPalletCount')
    '''Filter by the object’s `originalPalletCount` field.'''

    is_blast = sgqlc.types.Field(BooleanFilter, graphql_name='isBlast')
    '''Filter by the object’s `isBlast` field.'''

    blast_in_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='blastInDatetime')
    '''Filter by the object’s `blastInDatetime` field.'''

    blast_out_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='blastOutDatetime')
    '''Filter by the object’s `blastOutDatetime` field.'''

    is_hpp = sgqlc.types.Field(BooleanFilter, graphql_name='isHpp')
    '''Filter by the object’s `isHpp` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    lot_code = sgqlc.types.Field('StringFilter', graphql_name='lotCode')
    '''Filter by the object’s `lotCode` field.'''

    warehouse_license_plate_number = sgqlc.types.Field('StringFilter', graphql_name='warehouseLicensePlateNumber')
    '''Filter by the object’s `warehouseLicensePlateNumber` field.'''

    customer_license_plate_number = sgqlc.types.Field('StringFilter', graphql_name='customerLicensePlateNumber')
    '''Filter by the object’s `customerLicensePlateNumber` field.'''

    is_depleted = sgqlc.types.Field(BooleanFilter, graphql_name='isDepleted')
    '''Filter by the object’s `isDepleted` field.'''

    depleted_date = sgqlc.types.Field(DateFilter, graphql_name='depletedDate')
    '''Filter by the object’s `depletedDate` field.'''

    current_quantity = sgqlc.types.Field(IntFilter, graphql_name='currentQuantity')
    '''Filter by the object’s `currentQuantity` field.'''

    current_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='currentPalletCount')
    '''Filter by the object’s `currentPalletCount` field.'''

    warehouse_location_code = sgqlc.types.Field('StringFilter', graphql_name='warehouseLocationCode')
    '''Filter by the object’s `warehouseLocationCode` field.'''

    hold_code = sgqlc.types.Field('StringFilter', graphql_name='holdCode')
    '''Filter by the object’s `holdCode` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    pallet_received_date = sgqlc.types.Field(DatetimeFilter, graphql_name='palletReceivedDate')
    '''Filter by the object’s `palletReceivedDate` field.'''

    committed_quantity = sgqlc.types.Field(IntFilter, graphql_name='committedQuantity')
    '''Filter by the object’s `committedQuantity` field.'''

    committed_pallet_count = sgqlc.types.Field(IntFilter, graphql_name='committedPalletCount')
    '''Filter by the object’s `committedPalletCount` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    item_code = sgqlc.types.Field('StringFilter', graphql_name='itemCode')
    '''Filter by the object’s `itemCode` field.'''

    lot_id = sgqlc.types.Field('StringFilter', graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    customer_id = sgqlc.types.Field('StringFilter', graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    pallet_location_id = sgqlc.types.Field('StringFilter', graphql_name='palletLocationId')
    '''Filter by the object’s `palletLocationId` field.'''

    item_id = sgqlc.types.Field('StringFilter', graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    hpp_in_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='hppInDatetime')
    '''Filter by the object’s `hppInDatetime` field.'''

    hpp_out_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='hppOutDatetime')
    '''Filter by the object’s `hppOutDatetime` field.'''

    is_in_assigned_location = sgqlc.types.Field(BooleanFilter, graphql_name='isInAssignedLocation')
    '''Filter by the object’s `isInAssignedLocation` field.'''

    reservation_code = sgqlc.types.Field('StringFilter', graphql_name='reservationCode')
    '''Filter by the object’s `reservationCode` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('PalletsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class PalletsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `PalletsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'pallet_code', 'warehouse_facility_id', 'inventory_status', 'original_quantity', 'original_pallet_count', 'is_blast', 'blast_in_datetime', 'blast_out_datetime', 'is_hpp', 'customer_code', 'lot_code', 'warehouse_license_plate_number', 'customer_license_plate_number', 'is_depleted', 'depleted_date', 'current_quantity', 'current_pallet_count', 'warehouse_location_code', 'hold_code', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'pallet_received_date', 'committed_quantity', 'committed_pallet_count', '_id', 'id', 'item_code', 'lot_id', 'customer_id', 'pallet_location_id', 'item_id', 'hpp_in_datetime', 'hpp_out_datetime', 'is_in_assigned_location', 'reservation_code')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    pallet_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Status of whether the pallet was ever in inventory (O = On Hand, X
    = Expected)
    '''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Number of cases on the pallet when entered into inventory'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Number of pallets represented by this record.  (In Lot Tracking
    facilities, pallets are tracked in groups instead of individually)
    '''

    is_blast = sgqlc.types.Field(Boolean, graphql_name='isBlast')
    '''True if pallet entered a blast freezer'''

    blast_in_datetime = sgqlc.types.Field(Datetime, graphql_name='blastInDatetime')
    '''Date and time the pallet entered the blast freezer (in facility
    local time)
    '''

    blast_out_datetime = sgqlc.types.Field(Datetime, graphql_name='blastOutDatetime')
    '''Date and time the pallet exited the blast freezer (in facility
    local time)
    '''

    is_hpp = sgqlc.types.Field(Boolean, graphql_name='isHpp')
    '''True if pallet holds product that underwent high pressure
    processing
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot for the pallet'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Primary reference number tied to the physical pallet in the
    warehouse
    '''

    customer_license_plate_number = sgqlc.types.Field(String, graphql_name='customerLicensePlateNumber')
    '''Customer reference number tied to the physical pallet'''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''True, if the pallet and its contents have left the warehouse'''

    depleted_date = sgqlc.types.Field(Date, graphql_name='depletedDate')
    '''Date that the pallet left the warehouse'''

    current_quantity = sgqlc.types.Field(Int, graphql_name='currentQuantity')
    '''Number of cases currently on the pallet'''

    current_pallet_count = sgqlc.types.Field(Int, graphql_name='currentPalletCount')
    '''Number of pallets still in inventory'''

    warehouse_location_code = sgqlc.types.Field(String, graphql_name='warehouseLocationCode')
    '''Internal WMS code for the location of the pallet in the warehouse'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Hold code assigned to the pallet.  If the pallet is not on hold,
    this field is null
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    pallet_received_date = sgqlc.types.Field(Datetime, graphql_name='palletReceivedDate')
    '''Date the pallet was received into the warehouse for storage'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Number of cases committed to an outbound order that has not yet
    shipped
    '''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Number of pallets committed to an outbound order that has not yet
    shipped
    '''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    pallet_location_id = sgqlc.types.Field(String, graphql_name='palletLocationId')
    '''ODS identifier for the warehouse pallet location (references
    wms.pallet_locations_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    hpp_in_datetime = sgqlc.types.Field(Datetime, graphql_name='hppInDatetime')
    '''Date and time the pallet entered high pressure processing (in
    facility local time)
    '''

    hpp_out_datetime = sgqlc.types.Field(Datetime, graphql_name='hppOutDatetime')
    '''Date and time the pallet exited high pressure processing (in
    facility local time)
    '''

    is_in_assigned_location = sgqlc.types.Field(Boolean, graphql_name='isInAssignedLocation')

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')



class PalletsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `PalletsRaw`. Fields that are set will
    be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'pallet_code', 'warehouse_facility_id', 'inventory_status', 'original_quantity', 'original_pallet_count', 'is_blast', 'blast_in_datetime', 'blast_out_datetime', 'is_hpp', 'customer_code', 'lot_code', 'warehouse_license_plate_number', 'customer_license_plate_number', 'is_depleted', 'depleted_date', 'current_quantity', 'current_pallet_count', 'warehouse_location_code', 'hold_code', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'pallet_received_date', 'committed_quantity', 'committed_pallet_count', '_id', 'id', 'item_code', 'lot_id', 'customer_id', 'pallet_location_id', 'item_id', 'hpp_in_datetime', 'hpp_out_datetime', 'is_in_assigned_location', 'reservation_code')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Status of whether the pallet was ever in inventory (O = On Hand, X
    = Expected)
    '''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Number of cases on the pallet when entered into inventory'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Number of pallets represented by this record.  (In Lot Tracking
    facilities, pallets are tracked in groups instead of individually)
    '''

    is_blast = sgqlc.types.Field(Boolean, graphql_name='isBlast')
    '''True if pallet entered a blast freezer'''

    blast_in_datetime = sgqlc.types.Field(Datetime, graphql_name='blastInDatetime')
    '''Date and time the pallet entered the blast freezer (in facility
    local time)
    '''

    blast_out_datetime = sgqlc.types.Field(Datetime, graphql_name='blastOutDatetime')
    '''Date and time the pallet exited the blast freezer (in facility
    local time)
    '''

    is_hpp = sgqlc.types.Field(Boolean, graphql_name='isHpp')
    '''True if pallet holds product that underwent high pressure
    processing
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot for the pallet'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Primary reference number tied to the physical pallet in the
    warehouse
    '''

    customer_license_plate_number = sgqlc.types.Field(String, graphql_name='customerLicensePlateNumber')
    '''Customer reference number tied to the physical pallet'''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''True, if the pallet and its contents have left the warehouse'''

    depleted_date = sgqlc.types.Field(Date, graphql_name='depletedDate')
    '''Date that the pallet left the warehouse'''

    current_quantity = sgqlc.types.Field(Int, graphql_name='currentQuantity')
    '''Number of cases currently on the pallet'''

    current_pallet_count = sgqlc.types.Field(Int, graphql_name='currentPalletCount')
    '''Number of pallets still in inventory'''

    warehouse_location_code = sgqlc.types.Field(String, graphql_name='warehouseLocationCode')
    '''Internal WMS code for the location of the pallet in the warehouse'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Hold code assigned to the pallet.  If the pallet is not on hold,
    this field is null
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    pallet_received_date = sgqlc.types.Field(Datetime, graphql_name='palletReceivedDate')
    '''Date the pallet was received into the warehouse for storage'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Number of cases committed to an outbound order that has not yet
    shipped
    '''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Number of pallets committed to an outbound order that has not yet
    shipped
    '''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    pallet_location_id = sgqlc.types.Field(String, graphql_name='palletLocationId')
    '''ODS identifier for the warehouse pallet location (references
    wms.pallet_locations_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    hpp_in_datetime = sgqlc.types.Field(Datetime, graphql_name='hppInDatetime')
    '''Date and time the pallet entered high pressure processing (in
    facility local time)
    '''

    hpp_out_datetime = sgqlc.types.Field(Datetime, graphql_name='hppOutDatetime')
    '''Date and time the pallet exited high pressure processing (in
    facility local time)
    '''

    is_in_assigned_location = sgqlc.types.Field(Boolean, graphql_name='isInAssignedLocation')

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')



class RecentInboundLoadCondition(sgqlc.types.Input):
    '''A condition to be used against `RecentInboundLoad` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'load_reference_number', 'trailer_number', 'load_status', 'load_arrival_time', 'load_finish_datetime', 'trailer_yard_duration', 'unload_duration', 'supplier_name', 'customer_code', 'pallet_count', 'gross_weight')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Checks for equality with the object’s `loadReferenceNumber` field.'''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Checks for equality with the object’s `trailerNumber` field.'''

    load_status = sgqlc.types.Field(String, graphql_name='loadStatus')
    '''Checks for equality with the object’s `loadStatus` field.'''

    load_arrival_time = sgqlc.types.Field(Datetime, graphql_name='loadArrivalTime')
    '''Checks for equality with the object’s `loadArrivalTime` field.'''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Checks for equality with the object’s `loadFinishDatetime` field.'''

    trailer_yard_duration = sgqlc.types.Field(IntervalInput, graphql_name='trailerYardDuration')
    '''Checks for equality with the object’s `trailerYardDuration` field.'''

    unload_duration = sgqlc.types.Field(IntervalInput, graphql_name='unloadDuration')
    '''Checks for equality with the object’s `unloadDuration` field.'''

    supplier_name = sgqlc.types.Field(String, graphql_name='supplierName')
    '''Checks for equality with the object’s `supplierName` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    pallet_count = sgqlc.types.Field(BigInt, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Checks for equality with the object’s `grossWeight` field.'''



class RecentInboundLoadFilter(sgqlc.types.Input):
    '''A filter to be used against `RecentInboundLoad` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'load_reference_number', 'trailer_number', 'load_status', 'load_arrival_time', 'load_finish_datetime', 'trailer_yard_duration', 'unload_duration', 'supplier_name', 'customer_code', 'pallet_count', 'gross_weight', 'and_', 'or_', 'not_')
    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    load_reference_number = sgqlc.types.Field('StringFilter', graphql_name='loadReferenceNumber')
    '''Filter by the object’s `loadReferenceNumber` field.'''

    trailer_number = sgqlc.types.Field('StringFilter', graphql_name='trailerNumber')
    '''Filter by the object’s `trailerNumber` field.'''

    load_status = sgqlc.types.Field('StringFilter', graphql_name='loadStatus')
    '''Filter by the object’s `loadStatus` field.'''

    load_arrival_time = sgqlc.types.Field(DatetimeFilter, graphql_name='loadArrivalTime')
    '''Filter by the object’s `loadArrivalTime` field.'''

    load_finish_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='loadFinishDatetime')
    '''Filter by the object’s `loadFinishDatetime` field.'''

    trailer_yard_duration = sgqlc.types.Field(IntervalFilter, graphql_name='trailerYardDuration')
    '''Filter by the object’s `trailerYardDuration` field.'''

    unload_duration = sgqlc.types.Field(IntervalFilter, graphql_name='unloadDuration')
    '''Filter by the object’s `unloadDuration` field.'''

    supplier_name = sgqlc.types.Field('StringFilter', graphql_name='supplierName')
    '''Filter by the object’s `supplierName` field.'''

    customer_code = sgqlc.types.Field('StringFilter', graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    pallet_count = sgqlc.types.Field(BigIntFilter, graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    gross_weight = sgqlc.types.Field(FloatFilter, graphql_name='grossWeight')
    '''Filter by the object’s `grossWeight` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('RecentInboundLoadFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('RecentInboundLoadFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('RecentInboundLoadFilter', graphql_name='not')
    '''Negates the expression.'''



class SourceChannelCondition(sgqlc.types.Input):
    '''A condition to be used against `SourceChannel` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('name', 'description', 'created_at', 'updated_at', 'source_slug', 'cursor_id')
    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Checks for equality with the object’s `description` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    source_slug = sgqlc.types.Field(String, graphql_name='sourceSlug')
    '''Checks for equality with the object’s `sourceSlug` field.'''

    cursor_id = sgqlc.types.Field(UUID, graphql_name='cursorId')
    '''Checks for equality with the object’s `cursorId` field.'''



class SourceChannelCursorCondition(sgqlc.types.Input):
    '''A condition to be used against `SourceChannelCursor` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'reflow_cursor', 'channel_cursor', 'headers', 'created_at', 'updated_at', 'reflow_metadata')
    id = sgqlc.types.Field(UUID, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    reflow_cursor = sgqlc.types.Field(BigInt, graphql_name='reflowCursor')
    '''Checks for equality with the object’s `reflowCursor` field.'''

    channel_cursor = sgqlc.types.Field(BigInt, graphql_name='channelCursor')
    '''Checks for equality with the object’s `channelCursor` field.'''

    headers = sgqlc.types.Field(JSON, graphql_name='headers')
    '''Checks for equality with the object’s `headers` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    reflow_metadata = sgqlc.types.Field(JSON, graphql_name='reflowMetadata')
    '''Checks for equality with the object’s `reflowMetadata` field.'''



class SourceChannelCursorFilter(sgqlc.types.Input):
    '''A filter to be used against `SourceChannelCursor` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'reflow_cursor', 'channel_cursor', 'headers', 'created_at', 'updated_at', 'reflow_metadata', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field('UUIDFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    reflow_cursor = sgqlc.types.Field(BigIntFilter, graphql_name='reflowCursor')
    '''Filter by the object’s `reflowCursor` field.'''

    channel_cursor = sgqlc.types.Field(BigIntFilter, graphql_name='channelCursor')
    '''Filter by the object’s `channelCursor` field.'''

    headers = sgqlc.types.Field(JSONFilter, graphql_name='headers')
    '''Filter by the object’s `headers` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    reflow_metadata = sgqlc.types.Field(JSONFilter, graphql_name='reflowMetadata')
    '''Filter by the object’s `reflowMetadata` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelCursorFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelCursorFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('SourceChannelCursorFilter', graphql_name='not')
    '''Negates the expression.'''



class SourceChannelCursorInput(sgqlc.types.Input):
    '''An input for mutations affecting `SourceChannelCursor`'''
    __schema__ = base
    __field_names__ = ('id', 'reflow_cursor', 'channel_cursor', 'headers', 'created_at', 'updated_at', 'reflow_metadata')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    reflow_cursor = sgqlc.types.Field(BigInt, graphql_name='reflowCursor')

    channel_cursor = sgqlc.types.Field(BigInt, graphql_name='channelCursor')

    headers = sgqlc.types.Field(JSON, graphql_name='headers')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    reflow_metadata = sgqlc.types.Field(JSON, graphql_name='reflowMetadata')



class SourceChannelCursorPatch(sgqlc.types.Input):
    '''Represents an update to a `SourceChannelCursor`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'reflow_cursor', 'channel_cursor', 'headers', 'created_at', 'updated_at', 'reflow_metadata')
    id = sgqlc.types.Field(UUID, graphql_name='id')

    reflow_cursor = sgqlc.types.Field(BigInt, graphql_name='reflowCursor')

    channel_cursor = sgqlc.types.Field(BigInt, graphql_name='channelCursor')

    headers = sgqlc.types.Field(JSON, graphql_name='headers')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    reflow_metadata = sgqlc.types.Field(JSON, graphql_name='reflowMetadata')



class SourceChannelFilter(sgqlc.types.Input):
    '''A filter to be used against `SourceChannel` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('name', 'description', 'created_at', 'updated_at', 'source_slug', 'cursor_id', 'and_', 'or_', 'not_')
    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    description = sgqlc.types.Field('StringFilter', graphql_name='description')
    '''Filter by the object’s `description` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    source_slug = sgqlc.types.Field('StringFilter', graphql_name='sourceSlug')
    '''Filter by the object’s `sourceSlug` field.'''

    cursor_id = sgqlc.types.Field('UUIDFilter', graphql_name='cursorId')
    '''Filter by the object’s `cursorId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('SourceChannelFilter', graphql_name='not')
    '''Negates the expression.'''



class SourceChannelInput(sgqlc.types.Input):
    '''An input for mutations affecting `SourceChannel`'''
    __schema__ = base
    __field_names__ = ('name', 'description', 'created_at', 'updated_at', 'source_slug', 'cursor_id')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    description = sgqlc.types.Field(String, graphql_name='description')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    source_slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceSlug')

    cursor_id = sgqlc.types.Field(UUID, graphql_name='cursorId')



class SourceChannelPatch(sgqlc.types.Input):
    '''Represents an update to a `SourceChannel`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('name', 'description', 'created_at', 'updated_at', 'source_slug', 'cursor_id')
    name = sgqlc.types.Field(String, graphql_name='name')

    description = sgqlc.types.Field(String, graphql_name='description')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    source_slug = sgqlc.types.Field(String, graphql_name='sourceSlug')

    cursor_id = sgqlc.types.Field(UUID, graphql_name='cursorId')



class SourceCondition(sgqlc.types.Input):
    '''A condition to be used against `Source` object types. All fields
    are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('slug', 'source_type_id', 'name', 'created_at', 'updated_at', 'asset_id')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    '''Checks for equality with the object’s `slug` field.'''

    source_type_id = sgqlc.types.Field(String, graphql_name='sourceTypeId')
    '''Checks for equality with the object’s `sourceTypeId` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    asset_id = sgqlc.types.Field(UUID, graphql_name='assetId')
    '''Checks for equality with the object’s `assetId` field.'''



class SourceFilter(sgqlc.types.Input):
    '''A filter to be used against `Source` object types. All fields are
    combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('slug', 'source_type_id', 'name', 'created_at', 'updated_at', 'asset_id', 'and_', 'or_', 'not_')
    slug = sgqlc.types.Field('StringFilter', graphql_name='slug')
    '''Filter by the object’s `slug` field.'''

    source_type_id = sgqlc.types.Field('StringFilter', graphql_name='sourceTypeId')
    '''Filter by the object’s `sourceTypeId` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    asset_id = sgqlc.types.Field('UUIDFilter', graphql_name='assetId')
    '''Filter by the object’s `assetId` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SourceFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SourceFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('SourceFilter', graphql_name='not')
    '''Negates the expression.'''



class SourceInput(sgqlc.types.Input):
    '''An input for mutations affecting `Source`'''
    __schema__ = base
    __field_names__ = ('slug', 'source_type_id', 'name', 'created_at', 'updated_at', 'asset_id')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')

    source_type_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceTypeId')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    asset_id = sgqlc.types.Field(UUID, graphql_name='assetId')



class SourcePatch(sgqlc.types.Input):
    '''Represents an update to a `Source`. Fields that are set will be
    updated.
    '''
    __schema__ = base
    __field_names__ = ('slug', 'source_type_id', 'name', 'created_at', 'updated_at', 'asset_id')
    slug = sgqlc.types.Field(String, graphql_name='slug')

    source_type_id = sgqlc.types.Field(String, graphql_name='sourceTypeId')

    name = sgqlc.types.Field(String, graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    asset_id = sgqlc.types.Field(UUID, graphql_name='assetId')



class SourceTypeCondition(sgqlc.types.Input):
    '''A condition to be used against `SourceType` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('slug', 'name', 'created_at', 'updated_at')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    '''Checks for equality with the object’s `slug` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''



class SourceTypeFilter(sgqlc.types.Input):
    '''A filter to be used against `SourceType` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('slug', 'name', 'created_at', 'updated_at', 'and_', 'or_', 'not_')
    slug = sgqlc.types.Field('StringFilter', graphql_name='slug')
    '''Filter by the object’s `slug` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SourceTypeFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SourceTypeFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('SourceTypeFilter', graphql_name='not')
    '''Negates the expression.'''



class SourceTypeInput(sgqlc.types.Input):
    '''An input for mutations affecting `SourceType`'''
    __schema__ = base
    __field_names__ = ('slug', 'name', 'created_at', 'updated_at')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class SourceTypePatch(sgqlc.types.Input):
    '''Represents an update to a `SourceType`. Fields that are set will
    be updated.
    '''
    __schema__ = base
    __field_names__ = ('slug', 'name', 'created_at', 'updated_at')
    slug = sgqlc.types.Field(String, graphql_name='slug')

    name = sgqlc.types.Field(String, graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class StopLocationCondition(sgqlc.types.Input):
    '''A condition to be used against `StopLocation` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'source_system_id', 'name', 'contact_first_name', 'contact_last_name', 'stop_location_code', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'location_type', 'effective_date', 'phone', 'fax', 'email_address', 'source_row_id', 'warehouse_facility_id', 'updated_at', 'deleted_at', 'created_at', 'external_system_id', 'external_system_name', '_version', '_id')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')
    '''Checks for equality with the object’s `contactFirstName` field.'''

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')
    '''Checks for equality with the object’s `contactLastName` field.'''

    stop_location_code = sgqlc.types.Field(BigInt, graphql_name='stopLocationCode')
    '''Checks for equality with the object’s `stopLocationCode` field.'''

    address1 = sgqlc.types.Field(String, graphql_name='address1')
    '''Checks for equality with the object’s `address1` field.'''

    address2 = sgqlc.types.Field(String, graphql_name='address2')
    '''Checks for equality with the object’s `address2` field.'''

    address3 = sgqlc.types.Field(String, graphql_name='address3')
    '''Checks for equality with the object’s `address3` field.'''

    city = sgqlc.types.Field(String, graphql_name='city')
    '''Checks for equality with the object’s `city` field.'''

    state = sgqlc.types.Field(String, graphql_name='state')
    '''Checks for equality with the object’s `state` field.'''

    zip = sgqlc.types.Field(String, graphql_name='zip')
    '''Checks for equality with the object’s `zip` field.'''

    location_type = sgqlc.types.Field(String, graphql_name='locationType')
    '''Checks for equality with the object’s `locationType` field.'''

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')
    '''Checks for equality with the object’s `effectiveDate` field.'''

    phone = sgqlc.types.Field(String, graphql_name='phone')
    '''Checks for equality with the object’s `phone` field.'''

    fax = sgqlc.types.Field(String, graphql_name='fax')
    '''Checks for equality with the object’s `fax` field.'''

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')
    '''Checks for equality with the object’s `emailAddress` field.'''

    source_row_id = sgqlc.types.Field(BigInt, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    external_system_id = sgqlc.types.Field(Int, graphql_name='externalSystemId')
    '''Checks for equality with the object’s `externalSystemId` field.'''

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')
    '''Checks for equality with the object’s `externalSystemName` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class StopLocationFilter(sgqlc.types.Input):
    '''A filter to be used against `StopLocation` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'source_system_id', 'name', 'contact_first_name', 'contact_last_name', 'stop_location_code', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'location_type', 'effective_date', 'phone', 'fax', 'email_address', 'source_row_id', 'warehouse_facility_id', 'updated_at', 'deleted_at', 'created_at', 'external_system_id', 'external_system_name', '_version', '_id', 'and_', 'or_', 'not_')
    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    contact_first_name = sgqlc.types.Field('StringFilter', graphql_name='contactFirstName')
    '''Filter by the object’s `contactFirstName` field.'''

    contact_last_name = sgqlc.types.Field('StringFilter', graphql_name='contactLastName')
    '''Filter by the object’s `contactLastName` field.'''

    stop_location_code = sgqlc.types.Field(BigIntFilter, graphql_name='stopLocationCode')
    '''Filter by the object’s `stopLocationCode` field.'''

    address1 = sgqlc.types.Field('StringFilter', graphql_name='address1')
    '''Filter by the object’s `address1` field.'''

    address2 = sgqlc.types.Field('StringFilter', graphql_name='address2')
    '''Filter by the object’s `address2` field.'''

    address3 = sgqlc.types.Field('StringFilter', graphql_name='address3')
    '''Filter by the object’s `address3` field.'''

    city = sgqlc.types.Field('StringFilter', graphql_name='city')
    '''Filter by the object’s `city` field.'''

    state = sgqlc.types.Field('StringFilter', graphql_name='state')
    '''Filter by the object’s `state` field.'''

    zip = sgqlc.types.Field('StringFilter', graphql_name='zip')
    '''Filter by the object’s `zip` field.'''

    location_type = sgqlc.types.Field('StringFilter', graphql_name='locationType')
    '''Filter by the object’s `locationType` field.'''

    effective_date = sgqlc.types.Field(DatetimeFilter, graphql_name='effectiveDate')
    '''Filter by the object’s `effectiveDate` field.'''

    phone = sgqlc.types.Field('StringFilter', graphql_name='phone')
    '''Filter by the object’s `phone` field.'''

    fax = sgqlc.types.Field('StringFilter', graphql_name='fax')
    '''Filter by the object’s `fax` field.'''

    email_address = sgqlc.types.Field('StringFilter', graphql_name='emailAddress')
    '''Filter by the object’s `emailAddress` field.'''

    source_row_id = sgqlc.types.Field(BigIntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    external_system_id = sgqlc.types.Field(IntFilter, graphql_name='externalSystemId')
    '''Filter by the object’s `externalSystemId` field.'''

    external_system_name = sgqlc.types.Field('StringFilter', graphql_name='externalSystemName')
    '''Filter by the object’s `externalSystemName` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StopLocationFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StopLocationFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('StopLocationFilter', graphql_name='not')
    '''Negates the expression.'''



class StopLocationsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `StopLocationsRaw` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'name', 'contact_first_name', 'contact_last_name', 'stop_location_code', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'location_type', 'effective_date', 'phone', 'fax', 'email_address', 'source_row_id', 'warehouse_facility_id', 'updated_at', 'deleted_at', 'created_at', 'external_system_id', 'external_system_name', '_version', '_id', 'id')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')
    '''Checks for equality with the object’s `contactFirstName` field.'''

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')
    '''Checks for equality with the object’s `contactLastName` field.'''

    stop_location_code = sgqlc.types.Field(BigInt, graphql_name='stopLocationCode')
    '''Checks for equality with the object’s `stopLocationCode` field.'''

    address1 = sgqlc.types.Field(String, graphql_name='address1')
    '''Checks for equality with the object’s `address1` field.'''

    address2 = sgqlc.types.Field(String, graphql_name='address2')
    '''Checks for equality with the object’s `address2` field.'''

    address3 = sgqlc.types.Field(String, graphql_name='address3')
    '''Checks for equality with the object’s `address3` field.'''

    city = sgqlc.types.Field(String, graphql_name='city')
    '''Checks for equality with the object’s `city` field.'''

    state = sgqlc.types.Field(String, graphql_name='state')
    '''Checks for equality with the object’s `state` field.'''

    zip = sgqlc.types.Field(String, graphql_name='zip')
    '''Checks for equality with the object’s `zip` field.'''

    location_type = sgqlc.types.Field(String, graphql_name='locationType')
    '''Checks for equality with the object’s `locationType` field.'''

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')
    '''Checks for equality with the object’s `effectiveDate` field.'''

    phone = sgqlc.types.Field(String, graphql_name='phone')
    '''Checks for equality with the object’s `phone` field.'''

    fax = sgqlc.types.Field(String, graphql_name='fax')
    '''Checks for equality with the object’s `fax` field.'''

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')
    '''Checks for equality with the object’s `emailAddress` field.'''

    source_row_id = sgqlc.types.Field(BigInt, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    external_system_id = sgqlc.types.Field(Int, graphql_name='externalSystemId')
    '''Checks for equality with the object’s `externalSystemId` field.'''

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')
    '''Checks for equality with the object’s `externalSystemName` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''



class StopLocationsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `StopLocationsRaw` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'name', 'contact_first_name', 'contact_last_name', 'stop_location_code', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'location_type', 'effective_date', 'phone', 'fax', 'email_address', 'source_row_id', 'warehouse_facility_id', 'updated_at', 'deleted_at', 'created_at', 'external_system_id', 'external_system_name', '_version', '_id', 'id', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    name = sgqlc.types.Field('StringFilter', graphql_name='name')
    '''Filter by the object’s `name` field.'''

    contact_first_name = sgqlc.types.Field('StringFilter', graphql_name='contactFirstName')
    '''Filter by the object’s `contactFirstName` field.'''

    contact_last_name = sgqlc.types.Field('StringFilter', graphql_name='contactLastName')
    '''Filter by the object’s `contactLastName` field.'''

    stop_location_code = sgqlc.types.Field(BigIntFilter, graphql_name='stopLocationCode')
    '''Filter by the object’s `stopLocationCode` field.'''

    address1 = sgqlc.types.Field('StringFilter', graphql_name='address1')
    '''Filter by the object’s `address1` field.'''

    address2 = sgqlc.types.Field('StringFilter', graphql_name='address2')
    '''Filter by the object’s `address2` field.'''

    address3 = sgqlc.types.Field('StringFilter', graphql_name='address3')
    '''Filter by the object’s `address3` field.'''

    city = sgqlc.types.Field('StringFilter', graphql_name='city')
    '''Filter by the object’s `city` field.'''

    state = sgqlc.types.Field('StringFilter', graphql_name='state')
    '''Filter by the object’s `state` field.'''

    zip = sgqlc.types.Field('StringFilter', graphql_name='zip')
    '''Filter by the object’s `zip` field.'''

    location_type = sgqlc.types.Field('StringFilter', graphql_name='locationType')
    '''Filter by the object’s `locationType` field.'''

    effective_date = sgqlc.types.Field(DatetimeFilter, graphql_name='effectiveDate')
    '''Filter by the object’s `effectiveDate` field.'''

    phone = sgqlc.types.Field('StringFilter', graphql_name='phone')
    '''Filter by the object’s `phone` field.'''

    fax = sgqlc.types.Field('StringFilter', graphql_name='fax')
    '''Filter by the object’s `fax` field.'''

    email_address = sgqlc.types.Field('StringFilter', graphql_name='emailAddress')
    '''Filter by the object’s `emailAddress` field.'''

    source_row_id = sgqlc.types.Field(BigIntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    warehouse_facility_id = sgqlc.types.Field('StringFilter', graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    external_system_id = sgqlc.types.Field(IntFilter, graphql_name='externalSystemId')
    '''Filter by the object’s `externalSystemId` field.'''

    external_system_name = sgqlc.types.Field('StringFilter', graphql_name='externalSystemName')
    '''Filter by the object’s `externalSystemName` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field('StringFilter', graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field('StringFilter', graphql_name='id')
    '''Filter by the object’s `id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StopLocationsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StopLocationsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('StopLocationsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class StopLocationsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `StopLocationsRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'name', 'contact_first_name', 'contact_last_name', 'stop_location_code', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'location_type', 'effective_date', 'phone', 'fax', 'email_address', 'source_row_id', 'warehouse_facility_id', 'updated_at', 'deleted_at', 'created_at', 'external_system_id', 'external_system_name', '_version', '_id', 'id')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')

    stop_location_code = sgqlc.types.Field(BigInt, graphql_name='stopLocationCode')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    address3 = sgqlc.types.Field(String, graphql_name='address3')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    location_type = sgqlc.types.Field(String, graphql_name='locationType')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    phone = sgqlc.types.Field(String, graphql_name='phone')

    fax = sgqlc.types.Field(String, graphql_name='fax')

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')

    source_row_id = sgqlc.types.Field(BigInt, graphql_name='sourceRowId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    external_system_id = sgqlc.types.Field(Int, graphql_name='externalSystemId')

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class StopLocationsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `StopLocationsRaw`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'name', 'contact_first_name', 'contact_last_name', 'stop_location_code', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'location_type', 'effective_date', 'phone', 'fax', 'email_address', 'source_row_id', 'warehouse_facility_id', 'updated_at', 'deleted_at', 'created_at', 'external_system_id', 'external_system_name', '_version', '_id', 'id')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    name = sgqlc.types.Field(String, graphql_name='name')

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')

    stop_location_code = sgqlc.types.Field(BigInt, graphql_name='stopLocationCode')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    address3 = sgqlc.types.Field(String, graphql_name='address3')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    location_type = sgqlc.types.Field(String, graphql_name='locationType')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    phone = sgqlc.types.Field(String, graphql_name='phone')

    fax = sgqlc.types.Field(String, graphql_name='fax')

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')

    source_row_id = sgqlc.types.Field(BigInt, graphql_name='sourceRowId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    external_system_id = sgqlc.types.Field(Int, graphql_name='externalSystemId')

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    id = sgqlc.types.Field(String, graphql_name='id')



class StringFilter(sgqlc.types.Input):
    '''A filter to be used against String fields. All fields are combined
    with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to', 'includes', 'not_includes', 'includes_insensitive', 'not_includes_insensitive', 'starts_with', 'not_starts_with', 'starts_with_insensitive', 'not_starts_with_insensitive', 'ends_with', 'not_ends_with', 'ends_with_insensitive', 'not_ends_with_insensitive', 'like', 'not_like', 'like_insensitive', 'not_like_insensitive', 'equal_to_insensitive', 'not_equal_to_insensitive', 'distinct_from_insensitive', 'not_distinct_from_insensitive', 'in_insensitive', 'not_in_insensitive', 'less_than_insensitive', 'less_than_or_equal_to_insensitive', 'greater_than_insensitive', 'greater_than_or_equal_to_insensitive')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(String, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(String, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(String, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(String, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(String, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(String, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(String, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(String, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''

    includes = sgqlc.types.Field(String, graphql_name='includes')
    '''Contains the specified string (case-sensitive).'''

    not_includes = sgqlc.types.Field(String, graphql_name='notIncludes')
    '''Does not contain the specified string (case-sensitive).'''

    includes_insensitive = sgqlc.types.Field(String, graphql_name='includesInsensitive')
    '''Contains the specified string (case-insensitive).'''

    not_includes_insensitive = sgqlc.types.Field(String, graphql_name='notIncludesInsensitive')
    '''Does not contain the specified string (case-insensitive).'''

    starts_with = sgqlc.types.Field(String, graphql_name='startsWith')
    '''Starts with the specified string (case-sensitive).'''

    not_starts_with = sgqlc.types.Field(String, graphql_name='notStartsWith')
    '''Does not start with the specified string (case-sensitive).'''

    starts_with_insensitive = sgqlc.types.Field(String, graphql_name='startsWithInsensitive')
    '''Starts with the specified string (case-insensitive).'''

    not_starts_with_insensitive = sgqlc.types.Field(String, graphql_name='notStartsWithInsensitive')
    '''Does not start with the specified string (case-insensitive).'''

    ends_with = sgqlc.types.Field(String, graphql_name='endsWith')
    '''Ends with the specified string (case-sensitive).'''

    not_ends_with = sgqlc.types.Field(String, graphql_name='notEndsWith')
    '''Does not end with the specified string (case-sensitive).'''

    ends_with_insensitive = sgqlc.types.Field(String, graphql_name='endsWithInsensitive')
    '''Ends with the specified string (case-insensitive).'''

    not_ends_with_insensitive = sgqlc.types.Field(String, graphql_name='notEndsWithInsensitive')
    '''Does not end with the specified string (case-insensitive).'''

    like = sgqlc.types.Field(String, graphql_name='like')
    '''Matches the specified pattern (case-sensitive). An underscore (_)
    matches any single character; a percent sign (%) matches any
    sequence of zero or more characters.
    '''

    not_like = sgqlc.types.Field(String, graphql_name='notLike')
    '''Does not match the specified pattern (case-sensitive). An
    underscore (_) matches any single character; a percent sign (%)
    matches any sequence of zero or more characters.
    '''

    like_insensitive = sgqlc.types.Field(String, graphql_name='likeInsensitive')
    '''Matches the specified pattern (case-insensitive). An underscore
    (_) matches any single character; a percent sign (%) matches any
    sequence of zero or more characters.
    '''

    not_like_insensitive = sgqlc.types.Field(String, graphql_name='notLikeInsensitive')
    '''Does not match the specified pattern (case-insensitive). An
    underscore (_) matches any single character; a percent sign (%)
    matches any sequence of zero or more characters.
    '''

    equal_to_insensitive = sgqlc.types.Field(String, graphql_name='equalToInsensitive')
    '''Equal to the specified value (case-insensitive).'''

    not_equal_to_insensitive = sgqlc.types.Field(String, graphql_name='notEqualToInsensitive')
    '''Not equal to the specified value (case-insensitive).'''

    distinct_from_insensitive = sgqlc.types.Field(String, graphql_name='distinctFromInsensitive')
    '''Not equal to the specified value, treating null like an ordinary
    value (case-insensitive).
    '''

    not_distinct_from_insensitive = sgqlc.types.Field(String, graphql_name='notDistinctFromInsensitive')
    '''Equal to the specified value, treating null like an ordinary value
    (case-insensitive).
    '''

    in_insensitive = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='inInsensitive')
    '''Included in the specified list (case-insensitive).'''

    not_in_insensitive = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='notInInsensitive')
    '''Not included in the specified list (case-insensitive).'''

    less_than_insensitive = sgqlc.types.Field(String, graphql_name='lessThanInsensitive')
    '''Less than the specified value (case-insensitive).'''

    less_than_or_equal_to_insensitive = sgqlc.types.Field(String, graphql_name='lessThanOrEqualToInsensitive')
    '''Less than or equal to the specified value (case-insensitive).'''

    greater_than_insensitive = sgqlc.types.Field(String, graphql_name='greaterThanInsensitive')
    '''Greater than the specified value (case-insensitive).'''

    greater_than_or_equal_to_insensitive = sgqlc.types.Field(String, graphql_name='greaterThanOrEqualToInsensitive')
    '''Greater than or equal to the specified value (case-insensitive).'''



class UUIDFilter(sgqlc.types.Input):
    '''A filter to be used against UUID fields. All fields are combined
    with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('is_null', 'equal_to', 'not_equal_to', 'distinct_from', 'not_distinct_from', 'in_', 'not_in', 'less_than', 'less_than_or_equal_to', 'greater_than', 'greater_than_or_equal_to')
    is_null = sgqlc.types.Field(Boolean, graphql_name='isNull')
    '''Is null (if `true` is specified) or is not null (if `false` is
    specified).
    '''

    equal_to = sgqlc.types.Field(UUID, graphql_name='equalTo')
    '''Equal to the specified value.'''

    not_equal_to = sgqlc.types.Field(UUID, graphql_name='notEqualTo')
    '''Not equal to the specified value.'''

    distinct_from = sgqlc.types.Field(UUID, graphql_name='distinctFrom')
    '''Not equal to the specified value, treating null like an ordinary
    value.
    '''

    not_distinct_from = sgqlc.types.Field(UUID, graphql_name='notDistinctFrom')
    '''Equal to the specified value, treating null like an ordinary
    value.
    '''

    in_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UUID)), graphql_name='in')
    '''Included in the specified list.'''

    not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UUID)), graphql_name='notIn')
    '''Not included in the specified list.'''

    less_than = sgqlc.types.Field(UUID, graphql_name='lessThan')
    '''Less than the specified value.'''

    less_than_or_equal_to = sgqlc.types.Field(UUID, graphql_name='lessThanOrEqualTo')
    '''Less than or equal to the specified value.'''

    greater_than = sgqlc.types.Field(UUID, graphql_name='greaterThan')
    '''Greater than the specified value.'''

    greater_than_or_equal_to = sgqlc.types.Field(UUID, graphql_name='greaterThanOrEqualTo')
    '''Greater than or equal to the specified value.'''



class UpdateAggregateWarehouseUtilByCustomerRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the
    `updateAggregateWarehouseUtilByCustomerRawByNodeId` mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `AggregateWarehouseUtilByCustomerRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseUtilByCustomerRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `AggregateWarehouseUtilByCustomerRaw` being updated.
    '''



class UpdateAggregateWarehouseUtilByCustomerRawInput(sgqlc.types.Input):
    '''All input for the `updateAggregateWarehouseUtilByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseUtilByCustomerRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `AggregateWarehouseUtilByCustomerRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class UpdateAggregateWarehouseUtilRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateAggregateWarehouseUtilRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `AggregateWarehouseUtilRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseUtilRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `AggregateWarehouseUtilRaw` being updated.
    '''



class UpdateAggregateWarehouseUtilRawInput(sgqlc.types.Input):
    '''All input for the `updateAggregateWarehouseUtilRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseUtilRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `AggregateWarehouseUtilRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class UpdateAggregateWarehouseVolumeByCustomerRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the
    `updateAggregateWarehouseVolumeByCustomerRawByNodeId` mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `AggregateWarehouseVolumeByCustomerRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseVolumeByCustomerRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `AggregateWarehouseVolumeByCustomerRaw` being updated.
    '''



class UpdateAggregateWarehouseVolumeByCustomerRawInput(sgqlc.types.Input):
    '''All input for the `updateAggregateWarehouseVolumeByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseVolumeByCustomerRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `AggregateWarehouseVolumeByCustomerRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class UpdateAggregateWarehouseVolumeRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateAggregateWarehouseVolumeRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `AggregateWarehouseVolumeRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseVolumeRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `AggregateWarehouseVolumeRaw` being updated.
    '''



class UpdateAggregateWarehouseVolumeRawInput(sgqlc.types.Input):
    '''All input for the `updateAggregateWarehouseVolumeRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(AggregateWarehouseVolumeRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `AggregateWarehouseVolumeRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class UpdateBillingHistoryRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBillingHistoryRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BillingHistoryRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BillingHistoryRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BillingHistoryRaw` being updated.
    '''



class UpdateBillingHistoryRawInput(sgqlc.types.Input):
    '''All input for the `updateBillingHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BillingHistoryRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BillingHistoryRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateBlastCellByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBlastCellByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `BlastCell`
    to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCellPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `BlastCell`
    being updated.
    '''



class UpdateBlastCellInput(sgqlc.types.Input):
    '''All input for the `updateBlastCell` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCellPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `BlastCell`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class UpdateBlastCellTypeByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBlastCellTypeByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastCellType` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCellTypePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCellType` being updated.
    '''



class UpdateBlastCellTypeInput(sgqlc.types.Input):
    '''All input for the `updateBlastCellType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'slug')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCellTypePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCellType` being updated.
    '''

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')



class UpdateBlastCellWmsPalletByBlastCellIdAndWmsPalletIdInput(sgqlc.types.Input):
    '''All input for the
    `updateBlastCellWmsPalletByBlastCellIdAndWmsPalletId` mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'blast_cell_id', 'wms_pallet_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCellWmsPallet` being updated.
    '''

    blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCellId')

    wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsPalletId')



class UpdateBlastCellWmsPalletByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBlastCellWmsPalletByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastCellWmsPallet` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCellWmsPallet` being updated.
    '''



class UpdateBlastCellWmsPalletInput(sgqlc.types.Input):
    '''All input for the `updateBlastCellWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCellWmsPallet` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class UpdateBlastCellWmsPalletLocationByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBlastCellWmsPalletLocationByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastCellWmsPalletLocation` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletLocationPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCellWmsPalletLocation` being updated.
    '''



class UpdateBlastCellWmsPalletLocationInput(sgqlc.types.Input):
    '''All input for the `updateBlastCellWmsPalletLocation` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletLocationPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCellWmsPalletLocation` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class UpdateBlastCycleByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBlastCycleByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `BlastCycle`
    to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCyclePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `BlastCycle`
    being updated.
    '''



class UpdateBlastCycleEventByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBlastCycleEventByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastCycleEvent` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleEventPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCycleEvent` being updated.
    '''



class UpdateBlastCycleEventInput(sgqlc.types.Input):
    '''All input for the `updateBlastCycleEvent` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleEventPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCycleEvent` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class UpdateBlastCycleInput(sgqlc.types.Input):
    '''All input for the `updateBlastCycle` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCyclePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `BlastCycle`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class UpdateBlastCycleWmsPalletByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBlastCycleWmsPalletByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastCycleWmsPallet` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleWmsPalletPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCycleWmsPallet` being updated.
    '''



class UpdateBlastCycleWmsPalletInput(sgqlc.types.Input):
    '''All input for the `updateBlastCycleWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleWmsPalletPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastCycleWmsPallet` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class UpdateBlastPlanByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBlastPlanByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `BlastPlan`
    to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `BlastPlan`
    being updated.
    '''



class UpdateBlastPlanInput(sgqlc.types.Input):
    '''All input for the `updateBlastPlan` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `BlastPlan`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class UpdateBlastPlanPalletByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBlastPlanPalletByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BlastPlanPallet` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanPalletPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastPlanPallet` being updated.
    '''



class UpdateBlastPlanPalletInput(sgqlc.types.Input):
    '''All input for the `updateBlastPlanPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanPalletPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BlastPlanPallet` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class UpdateBolConstantsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBolConstantsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BolConstantsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BolConstantsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BolConstantsRaw` being updated.
    '''



class UpdateBolConstantsRawInput(sgqlc.types.Input):
    '''All input for the `updateBolConstantsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BolConstantsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BolConstantsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdateBrokerOwnersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateBrokerOwnersRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `BrokerOwnersRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BrokerOwnersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BrokerOwnersRaw` being updated.
    '''



class UpdateBrokerOwnersRawInput(sgqlc.types.Input):
    '''All input for the `updateBrokerOwnersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(BrokerOwnersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `BrokerOwnersRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateCarriersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateCarriersRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `CarriersRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(CarriersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `CarriersRaw`
    being updated.
    '''



class UpdateCarriersRawInput(sgqlc.types.Input):
    '''All input for the `updateCarriersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(CarriersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `CarriersRaw`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class UpdateCasePicksRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateCasePicksRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `CasePicksRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(CasePicksRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `CasePicksRaw`
    being updated.
    '''



class UpdateCasePicksRawInput(sgqlc.types.Input):
    '''All input for the `updateCasePicksRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(CasePicksRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `CasePicksRaw`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateCursorHistoryByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateCursorHistoryByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `CursorHistory` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(CursorHistoryPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `CursorHistory` being updated.
    '''



class UpdateCursorHistoryInput(sgqlc.types.Input):
    '''All input for the `updateCursorHistory` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(CursorHistoryPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `CursorHistory` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class UpdateCutsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateCutsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `CutsRaw` to
    be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(CutsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `CutsRaw`
    being updated.
    '''



class UpdateCutsRawInput(sgqlc.types.Input):
    '''All input for the `updateCutsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(CutsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `CutsRaw`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateCycleMetadataInput(sgqlc.types.Input):
    '''All input for the `updateCycleMetadata` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id',)
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''



class UpdateDriversRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateDriversRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `DriversRaw`
    to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(DriversRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `DriversRaw`
    being updated.
    '''



class UpdateDriversRawInput(sgqlc.types.Input):
    '''All input for the `updateDriversRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(DriversRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `DriversRaw`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class UpdateEdgeNodeByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateEdgeNodeByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `EdgeNode`
    to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(EdgeNodePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `EdgeNode`
    being updated.
    '''



class UpdateEdgeNodeInput(sgqlc.types.Input):
    '''All input for the `updateEdgeNode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'client_id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(EdgeNodePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `EdgeNode`
    being updated.
    '''

    client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='clientId')



class UpdateEdgeNodeSourceChannelAccessByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateEdgeNodeSourceChannelAccessByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `EdgeNodeSourceChannelAccess` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(EdgeNodeSourceChannelAccessPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `EdgeNodeSourceChannelAccess` being updated.
    '''



class UpdateEdgeNodeSourceChannelAccessInput(sgqlc.types.Input):
    '''All input for the `updateEdgeNodeSourceChannelAccess` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'edge_node_client_id', 'source_channel_name', 'action')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(EdgeNodeSourceChannelAccessPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `EdgeNodeSourceChannelAccess` being updated.
    '''

    edge_node_client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='edgeNodeClientId')

    source_channel_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceChannelName')

    action = sgqlc.types.Field(sgqlc.types.non_null(EnumEdgeNodeSourceChannelAccessAction), graphql_name='action')



class UpdateExpectedInboundOrderDetailsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateExpectedInboundOrderDetailsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ExpectedInboundOrderDetailsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ExpectedInboundOrderDetailsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ExpectedInboundOrderDetailsRaw` being updated.
    '''



class UpdateExpectedInboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the `updateExpectedInboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ExpectedInboundOrderDetailsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ExpectedInboundOrderDetailsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateExpectedInboundOrdersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateExpectedInboundOrdersRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ExpectedInboundOrdersRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ExpectedInboundOrdersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ExpectedInboundOrdersRaw` being updated.
    '''



class UpdateExpectedInboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the `updateExpectedInboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ExpectedInboundOrdersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ExpectedInboundOrdersRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateExpectedOutboundOrderDetailsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateExpectedOutboundOrderDetailsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ExpectedOutboundOrderDetailsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ExpectedOutboundOrderDetailsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ExpectedOutboundOrderDetailsRaw` being updated.
    '''



class UpdateExpectedOutboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the `updateExpectedOutboundOrderDetailsRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ExpectedOutboundOrderDetailsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ExpectedOutboundOrderDetailsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateExpectedOutboundOrdersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateExpectedOutboundOrdersRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ExpectedOutboundOrdersRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ExpectedOutboundOrdersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ExpectedOutboundOrdersRaw` being updated.
    '''



class UpdateExpectedOutboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the `updateExpectedOutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ExpectedOutboundOrdersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ExpectedOutboundOrdersRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateExpectedPalletsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateExpectedPalletsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ExpectedPalletsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ExpectedPalletsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ExpectedPalletsRaw` being updated.
    '''



class UpdateExpectedPalletsRawInput(sgqlc.types.Input):
    '''All input for the `updateExpectedPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ExpectedPalletsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ExpectedPalletsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateFacilitiesTestByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateFacilitiesTestByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `FacilitiesTest` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(FacilitiesTestPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `FacilitiesTest` being updated.
    '''



class UpdateFacilitiesTestInput(sgqlc.types.Input):
    '''All input for the `updateFacilitiesTest` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(FacilitiesTestPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `FacilitiesTest` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class UpdateFacilityByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateFacilityByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `Facility`
    to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(FacilityPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `Facility`
    being updated.
    '''



class UpdateFacilityGroupingByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateFacilityGroupingByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `FacilityGrouping` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(FacilityGroupingPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `FacilityGrouping` being updated.
    '''



class UpdateFacilityGroupingInput(sgqlc.types.Input):
    '''All input for the `updateFacilityGrouping` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(FacilityGroupingPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `FacilityGrouping` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class UpdateFacilityInput(sgqlc.types.Input):
    '''All input for the `updateFacility` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(FacilityPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `Facility`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class UpdateFacilityWorkdayCostCenterByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateFacilityWorkdayCostCenterByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `FacilityWorkdayCostCenter` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(FacilityWorkdayCostCenterPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `FacilityWorkdayCostCenter` being updated.
    '''



class UpdateFacilityWorkdayCostCenterInput(sgqlc.types.Input):
    '''All input for the `updateFacilityWorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(FacilityWorkdayCostCenterPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `FacilityWorkdayCostCenter` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class UpdateHoldCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateHoldCodesRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `HoldCodesRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(HoldCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `HoldCodesRaw`
    being updated.
    '''



class UpdateHoldCodesRawInput(sgqlc.types.Input):
    '''All input for the `updateHoldCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(HoldCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `HoldCodesRaw`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateHppRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateHppRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `HppRaw` to
    be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(HppRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `HppRaw` being
    updated.
    '''



class UpdateHppRawInput(sgqlc.types.Input):
    '''All input for the `updateHppRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(HppRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `HppRaw` being
    updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class UpdateInboundCatchWeightRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInboundCatchWeightRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundCatchWeightRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundCatchWeightRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundCatchWeightRaw` being updated.
    '''



class UpdateInboundCatchWeightRawInput(sgqlc.types.Input):
    '''All input for the `updateInboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundCatchWeightRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundCatchWeightRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''



class UpdateInboundLoadsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInboundLoadsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundLoadsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundLoadsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundLoadsRaw` being updated.
    '''



class UpdateInboundLoadsRawInput(sgqlc.types.Input):
    '''All input for the `updateInboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundLoadsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundLoadsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateInboundOrderCommentsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrderCommentsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrderCommentsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrderCommentsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrderCommentsRaw` being updated.
    '''



class UpdateInboundOrderCommentsRawInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrderCommentsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrderCommentsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdateInboundOrderDetailReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the
    `updateInboundOrderDetailReferenceCodesRawByNodeId` mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrderDetailReferenceCodesRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrderDetailReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrderDetailReferenceCodesRaw` being updated.
    '''



class UpdateInboundOrderDetailReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrderDetailReferenceCodesRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrderDetailReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrderDetailReferenceCodesRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdateInboundOrderDetailsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrderDetailsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrderDetailsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrderDetailsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrderDetailsRaw` being updated.
    '''



class UpdateInboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrderDetailsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrderDetailsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateInboundOrderReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrderReferenceCodesRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrderReferenceCodesRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrderReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrderReferenceCodesRaw` being updated.
    '''



class UpdateInboundOrderReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrderReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrderReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrderReferenceCodesRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateInboundOrdersExecutionRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrdersExecutionRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrdersExecutionRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrdersExecutionRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrdersExecutionRaw` being updated.
    '''



class UpdateInboundOrdersExecutionRawInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrdersExecutionRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrdersExecutionRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdateInboundOrdersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrdersRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundOrdersRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrdersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrdersRaw` being updated.
    '''



class UpdateInboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the `updateInboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundOrdersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundOrdersRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateInboundPalletsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInboundPalletsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundPalletsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundPalletsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundPalletsRaw` being updated.
    '''



class UpdateInboundPalletsRawInput(sgqlc.types.Input):
    '''All input for the `updateInboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundPalletsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundPalletsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateInboundTruckLogRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInboundTruckLogRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InboundTruckLogRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundTruckLogRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundTruckLogRaw` being updated.
    '''



class UpdateInboundTruckLogRawInput(sgqlc.types.Input):
    '''All input for the `updateInboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InboundTruckLogRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InboundTruckLogRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateInventoryAdjustmentsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInventoryAdjustmentsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InventoryAdjustmentsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InventoryAdjustmentsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InventoryAdjustmentsRaw` being updated.
    '''



class UpdateInventoryAdjustmentsRawInput(sgqlc.types.Input):
    '''All input for the `updateInventoryAdjustmentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InventoryAdjustmentsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InventoryAdjustmentsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateInventoryControlRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInventoryControlRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InventoryControlRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InventoryControlRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InventoryControlRaw` being updated.
    '''



class UpdateInventoryControlRawInput(sgqlc.types.Input):
    '''All input for the `updateInventoryControlRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InventoryControlRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InventoryControlRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateInventoryHoldHistoryRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateInventoryHoldHistoryRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `InventoryHoldHistoryRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InventoryHoldHistoryRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InventoryHoldHistoryRaw` being updated.
    '''



class UpdateInventoryHoldHistoryRawInput(sgqlc.types.Input):
    '''All input for the `updateInventoryHoldHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(InventoryHoldHistoryRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `InventoryHoldHistoryRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateItemFreezeTimeByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateItemFreezeTimeByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ItemFreezeTime` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ItemFreezeTimePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ItemFreezeTime` being updated.
    '''



class UpdateItemFreezeTimeInput(sgqlc.types.Input):
    '''All input for the `updateItemFreezeTime` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ItemFreezeTimePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ItemFreezeTime` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class UpdateItemReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateItemReferenceCodesRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ItemReferenceCodesRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ItemReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ItemReferenceCodesRaw` being updated.
    '''



class UpdateItemReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `updateItemReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ItemReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ItemReferenceCodesRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateItemShortCategoryNameByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateItemShortCategoryNameByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `ItemShortCategoryName` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ItemShortCategoryNamePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ItemShortCategoryName` being updated.
    '''



class UpdateItemShortCategoryNameInput(sgqlc.types.Input):
    '''All input for the `updateItemShortCategoryName` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ItemShortCategoryNamePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `ItemShortCategoryName` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class UpdateItemsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateItemsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `ItemsRaw`
    to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ItemsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `ItemsRaw`
    being updated.
    '''



class UpdateItemsRawInput(sgqlc.types.Input):
    '''All input for the `updateItemsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(ItemsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `ItemsRaw`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateLotReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateLotReferenceCodesRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `LotReferenceCodesRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(LotReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `LotReferenceCodesRaw` being updated.
    '''



class UpdateLotReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `updateLotReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(LotReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `LotReferenceCodesRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateLotTransactionsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateLotTransactionsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `LotTransactionsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(LotTransactionsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `LotTransactionsRaw` being updated.
    '''



class UpdateLotTransactionsRawInput(sgqlc.types.Input):
    '''All input for the `updateLotTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(LotTransactionsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `LotTransactionsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateLotsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateLotsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `LotsRaw` to
    be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(LotsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `LotsRaw`
    being updated.
    '''



class UpdateLotsRawInput(sgqlc.types.Input):
    '''All input for the `updateLotsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(LotsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `LotsRaw`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateOutboundCatchWeightRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateOutboundCatchWeightRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundCatchWeightRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundCatchWeightRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundCatchWeightRaw` being updated.
    '''



class UpdateOutboundCatchWeightRawInput(sgqlc.types.Input):
    '''All input for the `updateOutboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundCatchWeightRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundCatchWeightRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdateOutboundLoadsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateOutboundLoadsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundLoadsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundLoadsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundLoadsRaw` being updated.
    '''



class UpdateOutboundLoadsRawInput(sgqlc.types.Input):
    '''All input for the `updateOutboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundLoadsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundLoadsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateOutboundOrderCommentsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrderCommentsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrderCommentsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrderCommentsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrderCommentsRaw` being updated.
    '''



class UpdateOutboundOrderCommentsRawInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrderCommentsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrderCommentsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdateOutboundOrderDetailsExecutionRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrderDetailsExecutionRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrderDetailsExecutionRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrderDetailsExecutionRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrderDetailsExecutionRaw` being updated.
    '''



class UpdateOutboundOrderDetailsExecutionRawInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrderDetailsExecutionRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrderDetailsExecutionRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrderDetailsExecutionRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdateOutboundOrderDetailsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrderDetailsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrderDetailsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrderDetailsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrderDetailsRaw` being updated.
    '''



class UpdateOutboundOrderDetailsRawInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrderDetailsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrderDetailsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateOutboundOrderReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrderReferenceCodesRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrderReferenceCodesRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrderReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrderReferenceCodesRaw` being updated.
    '''



class UpdateOutboundOrderReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrderReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrderReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrderReferenceCodesRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateOutboundOrdersExecutionRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrdersExecutionRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrdersExecutionRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrdersExecutionRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrdersExecutionRaw` being updated.
    '''



class UpdateOutboundOrdersExecutionRawInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrdersExecutionRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrdersExecutionRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdateOutboundOrdersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrdersRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundOrdersRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrdersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrdersRaw` being updated.
    '''



class UpdateOutboundOrdersRawInput(sgqlc.types.Input):
    '''All input for the `updateOutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrdersRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundOrdersRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateOutboundPalletsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateOutboundPalletsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundPalletsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundPalletsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundPalletsRaw` being updated.
    '''



class UpdateOutboundPalletsRawInput(sgqlc.types.Input):
    '''All input for the `updateOutboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundPalletsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundPalletsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateOutboundTruckLogRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateOutboundTruckLogRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `OutboundTruckLogRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundTruckLogRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundTruckLogRaw` being updated.
    '''



class UpdateOutboundTruckLogRawInput(sgqlc.types.Input):
    '''All input for the `updateOutboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(OutboundTruckLogRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `OutboundTruckLogRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdatePalletHistoryRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updatePalletHistoryRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `PalletHistoryRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(PalletHistoryRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `PalletHistoryRaw` being updated.
    '''



class UpdatePalletHistoryRawInput(sgqlc.types.Input):
    '''All input for the `updatePalletHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(PalletHistoryRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `PalletHistoryRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdatePalletLocationsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updatePalletLocationsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `PalletLocationsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(PalletLocationsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `PalletLocationsRaw` being updated.
    '''



class UpdatePalletLocationsRawInput(sgqlc.types.Input):
    '''All input for the `updatePalletLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(PalletLocationsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `PalletLocationsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdatePalletReferenceCodesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updatePalletReferenceCodesRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `PalletReferenceCodesRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(PalletReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `PalletReferenceCodesRaw` being updated.
    '''



class UpdatePalletReferenceCodesRawInput(sgqlc.types.Input):
    '''All input for the `updatePalletReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(PalletReferenceCodesRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `PalletReferenceCodesRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdatePalletTransactionsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updatePalletTransactionsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `PalletTransactionsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(PalletTransactionsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `PalletTransactionsRaw` being updated.
    '''



class UpdatePalletTransactionsRawInput(sgqlc.types.Input):
    '''All input for the `updatePalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(PalletTransactionsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `PalletTransactionsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdatePalletsInBlastCellsInput(sgqlc.types.Input):
    '''All input for the `updatePalletsInBlastCells` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id',)
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''



class UpdatePalletsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updatePalletsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `PalletsRaw`
    to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(PalletsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `PalletsRaw`
    being updated.
    '''



class UpdatePalletsRawInput(sgqlc.types.Input):
    '''All input for the `updatePalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(PalletsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `PalletsRaw`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateSourceByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateSourceByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `Source` to
    be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(SourcePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `Source` being
    updated.
    '''



class UpdateSourceChannelByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateSourceChannelByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `SourceChannel` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(SourceChannelPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `SourceChannel` being updated.
    '''



class UpdateSourceChannelCursorByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateSourceChannelCursorByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `SourceChannelCursor` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(SourceChannelCursorPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `SourceChannelCursor` being updated.
    '''



class UpdateSourceChannelCursorInput(sgqlc.types.Input):
    '''All input for the `updateSourceChannelCursor` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(SourceChannelCursorPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `SourceChannelCursor` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')



class UpdateSourceChannelInput(sgqlc.types.Input):
    '''All input for the `updateSourceChannel` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'name')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(SourceChannelPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `SourceChannel` being updated.
    '''

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')



class UpdateSourceInput(sgqlc.types.Input):
    '''All input for the `updateSource` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'slug')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(SourcePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `Source` being
    updated.
    '''

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')



class UpdateSourceTypeByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateSourceTypeByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `SourceType`
    to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(SourceTypePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `SourceType`
    being updated.
    '''



class UpdateSourceTypeInput(sgqlc.types.Input):
    '''All input for the `updateSourceType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'slug')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(SourceTypePatch), graphql_name='patch')
    '''An object where the defined keys will be set on the `SourceType`
    being updated.
    '''

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')



class UpdateStopLocationsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateStopLocationsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `StopLocationsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(StopLocationsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `StopLocationsRaw` being updated.
    '''



class UpdateStopLocationsRawInput(sgqlc.types.Input):
    '''All input for the `updateStopLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'source_system_id', 'name')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null(StopLocationsRawPatch), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `StopLocationsRaw` being updated.
    '''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')



class UpdateWarehouseCustomersConfigRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateWarehouseCustomersConfigRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WarehouseCustomersConfigRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WarehouseCustomersConfigRawPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WarehouseCustomersConfigRaw` being updated.
    '''



class UpdateWarehouseCustomersConfigRawInput(sgqlc.types.Input):
    '''All input for the `updateWarehouseCustomersConfigRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WarehouseCustomersConfigRawPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WarehouseCustomersConfigRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdateWarehouseCustomersRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateWarehouseCustomersRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WarehouseCustomersRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WarehouseCustomersRawPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WarehouseCustomersRaw` being updated.
    '''



class UpdateWarehouseCustomersRawInput(sgqlc.types.Input):
    '''All input for the `updateWarehouseCustomersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WarehouseCustomersRawPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WarehouseCustomersRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateWarehousePickActivitiesRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateWarehousePickActivitiesRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WarehousePickActivitiesRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WarehousePickActivitiesRawPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WarehousePickActivitiesRaw` being updated.
    '''



class UpdateWarehousePickActivitiesRawInput(sgqlc.types.Input):
    '''All input for the `updateWarehousePickActivitiesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WarehousePickActivitiesRawPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WarehousePickActivitiesRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateWmsFacilityDefaultsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateWmsFacilityDefaultsRawByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WmsFacilityDefaultsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WmsFacilityDefaultsRawPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WmsFacilityDefaultsRaw` being updated.
    '''



class UpdateWmsFacilityDefaultsRawInput(sgqlc.types.Input):
    '''All input for the `updateWmsFacilityDefaultsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WmsFacilityDefaultsRawPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WmsFacilityDefaultsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''



class UpdateWmsSystemByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateWmsSystemByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single `WmsSystem`
    to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WmsSystemPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the `WmsSystem`
    being updated.
    '''



class UpdateWmsSystemInput(sgqlc.types.Input):
    '''All input for the `updateWmsSystem` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WmsSystemPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the `WmsSystem`
    being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')



class UpdateWoodenPalletTransactionsRawByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateWoodenPalletTransactionsRawByNodeId`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WoodenPalletTransactionsRaw` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WoodenPalletTransactionsRawPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WoodenPalletTransactionsRaw` being updated.
    '''



class UpdateWoodenPalletTransactionsRawInput(sgqlc.types.Input):
    '''All input for the `updateWoodenPalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WoodenPalletTransactionsRawPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WoodenPalletTransactionsRaw` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''



class UpdateWorkdayCostCenterByNodeIdInput(sgqlc.types.Input):
    '''All input for the `updateWorkdayCostCenterByNodeId` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'node_id', 'patch')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''The globally unique `ID` which will identify a single
    `WorkdayCostCenter` to be updated.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WorkdayCostCenterPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WorkdayCostCenter` being updated.
    '''



class UpdateWorkdayCostCenterInput(sgqlc.types.Input):
    '''All input for the `updateWorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'patch', 'id')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    patch = sgqlc.types.Field(sgqlc.types.non_null('WorkdayCostCenterPatch'), graphql_name='patch')
    '''An object where the defined keys will be set on the
    `WorkdayCostCenter` being updated.
    '''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class UpsertChannelCursorInput(sgqlc.types.Input):
    '''All input for the `upsertChannelCursor` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'upsert_input')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''An arbitrary string value with no semantic meaning. Will be
    included in the payload verbatim. May be used to track mutations
    by the client.
    '''

    upsert_input = sgqlc.types.Field(sgqlc.types.non_null('UpsertChannelCursorInputRecordInput'), graphql_name='upsertInput')



class UpsertChannelCursorInputRecordInput(sgqlc.types.Input):
    '''An input for mutations affecting `UpsertChannelCursorInputRecord`'''
    __schema__ = base
    __field_names__ = ('sourceslug', 'sourcechannel', 'cursorvalue')
    sourceslug = sgqlc.types.Field(String, graphql_name='sourceslug')

    sourcechannel = sgqlc.types.Field(String, graphql_name='sourcechannel')

    cursorvalue = sgqlc.types.Field(BigInt, graphql_name='cursorvalue')



class WarehouseCustomerCondition(sgqlc.types.Input):
    '''A condition to be used against `WarehouseCustomer` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'customer_id', 'salesforce_account_name', 'facility_id', 'customer_enterprise_id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'is_active', 'source_row_id', '_id', '_version', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    salesforce_account_name = sgqlc.types.Field(String, graphql_name='salesforceAccountName')
    '''Checks for equality with the object’s `salesforceAccountName`
    field.
    '''

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')
    '''Checks for equality with the object’s `facilityId` field.'''

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')
    '''Checks for equality with the object’s `customerEnterpriseId`
    field.
    '''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Checks for equality with the object’s `isActive` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''



class WarehouseCustomerFilter(sgqlc.types.Input):
    '''A filter to be used against `WarehouseCustomer` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'customer_id', 'salesforce_account_name', 'facility_id', 'customer_enterprise_id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'is_active', 'source_row_id', '_id', '_version', 'created_at', 'updated_at', 'deleted_at', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(StringFilter, graphql_name='id')
    '''Filter by the object’s `id` field.'''

    customer_id = sgqlc.types.Field(StringFilter, graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    salesforce_account_name = sgqlc.types.Field(StringFilter, graphql_name='salesforceAccountName')
    '''Filter by the object’s `salesforceAccountName` field.'''

    facility_id = sgqlc.types.Field(IntFilter, graphql_name='facilityId')
    '''Filter by the object’s `facilityId` field.'''

    customer_enterprise_id = sgqlc.types.Field(StringFilter, graphql_name='customerEnterpriseId')
    '''Filter by the object’s `customerEnterpriseId` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(StringFilter, graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(StringFilter, graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    is_active = sgqlc.types.Field(BooleanFilter, graphql_name='isActive')
    '''Filter by the object’s `isActive` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _id = sgqlc.types.Field(StringFilter, graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomerFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomerFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('WarehouseCustomerFilter', graphql_name='not')
    '''Negates the expression.'''



class WarehouseCustomersConfigRawCondition(sgqlc.types.Input):
    '''A condition to be used against `WarehouseCustomersConfigRaw`
    object types. All fields are tested for equality and combined with
    a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'is_bulk_crossdock', 'is_bol_expiration_date_visible', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    is_bulk_crossdock = sgqlc.types.Field(Boolean, graphql_name='isBulkCrossdock')
    '''Checks for equality with the object’s `isBulkCrossdock` field.'''

    is_bol_expiration_date_visible = sgqlc.types.Field(Boolean, graphql_name='isBolExpirationDateVisible')
    '''Checks for equality with the object’s `isBolExpirationDateVisible`
    field.
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class WarehouseCustomersConfigRawFilter(sgqlc.types.Input):
    '''A filter to be used against `WarehouseCustomersConfigRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'is_bulk_crossdock', 'is_bol_expiration_date_visible', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(StringFilter, graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(StringFilter, graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_id = sgqlc.types.Field(StringFilter, graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    customer_code = sgqlc.types.Field(StringFilter, graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    is_bulk_crossdock = sgqlc.types.Field(BooleanFilter, graphql_name='isBulkCrossdock')
    '''Filter by the object’s `isBulkCrossdock` field.'''

    is_bol_expiration_date_visible = sgqlc.types.Field(BooleanFilter, graphql_name='isBolExpirationDateVisible')
    '''Filter by the object’s `isBolExpirationDateVisible` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field(StringFilter, graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomersConfigRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomersConfigRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('WarehouseCustomersConfigRawFilter', graphql_name='not')
    '''Negates the expression.'''



class WarehouseCustomersConfigRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `WarehouseCustomersConfigRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'is_bulk_crossdock', 'is_bol_expiration_date_visible', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Unique code for the customer .'''

    is_bulk_crossdock = sgqlc.types.Field(Boolean, graphql_name='isBulkCrossdock')
    '''Flag for whether the customer uses bulk cross docking'''

    is_bol_expiration_date_visible = sgqlc.types.Field(Boolean, graphql_name='isBolExpirationDateVisible')
    '''Flag for whether expiration date is visible on the customer bill
    of lading
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class WarehouseCustomersConfigRawPatch(sgqlc.types.Input):
    '''Represents an update to a `WarehouseCustomersConfigRaw`. Fields
    that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'is_bulk_crossdock', 'is_bol_expiration_date_visible', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Unique code for the customer .'''

    is_bulk_crossdock = sgqlc.types.Field(Boolean, graphql_name='isBulkCrossdock')
    '''Flag for whether the customer uses bulk cross docking'''

    is_bol_expiration_date_visible = sgqlc.types.Field(Boolean, graphql_name='isBolExpirationDateVisible')
    '''Flag for whether expiration date is visible on the customer bill
    of lading
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class WarehouseCustomersRawCondition(sgqlc.types.Input):
    '''A condition to be used against `WarehouseCustomersRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'customer_code', 'is_active', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'customer_address', 'customer_state', 'customer_billing_contact_name', 'billing_address', 'customer_zip', 'billing_city', 'billing_state', 'billing_zip', 'customer_name', 'customer_city', 'customer_country', 'billing_country', 'phone_number1', 'phone_type1', 'phone_number2', 'phone_type2', 'email', '_id', 'id', 'is_broker', 'customer_address1', 'customer_address2', 'uses_metric_reporting', 'billing_work_phone', 'billing_fax')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Checks for equality with the object’s `isActive` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    customer_address = sgqlc.types.Field(String, graphql_name='customerAddress')
    '''Checks for equality with the object’s `customerAddress` field.'''

    customer_state = sgqlc.types.Field(String, graphql_name='customerState')
    '''Checks for equality with the object’s `customerState` field.'''

    customer_billing_contact_name = sgqlc.types.Field(String, graphql_name='customerBillingContactName')
    '''Checks for equality with the object’s `customerBillingContactName`
    field.
    '''

    billing_address = sgqlc.types.Field(String, graphql_name='billingAddress')
    '''Checks for equality with the object’s `billingAddress` field.'''

    customer_zip = sgqlc.types.Field(String, graphql_name='customerZip')
    '''Checks for equality with the object’s `customerZip` field.'''

    billing_city = sgqlc.types.Field(String, graphql_name='billingCity')
    '''Checks for equality with the object’s `billingCity` field.'''

    billing_state = sgqlc.types.Field(String, graphql_name='billingState')
    '''Checks for equality with the object’s `billingState` field.'''

    billing_zip = sgqlc.types.Field(String, graphql_name='billingZip')
    '''Checks for equality with the object’s `billingZip` field.'''

    customer_name = sgqlc.types.Field(String, graphql_name='customerName')
    '''Checks for equality with the object’s `customerName` field.'''

    customer_city = sgqlc.types.Field(String, graphql_name='customerCity')
    '''Checks for equality with the object’s `customerCity` field.'''

    customer_country = sgqlc.types.Field(String, graphql_name='customerCountry')
    '''Checks for equality with the object’s `customerCountry` field.'''

    billing_country = sgqlc.types.Field(String, graphql_name='billingCountry')
    '''Checks for equality with the object’s `billingCountry` field.'''

    phone_number1 = sgqlc.types.Field(String, graphql_name='phoneNumber1')
    '''Checks for equality with the object’s `phoneNumber1` field.'''

    phone_type1 = sgqlc.types.Field(String, graphql_name='phoneType1')
    '''Checks for equality with the object’s `phoneType1` field.'''

    phone_number2 = sgqlc.types.Field(String, graphql_name='phoneNumber2')
    '''Checks for equality with the object’s `phoneNumber2` field.'''

    phone_type2 = sgqlc.types.Field(String, graphql_name='phoneType2')
    '''Checks for equality with the object’s `phoneType2` field.'''

    email = sgqlc.types.Field(String, graphql_name='email')
    '''Checks for equality with the object’s `email` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    is_broker = sgqlc.types.Field(Boolean, graphql_name='isBroker')
    '''Checks for equality with the object’s `isBroker` field.'''

    customer_address1 = sgqlc.types.Field(String, graphql_name='customerAddress1')
    '''Checks for equality with the object’s `customerAddress1` field.'''

    customer_address2 = sgqlc.types.Field(String, graphql_name='customerAddress2')
    '''Checks for equality with the object’s `customerAddress2` field.'''

    uses_metric_reporting = sgqlc.types.Field(Boolean, graphql_name='usesMetricReporting')
    '''Checks for equality with the object’s `usesMetricReporting` field.'''

    billing_work_phone = sgqlc.types.Field(String, graphql_name='billingWorkPhone')
    '''Checks for equality with the object’s `billingWorkPhone` field.'''

    billing_fax = sgqlc.types.Field(String, graphql_name='billingFax')
    '''Checks for equality with the object’s `billingFax` field.'''



class WarehouseCustomersRawFilter(sgqlc.types.Input):
    '''A filter to be used against `WarehouseCustomersRaw` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'customer_code', 'is_active', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'customer_address', 'customer_state', 'customer_billing_contact_name', 'billing_address', 'customer_zip', 'billing_city', 'billing_state', 'billing_zip', 'customer_name', 'customer_city', 'customer_country', 'billing_country', 'phone_number1', 'phone_type1', 'phone_number2', 'phone_type2', 'email', '_id', 'id', 'is_broker', 'customer_address1', 'customer_address2', 'uses_metric_reporting', 'billing_work_phone', 'billing_fax', 'and_', 'or_', 'not_')
    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(StringFilter, graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    customer_code = sgqlc.types.Field(StringFilter, graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    is_active = sgqlc.types.Field(BooleanFilter, graphql_name='isActive')
    '''Filter by the object’s `isActive` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    customer_address = sgqlc.types.Field(StringFilter, graphql_name='customerAddress')
    '''Filter by the object’s `customerAddress` field.'''

    customer_state = sgqlc.types.Field(StringFilter, graphql_name='customerState')
    '''Filter by the object’s `customerState` field.'''

    customer_billing_contact_name = sgqlc.types.Field(StringFilter, graphql_name='customerBillingContactName')
    '''Filter by the object’s `customerBillingContactName` field.'''

    billing_address = sgqlc.types.Field(StringFilter, graphql_name='billingAddress')
    '''Filter by the object’s `billingAddress` field.'''

    customer_zip = sgqlc.types.Field(StringFilter, graphql_name='customerZip')
    '''Filter by the object’s `customerZip` field.'''

    billing_city = sgqlc.types.Field(StringFilter, graphql_name='billingCity')
    '''Filter by the object’s `billingCity` field.'''

    billing_state = sgqlc.types.Field(StringFilter, graphql_name='billingState')
    '''Filter by the object’s `billingState` field.'''

    billing_zip = sgqlc.types.Field(StringFilter, graphql_name='billingZip')
    '''Filter by the object’s `billingZip` field.'''

    customer_name = sgqlc.types.Field(StringFilter, graphql_name='customerName')
    '''Filter by the object’s `customerName` field.'''

    customer_city = sgqlc.types.Field(StringFilter, graphql_name='customerCity')
    '''Filter by the object’s `customerCity` field.'''

    customer_country = sgqlc.types.Field(StringFilter, graphql_name='customerCountry')
    '''Filter by the object’s `customerCountry` field.'''

    billing_country = sgqlc.types.Field(StringFilter, graphql_name='billingCountry')
    '''Filter by the object’s `billingCountry` field.'''

    phone_number1 = sgqlc.types.Field(StringFilter, graphql_name='phoneNumber1')
    '''Filter by the object’s `phoneNumber1` field.'''

    phone_type1 = sgqlc.types.Field(StringFilter, graphql_name='phoneType1')
    '''Filter by the object’s `phoneType1` field.'''

    phone_number2 = sgqlc.types.Field(StringFilter, graphql_name='phoneNumber2')
    '''Filter by the object’s `phoneNumber2` field.'''

    phone_type2 = sgqlc.types.Field(StringFilter, graphql_name='phoneType2')
    '''Filter by the object’s `phoneType2` field.'''

    email = sgqlc.types.Field(StringFilter, graphql_name='email')
    '''Filter by the object’s `email` field.'''

    _id = sgqlc.types.Field(StringFilter, graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    id = sgqlc.types.Field(StringFilter, graphql_name='id')
    '''Filter by the object’s `id` field.'''

    is_broker = sgqlc.types.Field(BooleanFilter, graphql_name='isBroker')
    '''Filter by the object’s `isBroker` field.'''

    customer_address1 = sgqlc.types.Field(StringFilter, graphql_name='customerAddress1')
    '''Filter by the object’s `customerAddress1` field.'''

    customer_address2 = sgqlc.types.Field(StringFilter, graphql_name='customerAddress2')
    '''Filter by the object’s `customerAddress2` field.'''

    uses_metric_reporting = sgqlc.types.Field(BooleanFilter, graphql_name='usesMetricReporting')
    '''Filter by the object’s `usesMetricReporting` field.'''

    billing_work_phone = sgqlc.types.Field(StringFilter, graphql_name='billingWorkPhone')
    '''Filter by the object’s `billingWorkPhone` field.'''

    billing_fax = sgqlc.types.Field(StringFilter, graphql_name='billingFax')
    '''Filter by the object’s `billingFax` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomersRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomersRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('WarehouseCustomersRawFilter', graphql_name='not')
    '''Negates the expression.'''



class WarehouseCustomersRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `WarehouseCustomersRaw`'''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'customer_code', 'is_active', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'customer_address', 'customer_state', 'customer_billing_contact_name', 'billing_address', 'customer_zip', 'billing_city', 'billing_state', 'billing_zip', 'customer_name', 'customer_city', 'customer_country', 'billing_country', 'phone_number1', 'phone_type1', 'phone_number2', 'phone_type2', 'email', '_id', 'id', 'is_broker', 'customer_address1', 'customer_address2', 'uses_metric_reporting', 'billing_work_phone', 'billing_fax')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Is active for the customer'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    customer_address = sgqlc.types.Field(String, graphql_name='customerAddress')
    '''Customer address for the customer'''

    customer_state = sgqlc.types.Field(String, graphql_name='customerState')
    '''Customer state for the customer'''

    customer_billing_contact_name = sgqlc.types.Field(String, graphql_name='customerBillingContactName')
    '''Customer Billing Contact name for the customer'''

    billing_address = sgqlc.types.Field(String, graphql_name='billingAddress')
    '''Billing address for the customer'''

    customer_zip = sgqlc.types.Field(String, graphql_name='customerZip')
    '''Customer zip for the customer'''

    billing_city = sgqlc.types.Field(String, graphql_name='billingCity')
    '''Billing city for the customer'''

    billing_state = sgqlc.types.Field(String, graphql_name='billingState')
    '''Billing state for the customer'''

    billing_zip = sgqlc.types.Field(String, graphql_name='billingZip')
    '''Billing zip for the customer'''

    customer_name = sgqlc.types.Field(String, graphql_name='customerName')
    '''Customer name for the customer'''

    customer_city = sgqlc.types.Field(String, graphql_name='customerCity')
    '''Customer city for the customer'''

    customer_country = sgqlc.types.Field(String, graphql_name='customerCountry')
    '''Customer country for the customer'''

    billing_country = sgqlc.types.Field(String, graphql_name='billingCountry')
    '''Billing country for the customer'''

    phone_number1 = sgqlc.types.Field(String, graphql_name='phoneNumber1')
    '''Phone Number 1 for the customer'''

    phone_type1 = sgqlc.types.Field(String, graphql_name='phoneType1')
    '''Phone Type 1 for the customer'''

    phone_number2 = sgqlc.types.Field(String, graphql_name='phoneNumber2')
    '''Phone Number 2 for the customer'''

    phone_type2 = sgqlc.types.Field(String, graphql_name='phoneType2')
    '''Phone Type 2 for the customer'''

    email = sgqlc.types.Field(String, graphql_name='email')
    '''Email email for the customer'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    is_broker = sgqlc.types.Field(Boolean, graphql_name='isBroker')
    '''Is broker for the customer'''

    customer_address1 = sgqlc.types.Field(String, graphql_name='customerAddress1')
    '''Customer address1 for the customer'''

    customer_address2 = sgqlc.types.Field(String, graphql_name='customerAddress2')
    '''Customer address2 for the customer'''

    uses_metric_reporting = sgqlc.types.Field(Boolean, graphql_name='usesMetricReporting')

    billing_work_phone = sgqlc.types.Field(String, graphql_name='billingWorkPhone')
    '''Information related to the billing work phone'''

    billing_fax = sgqlc.types.Field(String, graphql_name='billingFax')
    '''Information related to billing fax number'''



class WarehouseCustomersRawPatch(sgqlc.types.Input):
    '''Represents an update to a `WarehouseCustomersRaw`. Fields that are
    set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'customer_code', 'is_active', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'customer_address', 'customer_state', 'customer_billing_contact_name', 'billing_address', 'customer_zip', 'billing_city', 'billing_state', 'billing_zip', 'customer_name', 'customer_city', 'customer_country', 'billing_country', 'phone_number1', 'phone_type1', 'phone_number2', 'phone_type2', 'email', '_id', 'id', 'is_broker', 'customer_address1', 'customer_address2', 'uses_metric_reporting', 'billing_work_phone', 'billing_fax')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Is active for the customer'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    customer_address = sgqlc.types.Field(String, graphql_name='customerAddress')
    '''Customer address for the customer'''

    customer_state = sgqlc.types.Field(String, graphql_name='customerState')
    '''Customer state for the customer'''

    customer_billing_contact_name = sgqlc.types.Field(String, graphql_name='customerBillingContactName')
    '''Customer Billing Contact name for the customer'''

    billing_address = sgqlc.types.Field(String, graphql_name='billingAddress')
    '''Billing address for the customer'''

    customer_zip = sgqlc.types.Field(String, graphql_name='customerZip')
    '''Customer zip for the customer'''

    billing_city = sgqlc.types.Field(String, graphql_name='billingCity')
    '''Billing city for the customer'''

    billing_state = sgqlc.types.Field(String, graphql_name='billingState')
    '''Billing state for the customer'''

    billing_zip = sgqlc.types.Field(String, graphql_name='billingZip')
    '''Billing zip for the customer'''

    customer_name = sgqlc.types.Field(String, graphql_name='customerName')
    '''Customer name for the customer'''

    customer_city = sgqlc.types.Field(String, graphql_name='customerCity')
    '''Customer city for the customer'''

    customer_country = sgqlc.types.Field(String, graphql_name='customerCountry')
    '''Customer country for the customer'''

    billing_country = sgqlc.types.Field(String, graphql_name='billingCountry')
    '''Billing country for the customer'''

    phone_number1 = sgqlc.types.Field(String, graphql_name='phoneNumber1')
    '''Phone Number 1 for the customer'''

    phone_type1 = sgqlc.types.Field(String, graphql_name='phoneType1')
    '''Phone Type 1 for the customer'''

    phone_number2 = sgqlc.types.Field(String, graphql_name='phoneNumber2')
    '''Phone Number 2 for the customer'''

    phone_type2 = sgqlc.types.Field(String, graphql_name='phoneType2')
    '''Phone Type 2 for the customer'''

    email = sgqlc.types.Field(String, graphql_name='email')
    '''Email email for the customer'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    is_broker = sgqlc.types.Field(Boolean, graphql_name='isBroker')
    '''Is broker for the customer'''

    customer_address1 = sgqlc.types.Field(String, graphql_name='customerAddress1')
    '''Customer address1 for the customer'''

    customer_address2 = sgqlc.types.Field(String, graphql_name='customerAddress2')
    '''Customer address2 for the customer'''

    uses_metric_reporting = sgqlc.types.Field(Boolean, graphql_name='usesMetricReporting')

    billing_work_phone = sgqlc.types.Field(String, graphql_name='billingWorkPhone')
    '''Information related to the billing work phone'''

    billing_fax = sgqlc.types.Field(String, graphql_name='billingFax')
    '''Information related to billing fax number'''



class WarehousePickActivitiesRawCondition(sgqlc.types.Input):
    '''A condition to be used against `WarehousePickActivitiesRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'activity_type', 'pallet_id', 'ship_datetime', 'case_quantity', 'pallet_count', 'customer_id', 'outbound_order_id', 'warehouse_order_number', 'line_number', 'lot_id', 'pallet_code', 'warehouse_license_plate_number', 'pallet_location_name', 'pallet_location_id', 'item_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    activity_type = sgqlc.types.Field(String, graphql_name='activityType')
    '''Checks for equality with the object’s `activityType` field.'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''Checks for equality with the object’s `palletId` field.'''

    ship_datetime = sgqlc.types.Field(Datetime, graphql_name='shipDatetime')
    '''Checks for equality with the object’s `shipDatetime` field.'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Checks for equality with the object’s `caseQuantity` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Checks for equality with the object’s `lineNumber` field.'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Checks for equality with the object’s `lotId` field.'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Checks for equality with the object’s `palletCode` field.'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Checks for equality with the object’s
    `warehouseLicensePlateNumber` field.
    '''

    pallet_location_name = sgqlc.types.Field(String, graphql_name='palletLocationName')
    '''Checks for equality with the object’s `palletLocationName` field.'''

    pallet_location_id = sgqlc.types.Field(String, graphql_name='palletLocationId')
    '''Checks for equality with the object’s `palletLocationId` field.'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Checks for equality with the object’s `itemId` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''



class WarehousePickActivitiesRawFilter(sgqlc.types.Input):
    '''A filter to be used against `WarehousePickActivitiesRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'activity_type', 'pallet_id', 'ship_datetime', 'case_quantity', 'pallet_count', 'customer_id', 'outbound_order_id', 'warehouse_order_number', 'line_number', 'lot_id', 'pallet_code', 'warehouse_license_plate_number', 'pallet_location_name', 'pallet_location_id', 'item_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(StringFilter, graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(StringFilter, graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    activity_type = sgqlc.types.Field(StringFilter, graphql_name='activityType')
    '''Filter by the object’s `activityType` field.'''

    pallet_id = sgqlc.types.Field(StringFilter, graphql_name='palletId')
    '''Filter by the object’s `palletId` field.'''

    ship_datetime = sgqlc.types.Field(DatetimeFilter, graphql_name='shipDatetime')
    '''Filter by the object’s `shipDatetime` field.'''

    case_quantity = sgqlc.types.Field(IntFilter, graphql_name='caseQuantity')
    '''Filter by the object’s `caseQuantity` field.'''

    pallet_count = sgqlc.types.Field(IntFilter, graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    customer_id = sgqlc.types.Field(StringFilter, graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    outbound_order_id = sgqlc.types.Field(StringFilter, graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    warehouse_order_number = sgqlc.types.Field(StringFilter, graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    line_number = sgqlc.types.Field(StringFilter, graphql_name='lineNumber')
    '''Filter by the object’s `lineNumber` field.'''

    lot_id = sgqlc.types.Field(StringFilter, graphql_name='lotId')
    '''Filter by the object’s `lotId` field.'''

    pallet_code = sgqlc.types.Field(StringFilter, graphql_name='palletCode')
    '''Filter by the object’s `palletCode` field.'''

    warehouse_license_plate_number = sgqlc.types.Field(StringFilter, graphql_name='warehouseLicensePlateNumber')
    '''Filter by the object’s `warehouseLicensePlateNumber` field.'''

    pallet_location_name = sgqlc.types.Field(StringFilter, graphql_name='palletLocationName')
    '''Filter by the object’s `palletLocationName` field.'''

    pallet_location_id = sgqlc.types.Field(StringFilter, graphql_name='palletLocationId')
    '''Filter by the object’s `palletLocationId` field.'''

    item_id = sgqlc.types.Field(StringFilter, graphql_name='itemId')
    '''Filter by the object’s `itemId` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field(StringFilter, graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WarehousePickActivitiesRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WarehousePickActivitiesRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('WarehousePickActivitiesRawFilter', graphql_name='not')
    '''Negates the expression.'''



class WarehousePickActivitiesRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `WarehousePickActivitiesRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'activity_type', 'pallet_id', 'ship_datetime', 'case_quantity', 'pallet_count', 'customer_id', 'outbound_order_id', 'warehouse_order_number', 'line_number', 'lot_id', 'pallet_code', 'warehouse_license_plate_number', 'pallet_location_name', 'pallet_location_id', 'item_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    activity_type = sgqlc.types.Field(String, graphql_name='activityType')
    '''Decription of the pick activity'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS pallet identifier (references pallets_raw.id)'''

    ship_datetime = sgqlc.types.Field(Datetime, graphql_name='shipDatetime')
    '''Scheduled Ship Date for the outbound order'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Number of cases on the pallet'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Related line number on the outbound order'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS Lot identifer (references lots_raw.id)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Registration number assigned to pallet for identification purposes'''

    pallet_location_name = sgqlc.types.Field(String, graphql_name='palletLocationName')
    '''WMS name for the pallet location'''

    pallet_location_id = sgqlc.types.Field(String, graphql_name='palletLocationId')
    '''ODS identifier for the warehouse pallet location (references
    wms.pallet_locations_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class WarehousePickActivitiesRawPatch(sgqlc.types.Input):
    '''Represents an update to a `WarehousePickActivitiesRaw`. Fields
    that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'activity_type', 'pallet_id', 'ship_datetime', 'case_quantity', 'pallet_count', 'customer_id', 'outbound_order_id', 'warehouse_order_number', 'line_number', 'lot_id', 'pallet_code', 'warehouse_license_plate_number', 'pallet_location_name', 'pallet_location_id', 'item_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    activity_type = sgqlc.types.Field(String, graphql_name='activityType')
    '''Decription of the pick activity'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS pallet identifier (references pallets_raw.id)'''

    ship_datetime = sgqlc.types.Field(Datetime, graphql_name='shipDatetime')
    '''Scheduled Ship Date for the outbound order'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Number of cases on the pallet'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Related line number on the outbound order'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS Lot identifer (references lots_raw.id)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Registration number assigned to pallet for identification purposes'''

    pallet_location_name = sgqlc.types.Field(String, graphql_name='palletLocationName')
    '''WMS name for the pallet location'''

    pallet_location_id = sgqlc.types.Field(String, graphql_name='palletLocationId')
    '''ODS identifier for the warehouse pallet location (references
    wms.pallet_locations_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''



class WmsFacilityDefaultsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `WmsFacilityDefaultsRaw` object
    types. All fields are tested for equality and combined with a
    logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_facility_name', 'warehouse_address_line1', 'warehouse_address_line2', 'warehouse_city', 'warehouse_state', 'warehouse_zip_code', 'warehouse_telephone_number', 'warehouse_fax_number', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'warehouse_facility_legal_name', 'warehouse_address_line3', 'is_bol_expiration_date_visible')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    warehouse_facility_name = sgqlc.types.Field(String, graphql_name='warehouseFacilityName')
    '''Checks for equality with the object’s `warehouseFacilityName`
    field.
    '''

    warehouse_address_line1 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine1')
    '''Checks for equality with the object’s `warehouseAddressLine1`
    field.
    '''

    warehouse_address_line2 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine2')
    '''Checks for equality with the object’s `warehouseAddressLine2`
    field.
    '''

    warehouse_city = sgqlc.types.Field(String, graphql_name='warehouseCity')
    '''Checks for equality with the object’s `warehouseCity` field.'''

    warehouse_state = sgqlc.types.Field(String, graphql_name='warehouseState')
    '''Checks for equality with the object’s `warehouseState` field.'''

    warehouse_zip_code = sgqlc.types.Field(String, graphql_name='warehouseZipCode')
    '''Checks for equality with the object’s `warehouseZipCode` field.'''

    warehouse_telephone_number = sgqlc.types.Field(String, graphql_name='warehouseTelephoneNumber')
    '''Checks for equality with the object’s `warehouseTelephoneNumber`
    field.
    '''

    warehouse_fax_number = sgqlc.types.Field(String, graphql_name='warehouseFaxNumber')
    '''Checks for equality with the object’s `warehouseFaxNumber` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    warehouse_facility_legal_name = sgqlc.types.Field(String, graphql_name='warehouseFacilityLegalName')
    '''Checks for equality with the object’s `warehouseFacilityLegalName`
    field.
    '''

    warehouse_address_line3 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine3')
    '''Checks for equality with the object’s `warehouseAddressLine3`
    field.
    '''

    is_bol_expiration_date_visible = sgqlc.types.Field(Boolean, graphql_name='isBolExpirationDateVisible')
    '''Checks for equality with the object’s `isBolExpirationDateVisible`
    field.
    '''



class WmsFacilityDefaultsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `WmsFacilityDefaultsRaw` object types.
    All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_facility_name', 'warehouse_address_line1', 'warehouse_address_line2', 'warehouse_city', 'warehouse_state', 'warehouse_zip_code', 'warehouse_telephone_number', 'warehouse_fax_number', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'warehouse_facility_legal_name', 'warehouse_address_line3', 'is_bol_expiration_date_visible', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(StringFilter, graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(StringFilter, graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    warehouse_facility_name = sgqlc.types.Field(StringFilter, graphql_name='warehouseFacilityName')
    '''Filter by the object’s `warehouseFacilityName` field.'''

    warehouse_address_line1 = sgqlc.types.Field(StringFilter, graphql_name='warehouseAddressLine1')
    '''Filter by the object’s `warehouseAddressLine1` field.'''

    warehouse_address_line2 = sgqlc.types.Field(StringFilter, graphql_name='warehouseAddressLine2')
    '''Filter by the object’s `warehouseAddressLine2` field.'''

    warehouse_city = sgqlc.types.Field(StringFilter, graphql_name='warehouseCity')
    '''Filter by the object’s `warehouseCity` field.'''

    warehouse_state = sgqlc.types.Field(StringFilter, graphql_name='warehouseState')
    '''Filter by the object’s `warehouseState` field.'''

    warehouse_zip_code = sgqlc.types.Field(StringFilter, graphql_name='warehouseZipCode')
    '''Filter by the object’s `warehouseZipCode` field.'''

    warehouse_telephone_number = sgqlc.types.Field(StringFilter, graphql_name='warehouseTelephoneNumber')
    '''Filter by the object’s `warehouseTelephoneNumber` field.'''

    warehouse_fax_number = sgqlc.types.Field(StringFilter, graphql_name='warehouseFaxNumber')
    '''Filter by the object’s `warehouseFaxNumber` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field(StringFilter, graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    warehouse_facility_legal_name = sgqlc.types.Field(StringFilter, graphql_name='warehouseFacilityLegalName')
    '''Filter by the object’s `warehouseFacilityLegalName` field.'''

    warehouse_address_line3 = sgqlc.types.Field(StringFilter, graphql_name='warehouseAddressLine3')
    '''Filter by the object’s `warehouseAddressLine3` field.'''

    is_bol_expiration_date_visible = sgqlc.types.Field(BooleanFilter, graphql_name='isBolExpirationDateVisible')
    '''Filter by the object’s `isBolExpirationDateVisible` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WmsFacilityDefaultsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WmsFacilityDefaultsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('WmsFacilityDefaultsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class WmsFacilityDefaultsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `WmsFacilityDefaultsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_facility_name', 'warehouse_address_line1', 'warehouse_address_line2', 'warehouse_city', 'warehouse_state', 'warehouse_zip_code', 'warehouse_telephone_number', 'warehouse_fax_number', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'warehouse_facility_legal_name', 'warehouse_address_line3', 'is_bol_expiration_date_visible')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_facility_name = sgqlc.types.Field(String, graphql_name='warehouseFacilityName')
    '''Name provided to WMS .'''

    warehouse_address_line1 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine1')
    '''Address Line 1 for the WMS'''

    warehouse_address_line2 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine2')
    '''Address Line 2 for the WMS'''

    warehouse_city = sgqlc.types.Field(String, graphql_name='warehouseCity')
    '''City of WMS'''

    warehouse_state = sgqlc.types.Field(String, graphql_name='warehouseState')
    '''State of WMS'''

    warehouse_zip_code = sgqlc.types.Field(String, graphql_name='warehouseZipCode')
    '''Zip Code of WMS'''

    warehouse_telephone_number = sgqlc.types.Field(String, graphql_name='warehouseTelephoneNumber')
    '''Telephone Number of WMS'''

    warehouse_fax_number = sgqlc.types.Field(String, graphql_name='warehouseFaxNumber')
    '''FAX Number of WMS'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_legal_name = sgqlc.types.Field(String, graphql_name='warehouseFacilityLegalName')
    '''Legal name given to warehouse'''

    warehouse_address_line3 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine3')
    '''Extra information of address are accumulated in
    warehouse_address_line3
    '''

    is_bol_expiration_date_visible = sgqlc.types.Field(Boolean, graphql_name='isBolExpirationDateVisible')
    '''Flag to verify if BOL Expiration Date is Visible for particular
    facility
    '''



class WmsFacilityDefaultsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `WmsFacilityDefaultsRaw`. Fields that
    are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_facility_name', 'warehouse_address_line1', 'warehouse_address_line2', 'warehouse_city', 'warehouse_state', 'warehouse_zip_code', 'warehouse_telephone_number', 'warehouse_fax_number', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'warehouse_facility_legal_name', 'warehouse_address_line3', 'is_bol_expiration_date_visible')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_facility_name = sgqlc.types.Field(String, graphql_name='warehouseFacilityName')
    '''Name provided to WMS .'''

    warehouse_address_line1 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine1')
    '''Address Line 1 for the WMS'''

    warehouse_address_line2 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine2')
    '''Address Line 2 for the WMS'''

    warehouse_city = sgqlc.types.Field(String, graphql_name='warehouseCity')
    '''City of WMS'''

    warehouse_state = sgqlc.types.Field(String, graphql_name='warehouseState')
    '''State of WMS'''

    warehouse_zip_code = sgqlc.types.Field(String, graphql_name='warehouseZipCode')
    '''Zip Code of WMS'''

    warehouse_telephone_number = sgqlc.types.Field(String, graphql_name='warehouseTelephoneNumber')
    '''Telephone Number of WMS'''

    warehouse_fax_number = sgqlc.types.Field(String, graphql_name='warehouseFaxNumber')
    '''FAX Number of WMS'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_legal_name = sgqlc.types.Field(String, graphql_name='warehouseFacilityLegalName')
    '''Legal name given to warehouse'''

    warehouse_address_line3 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine3')
    '''Extra information of address are accumulated in
    warehouse_address_line3
    '''

    is_bol_expiration_date_visible = sgqlc.types.Field(Boolean, graphql_name='isBolExpirationDateVisible')
    '''Flag to verify if BOL Expiration Date is Visible for particular
    facility
    '''



class WmsSystemCondition(sgqlc.types.Input):
    '''A condition to be used against `WmsSystem` object types. All
    fields are tested for equality and combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'created_at', 'updated_at', 'slug')
    id = sgqlc.types.Field(Int, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    slug = sgqlc.types.Field(String, graphql_name='slug')
    '''Checks for equality with the object’s `slug` field.'''



class WmsSystemFilter(sgqlc.types.Input):
    '''A filter to be used against `WmsSystem` object types. All fields
    are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'created_at', 'updated_at', 'slug', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(IntFilter, graphql_name='id')
    '''Filter by the object’s `id` field.'''

    name = sgqlc.types.Field(StringFilter, graphql_name='name')
    '''Filter by the object’s `name` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    slug = sgqlc.types.Field(StringFilter, graphql_name='slug')
    '''Filter by the object’s `slug` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WmsSystemFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WmsSystemFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('WmsSystemFilter', graphql_name='not')
    '''Negates the expression.'''



class WmsSystemInput(sgqlc.types.Input):
    '''An input for mutations affecting `WmsSystem`'''
    __schema__ = base
    __field_names__ = ('id', 'name', 'created_at', 'updated_at', 'slug')
    id = sgqlc.types.Field(Int, graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')

    slug = sgqlc.types.Field(String, graphql_name='slug')



class WmsSystemPatch(sgqlc.types.Input):
    '''Represents an update to a `WmsSystem`. Fields that are set will be
    updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'created_at', 'updated_at', 'slug')
    id = sgqlc.types.Field(Int, graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    slug = sgqlc.types.Field(String, graphql_name='slug')



class WoodenPalletTransactionsRawCondition(sgqlc.types.Input):
    '''A condition to be used against `WoodenPalletTransactionsRaw`
    object types. All fields are tested for equality and combined with
    a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'transaction_type', 'transaction_description', 'customer_code', 'customer_id', 'warehouse_order_number', 'outbound_order_id', 'pallet_type', 'pallet_description', 'transaction_date', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_order_based', 'is_archived')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Checks for equality with the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Checks for equality with the object’s `warehouseFacilityId` field.'''

    transaction_type = sgqlc.types.Field(String, graphql_name='transactionType')
    '''Checks for equality with the object’s `transactionType` field.'''

    transaction_description = sgqlc.types.Field(String, graphql_name='transactionDescription')
    '''Checks for equality with the object’s `transactionDescription`
    field.
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Checks for equality with the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Checks for equality with the object’s `customerId` field.'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Checks for equality with the object’s `warehouseOrderNumber`
    field.
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Checks for equality with the object’s `outboundOrderId` field.'''

    pallet_type = sgqlc.types.Field(String, graphql_name='palletType')
    '''Checks for equality with the object’s `palletType` field.'''

    pallet_description = sgqlc.types.Field(String, graphql_name='palletDescription')
    '''Checks for equality with the object’s `palletDescription` field.'''

    transaction_date = sgqlc.types.Field(Date, graphql_name='transactionDate')
    '''Checks for equality with the object’s `transactionDate` field.'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Checks for equality with the object’s `palletCount` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''Checks for equality with the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Checks for equality with the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Checks for equality with the object’s `_version` field.'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Checks for equality with the object’s `_id` field.'''

    is_order_based = sgqlc.types.Field(Boolean, graphql_name='isOrderBased')
    '''Checks for equality with the object’s `isOrderBased` field.'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Checks for equality with the object’s `isArchived` field.'''



class WoodenPalletTransactionsRawFilter(sgqlc.types.Input):
    '''A filter to be used against `WoodenPalletTransactionsRaw` object
    types. All fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'transaction_type', 'transaction_description', 'customer_code', 'customer_id', 'warehouse_order_number', 'outbound_order_id', 'pallet_type', 'pallet_description', 'transaction_date', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_order_based', 'is_archived', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(StringFilter, graphql_name='id')
    '''Filter by the object’s `id` field.'''

    source_system_id = sgqlc.types.Field(IntFilter, graphql_name='sourceSystemId')
    '''Filter by the object’s `sourceSystemId` field.'''

    warehouse_facility_id = sgqlc.types.Field(StringFilter, graphql_name='warehouseFacilityId')
    '''Filter by the object’s `warehouseFacilityId` field.'''

    transaction_type = sgqlc.types.Field(StringFilter, graphql_name='transactionType')
    '''Filter by the object’s `transactionType` field.'''

    transaction_description = sgqlc.types.Field(StringFilter, graphql_name='transactionDescription')
    '''Filter by the object’s `transactionDescription` field.'''

    customer_code = sgqlc.types.Field(StringFilter, graphql_name='customerCode')
    '''Filter by the object’s `customerCode` field.'''

    customer_id = sgqlc.types.Field(StringFilter, graphql_name='customerId')
    '''Filter by the object’s `customerId` field.'''

    warehouse_order_number = sgqlc.types.Field(StringFilter, graphql_name='warehouseOrderNumber')
    '''Filter by the object’s `warehouseOrderNumber` field.'''

    outbound_order_id = sgqlc.types.Field(StringFilter, graphql_name='outboundOrderId')
    '''Filter by the object’s `outboundOrderId` field.'''

    pallet_type = sgqlc.types.Field(StringFilter, graphql_name='palletType')
    '''Filter by the object’s `palletType` field.'''

    pallet_description = sgqlc.types.Field(StringFilter, graphql_name='palletDescription')
    '''Filter by the object’s `palletDescription` field.'''

    transaction_date = sgqlc.types.Field(DateFilter, graphql_name='transactionDate')
    '''Filter by the object’s `transactionDate` field.'''

    pallet_count = sgqlc.types.Field(IntFilter, graphql_name='palletCount')
    '''Filter by the object’s `palletCount` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    deleted_at = sgqlc.types.Field(DatetimeFilter, graphql_name='deletedAt')
    '''Filter by the object’s `deletedAt` field.'''

    source_row_id = sgqlc.types.Field(IntFilter, graphql_name='sourceRowId')
    '''Filter by the object’s `sourceRowId` field.'''

    _version = sgqlc.types.Field(BigIntFilter, graphql_name='_version')
    '''Filter by the object’s `_version` field.'''

    _id = sgqlc.types.Field(StringFilter, graphql_name='_id')
    '''Filter by the object’s `_id` field.'''

    is_order_based = sgqlc.types.Field(BooleanFilter, graphql_name='isOrderBased')
    '''Filter by the object’s `isOrderBased` field.'''

    is_archived = sgqlc.types.Field(BooleanFilter, graphql_name='isArchived')
    '''Filter by the object’s `isArchived` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WoodenPalletTransactionsRawFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WoodenPalletTransactionsRawFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('WoodenPalletTransactionsRawFilter', graphql_name='not')
    '''Negates the expression.'''



class WoodenPalletTransactionsRawInput(sgqlc.types.Input):
    '''An input for mutations affecting `WoodenPalletTransactionsRaw`'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'transaction_type', 'transaction_description', 'customer_code', 'customer_id', 'warehouse_order_number', 'outbound_order_id', 'pallet_type', 'pallet_description', 'transaction_date', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_order_based', 'is_archived')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    transaction_type = sgqlc.types.Field(String, graphql_name='transactionType')
    '''WMS code used for the transaction'''

    transaction_description = sgqlc.types.Field(String, graphql_name='transactionDescription')
    '''Description of the transaction'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS outbound order id for the pallet transaction (references
    outbound_orders_raw.id)
    '''

    pallet_type = sgqlc.types.Field(String, graphql_name='palletType')
    '''WMS pallet type code to signify the type or manufacturer of the
    pallet
    '''

    pallet_description = sgqlc.types.Field(String, graphql_name='palletDescription')
    '''Description of the pallet type'''

    transaction_date = sgqlc.types.Field(Date, graphql_name='transactionDate')
    '''Date the pallet transaction occurred'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets involved in the transaction'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_order_based = sgqlc.types.Field(Boolean, graphql_name='isOrderBased')
    '''Flag for whether record is from the order or a pallet transaction'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is archived or not'''



class WoodenPalletTransactionsRawPatch(sgqlc.types.Input):
    '''Represents an update to a `WoodenPalletTransactionsRaw`. Fields
    that are set will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'transaction_type', 'transaction_description', 'customer_code', 'customer_id', 'warehouse_order_number', 'outbound_order_id', 'pallet_type', 'pallet_description', 'transaction_date', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_order_based', 'is_archived')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    transaction_type = sgqlc.types.Field(String, graphql_name='transactionType')
    '''WMS code used for the transaction'''

    transaction_description = sgqlc.types.Field(String, graphql_name='transactionDescription')
    '''Description of the transaction'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS outbound order id for the pallet transaction (references
    outbound_orders_raw.id)
    '''

    pallet_type = sgqlc.types.Field(String, graphql_name='palletType')
    '''WMS pallet type code to signify the type or manufacturer of the
    pallet
    '''

    pallet_description = sgqlc.types.Field(String, graphql_name='palletDescription')
    '''Description of the pallet type'''

    transaction_date = sgqlc.types.Field(Date, graphql_name='transactionDate')
    '''Date the pallet transaction occurred'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets involved in the transaction'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(String, graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_order_based = sgqlc.types.Field(Boolean, graphql_name='isOrderBased')
    '''Flag for whether record is from the order or a pallet transaction'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is archived or not'''



class WorkdayCostCenterCondition(sgqlc.types.Input):
    '''A condition to be used against `WorkdayCostCenter` object types.
    All fields are tested for equality and combined with a logical
    ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'created_at', 'updated_at', 'dayforce_active_start', 'go_live_date', 'total_pallet_positions', 'tir_go_live_date', 'turnover_go_live_date')
    id = sgqlc.types.Field(String, graphql_name='id')
    '''Checks for equality with the object’s `id` field.'''

    name = sgqlc.types.Field(String, graphql_name='name')
    '''Checks for equality with the object’s `name` field.'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''Checks for equality with the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''Checks for equality with the object’s `updatedAt` field.'''

    dayforce_active_start = sgqlc.types.Field(Date, graphql_name='dayforceActiveStart')
    '''Checks for equality with the object’s `dayforceActiveStart` field.'''

    go_live_date = sgqlc.types.Field(Date, graphql_name='goLiveDate')
    '''Checks for equality with the object’s `goLiveDate` field.'''

    total_pallet_positions = sgqlc.types.Field(Int, graphql_name='totalPalletPositions')
    '''Checks for equality with the object’s `totalPalletPositions`
    field.
    '''

    tir_go_live_date = sgqlc.types.Field(Date, graphql_name='tirGoLiveDate')
    '''Checks for equality with the object’s `tirGoLiveDate` field.'''

    turnover_go_live_date = sgqlc.types.Field(Date, graphql_name='turnoverGoLiveDate')
    '''Checks for equality with the object’s `turnoverGoLiveDate` field.'''



class WorkdayCostCenterFilter(sgqlc.types.Input):
    '''A filter to be used against `WorkdayCostCenter` object types. All
    fields are combined with a logical ‘and.’
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'created_at', 'updated_at', 'dayforce_active_start', 'go_live_date', 'total_pallet_positions', 'tir_go_live_date', 'turnover_go_live_date', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(StringFilter, graphql_name='id')
    '''Filter by the object’s `id` field.'''

    name = sgqlc.types.Field(StringFilter, graphql_name='name')
    '''Filter by the object’s `name` field.'''

    created_at = sgqlc.types.Field(DatetimeFilter, graphql_name='createdAt')
    '''Filter by the object’s `createdAt` field.'''

    updated_at = sgqlc.types.Field(DatetimeFilter, graphql_name='updatedAt')
    '''Filter by the object’s `updatedAt` field.'''

    dayforce_active_start = sgqlc.types.Field(DateFilter, graphql_name='dayforceActiveStart')
    '''Filter by the object’s `dayforceActiveStart` field.'''

    go_live_date = sgqlc.types.Field(DateFilter, graphql_name='goLiveDate')
    '''Filter by the object’s `goLiveDate` field.'''

    total_pallet_positions = sgqlc.types.Field(IntFilter, graphql_name='totalPalletPositions')
    '''Filter by the object’s `totalPalletPositions` field.'''

    tir_go_live_date = sgqlc.types.Field(DateFilter, graphql_name='tirGoLiveDate')
    '''Filter by the object’s `tirGoLiveDate` field.'''

    turnover_go_live_date = sgqlc.types.Field(DateFilter, graphql_name='turnoverGoLiveDate')
    '''Filter by the object’s `turnoverGoLiveDate` field.'''

    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WorkdayCostCenterFilter')), graphql_name='and')
    '''Checks for all expressions in this list.'''

    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('WorkdayCostCenterFilter')), graphql_name='or')
    '''Checks for any expressions in this list.'''

    not_ = sgqlc.types.Field('WorkdayCostCenterFilter', graphql_name='not')
    '''Negates the expression.'''



class WorkdayCostCenterInput(sgqlc.types.Input):
    '''An input for mutations affecting `WorkdayCostCenter`'''
    __schema__ = base
    __field_names__ = ('id', 'name', 'created_at', 'updated_at', 'dayforce_active_start', 'go_live_date', 'total_pallet_positions', 'tir_go_live_date', 'turnover_go_live_date')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    dayforce_active_start = sgqlc.types.Field(Date, graphql_name='dayforceActiveStart')

    go_live_date = sgqlc.types.Field(Date, graphql_name='goLiveDate')

    total_pallet_positions = sgqlc.types.Field(Int, graphql_name='totalPalletPositions')

    tir_go_live_date = sgqlc.types.Field(Date, graphql_name='tirGoLiveDate')

    turnover_go_live_date = sgqlc.types.Field(Date, graphql_name='turnoverGoLiveDate')



class WorkdayCostCenterPatch(sgqlc.types.Input):
    '''Represents an update to a `WorkdayCostCenter`. Fields that are set
    will be updated.
    '''
    __schema__ = base
    __field_names__ = ('id', 'name', 'created_at', 'updated_at', 'dayforce_active_start', 'go_live_date', 'total_pallet_positions', 'tir_go_live_date', 'turnover_go_live_date')
    id = sgqlc.types.Field(String, graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    dayforce_active_start = sgqlc.types.Field(Date, graphql_name='dayforceActiveStart')

    go_live_date = sgqlc.types.Field(Date, graphql_name='goLiveDate')

    total_pallet_positions = sgqlc.types.Field(Int, graphql_name='totalPalletPositions')

    tir_go_live_date = sgqlc.types.Field(Date, graphql_name='tirGoLiveDate')

    turnover_go_live_date = sgqlc.types.Field(Date, graphql_name='turnoverGoLiveDate')




########################################################################
# Output Objects and Interfaces
########################################################################
class AggregateWarehouseUtilByCustomerRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `AggregateWarehouseUtilByCustomerRaw`
    values.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseUtilByCustomerRaw'))), graphql_name='nodes')
    '''A list of `AggregateWarehouseUtilByCustomerRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseUtilByCustomerRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the
    `AggregateWarehouseUtilByCustomerRaw` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `AggregateWarehouseUtilByCustomerRaw` you could
    get from the connection.
    '''



class AggregateWarehouseUtilByCustomerRawsEdge(sgqlc.types.Type):
    '''A `AggregateWarehouseUtilByCustomerRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('AggregateWarehouseUtilByCustomerRaw'), graphql_name='node')
    '''The `AggregateWarehouseUtilByCustomerRaw` at the end of the edge.'''



class AggregateWarehouseUtilRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `AggregateWarehouseUtilRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseUtilRaw'))), graphql_name='nodes')
    '''A list of `AggregateWarehouseUtilRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseUtilRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `AggregateWarehouseUtilRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `AggregateWarehouseUtilRaw` you could get from
    the connection.
    '''



class AggregateWarehouseUtilRawsEdge(sgqlc.types.Type):
    '''A `AggregateWarehouseUtilRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('AggregateWarehouseUtilRaw'), graphql_name='node')
    '''The `AggregateWarehouseUtilRaw` at the end of the edge.'''



class AggregateWarehouseVolumeByCustomerRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `AggregateWarehouseVolumeByCustomerRaw`
    values.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseVolumeByCustomerRaw'))), graphql_name='nodes')
    '''A list of `AggregateWarehouseVolumeByCustomerRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseVolumeByCustomerRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the
    `AggregateWarehouseVolumeByCustomerRaw` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `AggregateWarehouseVolumeByCustomerRaw` you
    could get from the connection.
    '''



class AggregateWarehouseVolumeByCustomerRawsEdge(sgqlc.types.Type):
    '''A `AggregateWarehouseVolumeByCustomerRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('AggregateWarehouseVolumeByCustomerRaw'), graphql_name='node')
    '''The `AggregateWarehouseVolumeByCustomerRaw` at the end of the
    edge.
    '''



class AggregateWarehouseVolumeRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `AggregateWarehouseVolumeRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseVolumeRaw'))), graphql_name='nodes')
    '''A list of `AggregateWarehouseVolumeRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AggregateWarehouseVolumeRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `AggregateWarehouseVolumeRaw`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `AggregateWarehouseVolumeRaw` you could get
    from the connection.
    '''



class AggregateWarehouseVolumeRawsEdge(sgqlc.types.Type):
    '''A `AggregateWarehouseVolumeRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('AggregateWarehouseVolumeRaw'), graphql_name='node')
    '''The `AggregateWarehouseVolumeRaw` at the end of the edge.'''



class BillingHistoriesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BillingHistory` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BillingHistory'))), graphql_name='nodes')
    '''A list of `BillingHistory` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BillingHistoriesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BillingHistory` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BillingHistory` you could get from the
    connection.
    '''



class BillingHistoriesEdge(sgqlc.types.Type):
    '''A `BillingHistory` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BillingHistory'), graphql_name='node')
    '''The `BillingHistory` at the end of the edge.'''



class BillingHistory(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'charge_code', 'item_code', 'lot_code', 'warehouse_order_number', 'line_number', 'invoice', 'invoice_date', 'bill_from_date', 'rate_charged', 'unit_of_measurement', 'billed_quantity', 'billed_weight', 'basis', 'billed_pallet_count', 'billed_cube_count', 'debit_amount', 'credit_amount', 'renewal_period', 'original_amount', 'bill_id', 'billed_by', 'notes', 'customer_code', 'num_days', 'bill_type', 'break_factor', 'line_billed_by', 'posted_by', 'posted_datetime', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived')
    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    charge_code = sgqlc.types.Field(String, graphql_name='chargeCode')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')

    invoice = sgqlc.types.Field(String, graphql_name='invoice')

    invoice_date = sgqlc.types.Field(Datetime, graphql_name='invoiceDate')

    bill_from_date = sgqlc.types.Field(Datetime, graphql_name='billFromDate')

    rate_charged = sgqlc.types.Field(Float, graphql_name='rateCharged')

    unit_of_measurement = sgqlc.types.Field(String, graphql_name='unitOfMeasurement')

    billed_quantity = sgqlc.types.Field(Float, graphql_name='billedQuantity')

    billed_weight = sgqlc.types.Field(Float, graphql_name='billedWeight')

    basis = sgqlc.types.Field(Float, graphql_name='basis')

    billed_pallet_count = sgqlc.types.Field(Float, graphql_name='billedPalletCount')

    billed_cube_count = sgqlc.types.Field(Float, graphql_name='billedCubeCount')

    debit_amount = sgqlc.types.Field(Float, graphql_name='debitAmount')

    credit_amount = sgqlc.types.Field(Float, graphql_name='creditAmount')

    renewal_period = sgqlc.types.Field(String, graphql_name='renewalPeriod')

    original_amount = sgqlc.types.Field(String, graphql_name='originalAmount')

    bill_id = sgqlc.types.Field(String, graphql_name='billId')

    billed_by = sgqlc.types.Field(String, graphql_name='billedBy')

    notes = sgqlc.types.Field(String, graphql_name='notes')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    num_days = sgqlc.types.Field(String, graphql_name='numDays')

    bill_type = sgqlc.types.Field(String, graphql_name='billType')

    break_factor = sgqlc.types.Field(String, graphql_name='breakFactor')

    line_billed_by = sgqlc.types.Field(String, graphql_name='lineBilledBy')

    posted_by = sgqlc.types.Field(String, graphql_name='postedBy')

    posted_datetime = sgqlc.types.Field(Datetime, graphql_name='postedDatetime')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')



class BillingHistoryRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BillingHistoryRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BillingHistoryRaw'))), graphql_name='nodes')
    '''A list of `BillingHistoryRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BillingHistoryRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BillingHistoryRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BillingHistoryRaw` you could get from the
    connection.
    '''



class BillingHistoryRawsEdge(sgqlc.types.Type):
    '''A `BillingHistoryRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BillingHistoryRaw'), graphql_name='node')
    '''The `BillingHistoryRaw` at the end of the edge.'''



class BlastCellBlastCyclesByBlastCellWmsPalletBlastCellIdAndBlastCycleIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCycle` values, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycle'))), graphql_name='nodes')
    '''A list of `BlastCycle` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellBlastCyclesByBlastCellWmsPalletBlastCellIdAndBlastCycleIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCycle`, info from the
    `BlastCellWmsPallet`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCycle` you could get from the connection.'''



class BlastCellBlastCyclesByBlastCellWmsPalletBlastCellIdAndBlastCycleIdManyToManyEdge(sgqlc.types.Type):
    '''A `BlastCycle` edge in the connection, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_cell_wms_pallets')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCycle'), graphql_name='node')
    '''The `BlastCycle` at the end of the edge.'''

    blast_cell_wms_pallets = sgqlc.types.Field(sgqlc.types.non_null('BlastCellWmsPalletsConnection'), graphql_name='blastCellWmsPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class BlastCellPalletLocationsManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletLocationsRaw` values, with data
    from `BlastCellWmsPalletLocation`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationsRaw'))), graphql_name='nodes')
    '''A list of `PalletLocationsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellPalletLocationsManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletLocationsRaw`, info from
    the `BlastCellWmsPalletLocation`, and the cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletLocationsRaw` you could get from the
    connection.
    '''



class BlastCellPalletLocationsManyToManyEdge(sgqlc.types.Type):
    '''A `PalletLocationsRaw` edge in the connection, with data from
    `BlastCellWmsPalletLocation`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_cell_wms_pallet_locations_by_wms_pallet_location_id')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletLocationsRaw'), graphql_name='node')
    '''The `PalletLocationsRaw` at the end of the edge.'''

    blast_cell_wms_pallet_locations_by_wms_pallet_location_id = sgqlc.types.Field(sgqlc.types.non_null('BlastCellWmsPalletLocationsConnection'), graphql_name='blastCellWmsPalletLocationsByWmsPalletLocationId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletLocationsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletLocationCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletLocationFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPalletLocation`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletLocationsOrderBy!]`): The method
      to use when ordering `BlastCellWmsPalletLocation`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletLocationCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletLocationFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''



class BlastCellPalletsRawsByBlastCellWmsPalletBlastCellIdAndWmsPalletIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletsRaw` values, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRaw'))), graphql_name='nodes')
    '''A list of `PalletsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellPalletsRawsByBlastCellWmsPalletBlastCellIdAndWmsPalletIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletsRaw`, info from the
    `BlastCellWmsPallet`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletsRaw` you could get from the connection.'''



class BlastCellPalletsRawsByBlastCellWmsPalletBlastCellIdAndWmsPalletIdManyToManyEdge(sgqlc.types.Type):
    '''A `PalletsRaw` edge in the connection, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'id', 'pallet_dropped_datetime', 'pallet_picked_datetime', 'blast_cycle_id', 'created_at', 'updated_at')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletsRaw'), graphql_name='node')
    '''The `PalletsRaw` at the end of the edge.'''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    pallet_dropped_datetime = sgqlc.types.Field(Datetime, graphql_name='palletDroppedDatetime')

    pallet_picked_datetime = sgqlc.types.Field(Datetime, graphql_name='palletPickedDatetime')

    blast_cycle_id = sgqlc.types.Field(Int, graphql_name='blastCycleId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class BlastCellTypeFacilitiesByBlastCellBlastCellTypeIdAndFacilityIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Facility` values, with data from
    `BlastCell`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Facility'))), graphql_name='nodes')
    '''A list of `Facility` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellTypeFacilitiesByBlastCellBlastCellTypeIdAndFacilityIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Facility`, info from the
    `BlastCell`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Facility` you could get from the connection.'''



class BlastCellTypeFacilitiesByBlastCellBlastCellTypeIdAndFacilityIdManyToManyEdge(sgqlc.types.Type):
    '''A `Facility` edge in the connection, with data from `BlastCell`.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_cells')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('Facility'), graphql_name='node')
    '''The `Facility` at the end of the edge.'''

    blast_cells = sgqlc.types.Field(sgqlc.types.non_null('BlastCellsConnection'), graphql_name='blastCells', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCell`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCellFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''



class BlastCellTypeItemsRawsByItemFreezeTimeForBlastCellTypeIdAndWmsItemIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ItemsRaw` values, with data from
    `ItemFreezeTime`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemsRaw'))), graphql_name='nodes')
    '''A list of `ItemsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellTypeItemsRawsByItemFreezeTimeForBlastCellTypeIdAndWmsItemIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ItemsRaw`, info from the
    `ItemFreezeTime`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ItemsRaw` you could get from the connection.'''



class BlastCellTypeItemsRawsByItemFreezeTimeForBlastCellTypeIdAndWmsItemIdManyToManyEdge(sgqlc.types.Type):
    '''A `ItemsRaw` edge in the connection, with data from
    `ItemFreezeTime`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'item_freeze_times_by_wms_item_id')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('ItemsRaw'), graphql_name='node')
    '''The `ItemsRaw` at the end of the edge.'''

    item_freeze_times_by_wms_item_id = sgqlc.types.Field(sgqlc.types.non_null('ItemFreezeTimesConnection'), graphql_name='itemFreezeTimesByWmsItemId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemFreezeTimesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ItemFreezeTimeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemFreezeTimeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `ItemFreezeTime`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemFreezeTimesOrderBy!]`): The method to use when
      ordering `ItemFreezeTime`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`ItemFreezeTimeCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`ItemFreezeTimeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class BlastCellTypesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCellType` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellType'))), graphql_name='nodes')
    '''A list of `BlastCellType` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellTypesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCellType` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCellType` you could get from the
    connection.
    '''



class BlastCellTypesEdge(sgqlc.types.Type):
    '''A `BlastCellType` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCellType'), graphql_name='node')
    '''The `BlastCellType` at the end of the edge.'''



class BlastCellWmsPalletLocationsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCellWmsPalletLocation` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellWmsPalletLocation'))), graphql_name='nodes')
    '''A list of `BlastCellWmsPalletLocation` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellWmsPalletLocationsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCellWmsPalletLocation`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCellWmsPalletLocation` you could get from
    the connection.
    '''



class BlastCellWmsPalletLocationsEdge(sgqlc.types.Type):
    '''A `BlastCellWmsPalletLocation` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCellWmsPalletLocation'), graphql_name='node')
    '''The `BlastCellWmsPalletLocation` at the end of the edge.'''



class BlastCellWmsPalletsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCellWmsPallet` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellWmsPallet'))), graphql_name='nodes')
    '''A list of `BlastCellWmsPallet` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellWmsPalletsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCellWmsPallet` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCellWmsPallet` you could get from the
    connection.
    '''



class BlastCellWmsPalletsEdge(sgqlc.types.Type):
    '''A `BlastCellWmsPallet` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCellWmsPallet'), graphql_name='node')
    '''The `BlastCellWmsPallet` at the end of the edge.'''



class BlastCellsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCell` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCell'))), graphql_name='nodes')
    '''A list of `BlastCell` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCell` and cursor to aid
    in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCell` you could get from the connection.'''



class BlastCellsEdge(sgqlc.types.Type):
    '''A `BlastCell` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCell'), graphql_name='node')
    '''The `BlastCell` at the end of the edge.'''



class BlastCycleBlastCellsByBlastCellWmsPalletBlastCycleIdAndBlastCellIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCell` values, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCell'))), graphql_name='nodes')
    '''A list of `BlastCell` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleBlastCellsByBlastCellWmsPalletBlastCycleIdAndBlastCellIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCell`, info from the
    `BlastCellWmsPallet`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCell` you could get from the connection.'''



class BlastCycleBlastCellsByBlastCellWmsPalletBlastCycleIdAndBlastCellIdManyToManyEdge(sgqlc.types.Type):
    '''A `BlastCell` edge in the connection, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_cell_wms_pallets')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCell'), graphql_name='node')
    '''The `BlastCell` at the end of the edge.'''

    blast_cell_wms_pallets = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletsConnection), graphql_name='blastCellWmsPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class BlastCycleEventsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCycleEvent` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleEvent'))), graphql_name='nodes')
    '''A list of `BlastCycleEvent` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleEventsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCycleEvent` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCycleEvent` you could get from the
    connection.
    '''



class BlastCycleEventsEdge(sgqlc.types.Type):
    '''A `BlastCycleEvent` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCycleEvent'), graphql_name='node')
    '''The `BlastCycleEvent` at the end of the edge.'''



class BlastCyclePalletsManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletsRaw` values, with data from
    `BlastCycleWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRaw'))), graphql_name='nodes')
    '''A list of `PalletsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCyclePalletsManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletsRaw`, info from the
    `BlastCycleWmsPallet`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletsRaw` you could get from the connection.'''



class BlastCyclePalletsManyToManyEdge(sgqlc.types.Type):
    '''A `PalletsRaw` edge in the connection, with data from
    `BlastCycleWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_cycle_wms_pallets_by_wms_pallet_id')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletsRaw'), graphql_name='node')
    '''The `PalletsRaw` at the end of the edge.'''

    blast_cycle_wms_pallets_by_wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null('BlastCycleWmsPalletsConnection'), graphql_name='blastCycleWmsPalletsByWmsPalletId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCycleWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCycleWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCycleWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCycleWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class BlastCyclePalletsRawsByBlastCellWmsPalletBlastCycleIdAndWmsPalletIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletsRaw` values, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRaw'))), graphql_name='nodes')
    '''A list of `PalletsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCyclePalletsRawsByBlastCellWmsPalletBlastCycleIdAndWmsPalletIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletsRaw`, info from the
    `BlastCellWmsPallet`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletsRaw` you could get from the connection.'''



class BlastCyclePalletsRawsByBlastCellWmsPalletBlastCycleIdAndWmsPalletIdManyToManyEdge(sgqlc.types.Type):
    '''A `PalletsRaw` edge in the connection, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_cell_wms_pallets_by_wms_pallet_id')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletsRaw'), graphql_name='node')
    '''The `PalletsRaw` at the end of the edge.'''

    blast_cell_wms_pallets_by_wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletsConnection), graphql_name='blastCellWmsPalletsByWmsPalletId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class BlastCycleWmsPalletsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCycleWmsPallet` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleWmsPallet'))), graphql_name='nodes')
    '''A list of `BlastCycleWmsPallet` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycleWmsPalletsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCycleWmsPallet` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCycleWmsPallet` you could get from the
    connection.
    '''



class BlastCycleWmsPalletsEdge(sgqlc.types.Type):
    '''A `BlastCycleWmsPallet` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCycleWmsPallet'), graphql_name='node')
    '''The `BlastCycleWmsPallet` at the end of the edge.'''



class BlastCyclesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCycle` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycle'))), graphql_name='nodes')
    '''A list of `BlastCycle` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCyclesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCycle` and cursor to aid
    in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCycle` you could get from the connection.'''



class BlastCyclesEdge(sgqlc.types.Type):
    '''A `BlastCycle` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCycle'), graphql_name='node')
    '''The `BlastCycle` at the end of the edge.'''



class BlastPlanPalletsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastPlanPallet` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastPlanPallet'))), graphql_name='nodes')
    '''A list of `BlastPlanPallet` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastPlanPalletsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastPlanPallet` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastPlanPallet` you could get from the
    connection.
    '''



class BlastPlanPalletsEdge(sgqlc.types.Type):
    '''A `BlastPlanPallet` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastPlanPallet'), graphql_name='node')
    '''The `BlastPlanPallet` at the end of the edge.'''



class BlastPlanPalletsManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletsRaw` values, with data from
    `BlastPlanPallet`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRaw'))), graphql_name='nodes')
    '''A list of `PalletsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastPlanPalletsManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletsRaw`, info from the
    `BlastPlanPallet`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletsRaw` you could get from the connection.'''



class BlastPlanPalletsManyToManyEdge(sgqlc.types.Type):
    '''A `PalletsRaw` edge in the connection, with data from
    `BlastPlanPallet`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_plan_pallets_by_wms_pallet_id')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletsRaw'), graphql_name='node')
    '''The `PalletsRaw` at the end of the edge.'''

    blast_plan_pallets_by_wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanPalletsConnection), graphql_name='blastPlanPalletsByWmsPalletId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlanPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastPlanPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastPlanPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastPlanPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastPlanPalletsOrderBy!]`): The method to use
      when ordering `BlastPlanPallet`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastPlanPalletCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BlastPlanPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class BlastPlansConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastPlan` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastPlan'))), graphql_name='nodes')
    '''A list of `BlastPlan` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastPlansEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastPlan` and cursor to aid
    in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastPlan` you could get from the connection.'''



class BlastPlansEdge(sgqlc.types.Type):
    '''A `BlastPlan` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastPlan'), graphql_name='node')
    '''The `BlastPlan` at the end of the edge.'''



class BolConstantsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BolConstantsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BolConstantsRaw'))), graphql_name='nodes')
    '''A list of `BolConstantsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BolConstantsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BolConstantsRaw` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BolConstantsRaw` you could get from the
    connection.
    '''



class BolConstantsRawsEdge(sgqlc.types.Type):
    '''A `BolConstantsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BolConstantsRaw'), graphql_name='node')
    '''The `BolConstantsRaw` at the end of the edge.'''



class BrokerOwnersRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BrokerOwnersRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BrokerOwnersRaw'))), graphql_name='nodes')
    '''A list of `BrokerOwnersRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BrokerOwnersRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BrokerOwnersRaw` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BrokerOwnersRaw` you could get from the
    connection.
    '''



class BrokerOwnersRawsEdge(sgqlc.types.Type):
    '''A `BrokerOwnersRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BrokerOwnersRaw'), graphql_name='node')
    '''The `BrokerOwnersRaw` at the end of the edge.'''



class Carrier(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'carrier_code', 'external_system_id', 'external_system_name', 'carrier_name', 'mcn', 'dot', 'contact_first_name', 'contact_last_name', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'country', 'effective_date', 'phone', 'fax', 'email_address', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'updated_at', 'deleted_at', 'created_at', '_version', '_id')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    id = sgqlc.types.Field(String, graphql_name='id')

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')

    external_system_id = sgqlc.types.Field(String, graphql_name='externalSystemId')

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')

    carrier_name = sgqlc.types.Field(String, graphql_name='carrierName')

    mcn = sgqlc.types.Field(Int, graphql_name='mcn')

    dot = sgqlc.types.Field(String, graphql_name='dot')

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    address3 = sgqlc.types.Field(String, graphql_name='address3')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    country = sgqlc.types.Field(String, graphql_name='country')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    phone = sgqlc.types.Field(String, graphql_name='phone')

    fax = sgqlc.types.Field(String, graphql_name='fax')

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class CarriersConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Carrier` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Carrier))), graphql_name='nodes')
    '''A list of `Carrier` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CarriersEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Carrier` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Carrier` you could get from the connection.'''



class CarriersEdge(sgqlc.types.Type):
    '''A `Carrier` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(Carrier), graphql_name='node')
    '''The `Carrier` at the end of the edge.'''



class CarriersRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `CarriersRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CarriersRaw'))), graphql_name='nodes')
    '''A list of `CarriersRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CarriersRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `CarriersRaw` and cursor to aid
    in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `CarriersRaw` you could get from the
    connection.
    '''



class CarriersRawsEdge(sgqlc.types.Type):
    '''A `CarriersRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('CarriersRaw'), graphql_name='node')
    '''The `CarriersRaw` at the end of the edge.'''



class CasePicksRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `CasePicksRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CasePicksRaw'))), graphql_name='nodes')
    '''A list of `CasePicksRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CasePicksRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `CasePicksRaw` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `CasePicksRaw` you could get from the
    connection.
    '''



class CasePicksRawsEdge(sgqlc.types.Type):
    '''A `CasePicksRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('CasePicksRaw'), graphql_name='node')
    '''The `CasePicksRaw` at the end of the edge.'''



class CostCenterCompanyLookup(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('cost_center_id', 'company', 'created_at', 'created_by', 'updated_at', 'updated_by', 'company_code', 'include_in_facility_financials', 'include_in_rollup_financials')
    cost_center_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='costCenterId')

    company = sgqlc.types.Field(String, graphql_name='company')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    created_by = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='createdBy')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')

    updated_by = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='updatedBy')

    company_code = sgqlc.types.Field(String, graphql_name='companyCode')

    include_in_facility_financials = sgqlc.types.Field(Boolean, graphql_name='includeInFacilityFinancials')

    include_in_rollup_financials = sgqlc.types.Field(Boolean, graphql_name='includeInRollupFinancials')



class CostCenterCompanyLookupsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `CostCenterCompanyLookup` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CostCenterCompanyLookup))), graphql_name='nodes')
    '''A list of `CostCenterCompanyLookup` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CostCenterCompanyLookupsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `CostCenterCompanyLookup` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `CostCenterCompanyLookup` you could get from
    the connection.
    '''



class CostCenterCompanyLookupsEdge(sgqlc.types.Type):
    '''A `CostCenterCompanyLookup` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(CostCenterCompanyLookup), graphql_name='node')
    '''The `CostCenterCompanyLookup` at the end of the edge.'''



class CreateAggregateWarehouseUtilByCustomerRawPayload(sgqlc.types.Type):
    '''The output of our create `AggregateWarehouseUtilByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_util_by_customer_raw', 'query', 'aggregate_warehouse_util_by_customer_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_util_by_customer_raw = sgqlc.types.Field('AggregateWarehouseUtilByCustomerRaw', graphql_name='aggregateWarehouseUtilByCustomerRaw')
    '''The `AggregateWarehouseUtilByCustomerRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_util_by_customer_raw_edge = sgqlc.types.Field(AggregateWarehouseUtilByCustomerRawsEdge, graphql_name='aggregateWarehouseUtilByCustomerRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseUtilByCustomerRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseUtilByCustomerRaw`. May be used
    by Relay 1.

    Arguments:

    * `order_by` (`[AggregateWarehouseUtilByCustomerRawsOrderBy!]`):
      The method to use when ordering
      `AggregateWarehouseUtilByCustomerRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateAggregateWarehouseUtilRawPayload(sgqlc.types.Type):
    '''The output of our create `AggregateWarehouseUtilRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_util_raw', 'query', 'aggregate_warehouse_util_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_util_raw = sgqlc.types.Field('AggregateWarehouseUtilRaw', graphql_name='aggregateWarehouseUtilRaw')
    '''The `AggregateWarehouseUtilRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_util_raw_edge = sgqlc.types.Field(AggregateWarehouseUtilRawsEdge, graphql_name='aggregateWarehouseUtilRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseUtilRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseUtilRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[AggregateWarehouseUtilRawsOrderBy!]`): The method
      to use when ordering `AggregateWarehouseUtilRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateAggregateWarehouseVolumeByCustomerRawPayload(sgqlc.types.Type):
    '''The output of our create `AggregateWarehouseVolumeByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_volume_by_customer_raw', 'query', 'aggregate_warehouse_volume_by_customer_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_volume_by_customer_raw = sgqlc.types.Field('AggregateWarehouseVolumeByCustomerRaw', graphql_name='aggregateWarehouseVolumeByCustomerRaw')
    '''The `AggregateWarehouseVolumeByCustomerRaw` that was created by
    this mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_volume_by_customer_raw_edge = sgqlc.types.Field(AggregateWarehouseVolumeByCustomerRawsEdge, graphql_name='aggregateWarehouseVolumeByCustomerRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseVolumeByCustomerRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseVolumeByCustomerRaw`. May be
    used by Relay 1.

    Arguments:

    * `order_by` (`[AggregateWarehouseVolumeByCustomerRawsOrderBy!]`):
      The method to use when ordering
      `AggregateWarehouseVolumeByCustomerRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateAggregateWarehouseVolumeRawPayload(sgqlc.types.Type):
    '''The output of our create `AggregateWarehouseVolumeRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_volume_raw', 'query', 'aggregate_warehouse_volume_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_volume_raw = sgqlc.types.Field('AggregateWarehouseVolumeRaw', graphql_name='aggregateWarehouseVolumeRaw')
    '''The `AggregateWarehouseVolumeRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_volume_raw_edge = sgqlc.types.Field(AggregateWarehouseVolumeRawsEdge, graphql_name='aggregateWarehouseVolumeRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseVolumeRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseVolumeRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[AggregateWarehouseVolumeRawsOrderBy!]`): The
      method to use when ordering `AggregateWarehouseVolumeRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateBillingHistoryRawPayload(sgqlc.types.Type):
    '''The output of our create `BillingHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'billing_history_raw', 'query', 'billing_history_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    billing_history_raw = sgqlc.types.Field('BillingHistoryRaw', graphql_name='billingHistoryRaw')
    '''The `BillingHistoryRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    billing_history_raw_edge = sgqlc.types.Field(BillingHistoryRawsEdge, graphql_name='billingHistoryRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BillingHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BillingHistoryRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BillingHistoryRawsOrderBy!]`): The method to use
      when ordering `BillingHistoryRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateBlastCellPayload(sgqlc.types.Type):
    '''The output of our create `BlastCell` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell', 'query', 'facility', 'blast_cell_type', 'blast_cell_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''The `BlastCell` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''Reads a single `Facility` that is related to this `BlastCell`.'''

    blast_cell_type = sgqlc.types.Field('BlastCellType', graphql_name='blastCellType')
    '''Reads a single `BlastCellType` that is related to this
    `BlastCell`.
    '''

    blast_cell_edge = sgqlc.types.Field(BlastCellsEdge, graphql_name='blastCellEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCell`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateBlastCellTypePayload(sgqlc.types.Type):
    '''The output of our create `BlastCellType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_type', 'query', 'blast_cell_type_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell_type = sgqlc.types.Field('BlastCellType', graphql_name='blastCellType')
    '''The `BlastCellType` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell_type_edge = sgqlc.types.Field(BlastCellTypesEdge, graphql_name='blastCellTypeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellTypesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCellType`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCellTypesOrderBy!]`): The method to use when
      ordering `BlastCellType`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateBlastCellWmsPalletLocationPayload(sgqlc.types.Type):
    '''The output of our create `BlastCellWmsPalletLocation` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_wms_pallet_location', 'query', 'blast_cell', 'wms_pallet_location', 'blast_cell_wms_pallet_location_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell_wms_pallet_location = sgqlc.types.Field('BlastCellWmsPalletLocation', graphql_name='blastCellWmsPalletLocation')
    '''The `BlastCellWmsPalletLocation` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this
    `BlastCellWmsPalletLocation`.
    '''

    wms_pallet_location = sgqlc.types.Field('PalletLocationsRaw', graphql_name='wmsPalletLocation')
    '''Reads a single `PalletLocationsRaw` that is related to this
    `BlastCellWmsPalletLocation`.
    '''

    blast_cell_wms_pallet_location_edge = sgqlc.types.Field(BlastCellWmsPalletLocationsEdge, graphql_name='blastCellWmsPalletLocationEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletLocationsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCellWmsPalletLocation`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[BlastCellWmsPalletLocationsOrderBy!]`): The method
      to use when ordering `BlastCellWmsPalletLocation`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateBlastCellWmsPalletPayload(sgqlc.types.Type):
    '''The output of our create `BlastCellWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_wms_pallet', 'query', 'blast_cell', 'wms_pallet', 'blast_cycle', 'blast_cell_wms_pallet_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell_wms_pallet = sgqlc.types.Field('BlastCellWmsPallet', graphql_name='blastCellWmsPallet')
    '''The `BlastCellWmsPallet` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this
    `BlastCellWmsPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastCellWmsPallet`.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCellWmsPallet`.
    '''

    blast_cell_wms_pallet_edge = sgqlc.types.Field(BlastCellWmsPalletsEdge, graphql_name='blastCellWmsPalletEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCellWmsPallet`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateBlastCycleEventPayload(sgqlc.types.Type):
    '''The output of our create `BlastCycleEvent` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle_event', 'query', 'blast_cycle', 'blast_cycle_event_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cycle_event = sgqlc.types.Field('BlastCycleEvent', graphql_name='blastCycleEvent')
    '''The `BlastCycleEvent` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCycleEvent`.
    '''

    blast_cycle_event_edge = sgqlc.types.Field(BlastCycleEventsEdge, graphql_name='blastCycleEventEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleEventsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCycleEvent`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCycleEventsOrderBy!]`): The method to use
      when ordering `BlastCycleEvent`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateBlastCyclePayload(sgqlc.types.Type):
    '''The output of our create `BlastCycle` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle', 'query', 'blast_cell', 'blast_cycle_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''The `BlastCycle` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this `BlastCycle`.'''

    blast_cycle_edge = sgqlc.types.Field(BlastCyclesEdge, graphql_name='blastCycleEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCyclesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCycle`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCyclesOrderBy!]`): The method to use when
      ordering `BlastCycle`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateBlastCycleWmsPalletPayload(sgqlc.types.Type):
    '''The output of our create `BlastCycleWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle_wms_pallet', 'query', 'blast_cycle', 'wms_pallet', 'blast_cycle_wms_pallet_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cycle_wms_pallet = sgqlc.types.Field('BlastCycleWmsPallet', graphql_name='blastCycleWmsPallet')
    '''The `BlastCycleWmsPallet` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCycleWmsPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastCycleWmsPallet`.
    '''

    blast_cycle_wms_pallet_edge = sgqlc.types.Field(BlastCycleWmsPalletsEdge, graphql_name='blastCycleWmsPalletEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCycleWmsPallet`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCycleWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCycleWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateBlastPlanPalletPayload(sgqlc.types.Type):
    '''The output of our create `BlastPlanPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_plan_pallet', 'query', 'blast_plan', 'wms_pallet', 'blast_plan_pallet_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_plan_pallet = sgqlc.types.Field('BlastPlanPallet', graphql_name='blastPlanPallet')
    '''The `BlastPlanPallet` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_plan = sgqlc.types.Field('BlastPlan', graphql_name='blastPlan')
    '''Reads a single `BlastPlan` that is related to this
    `BlastPlanPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastPlanPallet`.
    '''

    blast_plan_pallet_edge = sgqlc.types.Field(BlastPlanPalletsEdge, graphql_name='blastPlanPalletEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlanPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastPlanPallet`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastPlanPalletsOrderBy!]`): The method to use
      when ordering `BlastPlanPallet`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateBlastPlanPayload(sgqlc.types.Type):
    '''The output of our create `BlastPlan` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_plan', 'query', 'assigned_blast_cell', 'blast_plan_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_plan = sgqlc.types.Field('BlastPlan', graphql_name='blastPlan')
    '''The `BlastPlan` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    assigned_blast_cell = sgqlc.types.Field('BlastCell', graphql_name='assignedBlastCell')
    '''Reads a single `BlastCell` that is related to this `BlastPlan`.'''

    blast_plan_edge = sgqlc.types.Field(BlastPlansEdge, graphql_name='blastPlanEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlansOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastPlan`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastPlansOrderBy!]`): The method to use when
      ordering `BlastPlan`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateBolConstantsRawPayload(sgqlc.types.Type):
    '''The output of our create `BolConstantsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'bol_constants_raw', 'query', 'bol_constants_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    bol_constants_raw = sgqlc.types.Field('BolConstantsRaw', graphql_name='bolConstantsRaw')
    '''The `BolConstantsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    bol_constants_raw_edge = sgqlc.types.Field(BolConstantsRawsEdge, graphql_name='bolConstantsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BolConstantsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BolConstantsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BolConstantsRawsOrderBy!]`): The method to use
      when ordering `BolConstantsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateBrokerOwnersRawPayload(sgqlc.types.Type):
    '''The output of our create `BrokerOwnersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'broker_owners_raw', 'query', 'broker_owners_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    broker_owners_raw = sgqlc.types.Field('BrokerOwnersRaw', graphql_name='brokerOwnersRaw')
    '''The `BrokerOwnersRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    broker_owners_raw_edge = sgqlc.types.Field(BrokerOwnersRawsEdge, graphql_name='brokerOwnersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BrokerOwnersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BrokerOwnersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BrokerOwnersRawsOrderBy!]`): The method to use
      when ordering `BrokerOwnersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateCarriersRawPayload(sgqlc.types.Type):
    '''The output of our create `CarriersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'carriers_raw', 'query', 'carriers_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    carriers_raw = sgqlc.types.Field('CarriersRaw', graphql_name='carriersRaw')
    '''The `CarriersRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    carriers_raw_edge = sgqlc.types.Field(CarriersRawsEdge, graphql_name='carriersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CarriersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CarriersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CarriersRawsOrderBy!]`): The method to use when
      ordering `CarriersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateCasePicksRawPayload(sgqlc.types.Type):
    '''The output of our create `CasePicksRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'case_picks_raw', 'query', 'case_picks_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    case_picks_raw = sgqlc.types.Field('CasePicksRaw', graphql_name='casePicksRaw')
    '''The `CasePicksRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    case_picks_raw_edge = sgqlc.types.Field(CasePicksRawsEdge, graphql_name='casePicksRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CasePicksRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CasePicksRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CasePicksRawsOrderBy!]`): The method to use when
      ordering `CasePicksRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateCostCenterCompanyLookupPayload(sgqlc.types.Type):
    '''The output of our create `CostCenterCompanyLookup` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cost_center_company_lookup', 'query', 'cost_center_company_lookup_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    cost_center_company_lookup = sgqlc.types.Field(CostCenterCompanyLookup, graphql_name='costCenterCompanyLookup')
    '''The `CostCenterCompanyLookup` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    cost_center_company_lookup_edge = sgqlc.types.Field(CostCenterCompanyLookupsEdge, graphql_name='costCenterCompanyLookupEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CostCenterCompanyLookupsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
))
    )
    '''An edge for our `CostCenterCompanyLookup`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CostCenterCompanyLookupsOrderBy!]`): The method to
      use when ordering `CostCenterCompanyLookup`. (default:
      `[NATURAL]`)
    '''



class CreateCursorHistoryPayload(sgqlc.types.Type):
    '''The output of our create `CursorHistory` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cursor_history', 'query', 'source_by_source_slug', 'source_channel_by_source_channel_name', 'cursor_history_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    cursor_history = sgqlc.types.Field('CursorHistory', graphql_name='cursorHistory')
    '''The `CursorHistory` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_by_source_slug = sgqlc.types.Field('Source', graphql_name='sourceBySourceSlug')
    '''Reads a single `Source` that is related to this `CursorHistory`.'''

    source_channel_by_source_channel_name = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannelBySourceChannelName')
    '''Reads a single `SourceChannel` that is related to this
    `CursorHistory`.
    '''

    cursor_history_edge = sgqlc.types.Field('CursorHistoriesEdge', graphql_name='cursorHistoryEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CursorHistoriesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CursorHistory`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CursorHistoriesOrderBy!]`): The method to use when
      ordering `CursorHistory`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateCustomerHierarchyMapPayload(sgqlc.types.Type):
    '''The output of our create `CustomerHierarchyMap` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'customer_hierarchy_map', 'query', 'customer_hierarchy_map_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    customer_hierarchy_map = sgqlc.types.Field('CustomerHierarchyMap', graphql_name='customerHierarchyMap')
    '''The `CustomerHierarchyMap` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    customer_hierarchy_map_edge = sgqlc.types.Field('CustomerHierarchyMapsEdge', graphql_name='customerHierarchyMapEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CustomerHierarchyMapsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
))
    )
    '''An edge for our `CustomerHierarchyMap`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CustomerHierarchyMapsOrderBy!]`): The method to
      use when ordering `CustomerHierarchyMap`. (default: `[NATURAL]`)
    '''



class CreateCustomerHierarchyPayload(sgqlc.types.Type):
    '''The output of our create `CustomerHierarchy` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'customer_hierarchy', 'query', 'customer_hierarchy_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    customer_hierarchy = sgqlc.types.Field('CustomerHierarchy', graphql_name='customerHierarchy')
    '''The `CustomerHierarchy` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    customer_hierarchy_edge = sgqlc.types.Field('CustomerHierarchiesEdge', graphql_name='customerHierarchyEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CustomerHierarchiesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
))
    )
    '''An edge for our `CustomerHierarchy`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CustomerHierarchiesOrderBy!]`): The method to use
      when ordering `CustomerHierarchy`. (default: `[NATURAL]`)
    '''



class CreateCutsRawPayload(sgqlc.types.Type):
    '''The output of our create `CutsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cuts_raw', 'query', 'cuts_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    cuts_raw = sgqlc.types.Field('CutsRaw', graphql_name='cutsRaw')
    '''The `CutsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    cuts_raw_edge = sgqlc.types.Field('CutsRawsEdge', graphql_name='cutsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CutsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CutsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CutsRawsOrderBy!]`): The method to use when
      ordering `CutsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateCyclesFromLoadedPalletsPayload(sgqlc.types.Type):
    '''The output of our `createCyclesFromLoadedPallets` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycles', 'query')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cycles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycle')), graphql_name='blastCycles')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''



class CreateDriversMasterPayload(sgqlc.types.Type):
    '''The output of our create `DriversMaster` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'drivers_master', 'query', 'drivers_master_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    drivers_master = sgqlc.types.Field('DriversMaster', graphql_name='driversMaster')
    '''The `DriversMaster` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    drivers_master_edge = sgqlc.types.Field('DriversMastersEdge', graphql_name='driversMasterEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(DriversMastersOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
))
    )
    '''An edge for our `DriversMaster`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[DriversMastersOrderBy!]`): The method to use when
      ordering `DriversMaster`. (default: `[NATURAL]`)
    '''



class CreateDriversRawPayload(sgqlc.types.Type):
    '''The output of our create `DriversRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'drivers_raw', 'query', 'drivers_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    drivers_raw = sgqlc.types.Field('DriversRaw', graphql_name='driversRaw')
    '''The `DriversRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    drivers_raw_edge = sgqlc.types.Field('DriversRawsEdge', graphql_name='driversRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(DriversRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `DriversRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[DriversRawsOrderBy!]`): The method to use when
      ordering `DriversRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateEdgeNodePayload(sgqlc.types.Type):
    '''The output of our create `EdgeNode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'edge_node', 'query', 'edge_node_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    edge_node = sgqlc.types.Field('EdgeNode', graphql_name='edgeNode')
    '''The `EdgeNode` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    edge_node_edge = sgqlc.types.Field('EdgeNodesEdge', graphql_name='edgeNodeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `EdgeNode`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[EdgeNodesOrderBy!]`): The method to use when
      ordering `EdgeNode`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateEdgeNodeSourceChannelAccessPayload(sgqlc.types.Type):
    '''The output of our create `EdgeNodeSourceChannelAccess` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'edge_node_source_channel_access', 'query', 'edge_node_client', 'source_channel_by_source_channel_name', 'edge_node_source_channel_access_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    edge_node_source_channel_access = sgqlc.types.Field('EdgeNodeSourceChannelAccess', graphql_name='edgeNodeSourceChannelAccess')
    '''The `EdgeNodeSourceChannelAccess` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    edge_node_client = sgqlc.types.Field('EdgeNode', graphql_name='edgeNodeClient')
    '''Reads a single `EdgeNode` that is related to this
    `EdgeNodeSourceChannelAccess`.
    '''

    source_channel_by_source_channel_name = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannelBySourceChannelName')
    '''Reads a single `SourceChannel` that is related to this
    `EdgeNodeSourceChannelAccess`.
    '''

    edge_node_source_channel_access_edge = sgqlc.types.Field('EdgeNodeSourceChannelAccessesEdge', graphql_name='edgeNodeSourceChannelAccessEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `EdgeNodeSourceChannelAccess`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[EdgeNodeSourceChannelAccessesOrderBy!]`): The
      method to use when ordering `EdgeNodeSourceChannelAccess`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateExpectedInboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our create `ExpectedInboundOrderDetailsRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_inbound_order_details_raw', 'query', 'expected_inbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_inbound_order_details_raw = sgqlc.types.Field('ExpectedInboundOrderDetailsRaw', graphql_name='expectedInboundOrderDetailsRaw')
    '''The `ExpectedInboundOrderDetailsRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_inbound_order_details_raw_edge = sgqlc.types.Field('ExpectedInboundOrderDetailsRawsEdge', graphql_name='expectedInboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedInboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedInboundOrderDetailsRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[ExpectedInboundOrderDetailsRawsOrderBy!]`): The
      method to use when ordering `ExpectedInboundOrderDetailsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateExpectedInboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our create `ExpectedInboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_inbound_orders_raw', 'query', 'expected_inbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_inbound_orders_raw = sgqlc.types.Field('ExpectedInboundOrdersRaw', graphql_name='expectedInboundOrdersRaw')
    '''The `ExpectedInboundOrdersRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_inbound_orders_raw_edge = sgqlc.types.Field('ExpectedInboundOrdersRawsEdge', graphql_name='expectedInboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedInboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedInboundOrdersRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[ExpectedInboundOrdersRawsOrderBy!]`): The method
      to use when ordering `ExpectedInboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateExpectedOutboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our create `ExpectedOutboundOrderDetailsRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_outbound_order_details_raw', 'query', 'expected_outbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_outbound_order_details_raw = sgqlc.types.Field('ExpectedOutboundOrderDetailsRaw', graphql_name='expectedOutboundOrderDetailsRaw')
    '''The `ExpectedOutboundOrderDetailsRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_outbound_order_details_raw_edge = sgqlc.types.Field('ExpectedOutboundOrderDetailsRawsEdge', graphql_name='expectedOutboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedOutboundOrderDetailsRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[ExpectedOutboundOrderDetailsRawsOrderBy!]`): The
      method to use when ordering `ExpectedOutboundOrderDetailsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateExpectedOutboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our create `ExpectedOutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_outbound_orders_raw', 'query', 'expected_outbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_outbound_orders_raw = sgqlc.types.Field('ExpectedOutboundOrdersRaw', graphql_name='expectedOutboundOrdersRaw')
    '''The `ExpectedOutboundOrdersRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_outbound_orders_raw_edge = sgqlc.types.Field('ExpectedOutboundOrdersRawsEdge', graphql_name='expectedOutboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedOutboundOrdersRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[ExpectedOutboundOrdersRawsOrderBy!]`): The method
      to use when ordering `ExpectedOutboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateExpectedPalletsRawPayload(sgqlc.types.Type):
    '''The output of our create `ExpectedPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_pallets_raw', 'query', 'expected_pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_pallets_raw = sgqlc.types.Field('ExpectedPalletsRaw', graphql_name='expectedPalletsRaw')
    '''The `ExpectedPalletsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_pallets_raw_edge = sgqlc.types.Field('ExpectedPalletsRawsEdge', graphql_name='expectedPalletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedPalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ExpectedPalletsRawsOrderBy!]`): The method to use
      when ordering `ExpectedPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateFacilitiesTestPayload(sgqlc.types.Type):
    '''The output of our create `FacilitiesTest` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facilities_test', 'query', 'facilities_test_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facilities_test = sgqlc.types.Field('FacilitiesTest', graphql_name='facilitiesTest')
    '''The `FacilitiesTest` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facilities_test_edge = sgqlc.types.Field('FacilitiesTestsEdge', graphql_name='facilitiesTestEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilitiesTestsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `FacilitiesTest`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[FacilitiesTestsOrderBy!]`): The method to use when
      ordering `FacilitiesTest`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateFacilityGroupingPayload(sgqlc.types.Type):
    '''The output of our create `FacilityGrouping` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility_grouping', 'query', 'parent', 'facility_grouping_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facility_grouping = sgqlc.types.Field('FacilityGrouping', graphql_name='facilityGrouping')
    '''The `FacilityGrouping` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    parent = sgqlc.types.Field('FacilityGrouping', graphql_name='parent')
    '''Reads a single `FacilityGrouping` that is related to this
    `FacilityGrouping`.
    '''

    facility_grouping_edge = sgqlc.types.Field('FacilityGroupingsEdge', graphql_name='facilityGroupingEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityGroupingsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `FacilityGrouping`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[FacilityGroupingsOrderBy!]`): The method to use
      when ordering `FacilityGrouping`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateFacilityPayload(sgqlc.types.Type):
    '''The output of our create `Facility` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility', 'query', 'facility_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''The `Facility` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facility_edge = sgqlc.types.Field('FacilitiesEdge', graphql_name='facilityEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilitiesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `Facility`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[FacilitiesOrderBy!]`): The method to use when
      ordering `Facility`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateFacilityWarehouseLinkPayload(sgqlc.types.Type):
    '''The output of our create `FacilityWarehouseLink` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility_warehouse_link', 'query', 'facility', 'facility_warehouse_link_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facility_warehouse_link = sgqlc.types.Field('FacilityWarehouseLink', graphql_name='facilityWarehouseLink')
    '''The `FacilityWarehouseLink` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''Reads a single `Facility` that is related to this
    `FacilityWarehouseLink`.
    '''

    facility_warehouse_link_edge = sgqlc.types.Field('FacilityWarehouseLinksEdge', graphql_name='facilityWarehouseLinkEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWarehouseLinksOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
))
    )
    '''An edge for our `FacilityWarehouseLink`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[FacilityWarehouseLinksOrderBy!]`): The method to
      use when ordering `FacilityWarehouseLink`. (default:
      `[NATURAL]`)
    '''



class CreateFacilityWorkdayCostCenterPayload(sgqlc.types.Type):
    '''The output of our create `FacilityWorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility_workday_cost_center', 'query', 'facility', 'cost_center', 'facility_workday_cost_center_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facility_workday_cost_center = sgqlc.types.Field('FacilityWorkdayCostCenter', graphql_name='facilityWorkdayCostCenter')
    '''The `FacilityWorkdayCostCenter` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''Reads a single `Facility` that is related to this
    `FacilityWorkdayCostCenter`.
    '''

    cost_center = sgqlc.types.Field('WorkdayCostCenter', graphql_name='costCenter')
    '''Reads a single `WorkdayCostCenter` that is related to this
    `FacilityWorkdayCostCenter`.
    '''

    facility_workday_cost_center_edge = sgqlc.types.Field('FacilityWorkdayCostCentersEdge', graphql_name='facilityWorkdayCostCenterEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `FacilityWorkdayCostCenter`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[FacilityWorkdayCostCentersOrderBy!]`): The method
      to use when ordering `FacilityWorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateHoldCodesRawPayload(sgqlc.types.Type):
    '''The output of our create `HoldCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'hold_codes_raw', 'query', 'hold_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    hold_codes_raw = sgqlc.types.Field('HoldCodesRaw', graphql_name='holdCodesRaw')
    '''The `HoldCodesRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    hold_codes_raw_edge = sgqlc.types.Field('HoldCodesRawsEdge', graphql_name='holdCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(HoldCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `HoldCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[HoldCodesRawsOrderBy!]`): The method to use when
      ordering `HoldCodesRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateHppRawPayload(sgqlc.types.Type):
    '''The output of our create `HppRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'hpp_raw', 'query', 'hpp_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    hpp_raw = sgqlc.types.Field('HppRaw', graphql_name='hppRaw')
    '''The `HppRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    hpp_raw_edge = sgqlc.types.Field('HppRawsEdge', graphql_name='hppRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(HppRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `HppRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[HppRawsOrderBy!]`): The method to use when
      ordering `HppRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateInboundCatchWeightRawPayload(sgqlc.types.Type):
    '''The output of our create `InboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_catch_weight_raw', 'query', 'inbound_catch_weight_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_catch_weight_raw = sgqlc.types.Field('InboundCatchWeightRaw', graphql_name='inboundCatchWeightRaw')
    '''The `InboundCatchWeightRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_catch_weight_raw_edge = sgqlc.types.Field('InboundCatchWeightRawsEdge', graphql_name='inboundCatchWeightRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundCatchWeightRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundCatchWeightRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundCatchWeightRawsOrderBy!]`): The method to
      use when ordering `InboundCatchWeightRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateInboundLoadsRawPayload(sgqlc.types.Type):
    '''The output of our create `InboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_loads_raw', 'query', 'inbound_loads_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_loads_raw = sgqlc.types.Field('InboundLoadsRaw', graphql_name='inboundLoadsRaw')
    '''The `InboundLoadsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_loads_raw_edge = sgqlc.types.Field('InboundLoadsRawsEdge', graphql_name='inboundLoadsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundLoadsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundLoadsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundLoadsRawsOrderBy!]`): The method to use
      when ordering `InboundLoadsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateInboundOrderCommentsRawPayload(sgqlc.types.Type):
    '''The output of our create `InboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_comments_raw', 'query', 'inbound_order_comments_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_comments_raw = sgqlc.types.Field('InboundOrderCommentsRaw', graphql_name='inboundOrderCommentsRaw')
    '''The `InboundOrderCommentsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_comments_raw_edge = sgqlc.types.Field('InboundOrderCommentsRawsEdge', graphql_name='inboundOrderCommentsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderCommentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderCommentsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderCommentsRawsOrderBy!]`): The method to
      use when ordering `InboundOrderCommentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateInboundOrderDetailReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our create `InboundOrderDetailReferenceCodesRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_detail_reference_codes_raw', 'query', 'inbound_order_detail_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_detail_reference_codes_raw = sgqlc.types.Field('InboundOrderDetailReferenceCodesRaw', graphql_name='inboundOrderDetailReferenceCodesRaw')
    '''The `InboundOrderDetailReferenceCodesRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_detail_reference_codes_raw_edge = sgqlc.types.Field('InboundOrderDetailReferenceCodesRawsEdge', graphql_name='inboundOrderDetailReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderDetailReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderDetailReferenceCodesRaw`. May be used
    by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderDetailReferenceCodesRawsOrderBy!]`):
      The method to use when ordering
      `InboundOrderDetailReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateInboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our create `InboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_details_raw', 'query', 'inbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_details_raw = sgqlc.types.Field('InboundOrderDetailsRaw', graphql_name='inboundOrderDetailsRaw')
    '''The `InboundOrderDetailsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_details_raw_edge = sgqlc.types.Field('InboundOrderDetailsRawsEdge', graphql_name='inboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderDetailsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderDetailsRawsOrderBy!]`): The method to
      use when ordering `InboundOrderDetailsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateInboundOrderReferenceCodePayload(sgqlc.types.Type):
    '''The output of our create `InboundOrderReferenceCode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_reference_code', 'query', 'inbound_order_reference_code_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_reference_code = sgqlc.types.Field('InboundOrderReferenceCode', graphql_name='inboundOrderReferenceCode')
    '''The `InboundOrderReferenceCode` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_reference_code_edge = sgqlc.types.Field('InboundOrderReferenceCodesEdge', graphql_name='inboundOrderReferenceCodeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderReferenceCodesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
))
    )
    '''An edge for our `InboundOrderReferenceCode`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[InboundOrderReferenceCodesOrderBy!]`): The method
      to use when ordering `InboundOrderReferenceCode`. (default:
      `[NATURAL]`)
    '''



class CreateInboundOrderReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our create `InboundOrderReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_reference_codes_raw', 'query', 'inbound_order_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_reference_codes_raw = sgqlc.types.Field('InboundOrderReferenceCodesRaw', graphql_name='inboundOrderReferenceCodesRaw')
    '''The `InboundOrderReferenceCodesRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_reference_codes_raw_edge = sgqlc.types.Field('InboundOrderReferenceCodesRawsEdge', graphql_name='inboundOrderReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderReferenceCodesRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderReferenceCodesRawsOrderBy!]`): The
      method to use when ordering `InboundOrderReferenceCodesRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateInboundOrdersExecutionRawPayload(sgqlc.types.Type):
    '''The output of our create `InboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_orders_execution_raw', 'query', 'inbound_orders_execution_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_orders_execution_raw = sgqlc.types.Field('InboundOrdersExecutionRaw', graphql_name='inboundOrdersExecutionRaw')
    '''The `InboundOrdersExecutionRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_orders_execution_raw_edge = sgqlc.types.Field('InboundOrdersExecutionRawsEdge', graphql_name='inboundOrdersExecutionRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrdersExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrdersExecutionRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[InboundOrdersExecutionRawsOrderBy!]`): The method
      to use when ordering `InboundOrdersExecutionRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateInboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our create `InboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_orders_raw', 'query', 'inbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_orders_raw = sgqlc.types.Field('InboundOrdersRaw', graphql_name='inboundOrdersRaw')
    '''The `InboundOrdersRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_orders_raw_edge = sgqlc.types.Field('InboundOrdersRawsEdge', graphql_name='inboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrdersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrdersRawsOrderBy!]`): The method to use
      when ordering `InboundOrdersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateInboundPalletsRawPayload(sgqlc.types.Type):
    '''The output of our create `InboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_pallets_raw', 'query', 'inbound_pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_pallets_raw = sgqlc.types.Field('InboundPalletsRaw', graphql_name='inboundPalletsRaw')
    '''The `InboundPalletsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_pallets_raw_edge = sgqlc.types.Field('InboundPalletsRawsEdge', graphql_name='inboundPalletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundPalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundPalletsRawsOrderBy!]`): The method to use
      when ordering `InboundPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateInboundTruckLogRawPayload(sgqlc.types.Type):
    '''The output of our create `InboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_truck_log_raw', 'query', 'inbound_truck_log_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_truck_log_raw = sgqlc.types.Field('InboundTruckLogRaw', graphql_name='inboundTruckLogRaw')
    '''The `InboundTruckLogRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_truck_log_raw_edge = sgqlc.types.Field('InboundTruckLogRawsEdge', graphql_name='inboundTruckLogRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundTruckLogRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundTruckLogRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundTruckLogRawsOrderBy!]`): The method to use
      when ordering `InboundTruckLogRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateInventoryAdjustmentsRawPayload(sgqlc.types.Type):
    '''The output of our create `InventoryAdjustmentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_adjustments_raw', 'query', 'inventory_adjustments_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inventory_adjustments_raw = sgqlc.types.Field('InventoryAdjustmentsRaw', graphql_name='inventoryAdjustmentsRaw')
    '''The `InventoryAdjustmentsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inventory_adjustments_raw_edge = sgqlc.types.Field('InventoryAdjustmentsRawsEdge', graphql_name='inventoryAdjustmentsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryAdjustmentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InventoryAdjustmentsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InventoryAdjustmentsRawsOrderBy!]`): The method to
      use when ordering `InventoryAdjustmentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateInventoryControlRawPayload(sgqlc.types.Type):
    '''The output of our create `InventoryControlRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_control_raw', 'query', 'inventory_control_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inventory_control_raw = sgqlc.types.Field('InventoryControlRaw', graphql_name='inventoryControlRaw')
    '''The `InventoryControlRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inventory_control_raw_edge = sgqlc.types.Field('InventoryControlRawsEdge', graphql_name='inventoryControlRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryControlRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InventoryControlRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InventoryControlRawsOrderBy!]`): The method to use
      when ordering `InventoryControlRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateInventoryHoldHistoryRawPayload(sgqlc.types.Type):
    '''The output of our create `InventoryHoldHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_hold_history_raw', 'query', 'inventory_hold_history_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inventory_hold_history_raw = sgqlc.types.Field('InventoryHoldHistoryRaw', graphql_name='inventoryHoldHistoryRaw')
    '''The `InventoryHoldHistoryRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inventory_hold_history_raw_edge = sgqlc.types.Field('InventoryHoldHistoryRawsEdge', graphql_name='inventoryHoldHistoryRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryHoldHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InventoryHoldHistoryRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InventoryHoldHistoryRawsOrderBy!]`): The method to
      use when ordering `InventoryHoldHistoryRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateItemFreezeTimePayload(sgqlc.types.Type):
    '''The output of our create `ItemFreezeTime` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_freeze_time', 'query', 'wms_item', 'for_blast_cell_type', 'item_freeze_time_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    item_freeze_time = sgqlc.types.Field('ItemFreezeTime', graphql_name='itemFreezeTime')
    '''The `ItemFreezeTime` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_item = sgqlc.types.Field('ItemsRaw', graphql_name='wmsItem')
    '''Reads a single `ItemsRaw` that is related to this
    `ItemFreezeTime`.
    '''

    for_blast_cell_type = sgqlc.types.Field('BlastCellType', graphql_name='forBlastCellType')
    '''Reads a single `BlastCellType` that is related to this
    `ItemFreezeTime`.
    '''

    item_freeze_time_edge = sgqlc.types.Field('ItemFreezeTimesEdge', graphql_name='itemFreezeTimeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemFreezeTimesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemFreezeTime`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemFreezeTimesOrderBy!]`): The method to use when
      ordering `ItemFreezeTime`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateItemReferenceCodePayload(sgqlc.types.Type):
    '''The output of our create `ItemReferenceCode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_reference_code', 'query', 'item_reference_code_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    item_reference_code = sgqlc.types.Field('ItemReferenceCode', graphql_name='itemReferenceCode')
    '''The `ItemReferenceCode` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    item_reference_code_edge = sgqlc.types.Field('ItemReferenceCodesEdge', graphql_name='itemReferenceCodeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemReferenceCodesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
))
    )
    '''An edge for our `ItemReferenceCode`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemReferenceCodesOrderBy!]`): The method to use
      when ordering `ItemReferenceCode`. (default: `[NATURAL]`)
    '''



class CreateItemReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our create `ItemReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_reference_codes_raw', 'query', 'item_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    item_reference_codes_raw = sgqlc.types.Field('ItemReferenceCodesRaw', graphql_name='itemReferenceCodesRaw')
    '''The `ItemReferenceCodesRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    item_reference_codes_raw_edge = sgqlc.types.Field('ItemReferenceCodesRawsEdge', graphql_name='itemReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemReferenceCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `ItemReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateItemShortCategoryNamePayload(sgqlc.types.Type):
    '''The output of our create `ItemShortCategoryName` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_short_category_name', 'query', 'wms_item', 'item_short_category_name_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    item_short_category_name = sgqlc.types.Field('ItemShortCategoryName', graphql_name='itemShortCategoryName')
    '''The `ItemShortCategoryName` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_item = sgqlc.types.Field('ItemsRaw', graphql_name='wmsItem')
    '''Reads a single `ItemsRaw` that is related to this
    `ItemShortCategoryName`.
    '''

    item_short_category_name_edge = sgqlc.types.Field('ItemShortCategoryNamesEdge', graphql_name='itemShortCategoryNameEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemShortCategoryNamesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemShortCategoryName`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemShortCategoryNamesOrderBy!]`): The method to
      use when ordering `ItemShortCategoryName`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateItemsRawPayload(sgqlc.types.Type):
    '''The output of our create `ItemsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'items_raw', 'query', 'items_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    items_raw = sgqlc.types.Field('ItemsRaw', graphql_name='itemsRaw')
    '''The `ItemsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    items_raw_edge = sgqlc.types.Field('ItemsRawsEdge', graphql_name='itemsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemsRawsOrderBy!]`): The method to use when
      ordering `ItemsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateLotReferenceCodePayload(sgqlc.types.Type):
    '''The output of our create `LotReferenceCode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lot_reference_code', 'query', 'lot_reference_code_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    lot_reference_code = sgqlc.types.Field('LotReferenceCode', graphql_name='lotReferenceCode')
    '''The `LotReferenceCode` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    lot_reference_code_edge = sgqlc.types.Field('LotReferenceCodesEdge', graphql_name='lotReferenceCodeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotReferenceCodesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
))
    )
    '''An edge for our `LotReferenceCode`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[LotReferenceCodesOrderBy!]`): The method to use
      when ordering `LotReferenceCode`. (default: `[NATURAL]`)
    '''



class CreateLotReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our create `LotReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lot_reference_codes_raw', 'query', 'lot_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    lot_reference_codes_raw = sgqlc.types.Field('LotReferenceCodesRaw', graphql_name='lotReferenceCodesRaw')
    '''The `LotReferenceCodesRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    lot_reference_codes_raw_edge = sgqlc.types.Field('LotReferenceCodesRawsEdge', graphql_name='lotReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `LotReferenceCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[LotReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `LotReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateLotTransactionsRawPayload(sgqlc.types.Type):
    '''The output of our create `LotTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lot_transactions_raw', 'query', 'lot_transactions_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    lot_transactions_raw = sgqlc.types.Field('LotTransactionsRaw', graphql_name='lotTransactionsRaw')
    '''The `LotTransactionsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    lot_transactions_raw_edge = sgqlc.types.Field('LotTransactionsRawsEdge', graphql_name='lotTransactionsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `LotTransactionsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[LotTransactionsRawsOrderBy!]`): The method to use
      when ordering `LotTransactionsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateLotsRawPayload(sgqlc.types.Type):
    '''The output of our create `LotsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lots_raw', 'query', 'lots_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    lots_raw = sgqlc.types.Field('LotsRaw', graphql_name='lotsRaw')
    '''The `LotsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    lots_raw_edge = sgqlc.types.Field('LotsRawsEdge', graphql_name='lotsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `LotsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[LotsRawsOrderBy!]`): The method to use when
      ordering `LotsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateOutboundCatchWeightRawPayload(sgqlc.types.Type):
    '''The output of our create `OutboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_catch_weight_raw', 'query', 'outbound_catch_weight_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_catch_weight_raw = sgqlc.types.Field('OutboundCatchWeightRaw', graphql_name='outboundCatchWeightRaw')
    '''The `OutboundCatchWeightRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_catch_weight_raw_edge = sgqlc.types.Field('OutboundCatchWeightRawsEdge', graphql_name='outboundCatchWeightRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundCatchWeightRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundCatchWeightRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundCatchWeightRawsOrderBy!]`): The method to
      use when ordering `OutboundCatchWeightRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateOutboundLoadsRawPayload(sgqlc.types.Type):
    '''The output of our create `OutboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_loads_raw', 'query', 'outbound_loads_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_loads_raw = sgqlc.types.Field('OutboundLoadsRaw', graphql_name='outboundLoadsRaw')
    '''The `OutboundLoadsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_loads_raw_edge = sgqlc.types.Field('OutboundLoadsRawsEdge', graphql_name='outboundLoadsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundLoadsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundLoadsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundLoadsRawsOrderBy!]`): The method to use
      when ordering `OutboundLoadsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateOutboundOrderCommentsRawPayload(sgqlc.types.Type):
    '''The output of our create `OutboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_comments_raw', 'query', 'outbound_order_comments_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_comments_raw = sgqlc.types.Field('OutboundOrderCommentsRaw', graphql_name='outboundOrderCommentsRaw')
    '''The `OutboundOrderCommentsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_comments_raw_edge = sgqlc.types.Field('OutboundOrderCommentsRawsEdge', graphql_name='outboundOrderCommentsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderCommentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderCommentsRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[OutboundOrderCommentsRawsOrderBy!]`): The method
      to use when ordering `OutboundOrderCommentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateOutboundOrderDetailsExecutionRawPayload(sgqlc.types.Type):
    '''The output of our create `OutboundOrderDetailsExecutionRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_details_execution_raw', 'query', 'outbound_order_details_execution_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_details_execution_raw = sgqlc.types.Field('OutboundOrderDetailsExecutionRaw', graphql_name='outboundOrderDetailsExecutionRaw')
    '''The `OutboundOrderDetailsExecutionRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_details_execution_raw_edge = sgqlc.types.Field('OutboundOrderDetailsExecutionRawsEdge', graphql_name='outboundOrderDetailsExecutionRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderDetailsExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderDetailsExecutionRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrderDetailsExecutionRawsOrderBy!]`): The
      method to use when ordering `OutboundOrderDetailsExecutionRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateOutboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our create `OutboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_details_raw', 'query', 'outbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_details_raw = sgqlc.types.Field('OutboundOrderDetailsRaw', graphql_name='outboundOrderDetailsRaw')
    '''The `OutboundOrderDetailsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_details_raw_edge = sgqlc.types.Field('OutboundOrderDetailsRawsEdge', graphql_name='outboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderDetailsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrderDetailsRawsOrderBy!]`): The method to
      use when ordering `OutboundOrderDetailsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateOutboundOrderReferenceCodePayload(sgqlc.types.Type):
    '''The output of our create `OutboundOrderReferenceCode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_reference_code', 'query', 'outbound_order_reference_code_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_reference_code = sgqlc.types.Field('OutboundOrderReferenceCode', graphql_name='outboundOrderReferenceCode')
    '''The `OutboundOrderReferenceCode` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_reference_code_edge = sgqlc.types.Field('OutboundOrderReferenceCodesEdge', graphql_name='outboundOrderReferenceCodeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderReferenceCodesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
))
    )
    '''An edge for our `OutboundOrderReferenceCode`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[OutboundOrderReferenceCodesOrderBy!]`): The method
      to use when ordering `OutboundOrderReferenceCode`. (default:
      `[NATURAL]`)
    '''



class CreateOutboundOrderReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our create `OutboundOrderReferenceCodesRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_reference_codes_raw', 'query', 'outbound_order_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_reference_codes_raw = sgqlc.types.Field('OutboundOrderReferenceCodesRaw', graphql_name='outboundOrderReferenceCodesRaw')
    '''The `OutboundOrderReferenceCodesRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_reference_codes_raw_edge = sgqlc.types.Field('OutboundOrderReferenceCodesRawsEdge', graphql_name='outboundOrderReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderReferenceCodesRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrderReferenceCodesRawsOrderBy!]`): The
      method to use when ordering `OutboundOrderReferenceCodesRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateOutboundOrdersExecutionRawPayload(sgqlc.types.Type):
    '''The output of our create `OutboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_orders_execution_raw', 'query', 'outbound_orders_execution_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_orders_execution_raw = sgqlc.types.Field('OutboundOrdersExecutionRaw', graphql_name='outboundOrdersExecutionRaw')
    '''The `OutboundOrdersExecutionRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_orders_execution_raw_edge = sgqlc.types.Field('OutboundOrdersExecutionRawsEdge', graphql_name='outboundOrdersExecutionRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrdersExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrdersExecutionRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[OutboundOrdersExecutionRawsOrderBy!]`): The method
      to use when ordering `OutboundOrdersExecutionRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateOutboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our create `OutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_orders_raw', 'query', 'outbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_orders_raw = sgqlc.types.Field('OutboundOrdersRaw', graphql_name='outboundOrdersRaw')
    '''The `OutboundOrdersRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_orders_raw_edge = sgqlc.types.Field('OutboundOrdersRawsEdge', graphql_name='outboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrdersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrdersRawsOrderBy!]`): The method to use
      when ordering `OutboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateOutboundPalletsRawPayload(sgqlc.types.Type):
    '''The output of our create `OutboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_pallets_raw', 'query', 'outbound_pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_pallets_raw = sgqlc.types.Field('OutboundPalletsRaw', graphql_name='outboundPalletsRaw')
    '''The `OutboundPalletsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_pallets_raw_edge = sgqlc.types.Field('OutboundPalletsRawsEdge', graphql_name='outboundPalletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundPalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundPalletsRawsOrderBy!]`): The method to use
      when ordering `OutboundPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateOutboundTruckLogRawPayload(sgqlc.types.Type):
    '''The output of our create `OutboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_truck_log_raw', 'query', 'outbound_truck_log_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_truck_log_raw = sgqlc.types.Field('OutboundTruckLogRaw', graphql_name='outboundTruckLogRaw')
    '''The `OutboundTruckLogRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_truck_log_raw_edge = sgqlc.types.Field('OutboundTruckLogRawsEdge', graphql_name='outboundTruckLogRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundTruckLogRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundTruckLogRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundTruckLogRawsOrderBy!]`): The method to use
      when ordering `OutboundTruckLogRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreatePalletHistoryRawPayload(sgqlc.types.Type):
    '''The output of our create `PalletHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_history_raw', 'query', 'pallet_history_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_history_raw = sgqlc.types.Field('PalletHistoryRaw', graphql_name='palletHistoryRaw')
    '''The `PalletHistoryRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_history_raw_edge = sgqlc.types.Field('PalletHistoryRawsEdge', graphql_name='palletHistoryRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletHistoryRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletHistoryRawsOrderBy!]`): The method to use
      when ordering `PalletHistoryRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreatePalletLocationZonePayload(sgqlc.types.Type):
    '''The output of our create `PalletLocationZone` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_location_zone', 'query', 'pallet_location_zone_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_location_zone = sgqlc.types.Field('PalletLocationZone', graphql_name='palletLocationZone')
    '''The `PalletLocationZone` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_location_zone_edge = sgqlc.types.Field('PalletLocationZonesEdge', graphql_name='palletLocationZoneEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletLocationZonesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
))
    )
    '''An edge for our `PalletLocationZone`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletLocationZonesOrderBy!]`): The method to use
      when ordering `PalletLocationZone`. (default: `[NATURAL]`)
    '''



class CreatePalletLocationsRawPayload(sgqlc.types.Type):
    '''The output of our create `PalletLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_locations_raw', 'query', 'pallet_locations_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_locations_raw = sgqlc.types.Field('PalletLocationsRaw', graphql_name='palletLocationsRaw')
    '''The `PalletLocationsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_locations_raw_edge = sgqlc.types.Field('PalletLocationsRawsEdge', graphql_name='palletLocationsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletLocationsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletLocationsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletLocationsRawsOrderBy!]`): The method to use
      when ordering `PalletLocationsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreatePalletReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our create `PalletReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_reference_codes_raw', 'query', 'pallet_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_reference_codes_raw = sgqlc.types.Field('PalletReferenceCodesRaw', graphql_name='palletReferenceCodesRaw')
    '''The `PalletReferenceCodesRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_reference_codes_raw_edge = sgqlc.types.Field('PalletReferenceCodesRawsEdge', graphql_name='palletReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletReferenceCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `PalletReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreatePalletTransactionsRawPayload(sgqlc.types.Type):
    '''The output of our create `PalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_transactions_raw', 'query', 'pallet_transactions_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_transactions_raw = sgqlc.types.Field('PalletTransactionsRaw', graphql_name='palletTransactionsRaw')
    '''The `PalletTransactionsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_transactions_raw_edge = sgqlc.types.Field('PalletTransactionsRawsEdge', graphql_name='palletTransactionsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletTransactionsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletTransactionsRawsOrderBy!]`): The method to
      use when ordering `PalletTransactionsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreatePalletsRawPayload(sgqlc.types.Type):
    '''The output of our create `PalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallets_raw', 'query', 'pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallets_raw = sgqlc.types.Field('PalletsRaw', graphql_name='palletsRaw')
    '''The `PalletsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallets_raw_edge = sgqlc.types.Field('PalletsRawsEdge', graphql_name='palletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletsRawsOrderBy!]`): The method to use when
      ordering `PalletsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateSourceChannelCursorPayload(sgqlc.types.Type):
    '''The output of our create `SourceChannelCursor` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_channel_cursor', 'query', 'source_channel_cursor_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source_channel_cursor = sgqlc.types.Field('SourceChannelCursor', graphql_name='sourceChannelCursor')
    '''The `SourceChannelCursor` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_channel_cursor_edge = sgqlc.types.Field('SourceChannelCursorsEdge', graphql_name='sourceChannelCursorEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelCursorsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `SourceChannelCursor`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourceChannelCursorsOrderBy!]`): The method to use
      when ordering `SourceChannelCursor`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateSourceChannelPayload(sgqlc.types.Type):
    '''The output of our create `SourceChannel` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_channel', 'query', 'source_by_source_slug', 'cursor', 'source_channel_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source_channel = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannel')
    '''The `SourceChannel` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_by_source_slug = sgqlc.types.Field('Source', graphql_name='sourceBySourceSlug')
    '''Reads a single `Source` that is related to this `SourceChannel`.'''

    cursor = sgqlc.types.Field('SourceChannelCursor', graphql_name='cursor')
    '''Reads a single `SourceChannelCursor` that is related to this
    `SourceChannel`.
    '''

    source_channel_edge = sgqlc.types.Field('SourceChannelsEdge', graphql_name='sourceChannelEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `SourceChannel`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourceChannelsOrderBy!]`): The method to use when
      ordering `SourceChannel`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateSourcePayload(sgqlc.types.Type):
    '''The output of our create `Source` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source', 'query', 'source_type', 'source_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source = sgqlc.types.Field('Source', graphql_name='source')
    '''The `Source` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_type = sgqlc.types.Field('SourceType', graphql_name='sourceType')
    '''Reads a single `SourceType` that is related to this `Source`.'''

    source_edge = sgqlc.types.Field('SourcesEdge', graphql_name='sourceEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourcesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `Source`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourcesOrderBy!]`): The method to use when
      ordering `Source`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateSourceTypePayload(sgqlc.types.Type):
    '''The output of our create `SourceType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_type', 'query', 'source_type_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source_type = sgqlc.types.Field('SourceType', graphql_name='sourceType')
    '''The `SourceType` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_type_edge = sgqlc.types.Field('SourceTypesEdge', graphql_name='sourceTypeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceTypesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `SourceType`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourceTypesOrderBy!]`): The method to use when
      ordering `SourceType`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateStopLocationsRawPayload(sgqlc.types.Type):
    '''The output of our create `StopLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'stop_locations_raw', 'query', 'stop_locations_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    stop_locations_raw = sgqlc.types.Field('StopLocationsRaw', graphql_name='stopLocationsRaw')
    '''The `StopLocationsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    stop_locations_raw_edge = sgqlc.types.Field('StopLocationsRawsEdge', graphql_name='stopLocationsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(StopLocationsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `StopLocationsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[StopLocationsRawsOrderBy!]`): The method to use
      when ordering `StopLocationsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateWarehouseCustomersConfigRawPayload(sgqlc.types.Type):
    '''The output of our create `WarehouseCustomersConfigRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_customers_config_raw', 'query', 'warehouse_customers_config_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    warehouse_customers_config_raw = sgqlc.types.Field('WarehouseCustomersConfigRaw', graphql_name='warehouseCustomersConfigRaw')
    '''The `WarehouseCustomersConfigRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    warehouse_customers_config_raw_edge = sgqlc.types.Field('WarehouseCustomersConfigRawsEdge', graphql_name='warehouseCustomersConfigRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehouseCustomersConfigRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WarehouseCustomersConfigRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[WarehouseCustomersConfigRawsOrderBy!]`): The
      method to use when ordering `WarehouseCustomersConfigRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateWarehouseCustomersRawPayload(sgqlc.types.Type):
    '''The output of our create `WarehouseCustomersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_customers_raw', 'query', 'warehouse_customers_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    warehouse_customers_raw = sgqlc.types.Field('WarehouseCustomersRaw', graphql_name='warehouseCustomersRaw')
    '''The `WarehouseCustomersRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    warehouse_customers_raw_edge = sgqlc.types.Field('WarehouseCustomersRawsEdge', graphql_name='warehouseCustomersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehouseCustomersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WarehouseCustomersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WarehouseCustomersRawsOrderBy!]`): The method to
      use when ordering `WarehouseCustomersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateWarehousePickActivitiesRawPayload(sgqlc.types.Type):
    '''The output of our create `WarehousePickActivitiesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_pick_activities_raw', 'query', 'warehouse_pick_activities_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    warehouse_pick_activities_raw = sgqlc.types.Field('WarehousePickActivitiesRaw', graphql_name='warehousePickActivitiesRaw')
    '''The `WarehousePickActivitiesRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    warehouse_pick_activities_raw_edge = sgqlc.types.Field('WarehousePickActivitiesRawsEdge', graphql_name='warehousePickActivitiesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehousePickActivitiesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WarehousePickActivitiesRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[WarehousePickActivitiesRawsOrderBy!]`): The method
      to use when ordering `WarehousePickActivitiesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateWmsFacilityDefaultsRawPayload(sgqlc.types.Type):
    '''The output of our create `WmsFacilityDefaultsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wms_facility_defaults_raw', 'query', 'wms_facility_defaults_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    wms_facility_defaults_raw = sgqlc.types.Field('WmsFacilityDefaultsRaw', graphql_name='wmsFacilityDefaultsRaw')
    '''The `WmsFacilityDefaultsRaw` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_facility_defaults_raw_edge = sgqlc.types.Field('WmsFacilityDefaultsRawsEdge', graphql_name='wmsFacilityDefaultsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WmsFacilityDefaultsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WmsFacilityDefaultsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WmsFacilityDefaultsRawsOrderBy!]`): The method to
      use when ordering `WmsFacilityDefaultsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CreateWmsSystemPayload(sgqlc.types.Type):
    '''The output of our create `WmsSystem` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wms_system', 'query', 'wms_system_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    wms_system = sgqlc.types.Field('WmsSystem', graphql_name='wmsSystem')
    '''The `WmsSystem` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_system_edge = sgqlc.types.Field('WmsSystemsEdge', graphql_name='wmsSystemEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WmsSystemsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WmsSystem`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WmsSystemsOrderBy!]`): The method to use when
      ordering `WmsSystem`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateWoodenPalletTransactionsRawPayload(sgqlc.types.Type):
    '''The output of our create `WoodenPalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wooden_pallet_transactions_raw', 'query', 'wooden_pallet_transactions_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    wooden_pallet_transactions_raw = sgqlc.types.Field('WoodenPalletTransactionsRaw', graphql_name='woodenPalletTransactionsRaw')
    '''The `WoodenPalletTransactionsRaw` that was created by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wooden_pallet_transactions_raw_edge = sgqlc.types.Field('WoodenPalletTransactionsRawsEdge', graphql_name='woodenPalletTransactionsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WoodenPalletTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WoodenPalletTransactionsRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[WoodenPalletTransactionsRawsOrderBy!]`): The
      method to use when ordering `WoodenPalletTransactionsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class CreateWorkdayCostCenterPayload(sgqlc.types.Type):
    '''The output of our create `WorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'workday_cost_center', 'query', 'workday_cost_center_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    workday_cost_center = sgqlc.types.Field('WorkdayCostCenter', graphql_name='workdayCostCenter')
    '''The `WorkdayCostCenter` that was created by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    workday_cost_center_edge = sgqlc.types.Field('WorkdayCostCentersEdge', graphql_name='workdayCostCenterEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WorkdayCostCenter`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WorkdayCostCentersOrderBy!]`): The method to use
      when ordering `WorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class CursorHistoriesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `CursorHistory` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CursorHistory'))), graphql_name='nodes')
    '''A list of `CursorHistory` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CursorHistoriesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `CursorHistory` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `CursorHistory` you could get from the
    connection.
    '''



class CursorHistoriesEdge(sgqlc.types.Type):
    '''A `CursorHistory` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('CursorHistory'), graphql_name='node')
    '''The `CursorHistory` at the end of the edge.'''



class CustomerFacilityLink(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'facility_id', 'customer_code', 'customer_enterprise_id')
    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')



class CustomerFacilityLinksConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `CustomerFacilityLink` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CustomerFacilityLink))), graphql_name='nodes')
    '''A list of `CustomerFacilityLink` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CustomerFacilityLinksEdge'))), graphql_name='edges')
    '''A list of edges which contains the `CustomerFacilityLink` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `CustomerFacilityLink` you could get from the
    connection.
    '''



class CustomerFacilityLinksEdge(sgqlc.types.Type):
    '''A `CustomerFacilityLink` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(CustomerFacilityLink), graphql_name='node')
    '''The `CustomerFacilityLink` at the end of the edge.'''



class CustomerHierarchiesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `CustomerHierarchy` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CustomerHierarchy'))), graphql_name='nodes')
    '''A list of `CustomerHierarchy` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CustomerHierarchiesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `CustomerHierarchy` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `CustomerHierarchy` you could get from the
    connection.
    '''



class CustomerHierarchiesEdge(sgqlc.types.Type):
    '''A `CustomerHierarchy` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('CustomerHierarchy'), graphql_name='node')
    '''The `CustomerHierarchy` at the end of the edge.'''



class CustomerHierarchy(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('pid', 'p_enterprise_id', 'p_customer_name', 'id', 'c_enterprise_id', 'c_customer_name', 'link_length', 'c_level', 'p_level')
    pid = sgqlc.types.Field(String, graphql_name='pid')

    p_enterprise_id = sgqlc.types.Field(String, graphql_name='pEnterpriseId')

    p_customer_name = sgqlc.types.Field(String, graphql_name='pCustomerName')

    id = sgqlc.types.Field(String, graphql_name='id')

    c_enterprise_id = sgqlc.types.Field(String, graphql_name='cEnterpriseId')

    c_customer_name = sgqlc.types.Field(String, graphql_name='cCustomerName')

    link_length = sgqlc.types.Field(Int, graphql_name='linkLength')

    c_level = sgqlc.types.Field(Int, graphql_name='cLevel')

    p_level = sgqlc.types.Field(Int, graphql_name='pLevel')



class CustomerHierarchyMap(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('pid', 'id', 'name', 'link_length', 'c_level', 'p_level', 'enterprise_id')
    pid = sgqlc.types.Field(String, graphql_name='pid')

    id = sgqlc.types.Field(String, graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    link_length = sgqlc.types.Field(BigFloat, graphql_name='linkLength')

    c_level = sgqlc.types.Field(BigFloat, graphql_name='cLevel')

    p_level = sgqlc.types.Field(BigFloat, graphql_name='pLevel')

    enterprise_id = sgqlc.types.Field(BigFloat, graphql_name='enterpriseId')



class CustomerHierarchyMapsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `CustomerHierarchyMap` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CustomerHierarchyMap))), graphql_name='nodes')
    '''A list of `CustomerHierarchyMap` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CustomerHierarchyMapsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `CustomerHierarchyMap` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `CustomerHierarchyMap` you could get from the
    connection.
    '''



class CustomerHierarchyMapsEdge(sgqlc.types.Type):
    '''A `CustomerHierarchyMap` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(CustomerHierarchyMap), graphql_name='node')
    '''The `CustomerHierarchyMap` at the end of the edge.'''



class CutsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `CutsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CutsRaw'))), graphql_name='nodes')
    '''A list of `CutsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CutsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `CutsRaw` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `CutsRaw` you could get from the connection.'''



class CutsRawsEdge(sgqlc.types.Type):
    '''A `CutsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('CutsRaw'), graphql_name='node')
    '''The `CutsRaw` at the end of the edge.'''



class DeleteAggregateWarehouseUtilByCustomerRawPayload(sgqlc.types.Type):
    '''The output of our delete `AggregateWarehouseUtilByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_util_by_customer_raw', 'deleted_aggregate_warehouse_util_by_customer_raw_node_id', 'query', 'aggregate_warehouse_util_by_customer_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_util_by_customer_raw = sgqlc.types.Field('AggregateWarehouseUtilByCustomerRaw', graphql_name='aggregateWarehouseUtilByCustomerRaw')
    '''The `AggregateWarehouseUtilByCustomerRaw` that was deleted by this
    mutation.
    '''

    deleted_aggregate_warehouse_util_by_customer_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedAggregateWarehouseUtilByCustomerRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_util_by_customer_raw_edge = sgqlc.types.Field(AggregateWarehouseUtilByCustomerRawsEdge, graphql_name='aggregateWarehouseUtilByCustomerRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseUtilByCustomerRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseUtilByCustomerRaw`. May be used
    by Relay 1.

    Arguments:

    * `order_by` (`[AggregateWarehouseUtilByCustomerRawsOrderBy!]`):
      The method to use when ordering
      `AggregateWarehouseUtilByCustomerRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteAggregateWarehouseUtilRawPayload(sgqlc.types.Type):
    '''The output of our delete `AggregateWarehouseUtilRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_util_raw', 'deleted_aggregate_warehouse_util_raw_node_id', 'query', 'aggregate_warehouse_util_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_util_raw = sgqlc.types.Field('AggregateWarehouseUtilRaw', graphql_name='aggregateWarehouseUtilRaw')
    '''The `AggregateWarehouseUtilRaw` that was deleted by this mutation.'''

    deleted_aggregate_warehouse_util_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedAggregateWarehouseUtilRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_util_raw_edge = sgqlc.types.Field(AggregateWarehouseUtilRawsEdge, graphql_name='aggregateWarehouseUtilRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseUtilRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseUtilRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[AggregateWarehouseUtilRawsOrderBy!]`): The method
      to use when ordering `AggregateWarehouseUtilRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteAggregateWarehouseVolumeByCustomerRawPayload(sgqlc.types.Type):
    '''The output of our delete `AggregateWarehouseVolumeByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_volume_by_customer_raw', 'deleted_aggregate_warehouse_volume_by_customer_raw_node_id', 'query', 'aggregate_warehouse_volume_by_customer_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_volume_by_customer_raw = sgqlc.types.Field('AggregateWarehouseVolumeByCustomerRaw', graphql_name='aggregateWarehouseVolumeByCustomerRaw')
    '''The `AggregateWarehouseVolumeByCustomerRaw` that was deleted by
    this mutation.
    '''

    deleted_aggregate_warehouse_volume_by_customer_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedAggregateWarehouseVolumeByCustomerRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_volume_by_customer_raw_edge = sgqlc.types.Field(AggregateWarehouseVolumeByCustomerRawsEdge, graphql_name='aggregateWarehouseVolumeByCustomerRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseVolumeByCustomerRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseVolumeByCustomerRaw`. May be
    used by Relay 1.

    Arguments:

    * `order_by` (`[AggregateWarehouseVolumeByCustomerRawsOrderBy!]`):
      The method to use when ordering
      `AggregateWarehouseVolumeByCustomerRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteAggregateWarehouseVolumeRawPayload(sgqlc.types.Type):
    '''The output of our delete `AggregateWarehouseVolumeRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_volume_raw', 'deleted_aggregate_warehouse_volume_raw_node_id', 'query', 'aggregate_warehouse_volume_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_volume_raw = sgqlc.types.Field('AggregateWarehouseVolumeRaw', graphql_name='aggregateWarehouseVolumeRaw')
    '''The `AggregateWarehouseVolumeRaw` that was deleted by this
    mutation.
    '''

    deleted_aggregate_warehouse_volume_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedAggregateWarehouseVolumeRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_volume_raw_edge = sgqlc.types.Field(AggregateWarehouseVolumeRawsEdge, graphql_name='aggregateWarehouseVolumeRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseVolumeRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseVolumeRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[AggregateWarehouseVolumeRawsOrderBy!]`): The
      method to use when ordering `AggregateWarehouseVolumeRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBillingHistoryRawPayload(sgqlc.types.Type):
    '''The output of our delete `BillingHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'billing_history_raw', 'deleted_billing_history_raw_node_id', 'query', 'billing_history_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    billing_history_raw = sgqlc.types.Field('BillingHistoryRaw', graphql_name='billingHistoryRaw')
    '''The `BillingHistoryRaw` that was deleted by this mutation.'''

    deleted_billing_history_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedBillingHistoryRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    billing_history_raw_edge = sgqlc.types.Field(BillingHistoryRawsEdge, graphql_name='billingHistoryRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BillingHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BillingHistoryRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BillingHistoryRawsOrderBy!]`): The method to use
      when ordering `BillingHistoryRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBlastCellPayload(sgqlc.types.Type):
    '''The output of our delete `BlastCell` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell', 'deleted_blast_cell_node_id', 'query', 'facility', 'blast_cell_type', 'blast_cell_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''The `BlastCell` that was deleted by this mutation.'''

    deleted_blast_cell_node_id = sgqlc.types.Field(ID, graphql_name='deletedBlastCellNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''Reads a single `Facility` that is related to this `BlastCell`.'''

    blast_cell_type = sgqlc.types.Field('BlastCellType', graphql_name='blastCellType')
    '''Reads a single `BlastCellType` that is related to this
    `BlastCell`.
    '''

    blast_cell_edge = sgqlc.types.Field(BlastCellsEdge, graphql_name='blastCellEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCell`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBlastCellTypePayload(sgqlc.types.Type):
    '''The output of our delete `BlastCellType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_type', 'deleted_blast_cell_type_node_id', 'query', 'blast_cell_type_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell_type = sgqlc.types.Field('BlastCellType', graphql_name='blastCellType')
    '''The `BlastCellType` that was deleted by this mutation.'''

    deleted_blast_cell_type_node_id = sgqlc.types.Field(ID, graphql_name='deletedBlastCellTypeNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell_type_edge = sgqlc.types.Field(BlastCellTypesEdge, graphql_name='blastCellTypeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellTypesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCellType`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCellTypesOrderBy!]`): The method to use when
      ordering `BlastCellType`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBlastCellWmsPalletLocationPayload(sgqlc.types.Type):
    '''The output of our delete `BlastCellWmsPalletLocation` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_wms_pallet_location', 'deleted_blast_cell_wms_pallet_location_node_id', 'query', 'blast_cell', 'wms_pallet_location', 'blast_cell_wms_pallet_location_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell_wms_pallet_location = sgqlc.types.Field('BlastCellWmsPalletLocation', graphql_name='blastCellWmsPalletLocation')
    '''The `BlastCellWmsPalletLocation` that was deleted by this
    mutation.
    '''

    deleted_blast_cell_wms_pallet_location_node_id = sgqlc.types.Field(ID, graphql_name='deletedBlastCellWmsPalletLocationNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this
    `BlastCellWmsPalletLocation`.
    '''

    wms_pallet_location = sgqlc.types.Field('PalletLocationsRaw', graphql_name='wmsPalletLocation')
    '''Reads a single `PalletLocationsRaw` that is related to this
    `BlastCellWmsPalletLocation`.
    '''

    blast_cell_wms_pallet_location_edge = sgqlc.types.Field(BlastCellWmsPalletLocationsEdge, graphql_name='blastCellWmsPalletLocationEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletLocationsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCellWmsPalletLocation`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[BlastCellWmsPalletLocationsOrderBy!]`): The method
      to use when ordering `BlastCellWmsPalletLocation`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBlastCellWmsPalletPayload(sgqlc.types.Type):
    '''The output of our delete `BlastCellWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_wms_pallet', 'deleted_blast_cell_wms_pallet_node_id', 'query', 'blast_cell', 'wms_pallet', 'blast_cycle', 'blast_cell_wms_pallet_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell_wms_pallet = sgqlc.types.Field('BlastCellWmsPallet', graphql_name='blastCellWmsPallet')
    '''The `BlastCellWmsPallet` that was deleted by this mutation.'''

    deleted_blast_cell_wms_pallet_node_id = sgqlc.types.Field(ID, graphql_name='deletedBlastCellWmsPalletNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this
    `BlastCellWmsPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastCellWmsPallet`.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCellWmsPallet`.
    '''

    blast_cell_wms_pallet_edge = sgqlc.types.Field(BlastCellWmsPalletsEdge, graphql_name='blastCellWmsPalletEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCellWmsPallet`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBlastCycleEventPayload(sgqlc.types.Type):
    '''The output of our delete `BlastCycleEvent` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle_event', 'deleted_blast_cycle_event_node_id', 'query', 'blast_cycle', 'blast_cycle_event_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cycle_event = sgqlc.types.Field('BlastCycleEvent', graphql_name='blastCycleEvent')
    '''The `BlastCycleEvent` that was deleted by this mutation.'''

    deleted_blast_cycle_event_node_id = sgqlc.types.Field(ID, graphql_name='deletedBlastCycleEventNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCycleEvent`.
    '''

    blast_cycle_event_edge = sgqlc.types.Field(BlastCycleEventsEdge, graphql_name='blastCycleEventEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleEventsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCycleEvent`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCycleEventsOrderBy!]`): The method to use
      when ordering `BlastCycleEvent`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBlastCyclePayload(sgqlc.types.Type):
    '''The output of our delete `BlastCycle` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle', 'deleted_blast_cycle_node_id', 'query', 'blast_cell', 'blast_cycle_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''The `BlastCycle` that was deleted by this mutation.'''

    deleted_blast_cycle_node_id = sgqlc.types.Field(ID, graphql_name='deletedBlastCycleNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this `BlastCycle`.'''

    blast_cycle_edge = sgqlc.types.Field(BlastCyclesEdge, graphql_name='blastCycleEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCyclesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCycle`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCyclesOrderBy!]`): The method to use when
      ordering `BlastCycle`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBlastCycleWmsPalletPayload(sgqlc.types.Type):
    '''The output of our delete `BlastCycleWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle_wms_pallet', 'deleted_blast_cycle_wms_pallet_node_id', 'query', 'blast_cycle', 'wms_pallet', 'blast_cycle_wms_pallet_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cycle_wms_pallet = sgqlc.types.Field('BlastCycleWmsPallet', graphql_name='blastCycleWmsPallet')
    '''The `BlastCycleWmsPallet` that was deleted by this mutation.'''

    deleted_blast_cycle_wms_pallet_node_id = sgqlc.types.Field(ID, graphql_name='deletedBlastCycleWmsPalletNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCycleWmsPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastCycleWmsPallet`.
    '''

    blast_cycle_wms_pallet_edge = sgqlc.types.Field(BlastCycleWmsPalletsEdge, graphql_name='blastCycleWmsPalletEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCycleWmsPallet`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCycleWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCycleWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBlastPlanPalletPayload(sgqlc.types.Type):
    '''The output of our delete `BlastPlanPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_plan_pallet', 'deleted_blast_plan_pallet_node_id', 'query', 'blast_plan', 'wms_pallet', 'blast_plan_pallet_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_plan_pallet = sgqlc.types.Field('BlastPlanPallet', graphql_name='blastPlanPallet')
    '''The `BlastPlanPallet` that was deleted by this mutation.'''

    deleted_blast_plan_pallet_node_id = sgqlc.types.Field(ID, graphql_name='deletedBlastPlanPalletNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_plan = sgqlc.types.Field('BlastPlan', graphql_name='blastPlan')
    '''Reads a single `BlastPlan` that is related to this
    `BlastPlanPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastPlanPallet`.
    '''

    blast_plan_pallet_edge = sgqlc.types.Field(BlastPlanPalletsEdge, graphql_name='blastPlanPalletEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlanPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastPlanPallet`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastPlanPalletsOrderBy!]`): The method to use
      when ordering `BlastPlanPallet`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBlastPlanPayload(sgqlc.types.Type):
    '''The output of our delete `BlastPlan` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_plan', 'deleted_blast_plan_node_id', 'query', 'assigned_blast_cell', 'blast_plan_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_plan = sgqlc.types.Field('BlastPlan', graphql_name='blastPlan')
    '''The `BlastPlan` that was deleted by this mutation.'''

    deleted_blast_plan_node_id = sgqlc.types.Field(ID, graphql_name='deletedBlastPlanNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    assigned_blast_cell = sgqlc.types.Field('BlastCell', graphql_name='assignedBlastCell')
    '''Reads a single `BlastCell` that is related to this `BlastPlan`.'''

    blast_plan_edge = sgqlc.types.Field(BlastPlansEdge, graphql_name='blastPlanEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlansOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastPlan`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastPlansOrderBy!]`): The method to use when
      ordering `BlastPlan`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBolConstantsRawPayload(sgqlc.types.Type):
    '''The output of our delete `BolConstantsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'bol_constants_raw', 'deleted_bol_constants_raw_node_id', 'query', 'bol_constants_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    bol_constants_raw = sgqlc.types.Field('BolConstantsRaw', graphql_name='bolConstantsRaw')
    '''The `BolConstantsRaw` that was deleted by this mutation.'''

    deleted_bol_constants_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedBolConstantsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    bol_constants_raw_edge = sgqlc.types.Field(BolConstantsRawsEdge, graphql_name='bolConstantsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BolConstantsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BolConstantsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BolConstantsRawsOrderBy!]`): The method to use
      when ordering `BolConstantsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteBrokerOwnersRawPayload(sgqlc.types.Type):
    '''The output of our delete `BrokerOwnersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'broker_owners_raw', 'deleted_broker_owners_raw_node_id', 'query', 'broker_owners_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    broker_owners_raw = sgqlc.types.Field('BrokerOwnersRaw', graphql_name='brokerOwnersRaw')
    '''The `BrokerOwnersRaw` that was deleted by this mutation.'''

    deleted_broker_owners_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedBrokerOwnersRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    broker_owners_raw_edge = sgqlc.types.Field(BrokerOwnersRawsEdge, graphql_name='brokerOwnersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BrokerOwnersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BrokerOwnersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BrokerOwnersRawsOrderBy!]`): The method to use
      when ordering `BrokerOwnersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteCarriersRawPayload(sgqlc.types.Type):
    '''The output of our delete `CarriersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'carriers_raw', 'deleted_carriers_raw_node_id', 'query', 'carriers_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    carriers_raw = sgqlc.types.Field('CarriersRaw', graphql_name='carriersRaw')
    '''The `CarriersRaw` that was deleted by this mutation.'''

    deleted_carriers_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedCarriersRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    carriers_raw_edge = sgqlc.types.Field(CarriersRawsEdge, graphql_name='carriersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CarriersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CarriersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CarriersRawsOrderBy!]`): The method to use when
      ordering `CarriersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteCasePicksRawPayload(sgqlc.types.Type):
    '''The output of our delete `CasePicksRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'case_picks_raw', 'deleted_case_picks_raw_node_id', 'query', 'case_picks_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    case_picks_raw = sgqlc.types.Field('CasePicksRaw', graphql_name='casePicksRaw')
    '''The `CasePicksRaw` that was deleted by this mutation.'''

    deleted_case_picks_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedCasePicksRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    case_picks_raw_edge = sgqlc.types.Field(CasePicksRawsEdge, graphql_name='casePicksRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CasePicksRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CasePicksRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CasePicksRawsOrderBy!]`): The method to use when
      ordering `CasePicksRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteCursorHistoryPayload(sgqlc.types.Type):
    '''The output of our delete `CursorHistory` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cursor_history', 'deleted_cursor_history_node_id', 'query', 'source_by_source_slug', 'source_channel_by_source_channel_name', 'cursor_history_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    cursor_history = sgqlc.types.Field('CursorHistory', graphql_name='cursorHistory')
    '''The `CursorHistory` that was deleted by this mutation.'''

    deleted_cursor_history_node_id = sgqlc.types.Field(ID, graphql_name='deletedCursorHistoryNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_by_source_slug = sgqlc.types.Field('Source', graphql_name='sourceBySourceSlug')
    '''Reads a single `Source` that is related to this `CursorHistory`.'''

    source_channel_by_source_channel_name = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannelBySourceChannelName')
    '''Reads a single `SourceChannel` that is related to this
    `CursorHistory`.
    '''

    cursor_history_edge = sgqlc.types.Field(CursorHistoriesEdge, graphql_name='cursorHistoryEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CursorHistoriesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CursorHistory`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CursorHistoriesOrderBy!]`): The method to use when
      ordering `CursorHistory`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteCutsRawPayload(sgqlc.types.Type):
    '''The output of our delete `CutsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cuts_raw', 'deleted_cuts_raw_node_id', 'query', 'cuts_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    cuts_raw = sgqlc.types.Field('CutsRaw', graphql_name='cutsRaw')
    '''The `CutsRaw` that was deleted by this mutation.'''

    deleted_cuts_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedCutsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    cuts_raw_edge = sgqlc.types.Field(CutsRawsEdge, graphql_name='cutsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CutsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CutsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CutsRawsOrderBy!]`): The method to use when
      ordering `CutsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteDriversRawPayload(sgqlc.types.Type):
    '''The output of our delete `DriversRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'drivers_raw', 'deleted_drivers_raw_node_id', 'query', 'drivers_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    drivers_raw = sgqlc.types.Field('DriversRaw', graphql_name='driversRaw')
    '''The `DriversRaw` that was deleted by this mutation.'''

    deleted_drivers_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedDriversRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    drivers_raw_edge = sgqlc.types.Field('DriversRawsEdge', graphql_name='driversRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(DriversRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `DriversRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[DriversRawsOrderBy!]`): The method to use when
      ordering `DriversRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteEdgeNodePayload(sgqlc.types.Type):
    '''The output of our delete `EdgeNode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'edge_node', 'deleted_edge_node_node_id', 'query', 'edge_node_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    edge_node = sgqlc.types.Field('EdgeNode', graphql_name='edgeNode')
    '''The `EdgeNode` that was deleted by this mutation.'''

    deleted_edge_node_node_id = sgqlc.types.Field(ID, graphql_name='deletedEdgeNodeNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    edge_node_edge = sgqlc.types.Field('EdgeNodesEdge', graphql_name='edgeNodeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `EdgeNode`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[EdgeNodesOrderBy!]`): The method to use when
      ordering `EdgeNode`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteEdgeNodeSourceChannelAccessPayload(sgqlc.types.Type):
    '''The output of our delete `EdgeNodeSourceChannelAccess` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'edge_node_source_channel_access', 'deleted_edge_node_source_channel_access_node_id', 'query', 'edge_node_client', 'source_channel_by_source_channel_name', 'edge_node_source_channel_access_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    edge_node_source_channel_access = sgqlc.types.Field('EdgeNodeSourceChannelAccess', graphql_name='edgeNodeSourceChannelAccess')
    '''The `EdgeNodeSourceChannelAccess` that was deleted by this
    mutation.
    '''

    deleted_edge_node_source_channel_access_node_id = sgqlc.types.Field(ID, graphql_name='deletedEdgeNodeSourceChannelAccessNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    edge_node_client = sgqlc.types.Field('EdgeNode', graphql_name='edgeNodeClient')
    '''Reads a single `EdgeNode` that is related to this
    `EdgeNodeSourceChannelAccess`.
    '''

    source_channel_by_source_channel_name = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannelBySourceChannelName')
    '''Reads a single `SourceChannel` that is related to this
    `EdgeNodeSourceChannelAccess`.
    '''

    edge_node_source_channel_access_edge = sgqlc.types.Field('EdgeNodeSourceChannelAccessesEdge', graphql_name='edgeNodeSourceChannelAccessEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `EdgeNodeSourceChannelAccess`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[EdgeNodeSourceChannelAccessesOrderBy!]`): The
      method to use when ordering `EdgeNodeSourceChannelAccess`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteExpectedInboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our delete `ExpectedInboundOrderDetailsRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_inbound_order_details_raw', 'deleted_expected_inbound_order_details_raw_node_id', 'query', 'expected_inbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_inbound_order_details_raw = sgqlc.types.Field('ExpectedInboundOrderDetailsRaw', graphql_name='expectedInboundOrderDetailsRaw')
    '''The `ExpectedInboundOrderDetailsRaw` that was deleted by this
    mutation.
    '''

    deleted_expected_inbound_order_details_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedExpectedInboundOrderDetailsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_inbound_order_details_raw_edge = sgqlc.types.Field('ExpectedInboundOrderDetailsRawsEdge', graphql_name='expectedInboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedInboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedInboundOrderDetailsRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[ExpectedInboundOrderDetailsRawsOrderBy!]`): The
      method to use when ordering `ExpectedInboundOrderDetailsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteExpectedInboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our delete `ExpectedInboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_inbound_orders_raw', 'deleted_expected_inbound_orders_raw_node_id', 'query', 'expected_inbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_inbound_orders_raw = sgqlc.types.Field('ExpectedInboundOrdersRaw', graphql_name='expectedInboundOrdersRaw')
    '''The `ExpectedInboundOrdersRaw` that was deleted by this mutation.'''

    deleted_expected_inbound_orders_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedExpectedInboundOrdersRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_inbound_orders_raw_edge = sgqlc.types.Field('ExpectedInboundOrdersRawsEdge', graphql_name='expectedInboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedInboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedInboundOrdersRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[ExpectedInboundOrdersRawsOrderBy!]`): The method
      to use when ordering `ExpectedInboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteExpectedOutboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our delete `ExpectedOutboundOrderDetailsRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_outbound_order_details_raw', 'deleted_expected_outbound_order_details_raw_node_id', 'query', 'expected_outbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_outbound_order_details_raw = sgqlc.types.Field('ExpectedOutboundOrderDetailsRaw', graphql_name='expectedOutboundOrderDetailsRaw')
    '''The `ExpectedOutboundOrderDetailsRaw` that was deleted by this
    mutation.
    '''

    deleted_expected_outbound_order_details_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedExpectedOutboundOrderDetailsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_outbound_order_details_raw_edge = sgqlc.types.Field('ExpectedOutboundOrderDetailsRawsEdge', graphql_name='expectedOutboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedOutboundOrderDetailsRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[ExpectedOutboundOrderDetailsRawsOrderBy!]`): The
      method to use when ordering `ExpectedOutboundOrderDetailsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteExpectedOutboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our delete `ExpectedOutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_outbound_orders_raw', 'deleted_expected_outbound_orders_raw_node_id', 'query', 'expected_outbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_outbound_orders_raw = sgqlc.types.Field('ExpectedOutboundOrdersRaw', graphql_name='expectedOutboundOrdersRaw')
    '''The `ExpectedOutboundOrdersRaw` that was deleted by this mutation.'''

    deleted_expected_outbound_orders_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedExpectedOutboundOrdersRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_outbound_orders_raw_edge = sgqlc.types.Field('ExpectedOutboundOrdersRawsEdge', graphql_name='expectedOutboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedOutboundOrdersRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[ExpectedOutboundOrdersRawsOrderBy!]`): The method
      to use when ordering `ExpectedOutboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteExpectedPalletsRawPayload(sgqlc.types.Type):
    '''The output of our delete `ExpectedPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_pallets_raw', 'deleted_expected_pallets_raw_node_id', 'query', 'expected_pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_pallets_raw = sgqlc.types.Field('ExpectedPalletsRaw', graphql_name='expectedPalletsRaw')
    '''The `ExpectedPalletsRaw` that was deleted by this mutation.'''

    deleted_expected_pallets_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedExpectedPalletsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_pallets_raw_edge = sgqlc.types.Field('ExpectedPalletsRawsEdge', graphql_name='expectedPalletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedPalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ExpectedPalletsRawsOrderBy!]`): The method to use
      when ordering `ExpectedPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteFacilitiesTestPayload(sgqlc.types.Type):
    '''The output of our delete `FacilitiesTest` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facilities_test', 'deleted_facilities_test_node_id', 'query', 'facilities_test_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facilities_test = sgqlc.types.Field('FacilitiesTest', graphql_name='facilitiesTest')
    '''The `FacilitiesTest` that was deleted by this mutation.'''

    deleted_facilities_test_node_id = sgqlc.types.Field(ID, graphql_name='deletedFacilitiesTestNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facilities_test_edge = sgqlc.types.Field('FacilitiesTestsEdge', graphql_name='facilitiesTestEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilitiesTestsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `FacilitiesTest`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[FacilitiesTestsOrderBy!]`): The method to use when
      ordering `FacilitiesTest`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteFacilityGroupingPayload(sgqlc.types.Type):
    '''The output of our delete `FacilityGrouping` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility_grouping', 'deleted_facility_grouping_node_id', 'query', 'parent', 'facility_grouping_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facility_grouping = sgqlc.types.Field('FacilityGrouping', graphql_name='facilityGrouping')
    '''The `FacilityGrouping` that was deleted by this mutation.'''

    deleted_facility_grouping_node_id = sgqlc.types.Field(ID, graphql_name='deletedFacilityGroupingNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    parent = sgqlc.types.Field('FacilityGrouping', graphql_name='parent')
    '''Reads a single `FacilityGrouping` that is related to this
    `FacilityGrouping`.
    '''

    facility_grouping_edge = sgqlc.types.Field('FacilityGroupingsEdge', graphql_name='facilityGroupingEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityGroupingsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `FacilityGrouping`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[FacilityGroupingsOrderBy!]`): The method to use
      when ordering `FacilityGrouping`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteFacilityPayload(sgqlc.types.Type):
    '''The output of our delete `Facility` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility', 'deleted_facility_node_id', 'query', 'facility_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''The `Facility` that was deleted by this mutation.'''

    deleted_facility_node_id = sgqlc.types.Field(ID, graphql_name='deletedFacilityNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facility_edge = sgqlc.types.Field('FacilitiesEdge', graphql_name='facilityEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilitiesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `Facility`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[FacilitiesOrderBy!]`): The method to use when
      ordering `Facility`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteFacilityWorkdayCostCenterPayload(sgqlc.types.Type):
    '''The output of our delete `FacilityWorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility_workday_cost_center', 'deleted_facility_workday_cost_center_node_id', 'query', 'facility', 'cost_center', 'facility_workday_cost_center_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facility_workday_cost_center = sgqlc.types.Field('FacilityWorkdayCostCenter', graphql_name='facilityWorkdayCostCenter')
    '''The `FacilityWorkdayCostCenter` that was deleted by this mutation.'''

    deleted_facility_workday_cost_center_node_id = sgqlc.types.Field(ID, graphql_name='deletedFacilityWorkdayCostCenterNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''Reads a single `Facility` that is related to this
    `FacilityWorkdayCostCenter`.
    '''

    cost_center = sgqlc.types.Field('WorkdayCostCenter', graphql_name='costCenter')
    '''Reads a single `WorkdayCostCenter` that is related to this
    `FacilityWorkdayCostCenter`.
    '''

    facility_workday_cost_center_edge = sgqlc.types.Field('FacilityWorkdayCostCentersEdge', graphql_name='facilityWorkdayCostCenterEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `FacilityWorkdayCostCenter`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[FacilityWorkdayCostCentersOrderBy!]`): The method
      to use when ordering `FacilityWorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteHoldCodesRawPayload(sgqlc.types.Type):
    '''The output of our delete `HoldCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'hold_codes_raw', 'deleted_hold_codes_raw_node_id', 'query', 'hold_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    hold_codes_raw = sgqlc.types.Field('HoldCodesRaw', graphql_name='holdCodesRaw')
    '''The `HoldCodesRaw` that was deleted by this mutation.'''

    deleted_hold_codes_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedHoldCodesRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    hold_codes_raw_edge = sgqlc.types.Field('HoldCodesRawsEdge', graphql_name='holdCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(HoldCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `HoldCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[HoldCodesRawsOrderBy!]`): The method to use when
      ordering `HoldCodesRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteHppRawPayload(sgqlc.types.Type):
    '''The output of our delete `HppRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'hpp_raw', 'deleted_hpp_raw_node_id', 'query', 'hpp_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    hpp_raw = sgqlc.types.Field('HppRaw', graphql_name='hppRaw')
    '''The `HppRaw` that was deleted by this mutation.'''

    deleted_hpp_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedHppRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    hpp_raw_edge = sgqlc.types.Field('HppRawsEdge', graphql_name='hppRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(HppRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `HppRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[HppRawsOrderBy!]`): The method to use when
      ordering `HppRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInboundCatchWeightRawPayload(sgqlc.types.Type):
    '''The output of our delete `InboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_catch_weight_raw', 'deleted_inbound_catch_weight_raw_node_id', 'query', 'inbound_catch_weight_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_catch_weight_raw = sgqlc.types.Field('InboundCatchWeightRaw', graphql_name='inboundCatchWeightRaw')
    '''The `InboundCatchWeightRaw` that was deleted by this mutation.'''

    deleted_inbound_catch_weight_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInboundCatchWeightRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_catch_weight_raw_edge = sgqlc.types.Field('InboundCatchWeightRawsEdge', graphql_name='inboundCatchWeightRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundCatchWeightRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundCatchWeightRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundCatchWeightRawsOrderBy!]`): The method to
      use when ordering `InboundCatchWeightRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInboundLoadsRawPayload(sgqlc.types.Type):
    '''The output of our delete `InboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_loads_raw', 'deleted_inbound_loads_raw_node_id', 'query', 'inbound_loads_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_loads_raw = sgqlc.types.Field('InboundLoadsRaw', graphql_name='inboundLoadsRaw')
    '''The `InboundLoadsRaw` that was deleted by this mutation.'''

    deleted_inbound_loads_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInboundLoadsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_loads_raw_edge = sgqlc.types.Field('InboundLoadsRawsEdge', graphql_name='inboundLoadsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundLoadsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundLoadsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundLoadsRawsOrderBy!]`): The method to use
      when ordering `InboundLoadsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInboundOrderCommentsRawPayload(sgqlc.types.Type):
    '''The output of our delete `InboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_comments_raw', 'deleted_inbound_order_comments_raw_node_id', 'query', 'inbound_order_comments_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_comments_raw = sgqlc.types.Field('InboundOrderCommentsRaw', graphql_name='inboundOrderCommentsRaw')
    '''The `InboundOrderCommentsRaw` that was deleted by this mutation.'''

    deleted_inbound_order_comments_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInboundOrderCommentsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_comments_raw_edge = sgqlc.types.Field('InboundOrderCommentsRawsEdge', graphql_name='inboundOrderCommentsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderCommentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderCommentsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderCommentsRawsOrderBy!]`): The method to
      use when ordering `InboundOrderCommentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInboundOrderDetailReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our delete `InboundOrderDetailReferenceCodesRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_detail_reference_codes_raw', 'deleted_inbound_order_detail_reference_codes_raw_node_id', 'query', 'inbound_order_detail_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_detail_reference_codes_raw = sgqlc.types.Field('InboundOrderDetailReferenceCodesRaw', graphql_name='inboundOrderDetailReferenceCodesRaw')
    '''The `InboundOrderDetailReferenceCodesRaw` that was deleted by this
    mutation.
    '''

    deleted_inbound_order_detail_reference_codes_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInboundOrderDetailReferenceCodesRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_detail_reference_codes_raw_edge = sgqlc.types.Field('InboundOrderDetailReferenceCodesRawsEdge', graphql_name='inboundOrderDetailReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderDetailReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderDetailReferenceCodesRaw`. May be used
    by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderDetailReferenceCodesRawsOrderBy!]`):
      The method to use when ordering
      `InboundOrderDetailReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our delete `InboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_details_raw', 'deleted_inbound_order_details_raw_node_id', 'query', 'inbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_details_raw = sgqlc.types.Field('InboundOrderDetailsRaw', graphql_name='inboundOrderDetailsRaw')
    '''The `InboundOrderDetailsRaw` that was deleted by this mutation.'''

    deleted_inbound_order_details_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInboundOrderDetailsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_details_raw_edge = sgqlc.types.Field('InboundOrderDetailsRawsEdge', graphql_name='inboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderDetailsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderDetailsRawsOrderBy!]`): The method to
      use when ordering `InboundOrderDetailsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInboundOrderReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our delete `InboundOrderReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_reference_codes_raw', 'deleted_inbound_order_reference_codes_raw_node_id', 'query', 'inbound_order_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_reference_codes_raw = sgqlc.types.Field('InboundOrderReferenceCodesRaw', graphql_name='inboundOrderReferenceCodesRaw')
    '''The `InboundOrderReferenceCodesRaw` that was deleted by this
    mutation.
    '''

    deleted_inbound_order_reference_codes_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInboundOrderReferenceCodesRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_reference_codes_raw_edge = sgqlc.types.Field('InboundOrderReferenceCodesRawsEdge', graphql_name='inboundOrderReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderReferenceCodesRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderReferenceCodesRawsOrderBy!]`): The
      method to use when ordering `InboundOrderReferenceCodesRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInboundOrdersExecutionRawPayload(sgqlc.types.Type):
    '''The output of our delete `InboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_orders_execution_raw', 'deleted_inbound_orders_execution_raw_node_id', 'query', 'inbound_orders_execution_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_orders_execution_raw = sgqlc.types.Field('InboundOrdersExecutionRaw', graphql_name='inboundOrdersExecutionRaw')
    '''The `InboundOrdersExecutionRaw` that was deleted by this mutation.'''

    deleted_inbound_orders_execution_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInboundOrdersExecutionRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_orders_execution_raw_edge = sgqlc.types.Field('InboundOrdersExecutionRawsEdge', graphql_name='inboundOrdersExecutionRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrdersExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrdersExecutionRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[InboundOrdersExecutionRawsOrderBy!]`): The method
      to use when ordering `InboundOrdersExecutionRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our delete `InboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_orders_raw', 'deleted_inbound_orders_raw_node_id', 'query', 'inbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_orders_raw = sgqlc.types.Field('InboundOrdersRaw', graphql_name='inboundOrdersRaw')
    '''The `InboundOrdersRaw` that was deleted by this mutation.'''

    deleted_inbound_orders_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInboundOrdersRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_orders_raw_edge = sgqlc.types.Field('InboundOrdersRawsEdge', graphql_name='inboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrdersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrdersRawsOrderBy!]`): The method to use
      when ordering `InboundOrdersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInboundPalletsRawPayload(sgqlc.types.Type):
    '''The output of our delete `InboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_pallets_raw', 'deleted_inbound_pallets_raw_node_id', 'query', 'inbound_pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_pallets_raw = sgqlc.types.Field('InboundPalletsRaw', graphql_name='inboundPalletsRaw')
    '''The `InboundPalletsRaw` that was deleted by this mutation.'''

    deleted_inbound_pallets_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInboundPalletsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_pallets_raw_edge = sgqlc.types.Field('InboundPalletsRawsEdge', graphql_name='inboundPalletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundPalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundPalletsRawsOrderBy!]`): The method to use
      when ordering `InboundPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInboundTruckLogRawPayload(sgqlc.types.Type):
    '''The output of our delete `InboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_truck_log_raw', 'deleted_inbound_truck_log_raw_node_id', 'query', 'inbound_truck_log_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_truck_log_raw = sgqlc.types.Field('InboundTruckLogRaw', graphql_name='inboundTruckLogRaw')
    '''The `InboundTruckLogRaw` that was deleted by this mutation.'''

    deleted_inbound_truck_log_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInboundTruckLogRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_truck_log_raw_edge = sgqlc.types.Field('InboundTruckLogRawsEdge', graphql_name='inboundTruckLogRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundTruckLogRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundTruckLogRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundTruckLogRawsOrderBy!]`): The method to use
      when ordering `InboundTruckLogRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInventoryAdjustmentsRawPayload(sgqlc.types.Type):
    '''The output of our delete `InventoryAdjustmentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_adjustments_raw', 'deleted_inventory_adjustments_raw_node_id', 'query', 'inventory_adjustments_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inventory_adjustments_raw = sgqlc.types.Field('InventoryAdjustmentsRaw', graphql_name='inventoryAdjustmentsRaw')
    '''The `InventoryAdjustmentsRaw` that was deleted by this mutation.'''

    deleted_inventory_adjustments_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInventoryAdjustmentsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inventory_adjustments_raw_edge = sgqlc.types.Field('InventoryAdjustmentsRawsEdge', graphql_name='inventoryAdjustmentsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryAdjustmentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InventoryAdjustmentsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InventoryAdjustmentsRawsOrderBy!]`): The method to
      use when ordering `InventoryAdjustmentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInventoryControlRawPayload(sgqlc.types.Type):
    '''The output of our delete `InventoryControlRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_control_raw', 'deleted_inventory_control_raw_node_id', 'query', 'inventory_control_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inventory_control_raw = sgqlc.types.Field('InventoryControlRaw', graphql_name='inventoryControlRaw')
    '''The `InventoryControlRaw` that was deleted by this mutation.'''

    deleted_inventory_control_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInventoryControlRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inventory_control_raw_edge = sgqlc.types.Field('InventoryControlRawsEdge', graphql_name='inventoryControlRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryControlRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InventoryControlRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InventoryControlRawsOrderBy!]`): The method to use
      when ordering `InventoryControlRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteInventoryHoldHistoryRawPayload(sgqlc.types.Type):
    '''The output of our delete `InventoryHoldHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_hold_history_raw', 'deleted_inventory_hold_history_raw_node_id', 'query', 'inventory_hold_history_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inventory_hold_history_raw = sgqlc.types.Field('InventoryHoldHistoryRaw', graphql_name='inventoryHoldHistoryRaw')
    '''The `InventoryHoldHistoryRaw` that was deleted by this mutation.'''

    deleted_inventory_hold_history_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedInventoryHoldHistoryRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inventory_hold_history_raw_edge = sgqlc.types.Field('InventoryHoldHistoryRawsEdge', graphql_name='inventoryHoldHistoryRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryHoldHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InventoryHoldHistoryRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InventoryHoldHistoryRawsOrderBy!]`): The method to
      use when ordering `InventoryHoldHistoryRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteItemFreezeTimePayload(sgqlc.types.Type):
    '''The output of our delete `ItemFreezeTime` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_freeze_time', 'deleted_item_freeze_time_node_id', 'query', 'wms_item', 'for_blast_cell_type', 'item_freeze_time_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    item_freeze_time = sgqlc.types.Field('ItemFreezeTime', graphql_name='itemFreezeTime')
    '''The `ItemFreezeTime` that was deleted by this mutation.'''

    deleted_item_freeze_time_node_id = sgqlc.types.Field(ID, graphql_name='deletedItemFreezeTimeNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_item = sgqlc.types.Field('ItemsRaw', graphql_name='wmsItem')
    '''Reads a single `ItemsRaw` that is related to this
    `ItemFreezeTime`.
    '''

    for_blast_cell_type = sgqlc.types.Field('BlastCellType', graphql_name='forBlastCellType')
    '''Reads a single `BlastCellType` that is related to this
    `ItemFreezeTime`.
    '''

    item_freeze_time_edge = sgqlc.types.Field('ItemFreezeTimesEdge', graphql_name='itemFreezeTimeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemFreezeTimesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemFreezeTime`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemFreezeTimesOrderBy!]`): The method to use when
      ordering `ItemFreezeTime`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteItemReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our delete `ItemReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_reference_codes_raw', 'deleted_item_reference_codes_raw_node_id', 'query', 'item_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    item_reference_codes_raw = sgqlc.types.Field('ItemReferenceCodesRaw', graphql_name='itemReferenceCodesRaw')
    '''The `ItemReferenceCodesRaw` that was deleted by this mutation.'''

    deleted_item_reference_codes_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedItemReferenceCodesRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    item_reference_codes_raw_edge = sgqlc.types.Field('ItemReferenceCodesRawsEdge', graphql_name='itemReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemReferenceCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `ItemReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteItemShortCategoryNamePayload(sgqlc.types.Type):
    '''The output of our delete `ItemShortCategoryName` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_short_category_name', 'deleted_item_short_category_name_node_id', 'query', 'wms_item', 'item_short_category_name_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    item_short_category_name = sgqlc.types.Field('ItemShortCategoryName', graphql_name='itemShortCategoryName')
    '''The `ItemShortCategoryName` that was deleted by this mutation.'''

    deleted_item_short_category_name_node_id = sgqlc.types.Field(ID, graphql_name='deletedItemShortCategoryNameNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_item = sgqlc.types.Field('ItemsRaw', graphql_name='wmsItem')
    '''Reads a single `ItemsRaw` that is related to this
    `ItemShortCategoryName`.
    '''

    item_short_category_name_edge = sgqlc.types.Field('ItemShortCategoryNamesEdge', graphql_name='itemShortCategoryNameEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemShortCategoryNamesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemShortCategoryName`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemShortCategoryNamesOrderBy!]`): The method to
      use when ordering `ItemShortCategoryName`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteItemsRawPayload(sgqlc.types.Type):
    '''The output of our delete `ItemsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'items_raw', 'deleted_items_raw_node_id', 'query', 'items_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    items_raw = sgqlc.types.Field('ItemsRaw', graphql_name='itemsRaw')
    '''The `ItemsRaw` that was deleted by this mutation.'''

    deleted_items_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedItemsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    items_raw_edge = sgqlc.types.Field('ItemsRawsEdge', graphql_name='itemsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemsRawsOrderBy!]`): The method to use when
      ordering `ItemsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteLotReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our delete `LotReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lot_reference_codes_raw', 'deleted_lot_reference_codes_raw_node_id', 'query', 'lot_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    lot_reference_codes_raw = sgqlc.types.Field('LotReferenceCodesRaw', graphql_name='lotReferenceCodesRaw')
    '''The `LotReferenceCodesRaw` that was deleted by this mutation.'''

    deleted_lot_reference_codes_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedLotReferenceCodesRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    lot_reference_codes_raw_edge = sgqlc.types.Field('LotReferenceCodesRawsEdge', graphql_name='lotReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `LotReferenceCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[LotReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `LotReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteLotTransactionsRawPayload(sgqlc.types.Type):
    '''The output of our delete `LotTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lot_transactions_raw', 'deleted_lot_transactions_raw_node_id', 'query', 'lot_transactions_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    lot_transactions_raw = sgqlc.types.Field('LotTransactionsRaw', graphql_name='lotTransactionsRaw')
    '''The `LotTransactionsRaw` that was deleted by this mutation.'''

    deleted_lot_transactions_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedLotTransactionsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    lot_transactions_raw_edge = sgqlc.types.Field('LotTransactionsRawsEdge', graphql_name='lotTransactionsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `LotTransactionsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[LotTransactionsRawsOrderBy!]`): The method to use
      when ordering `LotTransactionsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteLotsRawPayload(sgqlc.types.Type):
    '''The output of our delete `LotsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lots_raw', 'deleted_lots_raw_node_id', 'query', 'lots_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    lots_raw = sgqlc.types.Field('LotsRaw', graphql_name='lotsRaw')
    '''The `LotsRaw` that was deleted by this mutation.'''

    deleted_lots_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedLotsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    lots_raw_edge = sgqlc.types.Field('LotsRawsEdge', graphql_name='lotsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `LotsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[LotsRawsOrderBy!]`): The method to use when
      ordering `LotsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteOutboundCatchWeightRawPayload(sgqlc.types.Type):
    '''The output of our delete `OutboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_catch_weight_raw', 'deleted_outbound_catch_weight_raw_node_id', 'query', 'outbound_catch_weight_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_catch_weight_raw = sgqlc.types.Field('OutboundCatchWeightRaw', graphql_name='outboundCatchWeightRaw')
    '''The `OutboundCatchWeightRaw` that was deleted by this mutation.'''

    deleted_outbound_catch_weight_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedOutboundCatchWeightRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_catch_weight_raw_edge = sgqlc.types.Field('OutboundCatchWeightRawsEdge', graphql_name='outboundCatchWeightRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundCatchWeightRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundCatchWeightRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundCatchWeightRawsOrderBy!]`): The method to
      use when ordering `OutboundCatchWeightRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteOutboundLoadsRawPayload(sgqlc.types.Type):
    '''The output of our delete `OutboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_loads_raw', 'deleted_outbound_loads_raw_node_id', 'query', 'outbound_loads_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_loads_raw = sgqlc.types.Field('OutboundLoadsRaw', graphql_name='outboundLoadsRaw')
    '''The `OutboundLoadsRaw` that was deleted by this mutation.'''

    deleted_outbound_loads_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedOutboundLoadsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_loads_raw_edge = sgqlc.types.Field('OutboundLoadsRawsEdge', graphql_name='outboundLoadsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundLoadsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundLoadsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundLoadsRawsOrderBy!]`): The method to use
      when ordering `OutboundLoadsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteOutboundOrderCommentsRawPayload(sgqlc.types.Type):
    '''The output of our delete `OutboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_comments_raw', 'deleted_outbound_order_comments_raw_node_id', 'query', 'outbound_order_comments_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_comments_raw = sgqlc.types.Field('OutboundOrderCommentsRaw', graphql_name='outboundOrderCommentsRaw')
    '''The `OutboundOrderCommentsRaw` that was deleted by this mutation.'''

    deleted_outbound_order_comments_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedOutboundOrderCommentsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_comments_raw_edge = sgqlc.types.Field('OutboundOrderCommentsRawsEdge', graphql_name='outboundOrderCommentsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderCommentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderCommentsRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[OutboundOrderCommentsRawsOrderBy!]`): The method
      to use when ordering `OutboundOrderCommentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteOutboundOrderDetailsExecutionRawPayload(sgqlc.types.Type):
    '''The output of our delete `OutboundOrderDetailsExecutionRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_details_execution_raw', 'deleted_outbound_order_details_execution_raw_node_id', 'query', 'outbound_order_details_execution_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_details_execution_raw = sgqlc.types.Field('OutboundOrderDetailsExecutionRaw', graphql_name='outboundOrderDetailsExecutionRaw')
    '''The `OutboundOrderDetailsExecutionRaw` that was deleted by this
    mutation.
    '''

    deleted_outbound_order_details_execution_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedOutboundOrderDetailsExecutionRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_details_execution_raw_edge = sgqlc.types.Field('OutboundOrderDetailsExecutionRawsEdge', graphql_name='outboundOrderDetailsExecutionRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderDetailsExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderDetailsExecutionRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrderDetailsExecutionRawsOrderBy!]`): The
      method to use when ordering `OutboundOrderDetailsExecutionRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteOutboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our delete `OutboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_details_raw', 'deleted_outbound_order_details_raw_node_id', 'query', 'outbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_details_raw = sgqlc.types.Field('OutboundOrderDetailsRaw', graphql_name='outboundOrderDetailsRaw')
    '''The `OutboundOrderDetailsRaw` that was deleted by this mutation.'''

    deleted_outbound_order_details_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedOutboundOrderDetailsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_details_raw_edge = sgqlc.types.Field('OutboundOrderDetailsRawsEdge', graphql_name='outboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderDetailsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrderDetailsRawsOrderBy!]`): The method to
      use when ordering `OutboundOrderDetailsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteOutboundOrderReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our delete `OutboundOrderReferenceCodesRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_reference_codes_raw', 'deleted_outbound_order_reference_codes_raw_node_id', 'query', 'outbound_order_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_reference_codes_raw = sgqlc.types.Field('OutboundOrderReferenceCodesRaw', graphql_name='outboundOrderReferenceCodesRaw')
    '''The `OutboundOrderReferenceCodesRaw` that was deleted by this
    mutation.
    '''

    deleted_outbound_order_reference_codes_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedOutboundOrderReferenceCodesRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_reference_codes_raw_edge = sgqlc.types.Field('OutboundOrderReferenceCodesRawsEdge', graphql_name='outboundOrderReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderReferenceCodesRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrderReferenceCodesRawsOrderBy!]`): The
      method to use when ordering `OutboundOrderReferenceCodesRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteOutboundOrdersExecutionRawPayload(sgqlc.types.Type):
    '''The output of our delete `OutboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_orders_execution_raw', 'deleted_outbound_orders_execution_raw_node_id', 'query', 'outbound_orders_execution_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_orders_execution_raw = sgqlc.types.Field('OutboundOrdersExecutionRaw', graphql_name='outboundOrdersExecutionRaw')
    '''The `OutboundOrdersExecutionRaw` that was deleted by this
    mutation.
    '''

    deleted_outbound_orders_execution_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedOutboundOrdersExecutionRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_orders_execution_raw_edge = sgqlc.types.Field('OutboundOrdersExecutionRawsEdge', graphql_name='outboundOrdersExecutionRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrdersExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrdersExecutionRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[OutboundOrdersExecutionRawsOrderBy!]`): The method
      to use when ordering `OutboundOrdersExecutionRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteOutboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our delete `OutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_orders_raw', 'deleted_outbound_orders_raw_node_id', 'query', 'outbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_orders_raw = sgqlc.types.Field('OutboundOrdersRaw', graphql_name='outboundOrdersRaw')
    '''The `OutboundOrdersRaw` that was deleted by this mutation.'''

    deleted_outbound_orders_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedOutboundOrdersRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_orders_raw_edge = sgqlc.types.Field('OutboundOrdersRawsEdge', graphql_name='outboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrdersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrdersRawsOrderBy!]`): The method to use
      when ordering `OutboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteOutboundPalletsRawPayload(sgqlc.types.Type):
    '''The output of our delete `OutboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_pallets_raw', 'deleted_outbound_pallets_raw_node_id', 'query', 'outbound_pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_pallets_raw = sgqlc.types.Field('OutboundPalletsRaw', graphql_name='outboundPalletsRaw')
    '''The `OutboundPalletsRaw` that was deleted by this mutation.'''

    deleted_outbound_pallets_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedOutboundPalletsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_pallets_raw_edge = sgqlc.types.Field('OutboundPalletsRawsEdge', graphql_name='outboundPalletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundPalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundPalletsRawsOrderBy!]`): The method to use
      when ordering `OutboundPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteOutboundTruckLogRawPayload(sgqlc.types.Type):
    '''The output of our delete `OutboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_truck_log_raw', 'deleted_outbound_truck_log_raw_node_id', 'query', 'outbound_truck_log_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_truck_log_raw = sgqlc.types.Field('OutboundTruckLogRaw', graphql_name='outboundTruckLogRaw')
    '''The `OutboundTruckLogRaw` that was deleted by this mutation.'''

    deleted_outbound_truck_log_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedOutboundTruckLogRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_truck_log_raw_edge = sgqlc.types.Field('OutboundTruckLogRawsEdge', graphql_name='outboundTruckLogRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundTruckLogRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundTruckLogRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundTruckLogRawsOrderBy!]`): The method to use
      when ordering `OutboundTruckLogRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeletePalletHistoryRawPayload(sgqlc.types.Type):
    '''The output of our delete `PalletHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_history_raw', 'deleted_pallet_history_raw_node_id', 'query', 'pallet_history_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_history_raw = sgqlc.types.Field('PalletHistoryRaw', graphql_name='palletHistoryRaw')
    '''The `PalletHistoryRaw` that was deleted by this mutation.'''

    deleted_pallet_history_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedPalletHistoryRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_history_raw_edge = sgqlc.types.Field('PalletHistoryRawsEdge', graphql_name='palletHistoryRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletHistoryRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletHistoryRawsOrderBy!]`): The method to use
      when ordering `PalletHistoryRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeletePalletLocationsRawPayload(sgqlc.types.Type):
    '''The output of our delete `PalletLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_locations_raw', 'deleted_pallet_locations_raw_node_id', 'query', 'pallet_locations_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_locations_raw = sgqlc.types.Field('PalletLocationsRaw', graphql_name='palletLocationsRaw')
    '''The `PalletLocationsRaw` that was deleted by this mutation.'''

    deleted_pallet_locations_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedPalletLocationsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_locations_raw_edge = sgqlc.types.Field('PalletLocationsRawsEdge', graphql_name='palletLocationsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletLocationsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletLocationsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletLocationsRawsOrderBy!]`): The method to use
      when ordering `PalletLocationsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeletePalletReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our delete `PalletReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_reference_codes_raw', 'deleted_pallet_reference_codes_raw_node_id', 'query', 'pallet_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_reference_codes_raw = sgqlc.types.Field('PalletReferenceCodesRaw', graphql_name='palletReferenceCodesRaw')
    '''The `PalletReferenceCodesRaw` that was deleted by this mutation.'''

    deleted_pallet_reference_codes_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedPalletReferenceCodesRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_reference_codes_raw_edge = sgqlc.types.Field('PalletReferenceCodesRawsEdge', graphql_name='palletReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletReferenceCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `PalletReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeletePalletTransactionsRawPayload(sgqlc.types.Type):
    '''The output of our delete `PalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_transactions_raw', 'deleted_pallet_transactions_raw_node_id', 'query', 'pallet_transactions_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_transactions_raw = sgqlc.types.Field('PalletTransactionsRaw', graphql_name='palletTransactionsRaw')
    '''The `PalletTransactionsRaw` that was deleted by this mutation.'''

    deleted_pallet_transactions_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedPalletTransactionsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_transactions_raw_edge = sgqlc.types.Field('PalletTransactionsRawsEdge', graphql_name='palletTransactionsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletTransactionsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletTransactionsRawsOrderBy!]`): The method to
      use when ordering `PalletTransactionsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeletePalletsRawPayload(sgqlc.types.Type):
    '''The output of our delete `PalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallets_raw', 'deleted_pallets_raw_node_id', 'query', 'pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallets_raw = sgqlc.types.Field('PalletsRaw', graphql_name='palletsRaw')
    '''The `PalletsRaw` that was deleted by this mutation.'''

    deleted_pallets_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedPalletsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallets_raw_edge = sgqlc.types.Field('PalletsRawsEdge', graphql_name='palletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletsRawsOrderBy!]`): The method to use when
      ordering `PalletsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteSourceChannelCursorPayload(sgqlc.types.Type):
    '''The output of our delete `SourceChannelCursor` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_channel_cursor', 'deleted_cursor_node_id', 'query', 'source_channel_cursor_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source_channel_cursor = sgqlc.types.Field('SourceChannelCursor', graphql_name='sourceChannelCursor')
    '''The `SourceChannelCursor` that was deleted by this mutation.'''

    deleted_cursor_node_id = sgqlc.types.Field(ID, graphql_name='deletedCursorNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_channel_cursor_edge = sgqlc.types.Field('SourceChannelCursorsEdge', graphql_name='sourceChannelCursorEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelCursorsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `SourceChannelCursor`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourceChannelCursorsOrderBy!]`): The method to use
      when ordering `SourceChannelCursor`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteSourceChannelPayload(sgqlc.types.Type):
    '''The output of our delete `SourceChannel` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_channel', 'deleted_source_channel_node_id', 'query', 'source_by_source_slug', 'cursor', 'source_channel_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source_channel = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannel')
    '''The `SourceChannel` that was deleted by this mutation.'''

    deleted_source_channel_node_id = sgqlc.types.Field(ID, graphql_name='deletedSourceChannelNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_by_source_slug = sgqlc.types.Field('Source', graphql_name='sourceBySourceSlug')
    '''Reads a single `Source` that is related to this `SourceChannel`.'''

    cursor = sgqlc.types.Field('SourceChannelCursor', graphql_name='cursor')
    '''Reads a single `SourceChannelCursor` that is related to this
    `SourceChannel`.
    '''

    source_channel_edge = sgqlc.types.Field('SourceChannelsEdge', graphql_name='sourceChannelEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `SourceChannel`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourceChannelsOrderBy!]`): The method to use when
      ordering `SourceChannel`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteSourcePayload(sgqlc.types.Type):
    '''The output of our delete `Source` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source', 'deleted_source_node_id', 'query', 'source_type', 'source_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source = sgqlc.types.Field('Source', graphql_name='source')
    '''The `Source` that was deleted by this mutation.'''

    deleted_source_node_id = sgqlc.types.Field(ID, graphql_name='deletedSourceNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_type = sgqlc.types.Field('SourceType', graphql_name='sourceType')
    '''Reads a single `SourceType` that is related to this `Source`.'''

    source_edge = sgqlc.types.Field('SourcesEdge', graphql_name='sourceEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourcesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `Source`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourcesOrderBy!]`): The method to use when
      ordering `Source`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteSourceTypePayload(sgqlc.types.Type):
    '''The output of our delete `SourceType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_type', 'deleted_source_type_node_id', 'query', 'source_type_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source_type = sgqlc.types.Field('SourceType', graphql_name='sourceType')
    '''The `SourceType` that was deleted by this mutation.'''

    deleted_source_type_node_id = sgqlc.types.Field(ID, graphql_name='deletedSourceTypeNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_type_edge = sgqlc.types.Field('SourceTypesEdge', graphql_name='sourceTypeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceTypesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `SourceType`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourceTypesOrderBy!]`): The method to use when
      ordering `SourceType`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteStopLocationsRawPayload(sgqlc.types.Type):
    '''The output of our delete `StopLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'stop_locations_raw', 'deleted_stop_locations_raw_node_id', 'query', 'stop_locations_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    stop_locations_raw = sgqlc.types.Field('StopLocationsRaw', graphql_name='stopLocationsRaw')
    '''The `StopLocationsRaw` that was deleted by this mutation.'''

    deleted_stop_locations_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedStopLocationsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    stop_locations_raw_edge = sgqlc.types.Field('StopLocationsRawsEdge', graphql_name='stopLocationsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(StopLocationsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `StopLocationsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[StopLocationsRawsOrderBy!]`): The method to use
      when ordering `StopLocationsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteWarehouseCustomersConfigRawPayload(sgqlc.types.Type):
    '''The output of our delete `WarehouseCustomersConfigRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_customers_config_raw', 'deleted_warehouse_customers_config_raw_node_id', 'query', 'warehouse_customers_config_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    warehouse_customers_config_raw = sgqlc.types.Field('WarehouseCustomersConfigRaw', graphql_name='warehouseCustomersConfigRaw')
    '''The `WarehouseCustomersConfigRaw` that was deleted by this
    mutation.
    '''

    deleted_warehouse_customers_config_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedWarehouseCustomersConfigRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    warehouse_customers_config_raw_edge = sgqlc.types.Field('WarehouseCustomersConfigRawsEdge', graphql_name='warehouseCustomersConfigRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehouseCustomersConfigRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WarehouseCustomersConfigRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[WarehouseCustomersConfigRawsOrderBy!]`): The
      method to use when ordering `WarehouseCustomersConfigRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteWarehouseCustomersRawPayload(sgqlc.types.Type):
    '''The output of our delete `WarehouseCustomersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_customers_raw', 'deleted_warehouse_customers_raw_node_id', 'query', 'warehouse_customers_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    warehouse_customers_raw = sgqlc.types.Field('WarehouseCustomersRaw', graphql_name='warehouseCustomersRaw')
    '''The `WarehouseCustomersRaw` that was deleted by this mutation.'''

    deleted_warehouse_customers_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedWarehouseCustomersRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    warehouse_customers_raw_edge = sgqlc.types.Field('WarehouseCustomersRawsEdge', graphql_name='warehouseCustomersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehouseCustomersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WarehouseCustomersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WarehouseCustomersRawsOrderBy!]`): The method to
      use when ordering `WarehouseCustomersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteWarehousePickActivitiesRawPayload(sgqlc.types.Type):
    '''The output of our delete `WarehousePickActivitiesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_pick_activities_raw', 'deleted_warehouse_pick_activities_raw_node_id', 'query', 'warehouse_pick_activities_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    warehouse_pick_activities_raw = sgqlc.types.Field('WarehousePickActivitiesRaw', graphql_name='warehousePickActivitiesRaw')
    '''The `WarehousePickActivitiesRaw` that was deleted by this
    mutation.
    '''

    deleted_warehouse_pick_activities_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedWarehousePickActivitiesRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    warehouse_pick_activities_raw_edge = sgqlc.types.Field('WarehousePickActivitiesRawsEdge', graphql_name='warehousePickActivitiesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehousePickActivitiesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WarehousePickActivitiesRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[WarehousePickActivitiesRawsOrderBy!]`): The method
      to use when ordering `WarehousePickActivitiesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteWmsFacilityDefaultsRawPayload(sgqlc.types.Type):
    '''The output of our delete `WmsFacilityDefaultsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wms_facility_defaults_raw', 'deleted_wms_facility_defaults_raw_node_id', 'query', 'wms_facility_defaults_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    wms_facility_defaults_raw = sgqlc.types.Field('WmsFacilityDefaultsRaw', graphql_name='wmsFacilityDefaultsRaw')
    '''The `WmsFacilityDefaultsRaw` that was deleted by this mutation.'''

    deleted_wms_facility_defaults_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedWmsFacilityDefaultsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_facility_defaults_raw_edge = sgqlc.types.Field('WmsFacilityDefaultsRawsEdge', graphql_name='wmsFacilityDefaultsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WmsFacilityDefaultsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WmsFacilityDefaultsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WmsFacilityDefaultsRawsOrderBy!]`): The method to
      use when ordering `WmsFacilityDefaultsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DeleteWmsSystemPayload(sgqlc.types.Type):
    '''The output of our delete `WmsSystem` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wms_system', 'deleted_wms_system_node_id', 'query', 'wms_system_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    wms_system = sgqlc.types.Field('WmsSystem', graphql_name='wmsSystem')
    '''The `WmsSystem` that was deleted by this mutation.'''

    deleted_wms_system_node_id = sgqlc.types.Field(ID, graphql_name='deletedWmsSystemNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_system_edge = sgqlc.types.Field('WmsSystemsEdge', graphql_name='wmsSystemEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WmsSystemsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WmsSystem`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WmsSystemsOrderBy!]`): The method to use when
      ordering `WmsSystem`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteWoodenPalletTransactionsRawPayload(sgqlc.types.Type):
    '''The output of our delete `WoodenPalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wooden_pallet_transactions_raw', 'deleted_wooden_pallet_transactions_raw_node_id', 'query', 'wooden_pallet_transactions_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    wooden_pallet_transactions_raw = sgqlc.types.Field('WoodenPalletTransactionsRaw', graphql_name='woodenPalletTransactionsRaw')
    '''The `WoodenPalletTransactionsRaw` that was deleted by this
    mutation.
    '''

    deleted_wooden_pallet_transactions_raw_node_id = sgqlc.types.Field(ID, graphql_name='deletedWoodenPalletTransactionsRawNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wooden_pallet_transactions_raw_edge = sgqlc.types.Field('WoodenPalletTransactionsRawsEdge', graphql_name='woodenPalletTransactionsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WoodenPalletTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WoodenPalletTransactionsRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[WoodenPalletTransactionsRawsOrderBy!]`): The
      method to use when ordering `WoodenPalletTransactionsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class DeleteWorkdayCostCenterPayload(sgqlc.types.Type):
    '''The output of our delete `WorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'workday_cost_center', 'deleted_workday_cost_center_node_id', 'query', 'workday_cost_center_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    workday_cost_center = sgqlc.types.Field('WorkdayCostCenter', graphql_name='workdayCostCenter')
    '''The `WorkdayCostCenter` that was deleted by this mutation.'''

    deleted_workday_cost_center_node_id = sgqlc.types.Field(ID, graphql_name='deletedWorkdayCostCenterNodeId')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    workday_cost_center_edge = sgqlc.types.Field('WorkdayCostCentersEdge', graphql_name='workdayCostCenterEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WorkdayCostCenter`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WorkdayCostCentersOrderBy!]`): The method to use
      when ordering `WorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class DetectPalletsByLookAheadPayload(sgqlc.types.Type):
    '''The output of our `detectPalletsByLookAhead` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'big_int', 'query')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    big_int = sgqlc.types.Field(BigInt, graphql_name='bigInt')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''



class DetectPalletsByLookBehindPayload(sgqlc.types.Type):
    '''The output of our `detectPalletsByLookBehind` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'big_int', 'query')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    big_int = sgqlc.types.Field(BigInt, graphql_name='bigInt')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''



class Driver(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at', 'deleted_at', '_version', '_id')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    name = sgqlc.types.Field(String, graphql_name='name')

    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')

    license_number = sgqlc.types.Field(String, graphql_name='licenseNumber')

    license_state_of_issue = sgqlc.types.Field(String, graphql_name='licenseStateOfIssue')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class DriversConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Driver` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Driver))), graphql_name='nodes')
    '''A list of `Driver` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('DriversEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Driver` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Driver` you could get from the connection.'''



class DriversEdge(sgqlc.types.Type):
    '''A `Driver` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(Driver), graphql_name='node')
    '''The `Driver` at the end of the edge.'''



class DriversMaster(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'turvo_driver_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')

    turvo_driver_id = sgqlc.types.Field(Int, graphql_name='turvoDriverId')

    name = sgqlc.types.Field(String, graphql_name='name')

    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')

    license_number = sgqlc.types.Field(String, graphql_name='licenseNumber')

    license_state_of_issue = sgqlc.types.Field(String, graphql_name='licenseStateOfIssue')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class DriversMastersConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `DriversMaster` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(DriversMaster))), graphql_name='nodes')
    '''A list of `DriversMaster` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('DriversMastersEdge'))), graphql_name='edges')
    '''A list of edges which contains the `DriversMaster` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `DriversMaster` you could get from the
    connection.
    '''



class DriversMastersEdge(sgqlc.types.Type):
    '''A `DriversMaster` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(DriversMaster), graphql_name='node')
    '''The `DriversMaster` at the end of the edge.'''



class DriversRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `DriversRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('DriversRaw'))), graphql_name='nodes')
    '''A list of `DriversRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('DriversRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `DriversRaw` and cursor to aid
    in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `DriversRaw` you could get from the connection.'''



class DriversRawsEdge(sgqlc.types.Type):
    '''A `DriversRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('DriversRaw'), graphql_name='node')
    '''The `DriversRaw` at the end of the edge.'''



class EdgeNodeChannelsManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `SourceChannel` values, with data from
    `EdgeNodeSourceChannelAccess`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannel'))), graphql_name='nodes')
    '''A list of `SourceChannel` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('EdgeNodeChannelsManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `SourceChannel`, info from the
    `EdgeNodeSourceChannelAccess`, and the cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `SourceChannel` you could get from the
    connection.
    '''



class EdgeNodeChannelsManyToManyEdge(sgqlc.types.Type):
    '''A `SourceChannel` edge in the connection, with data from
    `EdgeNodeSourceChannelAccess`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'edge_node_source_channel_accesses_by_source_channel_name')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('SourceChannel'), graphql_name='node')
    '''The `SourceChannel` at the end of the edge.'''

    edge_node_source_channel_accesses_by_source_channel_name = sgqlc.types.Field(sgqlc.types.non_null('EdgeNodeSourceChannelAccessesConnection'), graphql_name='edgeNodeSourceChannelAccessesBySourceChannelName', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(EdgeNodeSourceChannelAccessCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(EdgeNodeSourceChannelAccessFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `EdgeNodeSourceChannelAccess`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[EdgeNodeSourceChannelAccessesOrderBy!]`): The
      method to use when ordering `EdgeNodeSourceChannelAccess`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`EdgeNodeSourceChannelAccessCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`EdgeNodeSourceChannelAccessFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''



class EdgeNodeSourceChannelAccessesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `EdgeNodeSourceChannelAccess` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('EdgeNodeSourceChannelAccess'))), graphql_name='nodes')
    '''A list of `EdgeNodeSourceChannelAccess` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('EdgeNodeSourceChannelAccessesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `EdgeNodeSourceChannelAccess`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `EdgeNodeSourceChannelAccess` you could get
    from the connection.
    '''



class EdgeNodeSourceChannelAccessesEdge(sgqlc.types.Type):
    '''A `EdgeNodeSourceChannelAccess` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('EdgeNodeSourceChannelAccess'), graphql_name='node')
    '''The `EdgeNodeSourceChannelAccess` at the end of the edge.'''



class EdgeNodesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `EdgeNode` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('EdgeNode'))), graphql_name='nodes')
    '''A list of `EdgeNode` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('EdgeNodesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `EdgeNode` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `EdgeNode` you could get from the connection.'''



class EdgeNodesEdge(sgqlc.types.Type):
    '''A `EdgeNode` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('EdgeNode'), graphql_name='node')
    '''The `EdgeNode` at the end of the edge.'''



class ExpectedInboundOrderDetail(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'inbound_order_id', 'item_id', 'lot_id', 'facility_id', 'source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference')
    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    expiration_date = sgqlc.types.Field(String, graphql_name='expirationDate')

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')

    notes = sgqlc.types.Field(String, graphql_name='notes')

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    id = sgqlc.types.Field(String, graphql_name='id')

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')



class ExpectedInboundOrderDetailsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ExpectedInboundOrderDetail` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedInboundOrderDetail))), graphql_name='nodes')
    '''A list of `ExpectedInboundOrderDetail` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrderDetailsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ExpectedInboundOrderDetail`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ExpectedInboundOrderDetail` you could get from
    the connection.
    '''



class ExpectedInboundOrderDetailsEdge(sgqlc.types.Type):
    '''A `ExpectedInboundOrderDetail` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(ExpectedInboundOrderDetail), graphql_name='node')
    '''The `ExpectedInboundOrderDetail` at the end of the edge.'''



class ExpectedInboundOrderDetailsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ExpectedInboundOrderDetailsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrderDetailsRaw'))), graphql_name='nodes')
    '''A list of `ExpectedInboundOrderDetailsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrderDetailsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the
    `ExpectedInboundOrderDetailsRaw` and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ExpectedInboundOrderDetailsRaw` you could get
    from the connection.
    '''



class ExpectedInboundOrderDetailsRawsEdge(sgqlc.types.Type):
    '''A `ExpectedInboundOrderDetailsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('ExpectedInboundOrderDetailsRaw'), graphql_name='node')
    '''The `ExpectedInboundOrderDetailsRaw` at the end of the edge.'''



class ExpectedInboundOrdersRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ExpectedInboundOrdersRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrdersRaw'))), graphql_name='nodes')
    '''A list of `ExpectedInboundOrdersRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedInboundOrdersRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ExpectedInboundOrdersRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ExpectedInboundOrdersRaw` you could get from
    the connection.
    '''



class ExpectedInboundOrdersRawsEdge(sgqlc.types.Type):
    '''A `ExpectedInboundOrdersRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('ExpectedInboundOrdersRaw'), graphql_name='node')
    '''The `ExpectedInboundOrdersRaw` at the end of the edge.'''



class ExpectedOutboundOrder(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('outbound_order_id', 'facility_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'requested_pickup_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id')
    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    id = sgqlc.types.Field(String, graphql_name='id')



class ExpectedOutboundOrderDetail(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'outbound_order_id', 'item_id', 'lot_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'lot_reference', 'customer_lot_reference')
    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')

    notes = sgqlc.types.Field(String, graphql_name='notes')

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')



class ExpectedOutboundOrderDetailsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ExpectedOutboundOrderDetail` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrderDetail))), graphql_name='nodes')
    '''A list of `ExpectedOutboundOrderDetail` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrderDetailsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ExpectedOutboundOrderDetail`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ExpectedOutboundOrderDetail` you could get
    from the connection.
    '''



class ExpectedOutboundOrderDetailsEdge(sgqlc.types.Type):
    '''A `ExpectedOutboundOrderDetail` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(ExpectedOutboundOrderDetail), graphql_name='node')
    '''The `ExpectedOutboundOrderDetail` at the end of the edge.'''



class ExpectedOutboundOrderDetailsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ExpectedOutboundOrderDetailsRaw`
    values.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrderDetailsRaw'))), graphql_name='nodes')
    '''A list of `ExpectedOutboundOrderDetailsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrderDetailsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the
    `ExpectedOutboundOrderDetailsRaw` and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ExpectedOutboundOrderDetailsRaw` you could get
    from the connection.
    '''



class ExpectedOutboundOrderDetailsRawsEdge(sgqlc.types.Type):
    '''A `ExpectedOutboundOrderDetailsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('ExpectedOutboundOrderDetailsRaw'), graphql_name='node')
    '''The `ExpectedOutboundOrderDetailsRaw` at the end of the edge.'''



class ExpectedOutboundOrdersConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ExpectedOutboundOrder` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrder))), graphql_name='nodes')
    '''A list of `ExpectedOutboundOrder` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrdersEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ExpectedOutboundOrder` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ExpectedOutboundOrder` you could get from the
    connection.
    '''



class ExpectedOutboundOrdersEdge(sgqlc.types.Type):
    '''A `ExpectedOutboundOrder` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(ExpectedOutboundOrder), graphql_name='node')
    '''The `ExpectedOutboundOrder` at the end of the edge.'''



class ExpectedOutboundOrdersRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ExpectedOutboundOrdersRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrdersRaw'))), graphql_name='nodes')
    '''A list of `ExpectedOutboundOrdersRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedOutboundOrdersRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ExpectedOutboundOrdersRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ExpectedOutboundOrdersRaw` you could get from
    the connection.
    '''



class ExpectedOutboundOrdersRawsEdge(sgqlc.types.Type):
    '''A `ExpectedOutboundOrdersRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('ExpectedOutboundOrdersRaw'), graphql_name='node')
    '''The `ExpectedOutboundOrdersRaw` at the end of the edge.'''



class ExpectedPalletsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ExpectedPalletsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedPalletsRaw'))), graphql_name='nodes')
    '''A list of `ExpectedPalletsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExpectedPalletsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ExpectedPalletsRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ExpectedPalletsRaw` you could get from the
    connection.
    '''



class ExpectedPalletsRawsEdge(sgqlc.types.Type):
    '''A `ExpectedPalletsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('ExpectedPalletsRaw'), graphql_name='node')
    '''The `ExpectedPalletsRaw` at the end of the edge.'''



class FacilitiesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Facility` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Facility'))), graphql_name='nodes')
    '''A list of `Facility` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilitiesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Facility` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Facility` you could get from the connection.'''



class FacilitiesEdge(sgqlc.types.Type):
    '''A `Facility` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('Facility'), graphql_name='node')
    '''The `Facility` at the end of the edge.'''



class FacilitiesTestsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `FacilitiesTest` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilitiesTest'))), graphql_name='nodes')
    '''A list of `FacilitiesTest` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilitiesTestsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `FacilitiesTest` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `FacilitiesTest` you could get from the
    connection.
    '''



class FacilitiesTestsEdge(sgqlc.types.Type):
    '''A `FacilitiesTest` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('FacilitiesTest'), graphql_name='node')
    '''The `FacilitiesTest` at the end of the edge.'''



class FacilityBlastCellTypesByBlastCellFacilityIdAndBlastCellTypeIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCellType` values, with data from
    `BlastCell`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellType'))), graphql_name='nodes')
    '''A list of `BlastCellType` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilityBlastCellTypesByBlastCellFacilityIdAndBlastCellTypeIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCellType`, info from the
    `BlastCell`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCellType` you could get from the
    connection.
    '''



class FacilityBlastCellTypesByBlastCellFacilityIdAndBlastCellTypeIdManyToManyEdge(sgqlc.types.Type):
    '''A `BlastCellType` edge in the connection, with data from
    `BlastCell`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_cells')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCellType'), graphql_name='node')
    '''The `BlastCellType` at the end of the edge.'''

    blast_cells = sgqlc.types.Field(sgqlc.types.non_null(BlastCellsConnection), graphql_name='blastCells', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCell`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCellFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''



class FacilityCostCentersManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `WorkdayCostCenter` values, with data
    from `FacilityWorkdayCostCenter`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WorkdayCostCenter'))), graphql_name='nodes')
    '''A list of `WorkdayCostCenter` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilityCostCentersManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `WorkdayCostCenter`, info from
    the `FacilityWorkdayCostCenter`, and the cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `WorkdayCostCenter` you could get from the
    connection.
    '''



class FacilityCostCentersManyToManyEdge(sgqlc.types.Type):
    '''A `WorkdayCostCenter` edge in the connection, with data from
    `FacilityWorkdayCostCenter`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'facility_workday_cost_centers_by_cost_center_id')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('WorkdayCostCenter'), graphql_name='node')
    '''The `WorkdayCostCenter` at the end of the edge.'''

    facility_workday_cost_centers_by_cost_center_id = sgqlc.types.Field(sgqlc.types.non_null('FacilityWorkdayCostCentersConnection'), graphql_name='facilityWorkdayCostCentersByCostCenterId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilityWorkdayCostCenterCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityWorkdayCostCenterFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `FacilityWorkdayCostCenter`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilityWorkdayCostCentersOrderBy!]`): The method
      to use when ordering `FacilityWorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilityWorkdayCostCenterCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`FacilityWorkdayCostCenterFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''



class FacilityCycleStat(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('blast_cell_id', 'load_duration_hours_min', 'load_duration_hours_max', 'load_duration_hours_avg', 'after_load_idle_duration_hours_min', 'after_load_idle_duration_hours_max', 'after_load_idle_duration_hours_avg', 'refrigeration_duration_hours_min', 'refrigeration_duration_hours_max', 'refrigeration_duration_hours_avg', 'before_unload_idle_duration_hours_min', 'before_unload_idle_duration_hours_max', 'before_unload_idle_duration_hours_avg', 'unload_duration_hours_min', 'unload_duration_hours_max', 'unload_duration_hours_avg', 'overall_duration_hours_min', 'overall_duration_hours_max', 'overall_duration_hours_avg')
    blast_cell_id = sgqlc.types.Field(Int, graphql_name='blastCellId')

    load_duration_hours_min = sgqlc.types.Field(Float, graphql_name='loadDurationHoursMin')

    load_duration_hours_max = sgqlc.types.Field(Float, graphql_name='loadDurationHoursMax')

    load_duration_hours_avg = sgqlc.types.Field(Float, graphql_name='loadDurationHoursAvg')

    after_load_idle_duration_hours_min = sgqlc.types.Field(Float, graphql_name='afterLoadIdleDurationHoursMin')

    after_load_idle_duration_hours_max = sgqlc.types.Field(Float, graphql_name='afterLoadIdleDurationHoursMax')

    after_load_idle_duration_hours_avg = sgqlc.types.Field(Float, graphql_name='afterLoadIdleDurationHoursAvg')

    refrigeration_duration_hours_min = sgqlc.types.Field(Float, graphql_name='refrigerationDurationHoursMin')

    refrigeration_duration_hours_max = sgqlc.types.Field(Float, graphql_name='refrigerationDurationHoursMax')

    refrigeration_duration_hours_avg = sgqlc.types.Field(Float, graphql_name='refrigerationDurationHoursAvg')

    before_unload_idle_duration_hours_min = sgqlc.types.Field(Float, graphql_name='beforeUnloadIdleDurationHoursMin')

    before_unload_idle_duration_hours_max = sgqlc.types.Field(Float, graphql_name='beforeUnloadIdleDurationHoursMax')

    before_unload_idle_duration_hours_avg = sgqlc.types.Field(Float, graphql_name='beforeUnloadIdleDurationHoursAvg')

    unload_duration_hours_min = sgqlc.types.Field(Float, graphql_name='unloadDurationHoursMin')

    unload_duration_hours_max = sgqlc.types.Field(Float, graphql_name='unloadDurationHoursMax')

    unload_duration_hours_avg = sgqlc.types.Field(Float, graphql_name='unloadDurationHoursAvg')

    overall_duration_hours_min = sgqlc.types.Field(Float, graphql_name='overallDurationHoursMin')

    overall_duration_hours_max = sgqlc.types.Field(Float, graphql_name='overallDurationHoursMax')

    overall_duration_hours_avg = sgqlc.types.Field(Float, graphql_name='overallDurationHoursAvg')



class FacilityCycleStatsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `FacilityCycleStat` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(FacilityCycleStat))), graphql_name='nodes')
    '''A list of `FacilityCycleStat` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilityCycleStatsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `FacilityCycleStat` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `FacilityCycleStat` you could get from the
    connection.
    '''



class FacilityCycleStatsEdge(sgqlc.types.Type):
    '''A `FacilityCycleStat` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(FacilityCycleStat), graphql_name='node')
    '''The `FacilityCycleStat` at the end of the edge.'''



class FacilityGroupingsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `FacilityGrouping` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilityGrouping'))), graphql_name='nodes')
    '''A list of `FacilityGrouping` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilityGroupingsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `FacilityGrouping` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `FacilityGrouping` you could get from the
    connection.
    '''



class FacilityGroupingsEdge(sgqlc.types.Type):
    '''A `FacilityGrouping` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('FacilityGrouping'), graphql_name='node')
    '''The `FacilityGrouping` at the end of the edge.'''



class FacilityWarehouseLink(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('facility_id', 'warehouse_facility_id', 'wms_system_id', 'source_system_id', 'salesforce_warehouse_code', 'facility')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    wms_system_id = sgqlc.types.Field(Int, graphql_name='wmsSystemId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    salesforce_warehouse_code = sgqlc.types.Field(String, graphql_name='salesforceWarehouseCode')

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''Reads a single `Facility` that is related to this
    `FacilityWarehouseLink`.
    '''



class FacilityWarehouseLinksConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `FacilityWarehouseLink` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWarehouseLink))), graphql_name='nodes')
    '''A list of `FacilityWarehouseLink` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilityWarehouseLinksEdge'))), graphql_name='edges')
    '''A list of edges which contains the `FacilityWarehouseLink` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `FacilityWarehouseLink` you could get from the
    connection.
    '''



class FacilityWarehouseLinksEdge(sgqlc.types.Type):
    '''A `FacilityWarehouseLink` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(FacilityWarehouseLink), graphql_name='node')
    '''The `FacilityWarehouseLink` at the end of the edge.'''



class FacilityWorkdayCostCentersConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `FacilityWorkdayCostCenter` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilityWorkdayCostCenter'))), graphql_name='nodes')
    '''A list of `FacilityWorkdayCostCenter` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FacilityWorkdayCostCentersEdge'))), graphql_name='edges')
    '''A list of edges which contains the `FacilityWorkdayCostCenter` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `FacilityWorkdayCostCenter` you could get from
    the connection.
    '''



class FacilityWorkdayCostCentersEdge(sgqlc.types.Type):
    '''A `FacilityWorkdayCostCenter` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('FacilityWorkdayCostCenter'), graphql_name='node')
    '''The `FacilityWorkdayCostCenter` at the end of the edge.'''



class FetchHistoricalPalletsForCyclePayload(sgqlc.types.Type):
    '''The output of our `fetchHistoricalPalletsForCycle` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'historical_blast_cycle_pallets', 'query')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    historical_blast_cycle_pallets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HistoricalBlastCyclePallet')), graphql_name='historicalBlastCyclePallets')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''



class FetchUnloadedPalletsForCyclePayload(sgqlc.types.Type):
    '''The output of our `fetchUnloadedPalletsForCycle` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'historical_blast_cycle_pallets', 'query')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    historical_blast_cycle_pallets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HistoricalBlastCyclePallet')), graphql_name='historicalBlastCyclePallets')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''



class HistoricalBlastCyclePallet(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('pallet', 'histrecord')
    pallet = sgqlc.types.Field('PalletsRaw', graphql_name='pallet')

    histrecord = sgqlc.types.Field('PalletHistoryRaw', graphql_name='histrecord')



class HoldCode(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'warehouse_customer_id', 'customer_enterprise_id', 'facility_id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', 'updated_at', 'deleted_at', 'created_at', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')

    hold_code_description = sgqlc.types.Field(String, graphql_name='holdCodeDescription')

    is_facility_hold_code = sgqlc.types.Field(Boolean, graphql_name='isFacilityHoldCode')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class HoldCodesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `HoldCode` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(HoldCode))), graphql_name='nodes')
    '''A list of `HoldCode` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HoldCodesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `HoldCode` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `HoldCode` you could get from the connection.'''



class HoldCodesEdge(sgqlc.types.Type):
    '''A `HoldCode` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(HoldCode), graphql_name='node')
    '''The `HoldCode` at the end of the edge.'''



class HoldCodesPerCustomer(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'warehouse_customer_id', 'customer_enterprise_id', 'facility_id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', 'updated_at', 'deleted_at', 'created_at')
    id = sgqlc.types.Field(String, graphql_name='id')

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')

    hold_code_description = sgqlc.types.Field(String, graphql_name='holdCodeDescription')

    is_facility_hold_code = sgqlc.types.Field(Boolean, graphql_name='isFacilityHoldCode')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')



class HoldCodesPerCustomersConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `HoldCodesPerCustomer` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(HoldCodesPerCustomer))), graphql_name='nodes')
    '''A list of `HoldCodesPerCustomer` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HoldCodesPerCustomersEdge'))), graphql_name='edges')
    '''A list of edges which contains the `HoldCodesPerCustomer` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `HoldCodesPerCustomer` you could get from the
    connection.
    '''



class HoldCodesPerCustomersEdge(sgqlc.types.Type):
    '''A `HoldCodesPerCustomer` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(HoldCodesPerCustomer), graphql_name='node')
    '''The `HoldCodesPerCustomer` at the end of the edge.'''



class HoldCodesRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `HoldCodesRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HoldCodesRaw'))), graphql_name='nodes')
    '''A list of `HoldCodesRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HoldCodesRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `HoldCodesRaw` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `HoldCodesRaw` you could get from the
    connection.
    '''



class HoldCodesRawsEdge(sgqlc.types.Type):
    '''A `HoldCodesRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('HoldCodesRaw'), graphql_name='node')
    '''The `HoldCodesRaw` at the end of the edge.'''



class HppRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `HppRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HppRaw'))), graphql_name='nodes')
    '''A list of `HppRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HppRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `HppRaw` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `HppRaw` you could get from the connection.'''



class HppRawsEdge(sgqlc.types.Type):
    '''A `HppRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('HppRaw'), graphql_name='node')
    '''The `HppRaw` at the end of the edge.'''



class InboundCatchWeightRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundCatchWeightRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundCatchWeightRaw'))), graphql_name='nodes')
    '''A list of `InboundCatchWeightRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundCatchWeightRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundCatchWeightRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundCatchWeightRaw` you could get from the
    connection.
    '''



class InboundCatchWeightRawsEdge(sgqlc.types.Type):
    '''A `InboundCatchWeightRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InboundCatchWeightRaw'), graphql_name='node')
    '''The `InboundCatchWeightRaw` at the end of the edge.'''



class InboundLoad(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('facility_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'source_system_id', 'warehouse_facility_id', 'load_reference_number', 'primary_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'received_datetime', 'arrival_datetime', 'dock_in_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'appointment_comment', 'purchase_order_number', 'is_archived', 'load_status', 'pallets')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    id = sgqlc.types.Field(String, graphql_name='id')

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')

    load_status = sgqlc.types.Field(String, graphql_name='loadStatus')

    pallets = sgqlc.types.Field(sgqlc.types.non_null('PalletsRawsConnection'), graphql_name='pallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('filter', sgqlc.types.Arg(PalletsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `filter` (`PalletsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class InboundLoadsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundLoad` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(InboundLoad))), graphql_name='nodes')
    '''A list of `InboundLoad` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundLoadsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundLoad` and cursor to aid
    in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundLoad` you could get from the
    connection.
    '''



class InboundLoadsEdge(sgqlc.types.Type):
    '''A `InboundLoad` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(InboundLoad), graphql_name='node')
    '''The `InboundLoad` at the end of the edge.'''



class InboundLoadsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundLoadsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundLoadsRaw'))), graphql_name='nodes')
    '''A list of `InboundLoadsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundLoadsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundLoadsRaw` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundLoadsRaw` you could get from the
    connection.
    '''



class InboundLoadsRawsEdge(sgqlc.types.Type):
    '''A `InboundLoadsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InboundLoadsRaw'), graphql_name='node')
    '''The `InboundLoadsRaw` at the end of the edge.'''



class InboundOrder(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'carrier_id', 'origin_party_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'facility_id', 'supplier_id', 'inbound_load_id', 'load_reference_number', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'carrier_code', 'quantity', 'warehouse_gross_weight', 'origin_party_code', 'customer_code', 'weight_uom', 'is_quick_receive', 'order_confirmation_datetime', 'notes', 'purchase_order_number', 'received_datetime', 'scan_finish_datetime', 'scan_start_datetime', 'supplier_code', 'transportation_method', 'edi_type', 'version_number', 'finish_datetime', 'comments', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'signin_datetime', 'signout_datetime', 'start_datetime', 'origin_location_code', 'origin_location_name', 'origin_address_line1', 'origin_address_line2', 'origin_address_line3', 'origin_city', 'origin_state', 'origin_country', 'origin_zip', 'origin_email', 'origin_phone', 'origin_fax', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_canceled', 'is_transfer_order', 'transfer_warehouse_customer_id', 'transfer_customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')

    carrier_id = sgqlc.types.Field(String, graphql_name='carrierId')

    origin_party_id = sgqlc.types.Field(String, graphql_name='originPartyId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    supplier_id = sgqlc.types.Field(String, graphql_name='supplierId')

    inbound_load_id = sgqlc.types.Field(String, graphql_name='inboundLoadId')

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')

    origin_party_code = sgqlc.types.Field(String, graphql_name='originPartyCode')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')

    is_quick_receive = sgqlc.types.Field(Boolean, graphql_name='isQuickReceive')

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')

    notes = sgqlc.types.Field(String, graphql_name='notes')

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')

    scan_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='scanFinishDatetime')

    scan_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scanStartDatetime')

    supplier_code = sgqlc.types.Field(String, graphql_name='supplierCode')

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')

    edi_type = sgqlc.types.Field(String, graphql_name='ediType')

    version_number = sgqlc.types.Field(String, graphql_name='versionNumber')

    finish_datetime = sgqlc.types.Field(Datetime, graphql_name='finishDatetime')

    comments = sgqlc.types.Field(String, graphql_name='comments')

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')

    start_datetime = sgqlc.types.Field(Datetime, graphql_name='startDatetime')

    origin_location_code = sgqlc.types.Field(String, graphql_name='originLocationCode')

    origin_location_name = sgqlc.types.Field(String, graphql_name='originLocationName')

    origin_address_line1 = sgqlc.types.Field(String, graphql_name='originAddressLine1')

    origin_address_line2 = sgqlc.types.Field(String, graphql_name='originAddressLine2')

    origin_address_line3 = sgqlc.types.Field(String, graphql_name='originAddressLine3')

    origin_city = sgqlc.types.Field(String, graphql_name='originCity')

    origin_state = sgqlc.types.Field(String, graphql_name='originState')

    origin_country = sgqlc.types.Field(String, graphql_name='originCountry')

    origin_zip = sgqlc.types.Field(String, graphql_name='originZip')

    origin_email = sgqlc.types.Field(String, graphql_name='originEmail')

    origin_phone = sgqlc.types.Field(String, graphql_name='originPhone')

    origin_fax = sgqlc.types.Field(String, graphql_name='originFax')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')

    transfer_warehouse_customer_id = sgqlc.types.Field(String, graphql_name='transferWarehouseCustomerId')

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')



class InboundOrderCommentsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundOrderCommentsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderCommentsRaw'))), graphql_name='nodes')
    '''A list of `InboundOrderCommentsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderCommentsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundOrderCommentsRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundOrderCommentsRaw` you could get from
    the connection.
    '''



class InboundOrderCommentsRawsEdge(sgqlc.types.Type):
    '''A `InboundOrderCommentsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InboundOrderCommentsRaw'), graphql_name='node')
    '''The `InboundOrderCommentsRaw` at the end of the edge.'''



class InboundOrderDetail(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'inbound_order_id', 'item_id', 'lot_id', 'facility_id', 'source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference')
    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    expiration_date = sgqlc.types.Field(String, graphql_name='expirationDate')

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')

    notes = sgqlc.types.Field(String, graphql_name='notes')

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    id = sgqlc.types.Field(String, graphql_name='id')

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')



class InboundOrderDetailReferenceCodesRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundOrderDetailReferenceCodesRaw`
    values.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailReferenceCodesRaw'))), graphql_name='nodes')
    '''A list of `InboundOrderDetailReferenceCodesRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailReferenceCodesRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the
    `InboundOrderDetailReferenceCodesRaw` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundOrderDetailReferenceCodesRaw` you could
    get from the connection.
    '''



class InboundOrderDetailReferenceCodesRawsEdge(sgqlc.types.Type):
    '''A `InboundOrderDetailReferenceCodesRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InboundOrderDetailReferenceCodesRaw'), graphql_name='node')
    '''The `InboundOrderDetailReferenceCodesRaw` at the end of the edge.'''



class InboundOrderDetailsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundOrderDetail` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderDetail))), graphql_name='nodes')
    '''A list of `InboundOrderDetail` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundOrderDetail` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundOrderDetail` you could get from the
    connection.
    '''



class InboundOrderDetailsEdge(sgqlc.types.Type):
    '''A `InboundOrderDetail` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(InboundOrderDetail), graphql_name='node')
    '''The `InboundOrderDetail` at the end of the edge.'''



class InboundOrderDetailsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundOrderDetailsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailsRaw'))), graphql_name='nodes')
    '''A list of `InboundOrderDetailsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderDetailsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundOrderDetailsRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundOrderDetailsRaw` you could get from the
    connection.
    '''



class InboundOrderDetailsRawsEdge(sgqlc.types.Type):
    '''A `InboundOrderDetailsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InboundOrderDetailsRaw'), graphql_name='node')
    '''The `InboundOrderDetailsRaw` at the end of the edge.'''



class InboundOrderReferenceCode(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'inbound_order_id', 'warehouse_order_number', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class InboundOrderReferenceCodesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundOrderReferenceCode` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderReferenceCode))), graphql_name='nodes')
    '''A list of `InboundOrderReferenceCode` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderReferenceCodesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundOrderReferenceCode` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundOrderReferenceCode` you could get from
    the connection.
    '''



class InboundOrderReferenceCodesEdge(sgqlc.types.Type):
    '''A `InboundOrderReferenceCode` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(InboundOrderReferenceCode), graphql_name='node')
    '''The `InboundOrderReferenceCode` at the end of the edge.'''



class InboundOrderReferenceCodesRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundOrderReferenceCodesRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderReferenceCodesRaw'))), graphql_name='nodes')
    '''A list of `InboundOrderReferenceCodesRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrderReferenceCodesRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundOrderReferenceCodesRaw`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundOrderReferenceCodesRaw` you could get
    from the connection.
    '''



class InboundOrderReferenceCodesRawsEdge(sgqlc.types.Type):
    '''A `InboundOrderReferenceCodesRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InboundOrderReferenceCodesRaw'), graphql_name='node')
    '''The `InboundOrderReferenceCodesRaw` at the end of the edge.'''



class InboundOrdersConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundOrder` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrder))), graphql_name='nodes')
    '''A list of `InboundOrder` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrdersEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundOrder` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundOrder` you could get from the
    connection.
    '''



class InboundOrdersEdge(sgqlc.types.Type):
    '''A `InboundOrder` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(InboundOrder), graphql_name='node')
    '''The `InboundOrder` at the end of the edge.'''



class InboundOrdersExecutionRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundOrdersExecutionRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrdersExecutionRaw'))), graphql_name='nodes')
    '''A list of `InboundOrdersExecutionRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrdersExecutionRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundOrdersExecutionRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundOrdersExecutionRaw` you could get from
    the connection.
    '''



class InboundOrdersExecutionRawsEdge(sgqlc.types.Type):
    '''A `InboundOrdersExecutionRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InboundOrdersExecutionRaw'), graphql_name='node')
    '''The `InboundOrdersExecutionRaw` at the end of the edge.'''



class InboundOrdersRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundOrdersRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrdersRaw'))), graphql_name='nodes')
    '''A list of `InboundOrdersRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundOrdersRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundOrdersRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundOrdersRaw` you could get from the
    connection.
    '''



class InboundOrdersRawsEdge(sgqlc.types.Type):
    '''A `InboundOrdersRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InboundOrdersRaw'), graphql_name='node')
    '''The `InboundOrdersRaw` at the end of the edge.'''



class InboundPalletsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundPalletsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundPalletsRaw'))), graphql_name='nodes')
    '''A list of `InboundPalletsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundPalletsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundPalletsRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundPalletsRaw` you could get from the
    connection.
    '''



class InboundPalletsRawsEdge(sgqlc.types.Type):
    '''A `InboundPalletsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InboundPalletsRaw'), graphql_name='node')
    '''The `InboundPalletsRaw` at the end of the edge.'''



class InboundTruckLogRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InboundTruckLogRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundTruckLogRaw'))), graphql_name='nodes')
    '''A list of `InboundTruckLogRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InboundTruckLogRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InboundTruckLogRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InboundTruckLogRaw` you could get from the
    connection.
    '''



class InboundTruckLogRawsEdge(sgqlc.types.Type):
    '''A `InboundTruckLogRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InboundTruckLogRaw'), graphql_name='node')
    '''The `InboundTruckLogRaw` at the end of the edge.'''



class Interval(sgqlc.types.Type):
    '''An interval of time that has passed where the smallest distinct
    unit is a second.
    '''
    __schema__ = base
    __field_names__ = ('seconds', 'minutes', 'hours', 'days', 'months', 'years')
    seconds = sgqlc.types.Field(Float, graphql_name='seconds')
    '''A quantity of seconds. This is the only non-integer field, as all
    the other fields will dump their overflow into a smaller unit of
    time. Intervals don’t have a smaller unit than seconds.
    '''

    minutes = sgqlc.types.Field(Int, graphql_name='minutes')
    '''A quantity of minutes.'''

    hours = sgqlc.types.Field(Int, graphql_name='hours')
    '''A quantity of hours.'''

    days = sgqlc.types.Field(Int, graphql_name='days')
    '''A quantity of days.'''

    months = sgqlc.types.Field(Int, graphql_name='months')
    '''A quantity of months.'''

    years = sgqlc.types.Field(Int, graphql_name='years')
    '''A quantity of years.'''



class InventoryAdjustment(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'facility_id', 'customer_enterprise_id', 'adjustment_number', 'warehouse_customer_id', 'customer_id', 'customer_code', 'transaction_type', 'lot_id', 'item_code', 'item_id', 'adjustment_date', 'adjustment_type', 'adjustment_type_description', 'pallet_count_delta', 'quantity_delta', 'weight_uom', 'gross_weight_delta', 'net_weight_delta', 'comment', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_archived', 'lot_depleted_date')
    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    transaction_type = sgqlc.types.Field(String, graphql_name='transactionType')

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    adjustment_date = sgqlc.types.Field(Datetime, graphql_name='adjustmentDate')

    adjustment_type = sgqlc.types.Field(String, graphql_name='adjustmentType')

    adjustment_type_description = sgqlc.types.Field(String, graphql_name='adjustmentTypeDescription')

    pallet_count_delta = sgqlc.types.Field(Int, graphql_name='palletCountDelta')

    quantity_delta = sgqlc.types.Field(Float, graphql_name='quantityDelta')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')

    gross_weight_delta = sgqlc.types.Field(Float, graphql_name='grossWeightDelta')

    net_weight_delta = sgqlc.types.Field(Float, graphql_name='netWeightDelta')

    comment = sgqlc.types.Field(String, graphql_name='comment')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')

    lot_depleted_date = sgqlc.types.Field(Datetime, graphql_name='lotDepletedDate')



class InventoryAdjustmentsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InventoryAdjustment` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(InventoryAdjustment))), graphql_name='nodes')
    '''A list of `InventoryAdjustment` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InventoryAdjustmentsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InventoryAdjustment` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InventoryAdjustment` you could get from the
    connection.
    '''



class InventoryAdjustmentsEdge(sgqlc.types.Type):
    '''A `InventoryAdjustment` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(InventoryAdjustment), graphql_name='node')
    '''The `InventoryAdjustment` at the end of the edge.'''



class InventoryAdjustmentsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InventoryAdjustmentsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InventoryAdjustmentsRaw'))), graphql_name='nodes')
    '''A list of `InventoryAdjustmentsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InventoryAdjustmentsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InventoryAdjustmentsRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InventoryAdjustmentsRaw` you could get from
    the connection.
    '''



class InventoryAdjustmentsRawsEdge(sgqlc.types.Type):
    '''A `InventoryAdjustmentsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InventoryAdjustmentsRaw'), graphql_name='node')
    '''The `InventoryAdjustmentsRaw` at the end of the edge.'''



class InventoryControl(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'exception_id', 'operator_id', 'problem_time', 'work_type', 'warehouse_order_number', 'line_number', 'problem_description', 'pallet_code', 'assign_location', 'scan_location', 'location_audit', 'product_audit', 'pallet_audit', 'lot_audit', 'is_resolved', 'resolved_time', 'is_working', 'bol_number', 'quantity', 'audit_quantity', 'is_audited', 'created_at', 'updated_at', 'deleted_at', '_version', 'source_row_id', '_id')
    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    exception_id = sgqlc.types.Field(String, graphql_name='exceptionId')

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')

    problem_time = sgqlc.types.Field(Datetime, graphql_name='problemTime')

    work_type = sgqlc.types.Field(String, graphql_name='workType')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')

    problem_description = sgqlc.types.Field(String, graphql_name='problemDescription')

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')

    assign_location = sgqlc.types.Field(String, graphql_name='assignLocation')

    scan_location = sgqlc.types.Field(String, graphql_name='scanLocation')

    location_audit = sgqlc.types.Field(Boolean, graphql_name='locationAudit')

    product_audit = sgqlc.types.Field(Boolean, graphql_name='productAudit')

    pallet_audit = sgqlc.types.Field(Boolean, graphql_name='palletAudit')

    lot_audit = sgqlc.types.Field(Boolean, graphql_name='lotAudit')

    is_resolved = sgqlc.types.Field(Boolean, graphql_name='isResolved')

    resolved_time = sgqlc.types.Field(Datetime, graphql_name='resolvedTime')

    is_working = sgqlc.types.Field(Boolean, graphql_name='isWorking')

    bol_number = sgqlc.types.Field(String, graphql_name='bolNumber')

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')

    audit_quantity = sgqlc.types.Field(Int, graphql_name='auditQuantity')

    is_audited = sgqlc.types.Field(Boolean, graphql_name='isAudited')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class InventoryControlRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InventoryControlRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InventoryControlRaw'))), graphql_name='nodes')
    '''A list of `InventoryControlRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InventoryControlRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InventoryControlRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InventoryControlRaw` you could get from the
    connection.
    '''



class InventoryControlRawsEdge(sgqlc.types.Type):
    '''A `InventoryControlRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InventoryControlRaw'), graphql_name='node')
    '''The `InventoryControlRaw` at the end of the edge.'''



class InventoryControlsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InventoryControl` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(InventoryControl))), graphql_name='nodes')
    '''A list of `InventoryControl` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InventoryControlsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InventoryControl` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InventoryControl` you could get from the
    connection.
    '''



class InventoryControlsEdge(sgqlc.types.Type):
    '''A `InventoryControl` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(InventoryControl), graphql_name='node')
    '''The `InventoryControl` at the end of the edge.'''



class InventoryHoldHistoryRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `InventoryHoldHistoryRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InventoryHoldHistoryRaw'))), graphql_name='nodes')
    '''A list of `InventoryHoldHistoryRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('InventoryHoldHistoryRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `InventoryHoldHistoryRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `InventoryHoldHistoryRaw` you could get from
    the connection.
    '''



class InventoryHoldHistoryRawsEdge(sgqlc.types.Type):
    '''A `InventoryHoldHistoryRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('InventoryHoldHistoryRaw'), graphql_name='node')
    '''The `InventoryHoldHistoryRaw` at the end of the edge.'''



class Item(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'billing_warehouse_customer_id', 'owner_warehouse_customer_id', 'customer_id', 'billing_customer_id', 'owner_customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'item_code', 'warehouse_facility_id', 'source_row_id', 'is_active', 'catch_weight_type', 'case_dimensions_uom', 'case_height', 'case_length', 'case_width', 'item_category', 'customer_code', 'description', 'high', 'max_acceptable_temperature', 'temperature_uom', 'is_stackable', 'max_stack_count', 'min_acceptable_temperature', 'net_weight', 'is_odor_sensitive', 'billing_customer_code', 'owner_customer_code', 'receive_on_hold_code', 'rotation_type', 'shelf_life_days', 'package_tare_weight', 'weight_uom', 'ti', 'item_uom', 'created_at', 'updated_at', 'deleted_at', '_version', 'product_code', '_id', 'is_product', 'room_type', 'freight_type', 'tonnage_group', 'shelf_life_on_delivery_days', 'is_warehouse_supply', 'quantity_per_pallet', 'supplier_product_code')
    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    billing_warehouse_customer_id = sgqlc.types.Field(String, graphql_name='billingWarehouseCustomerId')

    owner_warehouse_customer_id = sgqlc.types.Field(String, graphql_name='ownerWarehouseCustomerId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    billing_customer_id = sgqlc.types.Field(String, graphql_name='billingCustomerId')

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')

    catch_weight_type = sgqlc.types.Field(String, graphql_name='catchWeightType')

    case_dimensions_uom = sgqlc.types.Field(String, graphql_name='caseDimensionsUom')

    case_height = sgqlc.types.Field(Float, graphql_name='caseHeight')

    case_length = sgqlc.types.Field(Float, graphql_name='caseLength')

    case_width = sgqlc.types.Field(Float, graphql_name='caseWidth')

    item_category = sgqlc.types.Field(String, graphql_name='itemCategory')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    description = sgqlc.types.Field(String, graphql_name='description')

    high = sgqlc.types.Field(Int, graphql_name='high')

    max_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='maxAcceptableTemperature')

    temperature_uom = sgqlc.types.Field(String, graphql_name='temperatureUom')

    is_stackable = sgqlc.types.Field(Boolean, graphql_name='isStackable')

    max_stack_count = sgqlc.types.Field(Int, graphql_name='maxStackCount')

    min_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='minAcceptableTemperature')

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')

    is_odor_sensitive = sgqlc.types.Field(Boolean, graphql_name='isOdorSensitive')

    billing_customer_code = sgqlc.types.Field(String, graphql_name='billingCustomerCode')

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')

    receive_on_hold_code = sgqlc.types.Field(String, graphql_name='receiveOnHoldCode')

    rotation_type = sgqlc.types.Field(String, graphql_name='rotationType')

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')

    package_tare_weight = sgqlc.types.Field(Float, graphql_name='packageTareWeight')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')

    ti = sgqlc.types.Field(Int, graphql_name='ti')

    item_uom = sgqlc.types.Field(String, graphql_name='itemUom')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    product_code = sgqlc.types.Field(String, graphql_name='productCode')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    is_product = sgqlc.types.Field(Boolean, graphql_name='isProduct')

    room_type = sgqlc.types.Field(String, graphql_name='roomType')

    freight_type = sgqlc.types.Field(String, graphql_name='freightType')

    tonnage_group = sgqlc.types.Field(String, graphql_name='tonnageGroup')

    shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='shelfLifeOnDeliveryDays')

    is_warehouse_supply = sgqlc.types.Field(Boolean, graphql_name='isWarehouseSupply')

    quantity_per_pallet = sgqlc.types.Field(Int, graphql_name='quantityPerPallet')

    supplier_product_code = sgqlc.types.Field(String, graphql_name='supplierProductCode')



class ItemFreezeTimesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ItemFreezeTime` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemFreezeTime'))), graphql_name='nodes')
    '''A list of `ItemFreezeTime` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemFreezeTimesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ItemFreezeTime` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ItemFreezeTime` you could get from the
    connection.
    '''



class ItemFreezeTimesEdge(sgqlc.types.Type):
    '''A `ItemFreezeTime` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('ItemFreezeTime'), graphql_name='node')
    '''The `ItemFreezeTime` at the end of the edge.'''



class ItemReferenceCode(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'item_id', 'item_code', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(String, graphql_name='id')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')



class ItemReferenceCodesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ItemReferenceCode` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ItemReferenceCode))), graphql_name='nodes')
    '''A list of `ItemReferenceCode` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemReferenceCodesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ItemReferenceCode` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ItemReferenceCode` you could get from the
    connection.
    '''



class ItemReferenceCodesEdge(sgqlc.types.Type):
    '''A `ItemReferenceCode` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(ItemReferenceCode), graphql_name='node')
    '''The `ItemReferenceCode` at the end of the edge.'''



class ItemReferenceCodesRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ItemReferenceCodesRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemReferenceCodesRaw'))), graphql_name='nodes')
    '''A list of `ItemReferenceCodesRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemReferenceCodesRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ItemReferenceCodesRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ItemReferenceCodesRaw` you could get from the
    connection.
    '''



class ItemReferenceCodesRawsEdge(sgqlc.types.Type):
    '''A `ItemReferenceCodesRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('ItemReferenceCodesRaw'), graphql_name='node')
    '''The `ItemReferenceCodesRaw` at the end of the edge.'''



class ItemShortCategoryNamesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ItemShortCategoryName` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemShortCategoryName'))), graphql_name='nodes')
    '''A list of `ItemShortCategoryName` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemShortCategoryNamesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ItemShortCategoryName` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ItemShortCategoryName` you could get from the
    connection.
    '''



class ItemShortCategoryNamesEdge(sgqlc.types.Type):
    '''A `ItemShortCategoryName` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('ItemShortCategoryName'), graphql_name='node')
    '''The `ItemShortCategoryName` at the end of the edge.'''



class ItemsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Item` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Item))), graphql_name='nodes')
    '''A list of `Item` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Item` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Item` you could get from the connection.'''



class ItemsEdge(sgqlc.types.Type):
    '''A `Item` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(Item), graphql_name='node')
    '''The `Item` at the end of the edge.'''



class ItemsRawBlastCellTypesByItemFreezeTimeWmsItemIdAndForBlastCellTypeIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCellType` values, with data from
    `ItemFreezeTime`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCellType'))), graphql_name='nodes')
    '''A list of `BlastCellType` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemsRawBlastCellTypesByItemFreezeTimeWmsItemIdAndForBlastCellTypeIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCellType`, info from the
    `ItemFreezeTime`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCellType` you could get from the
    connection.
    '''



class ItemsRawBlastCellTypesByItemFreezeTimeWmsItemIdAndForBlastCellTypeIdManyToManyEdge(sgqlc.types.Type):
    '''A `BlastCellType` edge in the connection, with data from
    `ItemFreezeTime`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'item_freeze_times_by_for_blast_cell_type_id')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCellType'), graphql_name='node')
    '''The `BlastCellType` at the end of the edge.'''

    item_freeze_times_by_for_blast_cell_type_id = sgqlc.types.Field(sgqlc.types.non_null(ItemFreezeTimesConnection), graphql_name='itemFreezeTimesByForBlastCellTypeId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemFreezeTimesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ItemFreezeTimeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemFreezeTimeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `ItemFreezeTime`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemFreezeTimesOrderBy!]`): The method to use when
      ordering `ItemFreezeTime`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`ItemFreezeTimeCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`ItemFreezeTimeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class ItemsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `ItemsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemsRaw'))), graphql_name='nodes')
    '''A list of `ItemsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ItemsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `ItemsRaw` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `ItemsRaw` you could get from the connection.'''



class ItemsRawsEdge(sgqlc.types.Type):
    '''A `ItemsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('ItemsRaw'), graphql_name='node')
    '''The `ItemsRaw` at the end of the edge.'''



class Lot(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'customer_enterprise_id', 'item_id', 'warehouse_customer_id', 'customer_id', 'facility_id', 'is_depleted', 'lot_reference', 'inventory_status', 'customer_lot_reference', 'weight_uom', 'original_gross_weight', 'original_net_weight', 'original_pallet_count', 'original_quantity', 'available_gross_weight', 'available_net_weight', 'available_pallet_count', 'available_quantity', 'expected_gross_weight', 'expected_net_weight', 'expected_pallet_count', 'expected_quantity', 'committed_gross_weight', 'committed_net_weight', 'committed_pallet_count', 'committed_quantity', 'on_hold_gross_weight', 'on_hold_net_weight', 'on_hold_pallet_count', 'on_hold_quantity', 'on_hand_gross_weight', 'on_hand_net_weight', 'on_hand_pallet_count', 'on_hand_quantity', 'production_date', 'best_by_date', 'code_date', 'slaughter_date', 'expiration_date', 'depleted_date', 'reservation_code', 'hold_code', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', 'lot_code', '_version', '_id', 'shelf_life_on_delivery_days', 'shelf_life_days', 'pallets_on_hold_committed_pallet_count', 'pallets_on_hold_committed_quantity')
    id = sgqlc.types.Field(String, graphql_name='id')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')

    original_gross_weight = sgqlc.types.Field(Float, graphql_name='originalGrossWeight')

    original_net_weight = sgqlc.types.Field(Float, graphql_name='originalNetWeight')

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')

    available_gross_weight = sgqlc.types.Field(Float, graphql_name='availableGrossWeight')

    available_net_weight = sgqlc.types.Field(Float, graphql_name='availableNetWeight')

    available_pallet_count = sgqlc.types.Field(BigInt, graphql_name='availablePalletCount')

    available_quantity = sgqlc.types.Field(BigInt, graphql_name='availableQuantity')

    expected_gross_weight = sgqlc.types.Field(Float, graphql_name='expectedGrossWeight')

    expected_net_weight = sgqlc.types.Field(Float, graphql_name='expectedNetWeight')

    expected_pallet_count = sgqlc.types.Field(Int, graphql_name='expectedPalletCount')

    expected_quantity = sgqlc.types.Field(Int, graphql_name='expectedQuantity')

    committed_gross_weight = sgqlc.types.Field(Float, graphql_name='committedGrossWeight')

    committed_net_weight = sgqlc.types.Field(Float, graphql_name='committedNetWeight')

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')

    on_hold_gross_weight = sgqlc.types.Field(Float, graphql_name='onHoldGrossWeight')

    on_hold_net_weight = sgqlc.types.Field(Float, graphql_name='onHoldNetWeight')

    on_hold_pallet_count = sgqlc.types.Field(BigInt, graphql_name='onHoldPalletCount')

    on_hold_quantity = sgqlc.types.Field(BigInt, graphql_name='onHoldQuantity')

    on_hand_gross_weight = sgqlc.types.Field(Float, graphql_name='onHandGrossWeight')

    on_hand_net_weight = sgqlc.types.Field(Float, graphql_name='onHandNetWeight')

    on_hand_pallet_count = sgqlc.types.Field(Int, graphql_name='onHandPalletCount')

    on_hand_quantity = sgqlc.types.Field(Int, graphql_name='onHandQuantity')

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')

    expiration_date = sgqlc.types.Field(String, graphql_name='expirationDate')

    depleted_date = sgqlc.types.Field(Datetime, graphql_name='depletedDate')

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='shelfLifeOnDeliveryDays')

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')

    pallets_on_hold_committed_pallet_count = sgqlc.types.Field(BigInt, graphql_name='palletsOnHoldCommittedPalletCount')

    pallets_on_hold_committed_quantity = sgqlc.types.Field(BigInt, graphql_name='palletsOnHoldCommittedQuantity')



class LotReferenceCode(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'lot_id', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(String, graphql_name='id')

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')



class LotReferenceCodesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `LotReferenceCode` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(LotReferenceCode))), graphql_name='nodes')
    '''A list of `LotReferenceCode` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('LotReferenceCodesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `LotReferenceCode` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `LotReferenceCode` you could get from the
    connection.
    '''



class LotReferenceCodesEdge(sgqlc.types.Type):
    '''A `LotReferenceCode` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(LotReferenceCode), graphql_name='node')
    '''The `LotReferenceCode` at the end of the edge.'''



class LotReferenceCodesRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `LotReferenceCodesRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('LotReferenceCodesRaw'))), graphql_name='nodes')
    '''A list of `LotReferenceCodesRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('LotReferenceCodesRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `LotReferenceCodesRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `LotReferenceCodesRaw` you could get from the
    connection.
    '''



class LotReferenceCodesRawsEdge(sgqlc.types.Type):
    '''A `LotReferenceCodesRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('LotReferenceCodesRaw'), graphql_name='node')
    '''The `LotReferenceCodesRaw` at the end of the edge.'''



class LotTransactionsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `LotTransactionsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('LotTransactionsRaw'))), graphql_name='nodes')
    '''A list of `LotTransactionsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('LotTransactionsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `LotTransactionsRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `LotTransactionsRaw` you could get from the
    connection.
    '''



class LotTransactionsRawsEdge(sgqlc.types.Type):
    '''A `LotTransactionsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('LotTransactionsRaw'), graphql_name='node')
    '''The `LotTransactionsRaw` at the end of the edge.'''



class LotsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Lot` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Lot))), graphql_name='nodes')
    '''A list of `Lot` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('LotsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Lot` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Lot` you could get from the connection.'''



class LotsEdge(sgqlc.types.Type):
    '''A `Lot` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(Lot), graphql_name='node')
    '''The `Lot` at the end of the edge.'''



class LotsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `LotsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('LotsRaw'))), graphql_name='nodes')
    '''A list of `LotsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('LotsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `LotsRaw` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `LotsRaw` you could get from the connection.'''



class LotsRawsEdge(sgqlc.types.Type):
    '''A `LotsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('LotsRaw'), graphql_name='node')
    '''The `LotsRaw` at the end of the edge.'''



class Mutation(sgqlc.types.Type):
    '''The root mutation type which contains root level fields which
    mutate data.
    '''
    __schema__ = base
    __field_names__ = ('create_cost_center_company_lookup', 'create_customer_hierarchy', 'create_customer_hierarchy_map', 'create_facility', 'create_facilities_test', 'create_facility_grouping', 'create_facility_warehouse_link', 'create_facility_workday_cost_center', 'create_pallet_location_zone', 'create_workday_cost_center', 'create_aggregate_warehouse_util_by_customer_raw', 'create_aggregate_warehouse_util_raw', 'create_aggregate_warehouse_volume_by_customer_raw', 'create_aggregate_warehouse_volume_raw', 'create_billing_history_raw', 'create_bol_constants_raw', 'create_broker_owners_raw', 'create_carriers_raw', 'create_case_picks_raw', 'create_cuts_raw', 'create_drivers_master', 'create_drivers_raw', 'create_expected_inbound_order_details_raw', 'create_expected_inbound_orders_raw', 'create_expected_outbound_order_details_raw', 'create_expected_outbound_orders_raw', 'create_expected_pallets_raw', 'create_hold_codes_raw', 'create_hpp_raw', 'create_inbound_catch_weight_raw', 'create_inbound_loads_raw', 'create_inbound_order_comments_raw', 'create_inbound_order_detail_reference_codes_raw', 'create_inbound_order_details_raw', 'create_inbound_order_reference_code', 'create_inbound_order_reference_codes_raw', 'create_inbound_orders_execution_raw', 'create_inbound_orders_raw', 'create_inbound_pallets_raw', 'create_inbound_truck_log_raw', 'create_inventory_adjustments_raw', 'create_inventory_control_raw', 'create_inventory_hold_history_raw', 'create_item_reference_code', 'create_item_reference_codes_raw', 'create_items_raw', 'create_lot_reference_code', 'create_lot_reference_codes_raw', 'create_lot_transactions_raw', 'create_lots_raw', 'create_outbound_catch_weight_raw', 'create_outbound_loads_raw', 'create_outbound_order_comments_raw', 'create_outbound_order_details_execution_raw', 'create_outbound_order_details_raw', 'create_outbound_order_reference_code', 'create_outbound_order_reference_codes_raw', 'create_outbound_orders_execution_raw', 'create_outbound_orders_raw', 'create_outbound_pallets_raw', 'create_outbound_truck_log_raw', 'create_pallet_history_raw', 'create_pallet_locations_raw', 'create_pallet_reference_codes_raw', 'create_pallet_transactions_raw', 'create_pallets_raw', 'create_stop_locations_raw', 'create_warehouse_customers_config_raw', 'create_warehouse_customers_raw', 'create_warehouse_pick_activities_raw', 'create_wms_facility_defaults_raw', 'create_wms_system', 'create_wooden_pallet_transactions_raw', 'create_blast_cell_type', 'create_blast_cell_wms_pallet_location', 'create_blast_cell_wms_pallet', 'create_blast_cell', 'create_blast_cycle_event', 'create_blast_cycle_wms_pallet', 'create_blast_cycle', 'create_blast_plan_pallet', 'create_blast_plan', 'create_item_freeze_time', 'create_item_short_category_name', 'create_cursor_history', 'create_source_channel_cursor', 'create_edge_node_source_channel_access', 'create_edge_node', 'create_source_channel', 'create_source_type', 'create_source', 'update_facility_by_node_id', 'update_facility', 'update_facilities_test_by_node_id', 'update_facilities_test', 'update_facility_grouping_by_node_id', 'update_facility_grouping', 'update_facility_workday_cost_center_by_node_id', 'update_facility_workday_cost_center', 'update_workday_cost_center_by_node_id', 'update_workday_cost_center', 'update_aggregate_warehouse_util_by_customer_raw_by_node_id', 'update_aggregate_warehouse_util_by_customer_raw', 'update_aggregate_warehouse_util_raw_by_node_id', 'update_aggregate_warehouse_util_raw', 'update_aggregate_warehouse_volume_by_customer_raw_by_node_id', 'update_aggregate_warehouse_volume_by_customer_raw', 'update_aggregate_warehouse_volume_raw_by_node_id', 'update_aggregate_warehouse_volume_raw', 'update_billing_history_raw_by_node_id', 'update_billing_history_raw', 'update_bol_constants_raw_by_node_id', 'update_bol_constants_raw', 'update_broker_owners_raw_by_node_id', 'update_broker_owners_raw', 'update_carriers_raw_by_node_id', 'update_carriers_raw', 'update_case_picks_raw_by_node_id', 'update_case_picks_raw', 'update_cuts_raw_by_node_id', 'update_cuts_raw', 'update_drivers_raw_by_node_id', 'update_drivers_raw', 'update_expected_inbound_order_details_raw_by_node_id', 'update_expected_inbound_order_details_raw', 'update_expected_inbound_orders_raw_by_node_id', 'update_expected_inbound_orders_raw', 'update_expected_outbound_order_details_raw_by_node_id', 'update_expected_outbound_order_details_raw', 'update_expected_outbound_orders_raw_by_node_id', 'update_expected_outbound_orders_raw', 'update_expected_pallets_raw_by_node_id', 'update_expected_pallets_raw', 'update_hold_codes_raw_by_node_id', 'update_hold_codes_raw', 'update_hpp_raw_by_node_id', 'update_hpp_raw', 'update_inbound_catch_weight_raw_by_node_id', 'update_inbound_catch_weight_raw', 'update_inbound_loads_raw_by_node_id', 'update_inbound_loads_raw', 'update_inbound_order_comments_raw_by_node_id', 'update_inbound_order_comments_raw', 'update_inbound_order_detail_reference_codes_raw_by_node_id', 'update_inbound_order_detail_reference_codes_raw', 'update_inbound_order_details_raw_by_node_id', 'update_inbound_order_details_raw', 'update_inbound_order_reference_codes_raw_by_node_id', 'update_inbound_order_reference_codes_raw', 'update_inbound_orders_execution_raw_by_node_id', 'update_inbound_orders_execution_raw', 'update_inbound_orders_raw_by_node_id', 'update_inbound_orders_raw', 'update_inbound_pallets_raw_by_node_id', 'update_inbound_pallets_raw', 'update_inbound_truck_log_raw_by_node_id', 'update_inbound_truck_log_raw', 'update_inventory_adjustments_raw_by_node_id', 'update_inventory_adjustments_raw', 'update_inventory_control_raw_by_node_id', 'update_inventory_control_raw', 'update_inventory_hold_history_raw_by_node_id', 'update_inventory_hold_history_raw', 'update_item_reference_codes_raw_by_node_id', 'update_item_reference_codes_raw', 'update_items_raw_by_node_id', 'update_items_raw', 'update_lot_reference_codes_raw_by_node_id', 'update_lot_reference_codes_raw', 'update_lot_transactions_raw_by_node_id', 'update_lot_transactions_raw', 'update_lots_raw_by_node_id', 'update_lots_raw', 'update_outbound_catch_weight_raw_by_node_id', 'update_outbound_catch_weight_raw', 'update_outbound_loads_raw_by_node_id', 'update_outbound_loads_raw', 'update_outbound_order_comments_raw_by_node_id', 'update_outbound_order_comments_raw', 'update_outbound_order_details_execution_raw_by_node_id', 'update_outbound_order_details_execution_raw', 'update_outbound_order_details_raw_by_node_id', 'update_outbound_order_details_raw', 'update_outbound_order_reference_codes_raw_by_node_id', 'update_outbound_order_reference_codes_raw', 'update_outbound_orders_execution_raw_by_node_id', 'update_outbound_orders_execution_raw', 'update_outbound_orders_raw_by_node_id', 'update_outbound_orders_raw', 'update_outbound_pallets_raw_by_node_id', 'update_outbound_pallets_raw', 'update_outbound_truck_log_raw_by_node_id', 'update_outbound_truck_log_raw', 'update_pallet_history_raw_by_node_id', 'update_pallet_history_raw', 'update_pallet_locations_raw_by_node_id', 'update_pallet_locations_raw', 'update_pallet_reference_codes_raw_by_node_id', 'update_pallet_reference_codes_raw', 'update_pallet_transactions_raw_by_node_id', 'update_pallet_transactions_raw', 'update_pallets_raw_by_node_id', 'update_pallets_raw', 'update_stop_locations_raw_by_node_id', 'update_stop_locations_raw', 'update_warehouse_customers_config_raw_by_node_id', 'update_warehouse_customers_config_raw', 'update_warehouse_customers_raw_by_node_id', 'update_warehouse_customers_raw', 'update_warehouse_pick_activities_raw_by_node_id', 'update_warehouse_pick_activities_raw', 'update_wms_facility_defaults_raw_by_node_id', 'update_wms_facility_defaults_raw', 'update_wms_system_by_node_id', 'update_wms_system', 'update_wooden_pallet_transactions_raw_by_node_id', 'update_wooden_pallet_transactions_raw', 'update_blast_cell_type_by_node_id', 'update_blast_cell_type', 'update_blast_cell_wms_pallet_location_by_node_id', 'update_blast_cell_wms_pallet_location', 'update_blast_cell_wms_pallet_by_node_id', 'update_blast_cell_wms_pallet', 'update_blast_cell_wms_pallet_by_blast_cell_id_and_wms_pallet_id', 'update_blast_cell_by_node_id', 'update_blast_cell', 'update_blast_cycle_event_by_node_id', 'update_blast_cycle_event', 'update_blast_cycle_wms_pallet_by_node_id', 'update_blast_cycle_wms_pallet', 'update_blast_cycle_by_node_id', 'update_blast_cycle', 'update_blast_plan_pallet_by_node_id', 'update_blast_plan_pallet', 'update_blast_plan_by_node_id', 'update_blast_plan', 'update_item_freeze_time_by_node_id', 'update_item_freeze_time', 'update_item_short_category_name_by_node_id', 'update_item_short_category_name', 'update_cursor_history_by_node_id', 'update_cursor_history', 'update_source_channel_cursor_by_node_id', 'update_source_channel_cursor', 'update_edge_node_source_channel_access_by_node_id', 'update_edge_node_source_channel_access', 'update_edge_node_by_node_id', 'update_edge_node', 'update_source_channel_by_node_id', 'update_source_channel', 'update_source_type_by_node_id', 'update_source_type', 'update_source_by_node_id', 'update_source', 'delete_facility_by_node_id', 'delete_facility', 'delete_facilities_test_by_node_id', 'delete_facilities_test', 'delete_facility_grouping_by_node_id', 'delete_facility_grouping', 'delete_facility_workday_cost_center_by_node_id', 'delete_facility_workday_cost_center', 'delete_workday_cost_center_by_node_id', 'delete_workday_cost_center', 'delete_aggregate_warehouse_util_by_customer_raw_by_node_id', 'delete_aggregate_warehouse_util_by_customer_raw', 'delete_aggregate_warehouse_util_raw_by_node_id', 'delete_aggregate_warehouse_util_raw', 'delete_aggregate_warehouse_volume_by_customer_raw_by_node_id', 'delete_aggregate_warehouse_volume_by_customer_raw', 'delete_aggregate_warehouse_volume_raw_by_node_id', 'delete_aggregate_warehouse_volume_raw', 'delete_billing_history_raw_by_node_id', 'delete_billing_history_raw', 'delete_bol_constants_raw_by_node_id', 'delete_bol_constants_raw', 'delete_broker_owners_raw_by_node_id', 'delete_broker_owners_raw', 'delete_carriers_raw_by_node_id', 'delete_carriers_raw', 'delete_case_picks_raw_by_node_id', 'delete_case_picks_raw', 'delete_cuts_raw_by_node_id', 'delete_cuts_raw', 'delete_drivers_raw_by_node_id', 'delete_drivers_raw', 'delete_expected_inbound_order_details_raw_by_node_id', 'delete_expected_inbound_order_details_raw', 'delete_expected_inbound_orders_raw_by_node_id', 'delete_expected_inbound_orders_raw', 'delete_expected_outbound_order_details_raw_by_node_id', 'delete_expected_outbound_order_details_raw', 'delete_expected_outbound_orders_raw_by_node_id', 'delete_expected_outbound_orders_raw', 'delete_expected_pallets_raw_by_node_id', 'delete_expected_pallets_raw', 'delete_hold_codes_raw_by_node_id', 'delete_hold_codes_raw', 'delete_hpp_raw_by_node_id', 'delete_hpp_raw', 'delete_inbound_catch_weight_raw_by_node_id', 'delete_inbound_catch_weight_raw', 'delete_inbound_loads_raw_by_node_id', 'delete_inbound_loads_raw', 'delete_inbound_order_comments_raw_by_node_id', 'delete_inbound_order_comments_raw', 'delete_inbound_order_detail_reference_codes_raw_by_node_id', 'delete_inbound_order_detail_reference_codes_raw', 'delete_inbound_order_details_raw_by_node_id', 'delete_inbound_order_details_raw', 'delete_inbound_order_reference_codes_raw_by_node_id', 'delete_inbound_order_reference_codes_raw', 'delete_inbound_orders_execution_raw_by_node_id', 'delete_inbound_orders_execution_raw', 'delete_inbound_orders_raw_by_node_id', 'delete_inbound_orders_raw', 'delete_inbound_pallets_raw_by_node_id', 'delete_inbound_pallets_raw', 'delete_inbound_truck_log_raw_by_node_id', 'delete_inbound_truck_log_raw', 'delete_inventory_adjustments_raw_by_node_id', 'delete_inventory_adjustments_raw', 'delete_inventory_control_raw_by_node_id', 'delete_inventory_control_raw', 'delete_inventory_hold_history_raw_by_node_id', 'delete_inventory_hold_history_raw', 'delete_item_reference_codes_raw_by_node_id', 'delete_item_reference_codes_raw', 'delete_items_raw_by_node_id', 'delete_items_raw', 'delete_lot_reference_codes_raw_by_node_id', 'delete_lot_reference_codes_raw', 'delete_lot_transactions_raw_by_node_id', 'delete_lot_transactions_raw', 'delete_lots_raw_by_node_id', 'delete_lots_raw', 'delete_outbound_catch_weight_raw_by_node_id', 'delete_outbound_catch_weight_raw', 'delete_outbound_loads_raw_by_node_id', 'delete_outbound_loads_raw', 'delete_outbound_order_comments_raw_by_node_id', 'delete_outbound_order_comments_raw', 'delete_outbound_order_details_execution_raw_by_node_id', 'delete_outbound_order_details_execution_raw', 'delete_outbound_order_details_raw_by_node_id', 'delete_outbound_order_details_raw', 'delete_outbound_order_reference_codes_raw_by_node_id', 'delete_outbound_order_reference_codes_raw', 'delete_outbound_orders_execution_raw_by_node_id', 'delete_outbound_orders_execution_raw', 'delete_outbound_orders_raw_by_node_id', 'delete_outbound_orders_raw', 'delete_outbound_pallets_raw_by_node_id', 'delete_outbound_pallets_raw', 'delete_outbound_truck_log_raw_by_node_id', 'delete_outbound_truck_log_raw', 'delete_pallet_history_raw_by_node_id', 'delete_pallet_history_raw', 'delete_pallet_locations_raw_by_node_id', 'delete_pallet_locations_raw', 'delete_pallet_reference_codes_raw_by_node_id', 'delete_pallet_reference_codes_raw', 'delete_pallet_transactions_raw_by_node_id', 'delete_pallet_transactions_raw', 'delete_pallets_raw_by_node_id', 'delete_pallets_raw', 'delete_stop_locations_raw_by_node_id', 'delete_stop_locations_raw', 'delete_warehouse_customers_config_raw_by_node_id', 'delete_warehouse_customers_config_raw', 'delete_warehouse_customers_raw_by_node_id', 'delete_warehouse_customers_raw', 'delete_warehouse_pick_activities_raw_by_node_id', 'delete_warehouse_pick_activities_raw', 'delete_wms_facility_defaults_raw_by_node_id', 'delete_wms_facility_defaults_raw', 'delete_wms_system_by_node_id', 'delete_wms_system', 'delete_wooden_pallet_transactions_raw_by_node_id', 'delete_wooden_pallet_transactions_raw', 'delete_blast_cell_type_by_node_id', 'delete_blast_cell_type', 'delete_blast_cell_wms_pallet_location_by_node_id', 'delete_blast_cell_wms_pallet_location', 'delete_blast_cell_wms_pallet_by_node_id', 'delete_blast_cell_wms_pallet', 'delete_blast_cell_wms_pallet_by_blast_cell_id_and_wms_pallet_id', 'delete_blast_cell_by_node_id', 'delete_blast_cell', 'delete_blast_cycle_event_by_node_id', 'delete_blast_cycle_event', 'delete_blast_cycle_wms_pallet_by_node_id', 'delete_blast_cycle_wms_pallet', 'delete_blast_cycle_by_node_id', 'delete_blast_cycle', 'delete_blast_plan_pallet_by_node_id', 'delete_blast_plan_pallet', 'delete_blast_plan_by_node_id', 'delete_blast_plan', 'delete_item_freeze_time_by_node_id', 'delete_item_freeze_time', 'delete_item_short_category_name_by_node_id', 'delete_item_short_category_name', 'delete_cursor_history_by_node_id', 'delete_cursor_history', 'delete_source_channel_cursor_by_node_id', 'delete_source_channel_cursor', 'delete_edge_node_source_channel_access_by_node_id', 'delete_edge_node_source_channel_access', 'delete_edge_node_by_node_id', 'delete_edge_node', 'delete_source_channel_by_node_id', 'delete_source_channel', 'delete_source_type_by_node_id', 'delete_source_type', 'delete_source_by_node_id', 'delete_source', 'create_cycles_from_loaded_pallets', 'detect_pallets_by_look_ahead', 'detect_pallets_by_look_behind', 'fetch_historical_pallets_for_cycle', 'fetch_unloaded_pallets_for_cycle', 'update_cycle_metadata', 'update_pallets_in_blast_cells', 'upsert_channel_cursor')
    create_cost_center_company_lookup = sgqlc.types.Field(CreateCostCenterCompanyLookupPayload, graphql_name='createCostCenterCompanyLookup', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCostCenterCompanyLookupInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `CostCenterCompanyLookup`.

    Arguments:

    * `input` (`CreateCostCenterCompanyLookupInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_customer_hierarchy = sgqlc.types.Field(CreateCustomerHierarchyPayload, graphql_name='createCustomerHierarchy', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCustomerHierarchyInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `CustomerHierarchy`.

    Arguments:

    * `input` (`CreateCustomerHierarchyInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_customer_hierarchy_map = sgqlc.types.Field(CreateCustomerHierarchyMapPayload, graphql_name='createCustomerHierarchyMap', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCustomerHierarchyMapInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `CustomerHierarchyMap`.

    Arguments:

    * `input` (`CreateCustomerHierarchyMapInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_facility = sgqlc.types.Field(CreateFacilityPayload, graphql_name='createFacility', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateFacilityInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `Facility`.

    Arguments:

    * `input` (`CreateFacilityInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_facilities_test = sgqlc.types.Field(CreateFacilitiesTestPayload, graphql_name='createFacilitiesTest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateFacilitiesTestInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `FacilitiesTest`.

    Arguments:

    * `input` (`CreateFacilitiesTestInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_facility_grouping = sgqlc.types.Field(CreateFacilityGroupingPayload, graphql_name='createFacilityGrouping', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateFacilityGroupingInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `FacilityGrouping`.

    Arguments:

    * `input` (`CreateFacilityGroupingInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_facility_warehouse_link = sgqlc.types.Field(CreateFacilityWarehouseLinkPayload, graphql_name='createFacilityWarehouseLink', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateFacilityWarehouseLinkInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `FacilityWarehouseLink`.

    Arguments:

    * `input` (`CreateFacilityWarehouseLinkInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_facility_workday_cost_center = sgqlc.types.Field(CreateFacilityWorkdayCostCenterPayload, graphql_name='createFacilityWorkdayCostCenter', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateFacilityWorkdayCostCenterInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `FacilityWorkdayCostCenter`.

    Arguments:

    * `input` (`CreateFacilityWorkdayCostCenterInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_pallet_location_zone = sgqlc.types.Field(CreatePalletLocationZonePayload, graphql_name='createPalletLocationZone', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePalletLocationZoneInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `PalletLocationZone`.

    Arguments:

    * `input` (`CreatePalletLocationZoneInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_workday_cost_center = sgqlc.types.Field(CreateWorkdayCostCenterPayload, graphql_name='createWorkdayCostCenter', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateWorkdayCostCenterInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `WorkdayCostCenter`.

    Arguments:

    * `input` (`CreateWorkdayCostCenterInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_aggregate_warehouse_util_by_customer_raw = sgqlc.types.Field(CreateAggregateWarehouseUtilByCustomerRawPayload, graphql_name='createAggregateWarehouseUtilByCustomerRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateAggregateWarehouseUtilByCustomerRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `AggregateWarehouseUtilByCustomerRaw`.

    Arguments:

    * `input` (`CreateAggregateWarehouseUtilByCustomerRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_aggregate_warehouse_util_raw = sgqlc.types.Field(CreateAggregateWarehouseUtilRawPayload, graphql_name='createAggregateWarehouseUtilRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateAggregateWarehouseUtilRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `AggregateWarehouseUtilRaw`.

    Arguments:

    * `input` (`CreateAggregateWarehouseUtilRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_aggregate_warehouse_volume_by_customer_raw = sgqlc.types.Field(CreateAggregateWarehouseVolumeByCustomerRawPayload, graphql_name='createAggregateWarehouseVolumeByCustomerRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateAggregateWarehouseVolumeByCustomerRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `AggregateWarehouseVolumeByCustomerRaw`.

    Arguments:

    * `input` (`CreateAggregateWarehouseVolumeByCustomerRawInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    create_aggregate_warehouse_volume_raw = sgqlc.types.Field(CreateAggregateWarehouseVolumeRawPayload, graphql_name='createAggregateWarehouseVolumeRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateAggregateWarehouseVolumeRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `AggregateWarehouseVolumeRaw`.

    Arguments:

    * `input` (`CreateAggregateWarehouseVolumeRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_billing_history_raw = sgqlc.types.Field(CreateBillingHistoryRawPayload, graphql_name='createBillingHistoryRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBillingHistoryRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BillingHistoryRaw`.

    Arguments:

    * `input` (`CreateBillingHistoryRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_bol_constants_raw = sgqlc.types.Field(CreateBolConstantsRawPayload, graphql_name='createBolConstantsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBolConstantsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BolConstantsRaw`.

    Arguments:

    * `input` (`CreateBolConstantsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_broker_owners_raw = sgqlc.types.Field(CreateBrokerOwnersRawPayload, graphql_name='createBrokerOwnersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBrokerOwnersRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BrokerOwnersRaw`.

    Arguments:

    * `input` (`CreateBrokerOwnersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_carriers_raw = sgqlc.types.Field(CreateCarriersRawPayload, graphql_name='createCarriersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCarriersRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `CarriersRaw`.

    Arguments:

    * `input` (`CreateCarriersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_case_picks_raw = sgqlc.types.Field(CreateCasePicksRawPayload, graphql_name='createCasePicksRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCasePicksRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `CasePicksRaw`.

    Arguments:

    * `input` (`CreateCasePicksRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_cuts_raw = sgqlc.types.Field(CreateCutsRawPayload, graphql_name='createCutsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCutsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `CutsRaw`.

    Arguments:

    * `input` (`CreateCutsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_drivers_master = sgqlc.types.Field(CreateDriversMasterPayload, graphql_name='createDriversMaster', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateDriversMasterInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `DriversMaster`.

    Arguments:

    * `input` (`CreateDriversMasterInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_drivers_raw = sgqlc.types.Field(CreateDriversRawPayload, graphql_name='createDriversRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateDriversRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `DriversRaw`.

    Arguments:

    * `input` (`CreateDriversRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_expected_inbound_order_details_raw = sgqlc.types.Field(CreateExpectedInboundOrderDetailsRawPayload, graphql_name='createExpectedInboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateExpectedInboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `ExpectedInboundOrderDetailsRaw`.

    Arguments:

    * `input` (`CreateExpectedInboundOrderDetailsRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_expected_inbound_orders_raw = sgqlc.types.Field(CreateExpectedInboundOrdersRawPayload, graphql_name='createExpectedInboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateExpectedInboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `ExpectedInboundOrdersRaw`.

    Arguments:

    * `input` (`CreateExpectedInboundOrdersRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_expected_outbound_order_details_raw = sgqlc.types.Field(CreateExpectedOutboundOrderDetailsRawPayload, graphql_name='createExpectedOutboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateExpectedOutboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `ExpectedOutboundOrderDetailsRaw`.

    Arguments:

    * `input` (`CreateExpectedOutboundOrderDetailsRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_expected_outbound_orders_raw = sgqlc.types.Field(CreateExpectedOutboundOrdersRawPayload, graphql_name='createExpectedOutboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateExpectedOutboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `ExpectedOutboundOrdersRaw`.

    Arguments:

    * `input` (`CreateExpectedOutboundOrdersRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_expected_pallets_raw = sgqlc.types.Field(CreateExpectedPalletsRawPayload, graphql_name='createExpectedPalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateExpectedPalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `ExpectedPalletsRaw`.

    Arguments:

    * `input` (`CreateExpectedPalletsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_hold_codes_raw = sgqlc.types.Field(CreateHoldCodesRawPayload, graphql_name='createHoldCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateHoldCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `HoldCodesRaw`.

    Arguments:

    * `input` (`CreateHoldCodesRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_hpp_raw = sgqlc.types.Field(CreateHppRawPayload, graphql_name='createHppRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateHppRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `HppRaw`.

    Arguments:

    * `input` (`CreateHppRawInput!`): The exclusive input argument for
      this mutation. An object type, make sure to see documentation
      for this object’s fields.
    '''

    create_inbound_catch_weight_raw = sgqlc.types.Field(CreateInboundCatchWeightRawPayload, graphql_name='createInboundCatchWeightRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundCatchWeightRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundCatchWeightRaw`.

    Arguments:

    * `input` (`CreateInboundCatchWeightRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_inbound_loads_raw = sgqlc.types.Field(CreateInboundLoadsRawPayload, graphql_name='createInboundLoadsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundLoadsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundLoadsRaw`.

    Arguments:

    * `input` (`CreateInboundLoadsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_inbound_order_comments_raw = sgqlc.types.Field(CreateInboundOrderCommentsRawPayload, graphql_name='createInboundOrderCommentsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundOrderCommentsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundOrderCommentsRaw`.

    Arguments:

    * `input` (`CreateInboundOrderCommentsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_inbound_order_detail_reference_codes_raw = sgqlc.types.Field(CreateInboundOrderDetailReferenceCodesRawPayload, graphql_name='createInboundOrderDetailReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundOrderDetailReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundOrderDetailReferenceCodesRaw`.

    Arguments:

    * `input` (`CreateInboundOrderDetailReferenceCodesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_inbound_order_details_raw = sgqlc.types.Field(CreateInboundOrderDetailsRawPayload, graphql_name='createInboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundOrderDetailsRaw`.

    Arguments:

    * `input` (`CreateInboundOrderDetailsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_inbound_order_reference_code = sgqlc.types.Field(CreateInboundOrderReferenceCodePayload, graphql_name='createInboundOrderReferenceCode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundOrderReferenceCodeInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundOrderReferenceCode`.

    Arguments:

    * `input` (`CreateInboundOrderReferenceCodeInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_inbound_order_reference_codes_raw = sgqlc.types.Field(CreateInboundOrderReferenceCodesRawPayload, graphql_name='createInboundOrderReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundOrderReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundOrderReferenceCodesRaw`.

    Arguments:

    * `input` (`CreateInboundOrderReferenceCodesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_inbound_orders_execution_raw = sgqlc.types.Field(CreateInboundOrdersExecutionRawPayload, graphql_name='createInboundOrdersExecutionRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundOrdersExecutionRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundOrdersExecutionRaw`.

    Arguments:

    * `input` (`CreateInboundOrdersExecutionRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_inbound_orders_raw = sgqlc.types.Field(CreateInboundOrdersRawPayload, graphql_name='createInboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundOrdersRaw`.

    Arguments:

    * `input` (`CreateInboundOrdersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_inbound_pallets_raw = sgqlc.types.Field(CreateInboundPalletsRawPayload, graphql_name='createInboundPalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundPalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundPalletsRaw`.

    Arguments:

    * `input` (`CreateInboundPalletsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_inbound_truck_log_raw = sgqlc.types.Field(CreateInboundTruckLogRawPayload, graphql_name='createInboundTruckLogRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInboundTruckLogRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InboundTruckLogRaw`.

    Arguments:

    * `input` (`CreateInboundTruckLogRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_inventory_adjustments_raw = sgqlc.types.Field(CreateInventoryAdjustmentsRawPayload, graphql_name='createInventoryAdjustmentsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInventoryAdjustmentsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InventoryAdjustmentsRaw`.

    Arguments:

    * `input` (`CreateInventoryAdjustmentsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_inventory_control_raw = sgqlc.types.Field(CreateInventoryControlRawPayload, graphql_name='createInventoryControlRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInventoryControlRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InventoryControlRaw`.

    Arguments:

    * `input` (`CreateInventoryControlRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_inventory_hold_history_raw = sgqlc.types.Field(CreateInventoryHoldHistoryRawPayload, graphql_name='createInventoryHoldHistoryRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateInventoryHoldHistoryRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `InventoryHoldHistoryRaw`.

    Arguments:

    * `input` (`CreateInventoryHoldHistoryRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_item_reference_code = sgqlc.types.Field(CreateItemReferenceCodePayload, graphql_name='createItemReferenceCode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateItemReferenceCodeInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `ItemReferenceCode`.

    Arguments:

    * `input` (`CreateItemReferenceCodeInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_item_reference_codes_raw = sgqlc.types.Field(CreateItemReferenceCodesRawPayload, graphql_name='createItemReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateItemReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `ItemReferenceCodesRaw`.

    Arguments:

    * `input` (`CreateItemReferenceCodesRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_items_raw = sgqlc.types.Field(CreateItemsRawPayload, graphql_name='createItemsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateItemsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `ItemsRaw`.

    Arguments:

    * `input` (`CreateItemsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_lot_reference_code = sgqlc.types.Field(CreateLotReferenceCodePayload, graphql_name='createLotReferenceCode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateLotReferenceCodeInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `LotReferenceCode`.

    Arguments:

    * `input` (`CreateLotReferenceCodeInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_lot_reference_codes_raw = sgqlc.types.Field(CreateLotReferenceCodesRawPayload, graphql_name='createLotReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateLotReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `LotReferenceCodesRaw`.

    Arguments:

    * `input` (`CreateLotReferenceCodesRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_lot_transactions_raw = sgqlc.types.Field(CreateLotTransactionsRawPayload, graphql_name='createLotTransactionsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateLotTransactionsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `LotTransactionsRaw`.

    Arguments:

    * `input` (`CreateLotTransactionsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_lots_raw = sgqlc.types.Field(CreateLotsRawPayload, graphql_name='createLotsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateLotsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `LotsRaw`.

    Arguments:

    * `input` (`CreateLotsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_outbound_catch_weight_raw = sgqlc.types.Field(CreateOutboundCatchWeightRawPayload, graphql_name='createOutboundCatchWeightRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundCatchWeightRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundCatchWeightRaw`.

    Arguments:

    * `input` (`CreateOutboundCatchWeightRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_outbound_loads_raw = sgqlc.types.Field(CreateOutboundLoadsRawPayload, graphql_name='createOutboundLoadsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundLoadsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundLoadsRaw`.

    Arguments:

    * `input` (`CreateOutboundLoadsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_outbound_order_comments_raw = sgqlc.types.Field(CreateOutboundOrderCommentsRawPayload, graphql_name='createOutboundOrderCommentsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundOrderCommentsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundOrderCommentsRaw`.

    Arguments:

    * `input` (`CreateOutboundOrderCommentsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_outbound_order_details_execution_raw = sgqlc.types.Field(CreateOutboundOrderDetailsExecutionRawPayload, graphql_name='createOutboundOrderDetailsExecutionRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundOrderDetailsExecutionRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundOrderDetailsExecutionRaw`.

    Arguments:

    * `input` (`CreateOutboundOrderDetailsExecutionRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_outbound_order_details_raw = sgqlc.types.Field(CreateOutboundOrderDetailsRawPayload, graphql_name='createOutboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundOrderDetailsRaw`.

    Arguments:

    * `input` (`CreateOutboundOrderDetailsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_outbound_order_reference_code = sgqlc.types.Field(CreateOutboundOrderReferenceCodePayload, graphql_name='createOutboundOrderReferenceCode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundOrderReferenceCodeInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundOrderReferenceCode`.

    Arguments:

    * `input` (`CreateOutboundOrderReferenceCodeInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_outbound_order_reference_codes_raw = sgqlc.types.Field(CreateOutboundOrderReferenceCodesRawPayload, graphql_name='createOutboundOrderReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundOrderReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundOrderReferenceCodesRaw`.

    Arguments:

    * `input` (`CreateOutboundOrderReferenceCodesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_outbound_orders_execution_raw = sgqlc.types.Field(CreateOutboundOrdersExecutionRawPayload, graphql_name='createOutboundOrdersExecutionRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundOrdersExecutionRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundOrdersExecutionRaw`.

    Arguments:

    * `input` (`CreateOutboundOrdersExecutionRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_outbound_orders_raw = sgqlc.types.Field(CreateOutboundOrdersRawPayload, graphql_name='createOutboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundOrdersRaw`.

    Arguments:

    * `input` (`CreateOutboundOrdersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_outbound_pallets_raw = sgqlc.types.Field(CreateOutboundPalletsRawPayload, graphql_name='createOutboundPalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundPalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundPalletsRaw`.

    Arguments:

    * `input` (`CreateOutboundPalletsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_outbound_truck_log_raw = sgqlc.types.Field(CreateOutboundTruckLogRawPayload, graphql_name='createOutboundTruckLogRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOutboundTruckLogRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `OutboundTruckLogRaw`.

    Arguments:

    * `input` (`CreateOutboundTruckLogRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_pallet_history_raw = sgqlc.types.Field(CreatePalletHistoryRawPayload, graphql_name='createPalletHistoryRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePalletHistoryRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `PalletHistoryRaw`.

    Arguments:

    * `input` (`CreatePalletHistoryRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_pallet_locations_raw = sgqlc.types.Field(CreatePalletLocationsRawPayload, graphql_name='createPalletLocationsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePalletLocationsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `PalletLocationsRaw`.

    Arguments:

    * `input` (`CreatePalletLocationsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_pallet_reference_codes_raw = sgqlc.types.Field(CreatePalletReferenceCodesRawPayload, graphql_name='createPalletReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePalletReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `PalletReferenceCodesRaw`.

    Arguments:

    * `input` (`CreatePalletReferenceCodesRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_pallet_transactions_raw = sgqlc.types.Field(CreatePalletTransactionsRawPayload, graphql_name='createPalletTransactionsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePalletTransactionsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `PalletTransactionsRaw`.

    Arguments:

    * `input` (`CreatePalletTransactionsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_pallets_raw = sgqlc.types.Field(CreatePalletsRawPayload, graphql_name='createPalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `PalletsRaw`.

    Arguments:

    * `input` (`CreatePalletsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_stop_locations_raw = sgqlc.types.Field(CreateStopLocationsRawPayload, graphql_name='createStopLocationsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateStopLocationsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `StopLocationsRaw`.

    Arguments:

    * `input` (`CreateStopLocationsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_warehouse_customers_config_raw = sgqlc.types.Field(CreateWarehouseCustomersConfigRawPayload, graphql_name='createWarehouseCustomersConfigRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateWarehouseCustomersConfigRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `WarehouseCustomersConfigRaw`.

    Arguments:

    * `input` (`CreateWarehouseCustomersConfigRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_warehouse_customers_raw = sgqlc.types.Field(CreateWarehouseCustomersRawPayload, graphql_name='createWarehouseCustomersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateWarehouseCustomersRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `WarehouseCustomersRaw`.

    Arguments:

    * `input` (`CreateWarehouseCustomersRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_warehouse_pick_activities_raw = sgqlc.types.Field(CreateWarehousePickActivitiesRawPayload, graphql_name='createWarehousePickActivitiesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateWarehousePickActivitiesRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `WarehousePickActivitiesRaw`.

    Arguments:

    * `input` (`CreateWarehousePickActivitiesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_wms_facility_defaults_raw = sgqlc.types.Field(CreateWmsFacilityDefaultsRawPayload, graphql_name='createWmsFacilityDefaultsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateWmsFacilityDefaultsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `WmsFacilityDefaultsRaw`.

    Arguments:

    * `input` (`CreateWmsFacilityDefaultsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_wms_system = sgqlc.types.Field(CreateWmsSystemPayload, graphql_name='createWmsSystem', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateWmsSystemInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `WmsSystem`.

    Arguments:

    * `input` (`CreateWmsSystemInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_wooden_pallet_transactions_raw = sgqlc.types.Field(CreateWoodenPalletTransactionsRawPayload, graphql_name='createWoodenPalletTransactionsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateWoodenPalletTransactionsRawInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `WoodenPalletTransactionsRaw`.

    Arguments:

    * `input` (`CreateWoodenPalletTransactionsRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_blast_cell_type = sgqlc.types.Field(CreateBlastCellTypePayload, graphql_name='createBlastCellType', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBlastCellTypeInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BlastCellType`.

    Arguments:

    * `input` (`CreateBlastCellTypeInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_blast_cell_wms_pallet_location = sgqlc.types.Field(CreateBlastCellWmsPalletLocationPayload, graphql_name='createBlastCellWmsPalletLocation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBlastCellWmsPalletLocationInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BlastCellWmsPalletLocation`.

    Arguments:

    * `input` (`CreateBlastCellWmsPalletLocationInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_blast_cell_wms_pallet = sgqlc.types.Field(CreateBlastCellWmsPalletPayload, graphql_name='createBlastCellWmsPallet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBlastCellWmsPalletInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BlastCellWmsPallet`.

    Arguments:

    * `input` (`CreateBlastCellWmsPalletInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_blast_cell = sgqlc.types.Field(CreateBlastCellPayload, graphql_name='createBlastCell', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBlastCellInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BlastCell`.

    Arguments:

    * `input` (`CreateBlastCellInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_blast_cycle_event = sgqlc.types.Field(CreateBlastCycleEventPayload, graphql_name='createBlastCycleEvent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBlastCycleEventInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BlastCycleEvent`.

    Arguments:

    * `input` (`CreateBlastCycleEventInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_blast_cycle_wms_pallet = sgqlc.types.Field(CreateBlastCycleWmsPalletPayload, graphql_name='createBlastCycleWmsPallet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBlastCycleWmsPalletInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BlastCycleWmsPallet`.

    Arguments:

    * `input` (`CreateBlastCycleWmsPalletInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_blast_cycle = sgqlc.types.Field(CreateBlastCyclePayload, graphql_name='createBlastCycle', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBlastCycleInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BlastCycle`.

    Arguments:

    * `input` (`CreateBlastCycleInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_blast_plan_pallet = sgqlc.types.Field(CreateBlastPlanPalletPayload, graphql_name='createBlastPlanPallet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBlastPlanPalletInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BlastPlanPallet`.

    Arguments:

    * `input` (`CreateBlastPlanPalletInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_blast_plan = sgqlc.types.Field(CreateBlastPlanPayload, graphql_name='createBlastPlan', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBlastPlanInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `BlastPlan`.

    Arguments:

    * `input` (`CreateBlastPlanInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_item_freeze_time = sgqlc.types.Field(CreateItemFreezeTimePayload, graphql_name='createItemFreezeTime', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateItemFreezeTimeInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `ItemFreezeTime`.

    Arguments:

    * `input` (`CreateItemFreezeTimeInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_item_short_category_name = sgqlc.types.Field(CreateItemShortCategoryNamePayload, graphql_name='createItemShortCategoryName', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateItemShortCategoryNameInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `ItemShortCategoryName`.

    Arguments:

    * `input` (`CreateItemShortCategoryNameInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    create_cursor_history = sgqlc.types.Field(CreateCursorHistoryPayload, graphql_name='createCursorHistory', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCursorHistoryInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `CursorHistory`.

    Arguments:

    * `input` (`CreateCursorHistoryInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_source_channel_cursor = sgqlc.types.Field(CreateSourceChannelCursorPayload, graphql_name='createSourceChannelCursor', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateSourceChannelCursorInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `SourceChannelCursor`.

    Arguments:

    * `input` (`CreateSourceChannelCursorInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_edge_node_source_channel_access = sgqlc.types.Field(CreateEdgeNodeSourceChannelAccessPayload, graphql_name='createEdgeNodeSourceChannelAccess', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateEdgeNodeSourceChannelAccessInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `EdgeNodeSourceChannelAccess`.

    Arguments:

    * `input` (`CreateEdgeNodeSourceChannelAccessInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    create_edge_node = sgqlc.types.Field(CreateEdgeNodePayload, graphql_name='createEdgeNode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateEdgeNodeInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `EdgeNode`.

    Arguments:

    * `input` (`CreateEdgeNodeInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_source_channel = sgqlc.types.Field(CreateSourceChannelPayload, graphql_name='createSourceChannel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateSourceChannelInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `SourceChannel`.

    Arguments:

    * `input` (`CreateSourceChannelInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_source_type = sgqlc.types.Field(CreateSourceTypePayload, graphql_name='createSourceType', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateSourceTypeInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `SourceType`.

    Arguments:

    * `input` (`CreateSourceTypeInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    create_source = sgqlc.types.Field(CreateSourcePayload, graphql_name='createSource', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateSourceInput), graphql_name='input', default=None)),
))
    )
    '''Creates a single `Source`.

    Arguments:

    * `input` (`CreateSourceInput!`): The exclusive input argument for
      this mutation. An object type, make sure to see documentation
      for this object’s fields.
    '''

    update_facility_by_node_id = sgqlc.types.Field('UpdateFacilityPayload', graphql_name='updateFacilityByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFacilityByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `Facility` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateFacilityByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_facility = sgqlc.types.Field('UpdateFacilityPayload', graphql_name='updateFacility', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFacilityInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `Facility` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateFacilityInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_facilities_test_by_node_id = sgqlc.types.Field('UpdateFacilitiesTestPayload', graphql_name='updateFacilitiesTestByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFacilitiesTestByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `FacilitiesTest` using its globally unique id and
    a patch.

    Arguments:

    * `input` (`UpdateFacilitiesTestByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_facilities_test = sgqlc.types.Field('UpdateFacilitiesTestPayload', graphql_name='updateFacilitiesTest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFacilitiesTestInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `FacilitiesTest` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateFacilitiesTestInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_facility_grouping_by_node_id = sgqlc.types.Field('UpdateFacilityGroupingPayload', graphql_name='updateFacilityGroupingByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFacilityGroupingByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `FacilityGrouping` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateFacilityGroupingByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_facility_grouping = sgqlc.types.Field('UpdateFacilityGroupingPayload', graphql_name='updateFacilityGrouping', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFacilityGroupingInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `FacilityGrouping` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateFacilityGroupingInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_facility_workday_cost_center_by_node_id = sgqlc.types.Field('UpdateFacilityWorkdayCostCenterPayload', graphql_name='updateFacilityWorkdayCostCenterByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFacilityWorkdayCostCenterByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `FacilityWorkdayCostCenter` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateFacilityWorkdayCostCenterByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_facility_workday_cost_center = sgqlc.types.Field('UpdateFacilityWorkdayCostCenterPayload', graphql_name='updateFacilityWorkdayCostCenter', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFacilityWorkdayCostCenterInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `FacilityWorkdayCostCenter` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateFacilityWorkdayCostCenterInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_workday_cost_center_by_node_id = sgqlc.types.Field('UpdateWorkdayCostCenterPayload', graphql_name='updateWorkdayCostCenterByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWorkdayCostCenterByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WorkdayCostCenter` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateWorkdayCostCenterByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_workday_cost_center = sgqlc.types.Field('UpdateWorkdayCostCenterPayload', graphql_name='updateWorkdayCostCenter', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWorkdayCostCenterInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WorkdayCostCenter` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateWorkdayCostCenterInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_aggregate_warehouse_util_by_customer_raw_by_node_id = sgqlc.types.Field('UpdateAggregateWarehouseUtilByCustomerRawPayload', graphql_name='updateAggregateWarehouseUtilByCustomerRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAggregateWarehouseUtilByCustomerRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `AggregateWarehouseUtilByCustomerRaw` using its
    globally unique id and a patch.

    Arguments:

    * `input`
      (`UpdateAggregateWarehouseUtilByCustomerRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_aggregate_warehouse_util_by_customer_raw = sgqlc.types.Field('UpdateAggregateWarehouseUtilByCustomerRawPayload', graphql_name='updateAggregateWarehouseUtilByCustomerRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAggregateWarehouseUtilByCustomerRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `AggregateWarehouseUtilByCustomerRaw` using a
    unique key and a patch.

    Arguments:

    * `input` (`UpdateAggregateWarehouseUtilByCustomerRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_aggregate_warehouse_util_raw_by_node_id = sgqlc.types.Field('UpdateAggregateWarehouseUtilRawPayload', graphql_name='updateAggregateWarehouseUtilRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAggregateWarehouseUtilRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `AggregateWarehouseUtilRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateAggregateWarehouseUtilRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_aggregate_warehouse_util_raw = sgqlc.types.Field('UpdateAggregateWarehouseUtilRawPayload', graphql_name='updateAggregateWarehouseUtilRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAggregateWarehouseUtilRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `AggregateWarehouseUtilRaw` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateAggregateWarehouseUtilRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_aggregate_warehouse_volume_by_customer_raw_by_node_id = sgqlc.types.Field('UpdateAggregateWarehouseVolumeByCustomerRawPayload', graphql_name='updateAggregateWarehouseVolumeByCustomerRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAggregateWarehouseVolumeByCustomerRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `AggregateWarehouseVolumeByCustomerRaw` using its
    globally unique id and a patch.

    Arguments:

    * `input`
      (`UpdateAggregateWarehouseVolumeByCustomerRawByNodeIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    update_aggregate_warehouse_volume_by_customer_raw = sgqlc.types.Field('UpdateAggregateWarehouseVolumeByCustomerRawPayload', graphql_name='updateAggregateWarehouseVolumeByCustomerRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAggregateWarehouseVolumeByCustomerRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `AggregateWarehouseVolumeByCustomerRaw` using a
    unique key and a patch.

    Arguments:

    * `input` (`UpdateAggregateWarehouseVolumeByCustomerRawInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    update_aggregate_warehouse_volume_raw_by_node_id = sgqlc.types.Field('UpdateAggregateWarehouseVolumeRawPayload', graphql_name='updateAggregateWarehouseVolumeRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAggregateWarehouseVolumeRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `AggregateWarehouseVolumeRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateAggregateWarehouseVolumeRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_aggregate_warehouse_volume_raw = sgqlc.types.Field('UpdateAggregateWarehouseVolumeRawPayload', graphql_name='updateAggregateWarehouseVolumeRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAggregateWarehouseVolumeRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `AggregateWarehouseVolumeRaw` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateAggregateWarehouseVolumeRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_billing_history_raw_by_node_id = sgqlc.types.Field('UpdateBillingHistoryRawPayload', graphql_name='updateBillingHistoryRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBillingHistoryRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BillingHistoryRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateBillingHistoryRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_billing_history_raw = sgqlc.types.Field('UpdateBillingHistoryRawPayload', graphql_name='updateBillingHistoryRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBillingHistoryRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BillingHistoryRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateBillingHistoryRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_bol_constants_raw_by_node_id = sgqlc.types.Field('UpdateBolConstantsRawPayload', graphql_name='updateBolConstantsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBolConstantsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BolConstantsRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateBolConstantsRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_bol_constants_raw = sgqlc.types.Field('UpdateBolConstantsRawPayload', graphql_name='updateBolConstantsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBolConstantsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BolConstantsRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateBolConstantsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_broker_owners_raw_by_node_id = sgqlc.types.Field('UpdateBrokerOwnersRawPayload', graphql_name='updateBrokerOwnersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBrokerOwnersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BrokerOwnersRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateBrokerOwnersRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_broker_owners_raw = sgqlc.types.Field('UpdateBrokerOwnersRawPayload', graphql_name='updateBrokerOwnersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBrokerOwnersRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BrokerOwnersRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateBrokerOwnersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_carriers_raw_by_node_id = sgqlc.types.Field('UpdateCarriersRawPayload', graphql_name='updateCarriersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCarriersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `CarriersRaw` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateCarriersRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_carriers_raw = sgqlc.types.Field('UpdateCarriersRawPayload', graphql_name='updateCarriersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCarriersRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `CarriersRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateCarriersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_case_picks_raw_by_node_id = sgqlc.types.Field('UpdateCasePicksRawPayload', graphql_name='updateCasePicksRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCasePicksRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `CasePicksRaw` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateCasePicksRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_case_picks_raw = sgqlc.types.Field('UpdateCasePicksRawPayload', graphql_name='updateCasePicksRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCasePicksRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `CasePicksRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateCasePicksRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_cuts_raw_by_node_id = sgqlc.types.Field('UpdateCutsRawPayload', graphql_name='updateCutsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCutsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `CutsRaw` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateCutsRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_cuts_raw = sgqlc.types.Field('UpdateCutsRawPayload', graphql_name='updateCutsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCutsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `CutsRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateCutsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_drivers_raw_by_node_id = sgqlc.types.Field('UpdateDriversRawPayload', graphql_name='updateDriversRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateDriversRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `DriversRaw` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateDriversRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_drivers_raw = sgqlc.types.Field('UpdateDriversRawPayload', graphql_name='updateDriversRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateDriversRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `DriversRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateDriversRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_expected_inbound_order_details_raw_by_node_id = sgqlc.types.Field('UpdateExpectedInboundOrderDetailsRawPayload', graphql_name='updateExpectedInboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExpectedInboundOrderDetailsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ExpectedInboundOrderDetailsRaw` using its
    globally unique id and a patch.

    Arguments:

    * `input` (`UpdateExpectedInboundOrderDetailsRawByNodeIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    update_expected_inbound_order_details_raw = sgqlc.types.Field('UpdateExpectedInboundOrderDetailsRawPayload', graphql_name='updateExpectedInboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExpectedInboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ExpectedInboundOrderDetailsRaw` using a unique
    key and a patch.

    Arguments:

    * `input` (`UpdateExpectedInboundOrderDetailsRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_expected_inbound_orders_raw_by_node_id = sgqlc.types.Field('UpdateExpectedInboundOrdersRawPayload', graphql_name='updateExpectedInboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExpectedInboundOrdersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ExpectedInboundOrdersRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateExpectedInboundOrdersRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_expected_inbound_orders_raw = sgqlc.types.Field('UpdateExpectedInboundOrdersRawPayload', graphql_name='updateExpectedInboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExpectedInboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ExpectedInboundOrdersRaw` using a unique key and
    a patch.

    Arguments:

    * `input` (`UpdateExpectedInboundOrdersRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_expected_outbound_order_details_raw_by_node_id = sgqlc.types.Field('UpdateExpectedOutboundOrderDetailsRawPayload', graphql_name='updateExpectedOutboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExpectedOutboundOrderDetailsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ExpectedOutboundOrderDetailsRaw` using its
    globally unique id and a patch.

    Arguments:

    * `input` (`UpdateExpectedOutboundOrderDetailsRawByNodeIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    update_expected_outbound_order_details_raw = sgqlc.types.Field('UpdateExpectedOutboundOrderDetailsRawPayload', graphql_name='updateExpectedOutboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExpectedOutboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ExpectedOutboundOrderDetailsRaw` using a unique
    key and a patch.

    Arguments:

    * `input` (`UpdateExpectedOutboundOrderDetailsRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_expected_outbound_orders_raw_by_node_id = sgqlc.types.Field('UpdateExpectedOutboundOrdersRawPayload', graphql_name='updateExpectedOutboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExpectedOutboundOrdersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ExpectedOutboundOrdersRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateExpectedOutboundOrdersRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_expected_outbound_orders_raw = sgqlc.types.Field('UpdateExpectedOutboundOrdersRawPayload', graphql_name='updateExpectedOutboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExpectedOutboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ExpectedOutboundOrdersRaw` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateExpectedOutboundOrdersRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_expected_pallets_raw_by_node_id = sgqlc.types.Field('UpdateExpectedPalletsRawPayload', graphql_name='updateExpectedPalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExpectedPalletsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ExpectedPalletsRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateExpectedPalletsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_expected_pallets_raw = sgqlc.types.Field('UpdateExpectedPalletsRawPayload', graphql_name='updateExpectedPalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExpectedPalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ExpectedPalletsRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateExpectedPalletsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_hold_codes_raw_by_node_id = sgqlc.types.Field('UpdateHoldCodesRawPayload', graphql_name='updateHoldCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateHoldCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `HoldCodesRaw` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateHoldCodesRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_hold_codes_raw = sgqlc.types.Field('UpdateHoldCodesRawPayload', graphql_name='updateHoldCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateHoldCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `HoldCodesRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateHoldCodesRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_hpp_raw_by_node_id = sgqlc.types.Field('UpdateHppRawPayload', graphql_name='updateHppRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateHppRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `HppRaw` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateHppRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_hpp_raw = sgqlc.types.Field('UpdateHppRawPayload', graphql_name='updateHppRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateHppRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `HppRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateHppRawInput!`): The exclusive input argument for
      this mutation. An object type, make sure to see documentation
      for this object’s fields.
    '''

    update_inbound_catch_weight_raw_by_node_id = sgqlc.types.Field('UpdateInboundCatchWeightRawPayload', graphql_name='updateInboundCatchWeightRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundCatchWeightRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundCatchWeightRaw` using its globally unique
    id and a patch.

    Arguments:

    * `input` (`UpdateInboundCatchWeightRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inbound_catch_weight_raw = sgqlc.types.Field('UpdateInboundCatchWeightRawPayload', graphql_name='updateInboundCatchWeightRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundCatchWeightRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundCatchWeightRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateInboundCatchWeightRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_inbound_loads_raw_by_node_id = sgqlc.types.Field('UpdateInboundLoadsRawPayload', graphql_name='updateInboundLoadsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundLoadsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundLoadsRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateInboundLoadsRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_inbound_loads_raw = sgqlc.types.Field('UpdateInboundLoadsRawPayload', graphql_name='updateInboundLoadsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundLoadsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundLoadsRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateInboundLoadsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_inbound_order_comments_raw_by_node_id = sgqlc.types.Field('UpdateInboundOrderCommentsRawPayload', graphql_name='updateInboundOrderCommentsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrderCommentsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrderCommentsRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateInboundOrderCommentsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inbound_order_comments_raw = sgqlc.types.Field('UpdateInboundOrderCommentsRawPayload', graphql_name='updateInboundOrderCommentsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrderCommentsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrderCommentsRaw` using a unique key and
    a patch.

    Arguments:

    * `input` (`UpdateInboundOrderCommentsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_inbound_order_detail_reference_codes_raw_by_node_id = sgqlc.types.Field('UpdateInboundOrderDetailReferenceCodesRawPayload', graphql_name='updateInboundOrderDetailReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrderDetailReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrderDetailReferenceCodesRaw` using its
    globally unique id and a patch.

    Arguments:

    * `input`
      (`UpdateInboundOrderDetailReferenceCodesRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inbound_order_detail_reference_codes_raw = sgqlc.types.Field('UpdateInboundOrderDetailReferenceCodesRawPayload', graphql_name='updateInboundOrderDetailReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrderDetailReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrderDetailReferenceCodesRaw` using a
    unique key and a patch.

    Arguments:

    * `input` (`UpdateInboundOrderDetailReferenceCodesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inbound_order_details_raw_by_node_id = sgqlc.types.Field('UpdateInboundOrderDetailsRawPayload', graphql_name='updateInboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrderDetailsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrderDetailsRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateInboundOrderDetailsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inbound_order_details_raw = sgqlc.types.Field('UpdateInboundOrderDetailsRawPayload', graphql_name='updateInboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrderDetailsRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateInboundOrderDetailsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_inbound_order_reference_codes_raw_by_node_id = sgqlc.types.Field('UpdateInboundOrderReferenceCodesRawPayload', graphql_name='updateInboundOrderReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrderReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrderReferenceCodesRaw` using its
    globally unique id and a patch.

    Arguments:

    * `input` (`UpdateInboundOrderReferenceCodesRawByNodeIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    update_inbound_order_reference_codes_raw = sgqlc.types.Field('UpdateInboundOrderReferenceCodesRawPayload', graphql_name='updateInboundOrderReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrderReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrderReferenceCodesRaw` using a unique
    key and a patch.

    Arguments:

    * `input` (`UpdateInboundOrderReferenceCodesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inbound_orders_execution_raw_by_node_id = sgqlc.types.Field('UpdateInboundOrdersExecutionRawPayload', graphql_name='updateInboundOrdersExecutionRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrdersExecutionRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrdersExecutionRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateInboundOrdersExecutionRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inbound_orders_execution_raw = sgqlc.types.Field('UpdateInboundOrdersExecutionRawPayload', graphql_name='updateInboundOrdersExecutionRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrdersExecutionRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrdersExecutionRaw` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateInboundOrdersExecutionRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_inbound_orders_raw_by_node_id = sgqlc.types.Field('UpdateInboundOrdersRawPayload', graphql_name='updateInboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrdersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrdersRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateInboundOrdersRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_inbound_orders_raw = sgqlc.types.Field('UpdateInboundOrdersRawPayload', graphql_name='updateInboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundOrdersRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateInboundOrdersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_inbound_pallets_raw_by_node_id = sgqlc.types.Field('UpdateInboundPalletsRawPayload', graphql_name='updateInboundPalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundPalletsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundPalletsRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateInboundPalletsRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_inbound_pallets_raw = sgqlc.types.Field('UpdateInboundPalletsRawPayload', graphql_name='updateInboundPalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundPalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundPalletsRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateInboundPalletsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_inbound_truck_log_raw_by_node_id = sgqlc.types.Field('UpdateInboundTruckLogRawPayload', graphql_name='updateInboundTruckLogRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundTruckLogRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundTruckLogRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateInboundTruckLogRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inbound_truck_log_raw = sgqlc.types.Field('UpdateInboundTruckLogRawPayload', graphql_name='updateInboundTruckLogRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInboundTruckLogRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InboundTruckLogRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateInboundTruckLogRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_inventory_adjustments_raw_by_node_id = sgqlc.types.Field('UpdateInventoryAdjustmentsRawPayload', graphql_name='updateInventoryAdjustmentsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInventoryAdjustmentsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InventoryAdjustmentsRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateInventoryAdjustmentsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inventory_adjustments_raw = sgqlc.types.Field('UpdateInventoryAdjustmentsRawPayload', graphql_name='updateInventoryAdjustmentsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInventoryAdjustmentsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InventoryAdjustmentsRaw` using a unique key and
    a patch.

    Arguments:

    * `input` (`UpdateInventoryAdjustmentsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_inventory_control_raw_by_node_id = sgqlc.types.Field('UpdateInventoryControlRawPayload', graphql_name='updateInventoryControlRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInventoryControlRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InventoryControlRaw` using its globally unique
    id and a patch.

    Arguments:

    * `input` (`UpdateInventoryControlRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inventory_control_raw = sgqlc.types.Field('UpdateInventoryControlRawPayload', graphql_name='updateInventoryControlRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInventoryControlRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InventoryControlRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateInventoryControlRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_inventory_hold_history_raw_by_node_id = sgqlc.types.Field('UpdateInventoryHoldHistoryRawPayload', graphql_name='updateInventoryHoldHistoryRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInventoryHoldHistoryRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InventoryHoldHistoryRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateInventoryHoldHistoryRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_inventory_hold_history_raw = sgqlc.types.Field('UpdateInventoryHoldHistoryRawPayload', graphql_name='updateInventoryHoldHistoryRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateInventoryHoldHistoryRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `InventoryHoldHistoryRaw` using a unique key and
    a patch.

    Arguments:

    * `input` (`UpdateInventoryHoldHistoryRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_item_reference_codes_raw_by_node_id = sgqlc.types.Field('UpdateItemReferenceCodesRawPayload', graphql_name='updateItemReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateItemReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ItemReferenceCodesRaw` using its globally unique
    id and a patch.

    Arguments:

    * `input` (`UpdateItemReferenceCodesRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_item_reference_codes_raw = sgqlc.types.Field('UpdateItemReferenceCodesRawPayload', graphql_name='updateItemReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateItemReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ItemReferenceCodesRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateItemReferenceCodesRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_items_raw_by_node_id = sgqlc.types.Field('UpdateItemsRawPayload', graphql_name='updateItemsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateItemsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ItemsRaw` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateItemsRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_items_raw = sgqlc.types.Field('UpdateItemsRawPayload', graphql_name='updateItemsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateItemsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ItemsRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateItemsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_lot_reference_codes_raw_by_node_id = sgqlc.types.Field('UpdateLotReferenceCodesRawPayload', graphql_name='updateLotReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLotReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `LotReferenceCodesRaw` using its globally unique
    id and a patch.

    Arguments:

    * `input` (`UpdateLotReferenceCodesRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_lot_reference_codes_raw = sgqlc.types.Field('UpdateLotReferenceCodesRawPayload', graphql_name='updateLotReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLotReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `LotReferenceCodesRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateLotReferenceCodesRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_lot_transactions_raw_by_node_id = sgqlc.types.Field('UpdateLotTransactionsRawPayload', graphql_name='updateLotTransactionsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLotTransactionsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `LotTransactionsRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateLotTransactionsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_lot_transactions_raw = sgqlc.types.Field('UpdateLotTransactionsRawPayload', graphql_name='updateLotTransactionsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLotTransactionsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `LotTransactionsRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateLotTransactionsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_lots_raw_by_node_id = sgqlc.types.Field('UpdateLotsRawPayload', graphql_name='updateLotsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLotsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `LotsRaw` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateLotsRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_lots_raw = sgqlc.types.Field('UpdateLotsRawPayload', graphql_name='updateLotsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLotsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `LotsRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateLotsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_outbound_catch_weight_raw_by_node_id = sgqlc.types.Field('UpdateOutboundCatchWeightRawPayload', graphql_name='updateOutboundCatchWeightRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundCatchWeightRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundCatchWeightRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateOutboundCatchWeightRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_outbound_catch_weight_raw = sgqlc.types.Field('UpdateOutboundCatchWeightRawPayload', graphql_name='updateOutboundCatchWeightRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundCatchWeightRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundCatchWeightRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateOutboundCatchWeightRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_outbound_loads_raw_by_node_id = sgqlc.types.Field('UpdateOutboundLoadsRawPayload', graphql_name='updateOutboundLoadsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundLoadsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundLoadsRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateOutboundLoadsRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_outbound_loads_raw = sgqlc.types.Field('UpdateOutboundLoadsRawPayload', graphql_name='updateOutboundLoadsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundLoadsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundLoadsRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateOutboundLoadsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_outbound_order_comments_raw_by_node_id = sgqlc.types.Field('UpdateOutboundOrderCommentsRawPayload', graphql_name='updateOutboundOrderCommentsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrderCommentsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrderCommentsRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateOutboundOrderCommentsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_outbound_order_comments_raw = sgqlc.types.Field('UpdateOutboundOrderCommentsRawPayload', graphql_name='updateOutboundOrderCommentsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrderCommentsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrderCommentsRaw` using a unique key and
    a patch.

    Arguments:

    * `input` (`UpdateOutboundOrderCommentsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_outbound_order_details_execution_raw_by_node_id = sgqlc.types.Field('UpdateOutboundOrderDetailsExecutionRawPayload', graphql_name='updateOutboundOrderDetailsExecutionRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrderDetailsExecutionRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrderDetailsExecutionRaw` using its
    globally unique id and a patch.

    Arguments:

    * `input`
      (`UpdateOutboundOrderDetailsExecutionRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_outbound_order_details_execution_raw = sgqlc.types.Field('UpdateOutboundOrderDetailsExecutionRawPayload', graphql_name='updateOutboundOrderDetailsExecutionRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrderDetailsExecutionRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrderDetailsExecutionRaw` using a unique
    key and a patch.

    Arguments:

    * `input` (`UpdateOutboundOrderDetailsExecutionRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_outbound_order_details_raw_by_node_id = sgqlc.types.Field('UpdateOutboundOrderDetailsRawPayload', graphql_name='updateOutboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrderDetailsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrderDetailsRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateOutboundOrderDetailsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_outbound_order_details_raw = sgqlc.types.Field('UpdateOutboundOrderDetailsRawPayload', graphql_name='updateOutboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrderDetailsRaw` using a unique key and
    a patch.

    Arguments:

    * `input` (`UpdateOutboundOrderDetailsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_outbound_order_reference_codes_raw_by_node_id = sgqlc.types.Field('UpdateOutboundOrderReferenceCodesRawPayload', graphql_name='updateOutboundOrderReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrderReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrderReferenceCodesRaw` using its
    globally unique id and a patch.

    Arguments:

    * `input` (`UpdateOutboundOrderReferenceCodesRawByNodeIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    update_outbound_order_reference_codes_raw = sgqlc.types.Field('UpdateOutboundOrderReferenceCodesRawPayload', graphql_name='updateOutboundOrderReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrderReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrderReferenceCodesRaw` using a unique
    key and a patch.

    Arguments:

    * `input` (`UpdateOutboundOrderReferenceCodesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_outbound_orders_execution_raw_by_node_id = sgqlc.types.Field('UpdateOutboundOrdersExecutionRawPayload', graphql_name='updateOutboundOrdersExecutionRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrdersExecutionRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrdersExecutionRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateOutboundOrdersExecutionRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_outbound_orders_execution_raw = sgqlc.types.Field('UpdateOutboundOrdersExecutionRawPayload', graphql_name='updateOutboundOrdersExecutionRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrdersExecutionRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrdersExecutionRaw` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateOutboundOrdersExecutionRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_outbound_orders_raw_by_node_id = sgqlc.types.Field('UpdateOutboundOrdersRawPayload', graphql_name='updateOutboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrdersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrdersRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateOutboundOrdersRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_outbound_orders_raw = sgqlc.types.Field('UpdateOutboundOrdersRawPayload', graphql_name='updateOutboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundOrdersRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateOutboundOrdersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_outbound_pallets_raw_by_node_id = sgqlc.types.Field('UpdateOutboundPalletsRawPayload', graphql_name='updateOutboundPalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundPalletsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundPalletsRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateOutboundPalletsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_outbound_pallets_raw = sgqlc.types.Field('UpdateOutboundPalletsRawPayload', graphql_name='updateOutboundPalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundPalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundPalletsRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateOutboundPalletsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_outbound_truck_log_raw_by_node_id = sgqlc.types.Field('UpdateOutboundTruckLogRawPayload', graphql_name='updateOutboundTruckLogRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundTruckLogRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundTruckLogRaw` using its globally unique
    id and a patch.

    Arguments:

    * `input` (`UpdateOutboundTruckLogRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_outbound_truck_log_raw = sgqlc.types.Field('UpdateOutboundTruckLogRawPayload', graphql_name='updateOutboundTruckLogRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOutboundTruckLogRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `OutboundTruckLogRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateOutboundTruckLogRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_pallet_history_raw_by_node_id = sgqlc.types.Field('UpdatePalletHistoryRawPayload', graphql_name='updatePalletHistoryRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletHistoryRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `PalletHistoryRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdatePalletHistoryRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_pallet_history_raw = sgqlc.types.Field('UpdatePalletHistoryRawPayload', graphql_name='updatePalletHistoryRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletHistoryRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `PalletHistoryRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdatePalletHistoryRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_pallet_locations_raw_by_node_id = sgqlc.types.Field('UpdatePalletLocationsRawPayload', graphql_name='updatePalletLocationsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletLocationsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `PalletLocationsRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdatePalletLocationsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_pallet_locations_raw = sgqlc.types.Field('UpdatePalletLocationsRawPayload', graphql_name='updatePalletLocationsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletLocationsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `PalletLocationsRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdatePalletLocationsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_pallet_reference_codes_raw_by_node_id = sgqlc.types.Field('UpdatePalletReferenceCodesRawPayload', graphql_name='updatePalletReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `PalletReferenceCodesRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdatePalletReferenceCodesRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_pallet_reference_codes_raw = sgqlc.types.Field('UpdatePalletReferenceCodesRawPayload', graphql_name='updatePalletReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `PalletReferenceCodesRaw` using a unique key and
    a patch.

    Arguments:

    * `input` (`UpdatePalletReferenceCodesRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_pallet_transactions_raw_by_node_id = sgqlc.types.Field('UpdatePalletTransactionsRawPayload', graphql_name='updatePalletTransactionsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletTransactionsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `PalletTransactionsRaw` using its globally unique
    id and a patch.

    Arguments:

    * `input` (`UpdatePalletTransactionsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_pallet_transactions_raw = sgqlc.types.Field('UpdatePalletTransactionsRawPayload', graphql_name='updatePalletTransactionsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletTransactionsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `PalletTransactionsRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdatePalletTransactionsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_pallets_raw_by_node_id = sgqlc.types.Field('UpdatePalletsRawPayload', graphql_name='updatePalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `PalletsRaw` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdatePalletsRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_pallets_raw = sgqlc.types.Field('UpdatePalletsRawPayload', graphql_name='updatePalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `PalletsRaw` using a unique key and a patch.

    Arguments:

    * `input` (`UpdatePalletsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_stop_locations_raw_by_node_id = sgqlc.types.Field('UpdateStopLocationsRawPayload', graphql_name='updateStopLocationsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateStopLocationsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `StopLocationsRaw` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateStopLocationsRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_stop_locations_raw = sgqlc.types.Field('UpdateStopLocationsRawPayload', graphql_name='updateStopLocationsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateStopLocationsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `StopLocationsRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateStopLocationsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_warehouse_customers_config_raw_by_node_id = sgqlc.types.Field('UpdateWarehouseCustomersConfigRawPayload', graphql_name='updateWarehouseCustomersConfigRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWarehouseCustomersConfigRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WarehouseCustomersConfigRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateWarehouseCustomersConfigRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_warehouse_customers_config_raw = sgqlc.types.Field('UpdateWarehouseCustomersConfigRawPayload', graphql_name='updateWarehouseCustomersConfigRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWarehouseCustomersConfigRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WarehouseCustomersConfigRaw` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateWarehouseCustomersConfigRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_warehouse_customers_raw_by_node_id = sgqlc.types.Field('UpdateWarehouseCustomersRawPayload', graphql_name='updateWarehouseCustomersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWarehouseCustomersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WarehouseCustomersRaw` using its globally unique
    id and a patch.

    Arguments:

    * `input` (`UpdateWarehouseCustomersRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_warehouse_customers_raw = sgqlc.types.Field('UpdateWarehouseCustomersRawPayload', graphql_name='updateWarehouseCustomersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWarehouseCustomersRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WarehouseCustomersRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateWarehouseCustomersRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_warehouse_pick_activities_raw_by_node_id = sgqlc.types.Field('UpdateWarehousePickActivitiesRawPayload', graphql_name='updateWarehousePickActivitiesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWarehousePickActivitiesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WarehousePickActivitiesRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateWarehousePickActivitiesRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_warehouse_pick_activities_raw = sgqlc.types.Field('UpdateWarehousePickActivitiesRawPayload', graphql_name='updateWarehousePickActivitiesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWarehousePickActivitiesRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WarehousePickActivitiesRaw` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateWarehousePickActivitiesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_wms_facility_defaults_raw_by_node_id = sgqlc.types.Field('UpdateWmsFacilityDefaultsRawPayload', graphql_name='updateWmsFacilityDefaultsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWmsFacilityDefaultsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WmsFacilityDefaultsRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateWmsFacilityDefaultsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_wms_facility_defaults_raw = sgqlc.types.Field('UpdateWmsFacilityDefaultsRawPayload', graphql_name='updateWmsFacilityDefaultsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWmsFacilityDefaultsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WmsFacilityDefaultsRaw` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateWmsFacilityDefaultsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_wms_system_by_node_id = sgqlc.types.Field('UpdateWmsSystemPayload', graphql_name='updateWmsSystemByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWmsSystemByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WmsSystem` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateWmsSystemByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_wms_system = sgqlc.types.Field('UpdateWmsSystemPayload', graphql_name='updateWmsSystem', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWmsSystemInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WmsSystem` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateWmsSystemInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_wooden_pallet_transactions_raw_by_node_id = sgqlc.types.Field('UpdateWoodenPalletTransactionsRawPayload', graphql_name='updateWoodenPalletTransactionsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWoodenPalletTransactionsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WoodenPalletTransactionsRaw` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateWoodenPalletTransactionsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_wooden_pallet_transactions_raw = sgqlc.types.Field('UpdateWoodenPalletTransactionsRawPayload', graphql_name='updateWoodenPalletTransactionsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWoodenPalletTransactionsRawInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `WoodenPalletTransactionsRaw` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateWoodenPalletTransactionsRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_blast_cell_type_by_node_id = sgqlc.types.Field('UpdateBlastCellTypePayload', graphql_name='updateBlastCellTypeByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCellTypeByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCellType` using its globally unique id and
    a patch.

    Arguments:

    * `input` (`UpdateBlastCellTypeByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_blast_cell_type = sgqlc.types.Field('UpdateBlastCellTypePayload', graphql_name='updateBlastCellType', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCellTypeInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCellType` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateBlastCellTypeInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_blast_cell_wms_pallet_location_by_node_id = sgqlc.types.Field('UpdateBlastCellWmsPalletLocationPayload', graphql_name='updateBlastCellWmsPalletLocationByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCellWmsPalletLocationByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCellWmsPalletLocation` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateBlastCellWmsPalletLocationByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_blast_cell_wms_pallet_location = sgqlc.types.Field('UpdateBlastCellWmsPalletLocationPayload', graphql_name='updateBlastCellWmsPalletLocation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCellWmsPalletLocationInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCellWmsPalletLocation` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateBlastCellWmsPalletLocationInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_blast_cell_wms_pallet_by_node_id = sgqlc.types.Field('UpdateBlastCellWmsPalletPayload', graphql_name='updateBlastCellWmsPalletByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCellWmsPalletByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCellWmsPallet` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateBlastCellWmsPalletByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_blast_cell_wms_pallet = sgqlc.types.Field('UpdateBlastCellWmsPalletPayload', graphql_name='updateBlastCellWmsPallet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCellWmsPalletInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCellWmsPallet` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateBlastCellWmsPalletInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_blast_cell_wms_pallet_by_blast_cell_id_and_wms_pallet_id = sgqlc.types.Field('UpdateBlastCellWmsPalletPayload', graphql_name='updateBlastCellWmsPalletByBlastCellIdAndWmsPalletId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCellWmsPalletByBlastCellIdAndWmsPalletIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCellWmsPallet` using a unique key and a
    patch.

    Arguments:

    * `input`
      (`UpdateBlastCellWmsPalletByBlastCellIdAndWmsPalletIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    update_blast_cell_by_node_id = sgqlc.types.Field('UpdateBlastCellPayload', graphql_name='updateBlastCellByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCellByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCell` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateBlastCellByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_blast_cell = sgqlc.types.Field('UpdateBlastCellPayload', graphql_name='updateBlastCell', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCellInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCell` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateBlastCellInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_blast_cycle_event_by_node_id = sgqlc.types.Field('UpdateBlastCycleEventPayload', graphql_name='updateBlastCycleEventByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCycleEventByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCycleEvent` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateBlastCycleEventByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_blast_cycle_event = sgqlc.types.Field('UpdateBlastCycleEventPayload', graphql_name='updateBlastCycleEvent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCycleEventInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCycleEvent` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateBlastCycleEventInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_blast_cycle_wms_pallet_by_node_id = sgqlc.types.Field('UpdateBlastCycleWmsPalletPayload', graphql_name='updateBlastCycleWmsPalletByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCycleWmsPalletByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCycleWmsPallet` using its globally unique
    id and a patch.

    Arguments:

    * `input` (`UpdateBlastCycleWmsPalletByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_blast_cycle_wms_pallet = sgqlc.types.Field('UpdateBlastCycleWmsPalletPayload', graphql_name='updateBlastCycleWmsPallet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCycleWmsPalletInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCycleWmsPallet` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateBlastCycleWmsPalletInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_blast_cycle_by_node_id = sgqlc.types.Field('UpdateBlastCyclePayload', graphql_name='updateBlastCycleByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCycleByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCycle` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateBlastCycleByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_blast_cycle = sgqlc.types.Field('UpdateBlastCyclePayload', graphql_name='updateBlastCycle', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastCycleInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastCycle` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateBlastCycleInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_blast_plan_pallet_by_node_id = sgqlc.types.Field('UpdateBlastPlanPalletPayload', graphql_name='updateBlastPlanPalletByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastPlanPalletByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastPlanPallet` using its globally unique id
    and a patch.

    Arguments:

    * `input` (`UpdateBlastPlanPalletByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_blast_plan_pallet = sgqlc.types.Field('UpdateBlastPlanPalletPayload', graphql_name='updateBlastPlanPallet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastPlanPalletInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastPlanPallet` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateBlastPlanPalletInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_blast_plan_by_node_id = sgqlc.types.Field('UpdateBlastPlanPayload', graphql_name='updateBlastPlanByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastPlanByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastPlan` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateBlastPlanByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_blast_plan = sgqlc.types.Field('UpdateBlastPlanPayload', graphql_name='updateBlastPlan', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBlastPlanInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `BlastPlan` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateBlastPlanInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_item_freeze_time_by_node_id = sgqlc.types.Field('UpdateItemFreezeTimePayload', graphql_name='updateItemFreezeTimeByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateItemFreezeTimeByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ItemFreezeTime` using its globally unique id and
    a patch.

    Arguments:

    * `input` (`UpdateItemFreezeTimeByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_item_freeze_time = sgqlc.types.Field('UpdateItemFreezeTimePayload', graphql_name='updateItemFreezeTime', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateItemFreezeTimeInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ItemFreezeTime` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateItemFreezeTimeInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_item_short_category_name_by_node_id = sgqlc.types.Field('UpdateItemShortCategoryNamePayload', graphql_name='updateItemShortCategoryNameByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateItemShortCategoryNameByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ItemShortCategoryName` using its globally unique
    id and a patch.

    Arguments:

    * `input` (`UpdateItemShortCategoryNameByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_item_short_category_name = sgqlc.types.Field('UpdateItemShortCategoryNamePayload', graphql_name='updateItemShortCategoryName', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateItemShortCategoryNameInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `ItemShortCategoryName` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateItemShortCategoryNameInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_cursor_history_by_node_id = sgqlc.types.Field('UpdateCursorHistoryPayload', graphql_name='updateCursorHistoryByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCursorHistoryByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `CursorHistory` using its globally unique id and
    a patch.

    Arguments:

    * `input` (`UpdateCursorHistoryByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_cursor_history = sgqlc.types.Field('UpdateCursorHistoryPayload', graphql_name='updateCursorHistory', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCursorHistoryInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `CursorHistory` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateCursorHistoryInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_source_channel_cursor_by_node_id = sgqlc.types.Field('UpdateSourceChannelCursorPayload', graphql_name='updateSourceChannelCursorByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSourceChannelCursorByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `SourceChannelCursor` using its globally unique
    id and a patch.

    Arguments:

    * `input` (`UpdateSourceChannelCursorByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_source_channel_cursor = sgqlc.types.Field('UpdateSourceChannelCursorPayload', graphql_name='updateSourceChannelCursor', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSourceChannelCursorInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `SourceChannelCursor` using a unique key and a
    patch.

    Arguments:

    * `input` (`UpdateSourceChannelCursorInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_edge_node_source_channel_access_by_node_id = sgqlc.types.Field('UpdateEdgeNodeSourceChannelAccessPayload', graphql_name='updateEdgeNodeSourceChannelAccessByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateEdgeNodeSourceChannelAccessByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `EdgeNodeSourceChannelAccess` using its globally
    unique id and a patch.

    Arguments:

    * `input` (`UpdateEdgeNodeSourceChannelAccessByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_edge_node_source_channel_access = sgqlc.types.Field('UpdateEdgeNodeSourceChannelAccessPayload', graphql_name='updateEdgeNodeSourceChannelAccess', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateEdgeNodeSourceChannelAccessInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `EdgeNodeSourceChannelAccess` using a unique key
    and a patch.

    Arguments:

    * `input` (`UpdateEdgeNodeSourceChannelAccessInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    update_edge_node_by_node_id = sgqlc.types.Field('UpdateEdgeNodePayload', graphql_name='updateEdgeNodeByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateEdgeNodeByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `EdgeNode` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateEdgeNodeByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_edge_node = sgqlc.types.Field('UpdateEdgeNodePayload', graphql_name='updateEdgeNode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateEdgeNodeInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `EdgeNode` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateEdgeNodeInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_source_channel_by_node_id = sgqlc.types.Field('UpdateSourceChannelPayload', graphql_name='updateSourceChannelByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSourceChannelByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `SourceChannel` using its globally unique id and
    a patch.

    Arguments:

    * `input` (`UpdateSourceChannelByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_source_channel = sgqlc.types.Field('UpdateSourceChannelPayload', graphql_name='updateSourceChannel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSourceChannelInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `SourceChannel` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateSourceChannelInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_source_type_by_node_id = sgqlc.types.Field('UpdateSourceTypePayload', graphql_name='updateSourceTypeByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSourceTypeByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `SourceType` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateSourceTypeByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_source_type = sgqlc.types.Field('UpdateSourceTypePayload', graphql_name='updateSourceType', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSourceTypeInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `SourceType` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateSourceTypeInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_source_by_node_id = sgqlc.types.Field('UpdateSourcePayload', graphql_name='updateSourceByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSourceByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `Source` using its globally unique id and a
    patch.

    Arguments:

    * `input` (`UpdateSourceByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_source = sgqlc.types.Field('UpdateSourcePayload', graphql_name='updateSource', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSourceInput), graphql_name='input', default=None)),
))
    )
    '''Updates a single `Source` using a unique key and a patch.

    Arguments:

    * `input` (`UpdateSourceInput!`): The exclusive input argument for
      this mutation. An object type, make sure to see documentation
      for this object’s fields.
    '''

    delete_facility_by_node_id = sgqlc.types.Field(DeleteFacilityPayload, graphql_name='deleteFacilityByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteFacilityByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `Facility` using its globally unique id.

    Arguments:

    * `input` (`DeleteFacilityByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_facility = sgqlc.types.Field(DeleteFacilityPayload, graphql_name='deleteFacility', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteFacilityInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `Facility` using a unique key.

    Arguments:

    * `input` (`DeleteFacilityInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_facilities_test_by_node_id = sgqlc.types.Field(DeleteFacilitiesTestPayload, graphql_name='deleteFacilitiesTestByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteFacilitiesTestByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `FacilitiesTest` using its globally unique id.

    Arguments:

    * `input` (`DeleteFacilitiesTestByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_facilities_test = sgqlc.types.Field(DeleteFacilitiesTestPayload, graphql_name='deleteFacilitiesTest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteFacilitiesTestInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `FacilitiesTest` using a unique key.

    Arguments:

    * `input` (`DeleteFacilitiesTestInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_facility_grouping_by_node_id = sgqlc.types.Field(DeleteFacilityGroupingPayload, graphql_name='deleteFacilityGroupingByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteFacilityGroupingByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `FacilityGrouping` using its globally unique id.

    Arguments:

    * `input` (`DeleteFacilityGroupingByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_facility_grouping = sgqlc.types.Field(DeleteFacilityGroupingPayload, graphql_name='deleteFacilityGrouping', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteFacilityGroupingInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `FacilityGrouping` using a unique key.

    Arguments:

    * `input` (`DeleteFacilityGroupingInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_facility_workday_cost_center_by_node_id = sgqlc.types.Field(DeleteFacilityWorkdayCostCenterPayload, graphql_name='deleteFacilityWorkdayCostCenterByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteFacilityWorkdayCostCenterByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `FacilityWorkdayCostCenter` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteFacilityWorkdayCostCenterByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_facility_workday_cost_center = sgqlc.types.Field(DeleteFacilityWorkdayCostCenterPayload, graphql_name='deleteFacilityWorkdayCostCenter', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteFacilityWorkdayCostCenterInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `FacilityWorkdayCostCenter` using a unique key.

    Arguments:

    * `input` (`DeleteFacilityWorkdayCostCenterInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_workday_cost_center_by_node_id = sgqlc.types.Field(DeleteWorkdayCostCenterPayload, graphql_name='deleteWorkdayCostCenterByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWorkdayCostCenterByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WorkdayCostCenter` using its globally unique id.

    Arguments:

    * `input` (`DeleteWorkdayCostCenterByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_workday_cost_center = sgqlc.types.Field(DeleteWorkdayCostCenterPayload, graphql_name='deleteWorkdayCostCenter', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWorkdayCostCenterInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WorkdayCostCenter` using a unique key.

    Arguments:

    * `input` (`DeleteWorkdayCostCenterInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_aggregate_warehouse_util_by_customer_raw_by_node_id = sgqlc.types.Field(DeleteAggregateWarehouseUtilByCustomerRawPayload, graphql_name='deleteAggregateWarehouseUtilByCustomerRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteAggregateWarehouseUtilByCustomerRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `AggregateWarehouseUtilByCustomerRaw` using its
    globally unique id.

    Arguments:

    * `input`
      (`DeleteAggregateWarehouseUtilByCustomerRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_aggregate_warehouse_util_by_customer_raw = sgqlc.types.Field(DeleteAggregateWarehouseUtilByCustomerRawPayload, graphql_name='deleteAggregateWarehouseUtilByCustomerRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteAggregateWarehouseUtilByCustomerRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `AggregateWarehouseUtilByCustomerRaw` using a
    unique key.

    Arguments:

    * `input` (`DeleteAggregateWarehouseUtilByCustomerRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_aggregate_warehouse_util_raw_by_node_id = sgqlc.types.Field(DeleteAggregateWarehouseUtilRawPayload, graphql_name='deleteAggregateWarehouseUtilRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteAggregateWarehouseUtilRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `AggregateWarehouseUtilRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteAggregateWarehouseUtilRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_aggregate_warehouse_util_raw = sgqlc.types.Field(DeleteAggregateWarehouseUtilRawPayload, graphql_name='deleteAggregateWarehouseUtilRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteAggregateWarehouseUtilRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `AggregateWarehouseUtilRaw` using a unique key.

    Arguments:

    * `input` (`DeleteAggregateWarehouseUtilRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_aggregate_warehouse_volume_by_customer_raw_by_node_id = sgqlc.types.Field(DeleteAggregateWarehouseVolumeByCustomerRawPayload, graphql_name='deleteAggregateWarehouseVolumeByCustomerRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteAggregateWarehouseVolumeByCustomerRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `AggregateWarehouseVolumeByCustomerRaw` using its
    globally unique id.

    Arguments:

    * `input`
      (`DeleteAggregateWarehouseVolumeByCustomerRawByNodeIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    delete_aggregate_warehouse_volume_by_customer_raw = sgqlc.types.Field(DeleteAggregateWarehouseVolumeByCustomerRawPayload, graphql_name='deleteAggregateWarehouseVolumeByCustomerRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteAggregateWarehouseVolumeByCustomerRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `AggregateWarehouseVolumeByCustomerRaw` using a
    unique key.

    Arguments:

    * `input` (`DeleteAggregateWarehouseVolumeByCustomerRawInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    delete_aggregate_warehouse_volume_raw_by_node_id = sgqlc.types.Field(DeleteAggregateWarehouseVolumeRawPayload, graphql_name='deleteAggregateWarehouseVolumeRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteAggregateWarehouseVolumeRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `AggregateWarehouseVolumeRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteAggregateWarehouseVolumeRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_aggregate_warehouse_volume_raw = sgqlc.types.Field(DeleteAggregateWarehouseVolumeRawPayload, graphql_name='deleteAggregateWarehouseVolumeRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteAggregateWarehouseVolumeRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `AggregateWarehouseVolumeRaw` using a unique key.

    Arguments:

    * `input` (`DeleteAggregateWarehouseVolumeRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_billing_history_raw_by_node_id = sgqlc.types.Field(DeleteBillingHistoryRawPayload, graphql_name='deleteBillingHistoryRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBillingHistoryRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BillingHistoryRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteBillingHistoryRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_billing_history_raw = sgqlc.types.Field(DeleteBillingHistoryRawPayload, graphql_name='deleteBillingHistoryRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBillingHistoryRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BillingHistoryRaw` using a unique key.

    Arguments:

    * `input` (`DeleteBillingHistoryRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_bol_constants_raw_by_node_id = sgqlc.types.Field(DeleteBolConstantsRawPayload, graphql_name='deleteBolConstantsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBolConstantsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BolConstantsRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteBolConstantsRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_bol_constants_raw = sgqlc.types.Field(DeleteBolConstantsRawPayload, graphql_name='deleteBolConstantsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBolConstantsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BolConstantsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteBolConstantsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_broker_owners_raw_by_node_id = sgqlc.types.Field(DeleteBrokerOwnersRawPayload, graphql_name='deleteBrokerOwnersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBrokerOwnersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BrokerOwnersRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteBrokerOwnersRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_broker_owners_raw = sgqlc.types.Field(DeleteBrokerOwnersRawPayload, graphql_name='deleteBrokerOwnersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBrokerOwnersRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BrokerOwnersRaw` using a unique key.

    Arguments:

    * `input` (`DeleteBrokerOwnersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_carriers_raw_by_node_id = sgqlc.types.Field(DeleteCarriersRawPayload, graphql_name='deleteCarriersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCarriersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `CarriersRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteCarriersRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_carriers_raw = sgqlc.types.Field(DeleteCarriersRawPayload, graphql_name='deleteCarriersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCarriersRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `CarriersRaw` using a unique key.

    Arguments:

    * `input` (`DeleteCarriersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_case_picks_raw_by_node_id = sgqlc.types.Field(DeleteCasePicksRawPayload, graphql_name='deleteCasePicksRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCasePicksRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `CasePicksRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteCasePicksRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_case_picks_raw = sgqlc.types.Field(DeleteCasePicksRawPayload, graphql_name='deleteCasePicksRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCasePicksRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `CasePicksRaw` using a unique key.

    Arguments:

    * `input` (`DeleteCasePicksRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_cuts_raw_by_node_id = sgqlc.types.Field(DeleteCutsRawPayload, graphql_name='deleteCutsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCutsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `CutsRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteCutsRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_cuts_raw = sgqlc.types.Field(DeleteCutsRawPayload, graphql_name='deleteCutsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCutsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `CutsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteCutsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_drivers_raw_by_node_id = sgqlc.types.Field(DeleteDriversRawPayload, graphql_name='deleteDriversRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteDriversRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `DriversRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteDriversRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_drivers_raw = sgqlc.types.Field(DeleteDriversRawPayload, graphql_name='deleteDriversRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteDriversRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `DriversRaw` using a unique key.

    Arguments:

    * `input` (`DeleteDriversRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_expected_inbound_order_details_raw_by_node_id = sgqlc.types.Field(DeleteExpectedInboundOrderDetailsRawPayload, graphql_name='deleteExpectedInboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExpectedInboundOrderDetailsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ExpectedInboundOrderDetailsRaw` using its
    globally unique id.

    Arguments:

    * `input` (`DeleteExpectedInboundOrderDetailsRawByNodeIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    delete_expected_inbound_order_details_raw = sgqlc.types.Field(DeleteExpectedInboundOrderDetailsRawPayload, graphql_name='deleteExpectedInboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExpectedInboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ExpectedInboundOrderDetailsRaw` using a unique
    key.

    Arguments:

    * `input` (`DeleteExpectedInboundOrderDetailsRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_expected_inbound_orders_raw_by_node_id = sgqlc.types.Field(DeleteExpectedInboundOrdersRawPayload, graphql_name='deleteExpectedInboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExpectedInboundOrdersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ExpectedInboundOrdersRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteExpectedInboundOrdersRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_expected_inbound_orders_raw = sgqlc.types.Field(DeleteExpectedInboundOrdersRawPayload, graphql_name='deleteExpectedInboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExpectedInboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ExpectedInboundOrdersRaw` using a unique key.

    Arguments:

    * `input` (`DeleteExpectedInboundOrdersRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_expected_outbound_order_details_raw_by_node_id = sgqlc.types.Field(DeleteExpectedOutboundOrderDetailsRawPayload, graphql_name='deleteExpectedOutboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExpectedOutboundOrderDetailsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ExpectedOutboundOrderDetailsRaw` using its
    globally unique id.

    Arguments:

    * `input` (`DeleteExpectedOutboundOrderDetailsRawByNodeIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    delete_expected_outbound_order_details_raw = sgqlc.types.Field(DeleteExpectedOutboundOrderDetailsRawPayload, graphql_name='deleteExpectedOutboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExpectedOutboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ExpectedOutboundOrderDetailsRaw` using a unique
    key.

    Arguments:

    * `input` (`DeleteExpectedOutboundOrderDetailsRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_expected_outbound_orders_raw_by_node_id = sgqlc.types.Field(DeleteExpectedOutboundOrdersRawPayload, graphql_name='deleteExpectedOutboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExpectedOutboundOrdersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ExpectedOutboundOrdersRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteExpectedOutboundOrdersRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_expected_outbound_orders_raw = sgqlc.types.Field(DeleteExpectedOutboundOrdersRawPayload, graphql_name='deleteExpectedOutboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExpectedOutboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ExpectedOutboundOrdersRaw` using a unique key.

    Arguments:

    * `input` (`DeleteExpectedOutboundOrdersRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_expected_pallets_raw_by_node_id = sgqlc.types.Field(DeleteExpectedPalletsRawPayload, graphql_name='deleteExpectedPalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExpectedPalletsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ExpectedPalletsRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteExpectedPalletsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_expected_pallets_raw = sgqlc.types.Field(DeleteExpectedPalletsRawPayload, graphql_name='deleteExpectedPalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExpectedPalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ExpectedPalletsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteExpectedPalletsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_hold_codes_raw_by_node_id = sgqlc.types.Field(DeleteHoldCodesRawPayload, graphql_name='deleteHoldCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteHoldCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `HoldCodesRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteHoldCodesRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_hold_codes_raw = sgqlc.types.Field(DeleteHoldCodesRawPayload, graphql_name='deleteHoldCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteHoldCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `HoldCodesRaw` using a unique key.

    Arguments:

    * `input` (`DeleteHoldCodesRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_hpp_raw_by_node_id = sgqlc.types.Field(DeleteHppRawPayload, graphql_name='deleteHppRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteHppRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `HppRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteHppRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_hpp_raw = sgqlc.types.Field(DeleteHppRawPayload, graphql_name='deleteHppRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteHppRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `HppRaw` using a unique key.

    Arguments:

    * `input` (`DeleteHppRawInput!`): The exclusive input argument for
      this mutation. An object type, make sure to see documentation
      for this object’s fields.
    '''

    delete_inbound_catch_weight_raw_by_node_id = sgqlc.types.Field(DeleteInboundCatchWeightRawPayload, graphql_name='deleteInboundCatchWeightRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundCatchWeightRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundCatchWeightRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteInboundCatchWeightRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inbound_catch_weight_raw = sgqlc.types.Field(DeleteInboundCatchWeightRawPayload, graphql_name='deleteInboundCatchWeightRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundCatchWeightRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundCatchWeightRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInboundCatchWeightRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_inbound_loads_raw_by_node_id = sgqlc.types.Field(DeleteInboundLoadsRawPayload, graphql_name='deleteInboundLoadsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundLoadsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundLoadsRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteInboundLoadsRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_inbound_loads_raw = sgqlc.types.Field(DeleteInboundLoadsRawPayload, graphql_name='deleteInboundLoadsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundLoadsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundLoadsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInboundLoadsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_inbound_order_comments_raw_by_node_id = sgqlc.types.Field(DeleteInboundOrderCommentsRawPayload, graphql_name='deleteInboundOrderCommentsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrderCommentsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrderCommentsRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteInboundOrderCommentsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inbound_order_comments_raw = sgqlc.types.Field(DeleteInboundOrderCommentsRawPayload, graphql_name='deleteInboundOrderCommentsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrderCommentsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrderCommentsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInboundOrderCommentsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_inbound_order_detail_reference_codes_raw_by_node_id = sgqlc.types.Field(DeleteInboundOrderDetailReferenceCodesRawPayload, graphql_name='deleteInboundOrderDetailReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrderDetailReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrderDetailReferenceCodesRaw` using its
    globally unique id.

    Arguments:

    * `input`
      (`DeleteInboundOrderDetailReferenceCodesRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inbound_order_detail_reference_codes_raw = sgqlc.types.Field(DeleteInboundOrderDetailReferenceCodesRawPayload, graphql_name='deleteInboundOrderDetailReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrderDetailReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrderDetailReferenceCodesRaw` using a
    unique key.

    Arguments:

    * `input` (`DeleteInboundOrderDetailReferenceCodesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inbound_order_details_raw_by_node_id = sgqlc.types.Field(DeleteInboundOrderDetailsRawPayload, graphql_name='deleteInboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrderDetailsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrderDetailsRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteInboundOrderDetailsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inbound_order_details_raw = sgqlc.types.Field(DeleteInboundOrderDetailsRawPayload, graphql_name='deleteInboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrderDetailsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInboundOrderDetailsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_inbound_order_reference_codes_raw_by_node_id = sgqlc.types.Field(DeleteInboundOrderReferenceCodesRawPayload, graphql_name='deleteInboundOrderReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrderReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrderReferenceCodesRaw` using its
    globally unique id.

    Arguments:

    * `input` (`DeleteInboundOrderReferenceCodesRawByNodeIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    delete_inbound_order_reference_codes_raw = sgqlc.types.Field(DeleteInboundOrderReferenceCodesRawPayload, graphql_name='deleteInboundOrderReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrderReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrderReferenceCodesRaw` using a unique
    key.

    Arguments:

    * `input` (`DeleteInboundOrderReferenceCodesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inbound_orders_execution_raw_by_node_id = sgqlc.types.Field(DeleteInboundOrdersExecutionRawPayload, graphql_name='deleteInboundOrdersExecutionRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrdersExecutionRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrdersExecutionRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteInboundOrdersExecutionRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inbound_orders_execution_raw = sgqlc.types.Field(DeleteInboundOrdersExecutionRawPayload, graphql_name='deleteInboundOrdersExecutionRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrdersExecutionRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrdersExecutionRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInboundOrdersExecutionRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_inbound_orders_raw_by_node_id = sgqlc.types.Field(DeleteInboundOrdersRawPayload, graphql_name='deleteInboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrdersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrdersRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteInboundOrdersRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_inbound_orders_raw = sgqlc.types.Field(DeleteInboundOrdersRawPayload, graphql_name='deleteInboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundOrdersRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInboundOrdersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_inbound_pallets_raw_by_node_id = sgqlc.types.Field(DeleteInboundPalletsRawPayload, graphql_name='deleteInboundPalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundPalletsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundPalletsRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteInboundPalletsRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_inbound_pallets_raw = sgqlc.types.Field(DeleteInboundPalletsRawPayload, graphql_name='deleteInboundPalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundPalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundPalletsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInboundPalletsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_inbound_truck_log_raw_by_node_id = sgqlc.types.Field(DeleteInboundTruckLogRawPayload, graphql_name='deleteInboundTruckLogRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundTruckLogRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundTruckLogRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteInboundTruckLogRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inbound_truck_log_raw = sgqlc.types.Field(DeleteInboundTruckLogRawPayload, graphql_name='deleteInboundTruckLogRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInboundTruckLogRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InboundTruckLogRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInboundTruckLogRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_inventory_adjustments_raw_by_node_id = sgqlc.types.Field(DeleteInventoryAdjustmentsRawPayload, graphql_name='deleteInventoryAdjustmentsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInventoryAdjustmentsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InventoryAdjustmentsRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteInventoryAdjustmentsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inventory_adjustments_raw = sgqlc.types.Field(DeleteInventoryAdjustmentsRawPayload, graphql_name='deleteInventoryAdjustmentsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInventoryAdjustmentsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InventoryAdjustmentsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInventoryAdjustmentsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_inventory_control_raw_by_node_id = sgqlc.types.Field(DeleteInventoryControlRawPayload, graphql_name='deleteInventoryControlRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInventoryControlRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InventoryControlRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteInventoryControlRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inventory_control_raw = sgqlc.types.Field(DeleteInventoryControlRawPayload, graphql_name='deleteInventoryControlRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInventoryControlRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InventoryControlRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInventoryControlRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_inventory_hold_history_raw_by_node_id = sgqlc.types.Field(DeleteInventoryHoldHistoryRawPayload, graphql_name='deleteInventoryHoldHistoryRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInventoryHoldHistoryRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InventoryHoldHistoryRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteInventoryHoldHistoryRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_inventory_hold_history_raw = sgqlc.types.Field(DeleteInventoryHoldHistoryRawPayload, graphql_name='deleteInventoryHoldHistoryRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteInventoryHoldHistoryRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `InventoryHoldHistoryRaw` using a unique key.

    Arguments:

    * `input` (`DeleteInventoryHoldHistoryRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_item_reference_codes_raw_by_node_id = sgqlc.types.Field(DeleteItemReferenceCodesRawPayload, graphql_name='deleteItemReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteItemReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ItemReferenceCodesRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteItemReferenceCodesRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_item_reference_codes_raw = sgqlc.types.Field(DeleteItemReferenceCodesRawPayload, graphql_name='deleteItemReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteItemReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ItemReferenceCodesRaw` using a unique key.

    Arguments:

    * `input` (`DeleteItemReferenceCodesRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_items_raw_by_node_id = sgqlc.types.Field(DeleteItemsRawPayload, graphql_name='deleteItemsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteItemsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ItemsRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteItemsRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_items_raw = sgqlc.types.Field(DeleteItemsRawPayload, graphql_name='deleteItemsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteItemsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ItemsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteItemsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_lot_reference_codes_raw_by_node_id = sgqlc.types.Field(DeleteLotReferenceCodesRawPayload, graphql_name='deleteLotReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteLotReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `LotReferenceCodesRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteLotReferenceCodesRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_lot_reference_codes_raw = sgqlc.types.Field(DeleteLotReferenceCodesRawPayload, graphql_name='deleteLotReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteLotReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `LotReferenceCodesRaw` using a unique key.

    Arguments:

    * `input` (`DeleteLotReferenceCodesRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_lot_transactions_raw_by_node_id = sgqlc.types.Field(DeleteLotTransactionsRawPayload, graphql_name='deleteLotTransactionsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteLotTransactionsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `LotTransactionsRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteLotTransactionsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_lot_transactions_raw = sgqlc.types.Field(DeleteLotTransactionsRawPayload, graphql_name='deleteLotTransactionsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteLotTransactionsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `LotTransactionsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteLotTransactionsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_lots_raw_by_node_id = sgqlc.types.Field(DeleteLotsRawPayload, graphql_name='deleteLotsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteLotsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `LotsRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteLotsRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_lots_raw = sgqlc.types.Field(DeleteLotsRawPayload, graphql_name='deleteLotsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteLotsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `LotsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteLotsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_outbound_catch_weight_raw_by_node_id = sgqlc.types.Field(DeleteOutboundCatchWeightRawPayload, graphql_name='deleteOutboundCatchWeightRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundCatchWeightRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundCatchWeightRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteOutboundCatchWeightRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_outbound_catch_weight_raw = sgqlc.types.Field(DeleteOutboundCatchWeightRawPayload, graphql_name='deleteOutboundCatchWeightRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundCatchWeightRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundCatchWeightRaw` using a unique key.

    Arguments:

    * `input` (`DeleteOutboundCatchWeightRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_outbound_loads_raw_by_node_id = sgqlc.types.Field(DeleteOutboundLoadsRawPayload, graphql_name='deleteOutboundLoadsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundLoadsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundLoadsRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteOutboundLoadsRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_outbound_loads_raw = sgqlc.types.Field(DeleteOutboundLoadsRawPayload, graphql_name='deleteOutboundLoadsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundLoadsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundLoadsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteOutboundLoadsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_outbound_order_comments_raw_by_node_id = sgqlc.types.Field(DeleteOutboundOrderCommentsRawPayload, graphql_name='deleteOutboundOrderCommentsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrderCommentsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrderCommentsRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteOutboundOrderCommentsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_outbound_order_comments_raw = sgqlc.types.Field(DeleteOutboundOrderCommentsRawPayload, graphql_name='deleteOutboundOrderCommentsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrderCommentsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrderCommentsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteOutboundOrderCommentsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_outbound_order_details_execution_raw_by_node_id = sgqlc.types.Field(DeleteOutboundOrderDetailsExecutionRawPayload, graphql_name='deleteOutboundOrderDetailsExecutionRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrderDetailsExecutionRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrderDetailsExecutionRaw` using its
    globally unique id.

    Arguments:

    * `input`
      (`DeleteOutboundOrderDetailsExecutionRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_outbound_order_details_execution_raw = sgqlc.types.Field(DeleteOutboundOrderDetailsExecutionRawPayload, graphql_name='deleteOutboundOrderDetailsExecutionRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrderDetailsExecutionRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrderDetailsExecutionRaw` using a unique
    key.

    Arguments:

    * `input` (`DeleteOutboundOrderDetailsExecutionRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_outbound_order_details_raw_by_node_id = sgqlc.types.Field(DeleteOutboundOrderDetailsRawPayload, graphql_name='deleteOutboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrderDetailsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrderDetailsRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteOutboundOrderDetailsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_outbound_order_details_raw = sgqlc.types.Field(DeleteOutboundOrderDetailsRawPayload, graphql_name='deleteOutboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrderDetailsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrderDetailsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteOutboundOrderDetailsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_outbound_order_reference_codes_raw_by_node_id = sgqlc.types.Field(DeleteOutboundOrderReferenceCodesRawPayload, graphql_name='deleteOutboundOrderReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrderReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrderReferenceCodesRaw` using its
    globally unique id.

    Arguments:

    * `input` (`DeleteOutboundOrderReferenceCodesRawByNodeIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    delete_outbound_order_reference_codes_raw = sgqlc.types.Field(DeleteOutboundOrderReferenceCodesRawPayload, graphql_name='deleteOutboundOrderReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrderReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrderReferenceCodesRaw` using a unique
    key.

    Arguments:

    * `input` (`DeleteOutboundOrderReferenceCodesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_outbound_orders_execution_raw_by_node_id = sgqlc.types.Field(DeleteOutboundOrdersExecutionRawPayload, graphql_name='deleteOutboundOrdersExecutionRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrdersExecutionRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrdersExecutionRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteOutboundOrdersExecutionRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_outbound_orders_execution_raw = sgqlc.types.Field(DeleteOutboundOrdersExecutionRawPayload, graphql_name='deleteOutboundOrdersExecutionRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrdersExecutionRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrdersExecutionRaw` using a unique key.

    Arguments:

    * `input` (`DeleteOutboundOrdersExecutionRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_outbound_orders_raw_by_node_id = sgqlc.types.Field(DeleteOutboundOrdersRawPayload, graphql_name='deleteOutboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrdersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrdersRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteOutboundOrdersRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_outbound_orders_raw = sgqlc.types.Field(DeleteOutboundOrdersRawPayload, graphql_name='deleteOutboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundOrdersRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundOrdersRaw` using a unique key.

    Arguments:

    * `input` (`DeleteOutboundOrdersRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_outbound_pallets_raw_by_node_id = sgqlc.types.Field(DeleteOutboundPalletsRawPayload, graphql_name='deleteOutboundPalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundPalletsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundPalletsRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteOutboundPalletsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_outbound_pallets_raw = sgqlc.types.Field(DeleteOutboundPalletsRawPayload, graphql_name='deleteOutboundPalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundPalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundPalletsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteOutboundPalletsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_outbound_truck_log_raw_by_node_id = sgqlc.types.Field(DeleteOutboundTruckLogRawPayload, graphql_name='deleteOutboundTruckLogRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundTruckLogRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundTruckLogRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteOutboundTruckLogRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_outbound_truck_log_raw = sgqlc.types.Field(DeleteOutboundTruckLogRawPayload, graphql_name='deleteOutboundTruckLogRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteOutboundTruckLogRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `OutboundTruckLogRaw` using a unique key.

    Arguments:

    * `input` (`DeleteOutboundTruckLogRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_pallet_history_raw_by_node_id = sgqlc.types.Field(DeletePalletHistoryRawPayload, graphql_name='deletePalletHistoryRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePalletHistoryRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `PalletHistoryRaw` using its globally unique id.

    Arguments:

    * `input` (`DeletePalletHistoryRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_pallet_history_raw = sgqlc.types.Field(DeletePalletHistoryRawPayload, graphql_name='deletePalletHistoryRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePalletHistoryRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `PalletHistoryRaw` using a unique key.

    Arguments:

    * `input` (`DeletePalletHistoryRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_pallet_locations_raw_by_node_id = sgqlc.types.Field(DeletePalletLocationsRawPayload, graphql_name='deletePalletLocationsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePalletLocationsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `PalletLocationsRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeletePalletLocationsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_pallet_locations_raw = sgqlc.types.Field(DeletePalletLocationsRawPayload, graphql_name='deletePalletLocationsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePalletLocationsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `PalletLocationsRaw` using a unique key.

    Arguments:

    * `input` (`DeletePalletLocationsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_pallet_reference_codes_raw_by_node_id = sgqlc.types.Field(DeletePalletReferenceCodesRawPayload, graphql_name='deletePalletReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePalletReferenceCodesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `PalletReferenceCodesRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeletePalletReferenceCodesRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_pallet_reference_codes_raw = sgqlc.types.Field(DeletePalletReferenceCodesRawPayload, graphql_name='deletePalletReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePalletReferenceCodesRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `PalletReferenceCodesRaw` using a unique key.

    Arguments:

    * `input` (`DeletePalletReferenceCodesRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_pallet_transactions_raw_by_node_id = sgqlc.types.Field(DeletePalletTransactionsRawPayload, graphql_name='deletePalletTransactionsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePalletTransactionsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `PalletTransactionsRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeletePalletTransactionsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_pallet_transactions_raw = sgqlc.types.Field(DeletePalletTransactionsRawPayload, graphql_name='deletePalletTransactionsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePalletTransactionsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `PalletTransactionsRaw` using a unique key.

    Arguments:

    * `input` (`DeletePalletTransactionsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_pallets_raw_by_node_id = sgqlc.types.Field(DeletePalletsRawPayload, graphql_name='deletePalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePalletsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `PalletsRaw` using its globally unique id.

    Arguments:

    * `input` (`DeletePalletsRawByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_pallets_raw = sgqlc.types.Field(DeletePalletsRawPayload, graphql_name='deletePalletsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePalletsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `PalletsRaw` using a unique key.

    Arguments:

    * `input` (`DeletePalletsRawInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_stop_locations_raw_by_node_id = sgqlc.types.Field(DeleteStopLocationsRawPayload, graphql_name='deleteStopLocationsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteStopLocationsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `StopLocationsRaw` using its globally unique id.

    Arguments:

    * `input` (`DeleteStopLocationsRawByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_stop_locations_raw = sgqlc.types.Field(DeleteStopLocationsRawPayload, graphql_name='deleteStopLocationsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteStopLocationsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `StopLocationsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteStopLocationsRawInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_warehouse_customers_config_raw_by_node_id = sgqlc.types.Field(DeleteWarehouseCustomersConfigRawPayload, graphql_name='deleteWarehouseCustomersConfigRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWarehouseCustomersConfigRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WarehouseCustomersConfigRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteWarehouseCustomersConfigRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_warehouse_customers_config_raw = sgqlc.types.Field(DeleteWarehouseCustomersConfigRawPayload, graphql_name='deleteWarehouseCustomersConfigRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWarehouseCustomersConfigRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WarehouseCustomersConfigRaw` using a unique key.

    Arguments:

    * `input` (`DeleteWarehouseCustomersConfigRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_warehouse_customers_raw_by_node_id = sgqlc.types.Field(DeleteWarehouseCustomersRawPayload, graphql_name='deleteWarehouseCustomersRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWarehouseCustomersRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WarehouseCustomersRaw` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteWarehouseCustomersRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_warehouse_customers_raw = sgqlc.types.Field(DeleteWarehouseCustomersRawPayload, graphql_name='deleteWarehouseCustomersRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWarehouseCustomersRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WarehouseCustomersRaw` using a unique key.

    Arguments:

    * `input` (`DeleteWarehouseCustomersRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_warehouse_pick_activities_raw_by_node_id = sgqlc.types.Field(DeleteWarehousePickActivitiesRawPayload, graphql_name='deleteWarehousePickActivitiesRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWarehousePickActivitiesRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WarehousePickActivitiesRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteWarehousePickActivitiesRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_warehouse_pick_activities_raw = sgqlc.types.Field(DeleteWarehousePickActivitiesRawPayload, graphql_name='deleteWarehousePickActivitiesRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWarehousePickActivitiesRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WarehousePickActivitiesRaw` using a unique key.

    Arguments:

    * `input` (`DeleteWarehousePickActivitiesRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_wms_facility_defaults_raw_by_node_id = sgqlc.types.Field(DeleteWmsFacilityDefaultsRawPayload, graphql_name='deleteWmsFacilityDefaultsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWmsFacilityDefaultsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WmsFacilityDefaultsRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteWmsFacilityDefaultsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_wms_facility_defaults_raw = sgqlc.types.Field(DeleteWmsFacilityDefaultsRawPayload, graphql_name='deleteWmsFacilityDefaultsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWmsFacilityDefaultsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WmsFacilityDefaultsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteWmsFacilityDefaultsRawInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_wms_system_by_node_id = sgqlc.types.Field(DeleteWmsSystemPayload, graphql_name='deleteWmsSystemByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWmsSystemByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WmsSystem` using its globally unique id.

    Arguments:

    * `input` (`DeleteWmsSystemByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_wms_system = sgqlc.types.Field(DeleteWmsSystemPayload, graphql_name='deleteWmsSystem', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWmsSystemInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WmsSystem` using a unique key.

    Arguments:

    * `input` (`DeleteWmsSystemInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_wooden_pallet_transactions_raw_by_node_id = sgqlc.types.Field(DeleteWoodenPalletTransactionsRawPayload, graphql_name='deleteWoodenPalletTransactionsRawByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWoodenPalletTransactionsRawByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WoodenPalletTransactionsRaw` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteWoodenPalletTransactionsRawByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_wooden_pallet_transactions_raw = sgqlc.types.Field(DeleteWoodenPalletTransactionsRawPayload, graphql_name='deleteWoodenPalletTransactionsRaw', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWoodenPalletTransactionsRawInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `WoodenPalletTransactionsRaw` using a unique key.

    Arguments:

    * `input` (`DeleteWoodenPalletTransactionsRawInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_blast_cell_type_by_node_id = sgqlc.types.Field(DeleteBlastCellTypePayload, graphql_name='deleteBlastCellTypeByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCellTypeByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCellType` using its globally unique id.

    Arguments:

    * `input` (`DeleteBlastCellTypeByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_blast_cell_type = sgqlc.types.Field(DeleteBlastCellTypePayload, graphql_name='deleteBlastCellType', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCellTypeInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCellType` using a unique key.

    Arguments:

    * `input` (`DeleteBlastCellTypeInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_blast_cell_wms_pallet_location_by_node_id = sgqlc.types.Field(DeleteBlastCellWmsPalletLocationPayload, graphql_name='deleteBlastCellWmsPalletLocationByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCellWmsPalletLocationByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCellWmsPalletLocation` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteBlastCellWmsPalletLocationByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_blast_cell_wms_pallet_location = sgqlc.types.Field(DeleteBlastCellWmsPalletLocationPayload, graphql_name='deleteBlastCellWmsPalletLocation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCellWmsPalletLocationInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCellWmsPalletLocation` using a unique key.

    Arguments:

    * `input` (`DeleteBlastCellWmsPalletLocationInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_blast_cell_wms_pallet_by_node_id = sgqlc.types.Field(DeleteBlastCellWmsPalletPayload, graphql_name='deleteBlastCellWmsPalletByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCellWmsPalletByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCellWmsPallet` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteBlastCellWmsPalletByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_blast_cell_wms_pallet = sgqlc.types.Field(DeleteBlastCellWmsPalletPayload, graphql_name='deleteBlastCellWmsPallet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCellWmsPalletInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCellWmsPallet` using a unique key.

    Arguments:

    * `input` (`DeleteBlastCellWmsPalletInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_blast_cell_wms_pallet_by_blast_cell_id_and_wms_pallet_id = sgqlc.types.Field(DeleteBlastCellWmsPalletPayload, graphql_name='deleteBlastCellWmsPalletByBlastCellIdAndWmsPalletId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCellWmsPalletByBlastCellIdAndWmsPalletIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCellWmsPallet` using a unique key.

    Arguments:

    * `input`
      (`DeleteBlastCellWmsPalletByBlastCellIdAndWmsPalletIdInput!`):
      The exclusive input argument for this mutation. An object type,
      make sure to see documentation for this object’s fields.
    '''

    delete_blast_cell_by_node_id = sgqlc.types.Field(DeleteBlastCellPayload, graphql_name='deleteBlastCellByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCellByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCell` using its globally unique id.

    Arguments:

    * `input` (`DeleteBlastCellByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_blast_cell = sgqlc.types.Field(DeleteBlastCellPayload, graphql_name='deleteBlastCell', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCellInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCell` using a unique key.

    Arguments:

    * `input` (`DeleteBlastCellInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_blast_cycle_event_by_node_id = sgqlc.types.Field(DeleteBlastCycleEventPayload, graphql_name='deleteBlastCycleEventByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCycleEventByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCycleEvent` using its globally unique id.

    Arguments:

    * `input` (`DeleteBlastCycleEventByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_blast_cycle_event = sgqlc.types.Field(DeleteBlastCycleEventPayload, graphql_name='deleteBlastCycleEvent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCycleEventInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCycleEvent` using a unique key.

    Arguments:

    * `input` (`DeleteBlastCycleEventInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_blast_cycle_wms_pallet_by_node_id = sgqlc.types.Field(DeleteBlastCycleWmsPalletPayload, graphql_name='deleteBlastCycleWmsPalletByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCycleWmsPalletByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCycleWmsPallet` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteBlastCycleWmsPalletByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_blast_cycle_wms_pallet = sgqlc.types.Field(DeleteBlastCycleWmsPalletPayload, graphql_name='deleteBlastCycleWmsPallet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCycleWmsPalletInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCycleWmsPallet` using a unique key.

    Arguments:

    * `input` (`DeleteBlastCycleWmsPalletInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_blast_cycle_by_node_id = sgqlc.types.Field(DeleteBlastCyclePayload, graphql_name='deleteBlastCycleByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCycleByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCycle` using its globally unique id.

    Arguments:

    * `input` (`DeleteBlastCycleByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_blast_cycle = sgqlc.types.Field(DeleteBlastCyclePayload, graphql_name='deleteBlastCycle', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastCycleInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastCycle` using a unique key.

    Arguments:

    * `input` (`DeleteBlastCycleInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_blast_plan_pallet_by_node_id = sgqlc.types.Field(DeleteBlastPlanPalletPayload, graphql_name='deleteBlastPlanPalletByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastPlanPalletByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastPlanPallet` using its globally unique id.

    Arguments:

    * `input` (`DeleteBlastPlanPalletByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_blast_plan_pallet = sgqlc.types.Field(DeleteBlastPlanPalletPayload, graphql_name='deleteBlastPlanPallet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastPlanPalletInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastPlanPallet` using a unique key.

    Arguments:

    * `input` (`DeleteBlastPlanPalletInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_blast_plan_by_node_id = sgqlc.types.Field(DeleteBlastPlanPayload, graphql_name='deleteBlastPlanByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastPlanByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastPlan` using its globally unique id.

    Arguments:

    * `input` (`DeleteBlastPlanByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_blast_plan = sgqlc.types.Field(DeleteBlastPlanPayload, graphql_name='deleteBlastPlan', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBlastPlanInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `BlastPlan` using a unique key.

    Arguments:

    * `input` (`DeleteBlastPlanInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_item_freeze_time_by_node_id = sgqlc.types.Field(DeleteItemFreezeTimePayload, graphql_name='deleteItemFreezeTimeByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteItemFreezeTimeByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ItemFreezeTime` using its globally unique id.

    Arguments:

    * `input` (`DeleteItemFreezeTimeByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_item_freeze_time = sgqlc.types.Field(DeleteItemFreezeTimePayload, graphql_name='deleteItemFreezeTime', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteItemFreezeTimeInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ItemFreezeTime` using a unique key.

    Arguments:

    * `input` (`DeleteItemFreezeTimeInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_item_short_category_name_by_node_id = sgqlc.types.Field(DeleteItemShortCategoryNamePayload, graphql_name='deleteItemShortCategoryNameByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteItemShortCategoryNameByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ItemShortCategoryName` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteItemShortCategoryNameByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_item_short_category_name = sgqlc.types.Field(DeleteItemShortCategoryNamePayload, graphql_name='deleteItemShortCategoryName', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteItemShortCategoryNameInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `ItemShortCategoryName` using a unique key.

    Arguments:

    * `input` (`DeleteItemShortCategoryNameInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_cursor_history_by_node_id = sgqlc.types.Field(DeleteCursorHistoryPayload, graphql_name='deleteCursorHistoryByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCursorHistoryByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `CursorHistory` using its globally unique id.

    Arguments:

    * `input` (`DeleteCursorHistoryByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_cursor_history = sgqlc.types.Field(DeleteCursorHistoryPayload, graphql_name='deleteCursorHistory', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCursorHistoryInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `CursorHistory` using a unique key.

    Arguments:

    * `input` (`DeleteCursorHistoryInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_source_channel_cursor_by_node_id = sgqlc.types.Field(DeleteSourceChannelCursorPayload, graphql_name='deleteSourceChannelCursorByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteSourceChannelCursorByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `SourceChannelCursor` using its globally unique
    id.

    Arguments:

    * `input` (`DeleteSourceChannelCursorByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_source_channel_cursor = sgqlc.types.Field(DeleteSourceChannelCursorPayload, graphql_name='deleteSourceChannelCursor', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteSourceChannelCursorInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `SourceChannelCursor` using a unique key.

    Arguments:

    * `input` (`DeleteSourceChannelCursorInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_edge_node_source_channel_access_by_node_id = sgqlc.types.Field(DeleteEdgeNodeSourceChannelAccessPayload, graphql_name='deleteEdgeNodeSourceChannelAccessByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteEdgeNodeSourceChannelAccessByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `EdgeNodeSourceChannelAccess` using its globally
    unique id.

    Arguments:

    * `input` (`DeleteEdgeNodeSourceChannelAccessByNodeIdInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_edge_node_source_channel_access = sgqlc.types.Field(DeleteEdgeNodeSourceChannelAccessPayload, graphql_name='deleteEdgeNodeSourceChannelAccess', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteEdgeNodeSourceChannelAccessInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `EdgeNodeSourceChannelAccess` using a unique key.

    Arguments:

    * `input` (`DeleteEdgeNodeSourceChannelAccessInput!`): The
      exclusive input argument for this mutation. An object type, make
      sure to see documentation for this object’s fields.
    '''

    delete_edge_node_by_node_id = sgqlc.types.Field(DeleteEdgeNodePayload, graphql_name='deleteEdgeNodeByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteEdgeNodeByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `EdgeNode` using its globally unique id.

    Arguments:

    * `input` (`DeleteEdgeNodeByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_edge_node = sgqlc.types.Field(DeleteEdgeNodePayload, graphql_name='deleteEdgeNode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteEdgeNodeInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `EdgeNode` using a unique key.

    Arguments:

    * `input` (`DeleteEdgeNodeInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_source_channel_by_node_id = sgqlc.types.Field(DeleteSourceChannelPayload, graphql_name='deleteSourceChannelByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteSourceChannelByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `SourceChannel` using its globally unique id.

    Arguments:

    * `input` (`DeleteSourceChannelByNodeIdInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    delete_source_channel = sgqlc.types.Field(DeleteSourceChannelPayload, graphql_name='deleteSourceChannel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteSourceChannelInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `SourceChannel` using a unique key.

    Arguments:

    * `input` (`DeleteSourceChannelInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_source_type_by_node_id = sgqlc.types.Field(DeleteSourceTypePayload, graphql_name='deleteSourceTypeByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteSourceTypeByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `SourceType` using its globally unique id.

    Arguments:

    * `input` (`DeleteSourceTypeByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_source_type = sgqlc.types.Field(DeleteSourceTypePayload, graphql_name='deleteSourceType', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteSourceTypeInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `SourceType` using a unique key.

    Arguments:

    * `input` (`DeleteSourceTypeInput!`): The exclusive input argument
      for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_source_by_node_id = sgqlc.types.Field(DeleteSourcePayload, graphql_name='deleteSourceByNodeId', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteSourceByNodeIdInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `Source` using its globally unique id.

    Arguments:

    * `input` (`DeleteSourceByNodeIdInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    delete_source = sgqlc.types.Field(DeleteSourcePayload, graphql_name='deleteSource', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteSourceInput), graphql_name='input', default=None)),
))
    )
    '''Deletes a single `Source` using a unique key.

    Arguments:

    * `input` (`DeleteSourceInput!`): The exclusive input argument for
      this mutation. An object type, make sure to see documentation
      for this object’s fields.
    '''

    create_cycles_from_loaded_pallets = sgqlc.types.Field(CreateCyclesFromLoadedPalletsPayload, graphql_name='createCyclesFromLoadedPallets', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCyclesFromLoadedPalletsInput), graphql_name='input', default=None)),
))
    )
    '''Arguments:

    * `input` (`CreateCyclesFromLoadedPalletsInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    detect_pallets_by_look_ahead = sgqlc.types.Field(DetectPalletsByLookAheadPayload, graphql_name='detectPalletsByLookAhead', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DetectPalletsByLookAheadInput), graphql_name='input', default=None)),
))
    )
    '''Arguments:

    * `input` (`DetectPalletsByLookAheadInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    detect_pallets_by_look_behind = sgqlc.types.Field(DetectPalletsByLookBehindPayload, graphql_name='detectPalletsByLookBehind', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DetectPalletsByLookBehindInput), graphql_name='input', default=None)),
))
    )
    '''Arguments:

    * `input` (`DetectPalletsByLookBehindInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    fetch_historical_pallets_for_cycle = sgqlc.types.Field(FetchHistoricalPalletsForCyclePayload, graphql_name='fetchHistoricalPalletsForCycle', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(FetchHistoricalPalletsForCycleInput), graphql_name='input', default=None)),
))
    )
    '''Arguments:

    * `input` (`FetchHistoricalPalletsForCycleInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    fetch_unloaded_pallets_for_cycle = sgqlc.types.Field(FetchUnloadedPalletsForCyclePayload, graphql_name='fetchUnloadedPalletsForCycle', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(FetchUnloadedPalletsForCycleInput), graphql_name='input', default=None)),
))
    )
    '''Arguments:

    * `input` (`FetchUnloadedPalletsForCycleInput!`): The exclusive
      input argument for this mutation. An object type, make sure to
      see documentation for this object’s fields.
    '''

    update_cycle_metadata = sgqlc.types.Field('UpdateCycleMetadataPayload', graphql_name='updateCycleMetadata', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCycleMetadataInput), graphql_name='input', default=None)),
))
    )
    '''Arguments:

    * `input` (`UpdateCycleMetadataInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    update_pallets_in_blast_cells = sgqlc.types.Field('UpdatePalletsInBlastCellsPayload', graphql_name='updatePalletsInBlastCells', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePalletsInBlastCellsInput), graphql_name='input', default=None)),
))
    )
    '''Arguments:

    * `input` (`UpdatePalletsInBlastCellsInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''

    upsert_channel_cursor = sgqlc.types.Field('UpsertChannelCursorPayload', graphql_name='upsertChannelCursor', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpsertChannelCursorInput), graphql_name='input', default=None)),
))
    )
    '''Arguments:

    * `input` (`UpsertChannelCursorInput!`): The exclusive input
      argument for this mutation. An object type, make sure to see
      documentation for this object’s fields.
    '''



class Node(sgqlc.types.Interface):
    '''An object with a globally unique `ID`.'''
    __schema__ = base
    __field_names__ = ('node_id',)
    node_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='nodeId')
    '''A globally unique identifier. Can be used in various places
    throughout the system to identify this single value.
    '''



class OutboundCatchWeightRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundCatchWeightRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundCatchWeightRaw'))), graphql_name='nodes')
    '''A list of `OutboundCatchWeightRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundCatchWeightRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundCatchWeightRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundCatchWeightRaw` you could get from the
    connection.
    '''



class OutboundCatchWeightRawsEdge(sgqlc.types.Type):
    '''A `OutboundCatchWeightRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('OutboundCatchWeightRaw'), graphql_name='node')
    '''The `OutboundCatchWeightRaw` at the end of the edge.'''



class OutboundLoad(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('facility_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'source_system_id', 'warehouse_facility_id', 'load_reference_number', 'primary_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'shipped_datetime', 'requested_delivery_date', 'arrival_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_in_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_ship_datetime_start', 'expected_ship_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'payment_method_type', '_id', 'id', 'appointment_comment', 'is_archived')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')

    requested_delivery_date = sgqlc.types.Field(Date, graphql_name='requestedDeliveryDate')

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')

    expected_ship_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeStart')

    expected_ship_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeEnd')

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    id = sgqlc.types.Field(String, graphql_name='id')

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')



class OutboundLoadsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundLoad` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(OutboundLoad))), graphql_name='nodes')
    '''A list of `OutboundLoad` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundLoadsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundLoad` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundLoad` you could get from the
    connection.
    '''



class OutboundLoadsEdge(sgqlc.types.Type):
    '''A `OutboundLoad` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(OutboundLoad), graphql_name='node')
    '''The `OutboundLoad` at the end of the edge.'''



class OutboundLoadsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundLoadsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundLoadsRaw'))), graphql_name='nodes')
    '''A list of `OutboundLoadsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundLoadsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundLoadsRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundLoadsRaw` you could get from the
    connection.
    '''



class OutboundLoadsRawsEdge(sgqlc.types.Type):
    '''A `OutboundLoadsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('OutboundLoadsRaw'), graphql_name='node')
    '''The `OutboundLoadsRaw` at the end of the edge.'''



class OutboundOrder(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'carrier_id', 'destination_stop_location_id', 'destination_party_id', 'customer_enterprise_id', 'warehouse_customer_id', 'customer_id', 'facility_id', 'outbound_load_id', 'load_reference_number', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'customer_code', 'comments', 'notes', 'requested_pickup_datetime', 'expected_pickup_datetime', 'requested_delivery_datetime', 'actual_delivery_datetime', 'pallet_exchange_type', 'payment_method_type', 'sales_order_number', 'shipped_datetime', 'transportation_method', 'lading_type', 'quantity', 'warehouse_gross_weight', 'weight_uom', 'requested_pallet_platform_type', 'stop_sequence_number', 'carrier_code', 'stop_location_code', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'destination_location_code', 'destination_location_name', 'destination_address_line1', 'destination_address_line2', 'destination_address_line3', 'destination_city', 'destination_state', 'destination_country', 'destination_zip', 'destination_email', 'destination_phone', 'destination_fax', 'order_confirmation_datetime', 'is_canceled', 'is_transfer_order', 'transfer_warehouse_customer_id', 'transfer_customer_id')
    id = sgqlc.types.Field(String, graphql_name='id')

    carrier_id = sgqlc.types.Field(String, graphql_name='carrierId')

    destination_stop_location_id = sgqlc.types.Field(String, graphql_name='destinationStopLocationId')

    destination_party_id = sgqlc.types.Field(String, graphql_name='destinationPartyId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    outbound_load_id = sgqlc.types.Field(String, graphql_name='outboundLoadId')

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    comments = sgqlc.types.Field(String, graphql_name='comments')

    notes = sgqlc.types.Field(String, graphql_name='notes')

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')

    expected_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='expectedPickupDatetime')

    requested_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedDeliveryDatetime')

    actual_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='actualDeliveryDatetime')

    pallet_exchange_type = sgqlc.types.Field(String, graphql_name='palletExchangeType')

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')

    sales_order_number = sgqlc.types.Field(String, graphql_name='salesOrderNumber')

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')

    requested_pallet_platform_type = sgqlc.types.Field(String, graphql_name='requestedPalletPlatformType')

    stop_sequence_number = sgqlc.types.Field(Int, graphql_name='stopSequenceNumber')

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')

    stop_location_code = sgqlc.types.Field(String, graphql_name='stopLocationCode')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    destination_location_code = sgqlc.types.Field(String, graphql_name='destinationLocationCode')

    destination_location_name = sgqlc.types.Field(String, graphql_name='destinationLocationName')

    destination_address_line1 = sgqlc.types.Field(String, graphql_name='destinationAddressLine1')

    destination_address_line2 = sgqlc.types.Field(String, graphql_name='destinationAddressLine2')

    destination_address_line3 = sgqlc.types.Field(String, graphql_name='destinationAddressLine3')

    destination_city = sgqlc.types.Field(String, graphql_name='destinationCity')

    destination_state = sgqlc.types.Field(String, graphql_name='destinationState')

    destination_country = sgqlc.types.Field(String, graphql_name='destinationCountry')

    destination_zip = sgqlc.types.Field(String, graphql_name='destinationZip')

    destination_email = sgqlc.types.Field(String, graphql_name='destinationEmail')

    destination_phone = sgqlc.types.Field(String, graphql_name='destinationPhone')

    destination_fax = sgqlc.types.Field(String, graphql_name='destinationFax')

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')

    transfer_warehouse_customer_id = sgqlc.types.Field(String, graphql_name='transferWarehouseCustomerId')

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')



class OutboundOrderCommentsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundOrderCommentsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderCommentsRaw'))), graphql_name='nodes')
    '''A list of `OutboundOrderCommentsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderCommentsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundOrderCommentsRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundOrderCommentsRaw` you could get from
    the connection.
    '''



class OutboundOrderCommentsRawsEdge(sgqlc.types.Type):
    '''A `OutboundOrderCommentsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrderCommentsRaw'), graphql_name='node')
    '''The `OutboundOrderCommentsRaw` at the end of the edge.'''



class OutboundOrderDetail(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('customer_enterprise_id', 'outbound_order_id', 'item_id', 'lot_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'lot_reference', 'customer_lot_reference', 'required_shelf_life_on_delivery_days', 'is_archived')
    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')

    notes = sgqlc.types.Field(String, graphql_name='notes')

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')

    required_shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='requiredShelfLifeOnDeliveryDays')

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')



class OutboundOrderDetailsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundOrderDetail` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderDetail))), graphql_name='nodes')
    '''A list of `OutboundOrderDetail` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundOrderDetail` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundOrderDetail` you could get from the
    connection.
    '''



class OutboundOrderDetailsEdge(sgqlc.types.Type):
    '''A `OutboundOrderDetail` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrderDetail), graphql_name='node')
    '''The `OutboundOrderDetail` at the end of the edge.'''



class OutboundOrderDetailsExecutionRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundOrderDetailsExecutionRaw`
    values.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailsExecutionRaw'))), graphql_name='nodes')
    '''A list of `OutboundOrderDetailsExecutionRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailsExecutionRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the
    `OutboundOrderDetailsExecutionRaw` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundOrderDetailsExecutionRaw` you could
    get from the connection.
    '''



class OutboundOrderDetailsExecutionRawsEdge(sgqlc.types.Type):
    '''A `OutboundOrderDetailsExecutionRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrderDetailsExecutionRaw'), graphql_name='node')
    '''The `OutboundOrderDetailsExecutionRaw` at the end of the edge.'''



class OutboundOrderDetailsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundOrderDetailsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailsRaw'))), graphql_name='nodes')
    '''A list of `OutboundOrderDetailsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderDetailsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundOrderDetailsRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundOrderDetailsRaw` you could get from
    the connection.
    '''



class OutboundOrderDetailsRawsEdge(sgqlc.types.Type):
    '''A `OutboundOrderDetailsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrderDetailsRaw'), graphql_name='node')
    '''The `OutboundOrderDetailsRaw` at the end of the edge.'''



class OutboundOrderReferenceCode(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'outbound_order_id', 'warehouse_order_number', 'reference_type', 'reference_value', 'source_system_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(String, graphql_name='id')

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    reference_type = sgqlc.types.Field(String, graphql_name='referenceType')

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class OutboundOrderReferenceCodesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundOrderReferenceCode` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderReferenceCode))), graphql_name='nodes')
    '''A list of `OutboundOrderReferenceCode` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderReferenceCodesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundOrderReferenceCode`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundOrderReferenceCode` you could get from
    the connection.
    '''



class OutboundOrderReferenceCodesEdge(sgqlc.types.Type):
    '''A `OutboundOrderReferenceCode` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrderReferenceCode), graphql_name='node')
    '''The `OutboundOrderReferenceCode` at the end of the edge.'''



class OutboundOrderReferenceCodesRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundOrderReferenceCodesRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderReferenceCodesRaw'))), graphql_name='nodes')
    '''A list of `OutboundOrderReferenceCodesRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrderReferenceCodesRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the
    `OutboundOrderReferenceCodesRaw` and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundOrderReferenceCodesRaw` you could get
    from the connection.
    '''



class OutboundOrderReferenceCodesRawsEdge(sgqlc.types.Type):
    '''A `OutboundOrderReferenceCodesRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrderReferenceCodesRaw'), graphql_name='node')
    '''The `OutboundOrderReferenceCodesRaw` at the end of the edge.'''



class OutboundOrdersConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundOrder` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrder))), graphql_name='nodes')
    '''A list of `OutboundOrder` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrdersEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundOrder` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundOrder` you could get from the
    connection.
    '''



class OutboundOrdersEdge(sgqlc.types.Type):
    '''A `OutboundOrder` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(OutboundOrder), graphql_name='node')
    '''The `OutboundOrder` at the end of the edge.'''



class OutboundOrdersExecutionRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundOrdersExecutionRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrdersExecutionRaw'))), graphql_name='nodes')
    '''A list of `OutboundOrdersExecutionRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrdersExecutionRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundOrdersExecutionRaw`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundOrdersExecutionRaw` you could get from
    the connection.
    '''



class OutboundOrdersExecutionRawsEdge(sgqlc.types.Type):
    '''A `OutboundOrdersExecutionRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrdersExecutionRaw'), graphql_name='node')
    '''The `OutboundOrdersExecutionRaw` at the end of the edge.'''



class OutboundOrdersRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundOrdersRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrdersRaw'))), graphql_name='nodes')
    '''A list of `OutboundOrdersRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundOrdersRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundOrdersRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundOrdersRaw` you could get from the
    connection.
    '''



class OutboundOrdersRawsEdge(sgqlc.types.Type):
    '''A `OutboundOrdersRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('OutboundOrdersRaw'), graphql_name='node')
    '''The `OutboundOrdersRaw` at the end of the edge.'''



class OutboundPalletsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundPalletsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundPalletsRaw'))), graphql_name='nodes')
    '''A list of `OutboundPalletsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundPalletsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundPalletsRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundPalletsRaw` you could get from the
    connection.
    '''



class OutboundPalletsRawsEdge(sgqlc.types.Type):
    '''A `OutboundPalletsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('OutboundPalletsRaw'), graphql_name='node')
    '''The `OutboundPalletsRaw` at the end of the edge.'''



class OutboundTruckLogRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `OutboundTruckLogRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundTruckLogRaw'))), graphql_name='nodes')
    '''A list of `OutboundTruckLogRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OutboundTruckLogRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `OutboundTruckLogRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `OutboundTruckLogRaw` you could get from the
    connection.
    '''



class OutboundTruckLogRawsEdge(sgqlc.types.Type):
    '''A `OutboundTruckLogRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('OutboundTruckLogRaw'), graphql_name='node')
    '''The `OutboundTruckLogRaw` at the end of the edge.'''



class PageInfo(sgqlc.types.Type):
    '''Information about pagination in a connection.'''
    __schema__ = base
    __field_names__ = ('has_next_page', 'has_previous_page', 'start_cursor', 'end_cursor')
    has_next_page = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasNextPage')
    '''When paginating forwards, are there more items?'''

    has_previous_page = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasPreviousPage')
    '''When paginating backwards, are there more items?'''

    start_cursor = sgqlc.types.Field(Cursor, graphql_name='startCursor')
    '''When paginating backwards, the cursor to continue.'''

    end_cursor = sgqlc.types.Field(Cursor, graphql_name='endCursor')
    '''When paginating forwards, the cursor to continue.'''



class Pallet(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('lot_id', 'item_id', 'warehouse_customer_id', 'customer_id', 'warehouse_location_id', 'customer_enterprise_id', 'facility_id', 'expected_pallet_count', 'expected_quantity', 'on_hold_pallet_count', 'on_hold_quantity', 'available_quantity', 'available_pallet_count', 'on_hand_quantity', 'on_hand_pallet_count', 'committed_quantity', 'committed_pallet_count', 'original_quantity', 'original_pallet_count', 'warehouse_location_code', 'warehouse_license_plate_number', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'pallet_received_date', 'pallet_code', 'reservation_code', 'lot_code', 'item_code', 'is_hpp', 'is_depleted', 'is_blast', 'inventory_status', 'id', 'hold_code', 'depleted_date', 'customer_license_plate_number', 'customer_code', 'blast_out_datetime', 'blast_in_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', '_id')
    lot_id = sgqlc.types.Field(String, graphql_name='lotId')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    warehouse_location_id = sgqlc.types.Field(String, graphql_name='warehouseLocationId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    expected_pallet_count = sgqlc.types.Field(Int, graphql_name='expectedPalletCount')

    expected_quantity = sgqlc.types.Field(Int, graphql_name='expectedQuantity')

    on_hold_pallet_count = sgqlc.types.Field(Int, graphql_name='onHoldPalletCount')

    on_hold_quantity = sgqlc.types.Field(Int, graphql_name='onHoldQuantity')

    available_quantity = sgqlc.types.Field(Int, graphql_name='availableQuantity')

    available_pallet_count = sgqlc.types.Field(Int, graphql_name='availablePalletCount')

    on_hand_quantity = sgqlc.types.Field(Int, graphql_name='onHandQuantity')

    on_hand_pallet_count = sgqlc.types.Field(Int, graphql_name='onHandPalletCount')

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')

    warehouse_location_code = sgqlc.types.Field(String, graphql_name='warehouseLocationCode')

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    pallet_received_date = sgqlc.types.Field(Datetime, graphql_name='palletReceivedDate')

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    is_hpp = sgqlc.types.Field(Boolean, graphql_name='isHpp')

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')

    is_blast = sgqlc.types.Field(Boolean, graphql_name='isBlast')

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')

    id = sgqlc.types.Field(String, graphql_name='id')

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')

    depleted_date = sgqlc.types.Field(Date, graphql_name='depletedDate')

    customer_license_plate_number = sgqlc.types.Field(String, graphql_name='customerLicensePlateNumber')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    blast_out_datetime = sgqlc.types.Field(Datetime, graphql_name='blastOutDatetime')

    blast_in_datetime = sgqlc.types.Field(Datetime, graphql_name='blastInDatetime')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class PalletHistoriesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletHistory` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletHistory'))), graphql_name='nodes')
    '''A list of `PalletHistory` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletHistoriesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletHistory` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletHistory` you could get from the
    connection.
    '''



class PalletHistoriesEdge(sgqlc.types.Type):
    '''A `PalletHistory` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletHistory'), graphql_name='node')
    '''The `PalletHistory` at the end of the edge.'''



class PalletHistory(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('warehouse_customer_id', 'customer_enterprise_id', 'facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'pallet_code', 'customer_code', 'from_location_code', 'to_location_code', 'transaction_date', 'is_hand_keyed_pallet_number', 'is_hand_keyed_location', 'operator_id', 'quantity', 'work_type', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    warehouse_customer_id = sgqlc.types.Field(String, graphql_name='warehouseCustomerId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    from_location_code = sgqlc.types.Field(String, graphql_name='fromLocationCode')

    to_location_code = sgqlc.types.Field(String, graphql_name='toLocationCode')

    transaction_date = sgqlc.types.Field(Datetime, graphql_name='transactionDate')

    is_hand_keyed_pallet_number = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedPalletNumber')

    is_hand_keyed_location = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedLocation')

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')

    work_type = sgqlc.types.Field(String, graphql_name='workType')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')



class PalletHistoryRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletHistoryRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletHistoryRaw'))), graphql_name='nodes')
    '''A list of `PalletHistoryRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletHistoryRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletHistoryRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletHistoryRaw` you could get from the
    connection.
    '''



class PalletHistoryRawsEdge(sgqlc.types.Type):
    '''A `PalletHistoryRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletHistoryRaw'), graphql_name='node')
    '''The `PalletHistoryRaw` at the end of the edge.'''



class PalletLocation(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'name', 'aisle', 'bay', 'is_pick_area', 'room', 'zone', 'room_type', 'weight_capacity', 'height', 'length', 'depth', 'capacity', 'location_reported_pallets', 'max_pallets', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'location_status', 'is_active', 'is_pallet_storage', 'reporting_room', 'current_pallets')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    name = sgqlc.types.Field(String, graphql_name='name')

    aisle = sgqlc.types.Field(String, graphql_name='aisle')

    bay = sgqlc.types.Field(String, graphql_name='bay')

    is_pick_area = sgqlc.types.Field(Boolean, graphql_name='isPickArea')

    room = sgqlc.types.Field(String, graphql_name='room')

    zone = sgqlc.types.Field(String, graphql_name='zone')

    room_type = sgqlc.types.Field(String, graphql_name='roomType')

    weight_capacity = sgqlc.types.Field(Float, graphql_name='weightCapacity')

    height = sgqlc.types.Field(Float, graphql_name='height')

    length = sgqlc.types.Field(Float, graphql_name='length')

    depth = sgqlc.types.Field(Float, graphql_name='depth')

    capacity = sgqlc.types.Field(Float, graphql_name='capacity')

    location_reported_pallets = sgqlc.types.Field(Float, graphql_name='locationReportedPallets')

    max_pallets = sgqlc.types.Field(Float, graphql_name='maxPallets')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    location_status = sgqlc.types.Field(String, graphql_name='locationStatus')

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')

    is_pallet_storage = sgqlc.types.Field(Boolean, graphql_name='isPalletStorage')

    reporting_room = sgqlc.types.Field(String, graphql_name='reportingRoom')

    current_pallets = sgqlc.types.Field(Float, graphql_name='currentPallets')



class PalletLocationZone(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('wms_system_id', 'zone', 'description', 'classification', 'created_at', 'updated_at')
    wms_system_id = sgqlc.types.Field(Int, graphql_name='wmsSystemId')

    zone = sgqlc.types.Field(String, graphql_name='zone')

    description = sgqlc.types.Field(String, graphql_name='description')

    classification = sgqlc.types.Field(String, graphql_name='classification')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class PalletLocationZonesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletLocationZone` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PalletLocationZone))), graphql_name='nodes')
    '''A list of `PalletLocationZone` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationZonesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletLocationZone` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletLocationZone` you could get from the
    connection.
    '''



class PalletLocationZonesEdge(sgqlc.types.Type):
    '''A `PalletLocationZone` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(PalletLocationZone), graphql_name='node')
    '''The `PalletLocationZone` at the end of the edge.'''



class PalletLocationsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletLocation` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PalletLocation))), graphql_name='nodes')
    '''A list of `PalletLocation` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletLocation` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletLocation` you could get from the
    connection.
    '''



class PalletLocationsEdge(sgqlc.types.Type):
    '''A `PalletLocation` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(PalletLocation), graphql_name='node')
    '''The `PalletLocation` at the end of the edge.'''



class PalletLocationsRawBlastCellsManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCell` values, with data from
    `BlastCellWmsPalletLocation`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCell'))), graphql_name='nodes')
    '''A list of `BlastCell` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationsRawBlastCellsManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCell`, info from the
    `BlastCellWmsPalletLocation`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCell` you could get from the connection.'''



class PalletLocationsRawBlastCellsManyToManyEdge(sgqlc.types.Type):
    '''A `BlastCell` edge in the connection, with data from
    `BlastCellWmsPalletLocation`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_cell_wms_pallet_locations')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCell'), graphql_name='node')
    '''The `BlastCell` at the end of the edge.'''

    blast_cell_wms_pallet_locations = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletLocationsConnection), graphql_name='blastCellWmsPalletLocations', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletLocationsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletLocationCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletLocationFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPalletLocation`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletLocationsOrderBy!]`): The method
      to use when ordering `BlastCellWmsPalletLocation`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletLocationCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletLocationFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''



class PalletLocationsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletLocationsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationsRaw'))), graphql_name='nodes')
    '''A list of `PalletLocationsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletLocationsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletLocationsRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletLocationsRaw` you could get from the
    connection.
    '''



class PalletLocationsRawsEdge(sgqlc.types.Type):
    '''A `PalletLocationsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletLocationsRaw'), graphql_name='node')
    '''The `PalletLocationsRaw` at the end of the edge.'''



class PalletReferenceCodesRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletReferenceCodesRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletReferenceCodesRaw'))), graphql_name='nodes')
    '''A list of `PalletReferenceCodesRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletReferenceCodesRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletReferenceCodesRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletReferenceCodesRaw` you could get from
    the connection.
    '''



class PalletReferenceCodesRawsEdge(sgqlc.types.Type):
    '''A `PalletReferenceCodesRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletReferenceCodesRaw'), graphql_name='node')
    '''The `PalletReferenceCodesRaw` at the end of the edge.'''



class PalletTransactionsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletTransactionsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletTransactionsRaw'))), graphql_name='nodes')
    '''A list of `PalletTransactionsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletTransactionsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletTransactionsRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletTransactionsRaw` you could get from the
    connection.
    '''



class PalletTransactionsRawsEdge(sgqlc.types.Type):
    '''A `PalletTransactionsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletTransactionsRaw'), graphql_name='node')
    '''The `PalletTransactionsRaw` at the end of the edge.'''



class PalletsByLoadDate(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('inbound_load_expected_receive_date', 'inbound_load_reference_number', 'inbound_load_trailer_number', 'inbound_load_dock_door_number', 'source_system_id', 'pallet_code', 'warehouse_facility_id', 'inventory_status', 'original_quantity', 'original_pallet_count', 'is_blast', 'blast_in_datetime', 'blast_out_datetime', 'is_hpp', 'customer_code', 'lot_code', 'warehouse_license_plate_number', 'customer_license_plate_number', 'is_depleted', 'depleted_date', 'current_quantity', 'current_pallet_count', 'warehouse_location_code', 'hold_code', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'pallet_received_date', 'committed_quantity', 'committed_pallet_count', '_id', 'id', 'item_code', 'lot_id', 'customer_id', 'pallet_location_id', 'item_id', 'hpp_in_datetime', 'hpp_out_datetime', 'is_in_assigned_location', 'reservation_code')
    inbound_load_expected_receive_date = sgqlc.types.Field(Date, graphql_name='inboundLoadExpectedReceiveDate')

    inbound_load_reference_number = sgqlc.types.Field(String, graphql_name='inboundLoadReferenceNumber')

    inbound_load_trailer_number = sgqlc.types.Field(String, graphql_name='inboundLoadTrailerNumber')

    inbound_load_dock_door_number = sgqlc.types.Field(String, graphql_name='inboundLoadDockDoorNumber')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')

    is_blast = sgqlc.types.Field(Boolean, graphql_name='isBlast')

    blast_in_datetime = sgqlc.types.Field(Datetime, graphql_name='blastInDatetime')

    blast_out_datetime = sgqlc.types.Field(Datetime, graphql_name='blastOutDatetime')

    is_hpp = sgqlc.types.Field(Boolean, graphql_name='isHpp')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')

    customer_license_plate_number = sgqlc.types.Field(String, graphql_name='customerLicensePlateNumber')

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')

    depleted_date = sgqlc.types.Field(Date, graphql_name='depletedDate')

    current_quantity = sgqlc.types.Field(Int, graphql_name='currentQuantity')

    current_pallet_count = sgqlc.types.Field(Int, graphql_name='currentPalletCount')

    warehouse_location_code = sgqlc.types.Field(String, graphql_name='warehouseLocationCode')

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    pallet_received_date = sgqlc.types.Field(Datetime, graphql_name='palletReceivedDate')

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    id = sgqlc.types.Field(String, graphql_name='id')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    pallet_location_id = sgqlc.types.Field(String, graphql_name='palletLocationId')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    hpp_in_datetime = sgqlc.types.Field(Datetime, graphql_name='hppInDatetime')

    hpp_out_datetime = sgqlc.types.Field(Datetime, graphql_name='hppOutDatetime')

    is_in_assigned_location = sgqlc.types.Field(Boolean, graphql_name='isInAssignedLocation')

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')



class PalletsByLoadDatesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletsByLoadDate` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PalletsByLoadDate))), graphql_name='nodes')
    '''A list of `PalletsByLoadDate` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsByLoadDatesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletsByLoadDate` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletsByLoadDate` you could get from the
    connection.
    '''



class PalletsByLoadDatesEdge(sgqlc.types.Type):
    '''A `PalletsByLoadDate` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(PalletsByLoadDate), graphql_name='node')
    '''The `PalletsByLoadDate` at the end of the edge.'''



class PalletsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Pallet` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Pallet))), graphql_name='nodes')
    '''A list of `Pallet` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Pallet` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Pallet` you could get from the connection.'''



class PalletsEdge(sgqlc.types.Type):
    '''A `Pallet` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(Pallet), graphql_name='node')
    '''The `Pallet` at the end of the edge.'''



class PalletsRawBlastCellsByBlastCellWmsPalletWmsPalletIdAndBlastCellIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCell` values, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCell'))), graphql_name='nodes')
    '''A list of `BlastCell` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRawBlastCellsByBlastCellWmsPalletWmsPalletIdAndBlastCellIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCell`, info from the
    `BlastCellWmsPallet`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCell` you could get from the connection.'''



class PalletsRawBlastCellsByBlastCellWmsPalletWmsPalletIdAndBlastCellIdManyToManyEdge(sgqlc.types.Type):
    '''A `BlastCell` edge in the connection, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'id', 'pallet_dropped_datetime', 'pallet_picked_datetime', 'blast_cycle_id', 'created_at', 'updated_at')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCell'), graphql_name='node')
    '''The `BlastCell` at the end of the edge.'''

    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    pallet_dropped_datetime = sgqlc.types.Field(Datetime, graphql_name='palletDroppedDatetime')

    pallet_picked_datetime = sgqlc.types.Field(Datetime, graphql_name='palletPickedDatetime')

    blast_cycle_id = sgqlc.types.Field(Int, graphql_name='blastCycleId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')



class PalletsRawBlastCyclesByBlastCellWmsPalletWmsPalletIdAndBlastCycleIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCycle` values, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycle'))), graphql_name='nodes')
    '''A list of `BlastCycle` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRawBlastCyclesByBlastCellWmsPalletWmsPalletIdAndBlastCycleIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCycle`, info from the
    `BlastCellWmsPallet`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCycle` you could get from the connection.'''



class PalletsRawBlastCyclesByBlastCellWmsPalletWmsPalletIdAndBlastCycleIdManyToManyEdge(sgqlc.types.Type):
    '''A `BlastCycle` edge in the connection, with data from
    `BlastCellWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_cell_wms_pallets')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCycle'), graphql_name='node')
    '''The `BlastCycle` at the end of the edge.'''

    blast_cell_wms_pallets = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletsConnection), graphql_name='blastCellWmsPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class PalletsRawBlastCyclesManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastCycle` values, with data from
    `BlastCycleWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastCycle'))), graphql_name='nodes')
    '''A list of `BlastCycle` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRawBlastCyclesManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastCycle`, info from the
    `BlastCycleWmsPallet`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastCycle` you could get from the connection.'''



class PalletsRawBlastCyclesManyToManyEdge(sgqlc.types.Type):
    '''A `BlastCycle` edge in the connection, with data from
    `BlastCycleWmsPallet`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_cycle_wms_pallets')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastCycle'), graphql_name='node')
    '''The `BlastCycle` at the end of the edge.'''

    blast_cycle_wms_pallets = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleWmsPalletsConnection), graphql_name='blastCycleWmsPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCycleWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCycleWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCycleWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCycleWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class PalletsRawBlastPlansManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `BlastPlan` values, with data from
    `BlastPlanPallet`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BlastPlan'))), graphql_name='nodes')
    '''A list of `BlastPlan` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRawBlastPlansManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `BlastPlan`, info from the
    `BlastPlanPallet`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `BlastPlan` you could get from the connection.'''



class PalletsRawBlastPlansManyToManyEdge(sgqlc.types.Type):
    '''A `BlastPlan` edge in the connection, with data from
    `BlastPlanPallet`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'blast_plan_pallets')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('BlastPlan'), graphql_name='node')
    '''The `BlastPlan` at the end of the edge.'''

    blast_plan_pallets = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanPalletsConnection), graphql_name='blastPlanPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlanPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastPlanPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastPlanPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastPlanPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastPlanPalletsOrderBy!]`): The method to use
      when ordering `BlastPlanPallet`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastPlanPalletCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BlastPlanPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class PalletsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `PalletsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRaw'))), graphql_name='nodes')
    '''A list of `PalletsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PalletsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `PalletsRaw` and cursor to aid
    in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `PalletsRaw` you could get from the connection.'''



class PalletsRawsEdge(sgqlc.types.Type):
    '''A `PalletsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('PalletsRaw'), graphql_name='node')
    '''The `PalletsRaw` at the end of the edge.'''



class RecentInboundLoad(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('facility_id', 'load_reference_number', 'trailer_number', 'load_status', 'load_arrival_time', 'load_finish_datetime', 'trailer_yard_duration', 'unload_duration', 'supplier_name', 'customer_code', 'pallet_count', 'gross_weight')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')

    load_status = sgqlc.types.Field(String, graphql_name='loadStatus')

    load_arrival_time = sgqlc.types.Field(Datetime, graphql_name='loadArrivalTime')

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')

    trailer_yard_duration = sgqlc.types.Field(Interval, graphql_name='trailerYardDuration')

    unload_duration = sgqlc.types.Field(Interval, graphql_name='unloadDuration')

    supplier_name = sgqlc.types.Field(String, graphql_name='supplierName')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    pallet_count = sgqlc.types.Field(BigInt, graphql_name='palletCount')

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')



class RecentInboundLoadsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `RecentInboundLoad` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(RecentInboundLoad))), graphql_name='nodes')
    '''A list of `RecentInboundLoad` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('RecentInboundLoadsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `RecentInboundLoad` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `RecentInboundLoad` you could get from the
    connection.
    '''



class RecentInboundLoadsEdge(sgqlc.types.Type):
    '''A `RecentInboundLoad` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(RecentInboundLoad), graphql_name='node')
    '''The `RecentInboundLoad` at the end of the edge.'''



class SourceChannelCursorSourcesBySourceChannelCursorIdAndSourceSlugManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Source` values, with data from
    `SourceChannel`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Source'))), graphql_name='nodes')
    '''A list of `Source` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelCursorSourcesBySourceChannelCursorIdAndSourceSlugManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Source`, info from the
    `SourceChannel`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Source` you could get from the connection.'''



class SourceChannelCursorSourcesBySourceChannelCursorIdAndSourceSlugManyToManyEdge(sgqlc.types.Type):
    '''A `Source` edge in the connection, with data from `SourceChannel`.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'source_channels_by_source_slug')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('Source'), graphql_name='node')
    '''The `Source` at the end of the edge.'''

    source_channels_by_source_slug = sgqlc.types.Field(sgqlc.types.non_null('SourceChannelsConnection'), graphql_name='sourceChannelsBySourceSlug', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceChannelCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceChannelFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `SourceChannel`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourceChannelsOrderBy!]`): The method to use when
      ordering `SourceChannel`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceChannelCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`SourceChannelFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class SourceChannelCursorsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `SourceChannelCursor` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelCursor'))), graphql_name='nodes')
    '''A list of `SourceChannelCursor` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelCursorsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `SourceChannelCursor` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `SourceChannelCursor` you could get from the
    connection.
    '''



class SourceChannelCursorsEdge(sgqlc.types.Type):
    '''A `SourceChannelCursor` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('SourceChannelCursor'), graphql_name='node')
    '''The `SourceChannelCursor` at the end of the edge.'''



class SourceChannelEdgeNodesByEdgeNodeSourceChannelAccessSourceChannelNameAndEdgeNodeClientIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `EdgeNode` values, with data from
    `EdgeNodeSourceChannelAccess`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('EdgeNode'))), graphql_name='nodes')
    '''A list of `EdgeNode` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelEdgeNodesByEdgeNodeSourceChannelAccessSourceChannelNameAndEdgeNodeClientIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `EdgeNode`, info from the
    `EdgeNodeSourceChannelAccess`, and the cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `EdgeNode` you could get from the connection.'''



class SourceChannelEdgeNodesByEdgeNodeSourceChannelAccessSourceChannelNameAndEdgeNodeClientIdManyToManyEdge(sgqlc.types.Type):
    '''A `EdgeNode` edge in the connection, with data from
    `EdgeNodeSourceChannelAccess`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'edge_node_source_channel_accesses_by_edge_node_client_id')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('EdgeNode'), graphql_name='node')
    '''The `EdgeNode` at the end of the edge.'''

    edge_node_source_channel_accesses_by_edge_node_client_id = sgqlc.types.Field(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesConnection), graphql_name='edgeNodeSourceChannelAccessesByEdgeNodeClientId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(EdgeNodeSourceChannelAccessCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(EdgeNodeSourceChannelAccessFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `EdgeNodeSourceChannelAccess`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[EdgeNodeSourceChannelAccessesOrderBy!]`): The
      method to use when ordering `EdgeNodeSourceChannelAccess`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`EdgeNodeSourceChannelAccessCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`EdgeNodeSourceChannelAccessFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''



class SourceChannelSourcesByCursorHistorySourceChannelNameAndSourceSlugManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Source` values, with data from
    `CursorHistory`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Source'))), graphql_name='nodes')
    '''A list of `Source` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelSourcesByCursorHistorySourceChannelNameAndSourceSlugManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Source`, info from the
    `CursorHistory`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Source` you could get from the connection.'''



class SourceChannelSourcesByCursorHistorySourceChannelNameAndSourceSlugManyToManyEdge(sgqlc.types.Type):
    '''A `Source` edge in the connection, with data from `CursorHistory`.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'cursor_histories_by_source_slug')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('Source'), graphql_name='node')
    '''The `Source` at the end of the edge.'''

    cursor_histories_by_source_slug = sgqlc.types.Field(sgqlc.types.non_null(CursorHistoriesConnection), graphql_name='cursorHistoriesBySourceSlug', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CursorHistoriesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(CursorHistoryCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CursorHistoryFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `CursorHistory`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CursorHistoriesOrderBy!]`): The method to use when
      ordering `CursorHistory`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`CursorHistoryCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`CursorHistoryFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class SourceChannelsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `SourceChannel` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannel'))), graphql_name='nodes')
    '''A list of `SourceChannel` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `SourceChannel` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `SourceChannel` you could get from the
    connection.
    '''



class SourceChannelsEdge(sgqlc.types.Type):
    '''A `SourceChannel` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('SourceChannel'), graphql_name='node')
    '''The `SourceChannel` at the end of the edge.'''



class SourceSourceChannelCursorsBySourceChannelSourceSlugAndCursorIdManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `SourceChannelCursor` values, with data
    from `SourceChannel`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannelCursor'))), graphql_name='nodes')
    '''A list of `SourceChannelCursor` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceSourceChannelCursorsBySourceChannelSourceSlugAndCursorIdManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `SourceChannelCursor`, info
    from the `SourceChannel`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `SourceChannelCursor` you could get from the
    connection.
    '''



class SourceSourceChannelCursorsBySourceChannelSourceSlugAndCursorIdManyToManyEdge(sgqlc.types.Type):
    '''A `SourceChannelCursor` edge in the connection, with data from
    `SourceChannel`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'source_channels')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('SourceChannelCursor'), graphql_name='node')
    '''The `SourceChannelCursor` at the end of the edge.'''

    source_channels = sgqlc.types.Field(sgqlc.types.non_null(SourceChannelsConnection), graphql_name='sourceChannels', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceChannelCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceChannelFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `SourceChannel`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourceChannelsOrderBy!]`): The method to use when
      ordering `SourceChannel`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceChannelCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`SourceChannelFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class SourceSourceChannelsByCursorHistorySourceSlugAndSourceChannelNameManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `SourceChannel` values, with data from
    `CursorHistory`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceChannel'))), graphql_name='nodes')
    '''A list of `SourceChannel` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceSourceChannelsByCursorHistorySourceSlugAndSourceChannelNameManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `SourceChannel`, info from the
    `CursorHistory`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `SourceChannel` you could get from the
    connection.
    '''



class SourceSourceChannelsByCursorHistorySourceSlugAndSourceChannelNameManyToManyEdge(sgqlc.types.Type):
    '''A `SourceChannel` edge in the connection, with data from
    `CursorHistory`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'cursor_histories_by_source_channel_name')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('SourceChannel'), graphql_name='node')
    '''The `SourceChannel` at the end of the edge.'''

    cursor_histories_by_source_channel_name = sgqlc.types.Field(sgqlc.types.non_null(CursorHistoriesConnection), graphql_name='cursorHistoriesBySourceChannelName', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CursorHistoriesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(CursorHistoryCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CursorHistoryFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `CursorHistory`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CursorHistoriesOrderBy!]`): The method to use when
      ordering `CursorHistory`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`CursorHistoryCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`CursorHistoryFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class SourceTypesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `SourceType` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceType'))), graphql_name='nodes')
    '''A list of `SourceType` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourceTypesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `SourceType` and cursor to aid
    in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `SourceType` you could get from the connection.'''



class SourceTypesEdge(sgqlc.types.Type):
    '''A `SourceType` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('SourceType'), graphql_name='node')
    '''The `SourceType` at the end of the edge.'''



class SourcesConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Source` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Source'))), graphql_name='nodes')
    '''A list of `Source` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SourcesEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Source` and cursor to aid in
    pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Source` you could get from the connection.'''



class SourcesEdge(sgqlc.types.Type):
    '''A `Source` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('Source'), graphql_name='node')
    '''The `Source` at the end of the edge.'''



class StopLocation(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('facility_id', 'id', 'source_system_id', 'name', 'contact_first_name', 'contact_last_name', 'stop_location_code', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'location_type', 'effective_date', 'phone', 'fax', 'email_address', 'source_row_id', 'warehouse_facility_id', 'updated_at', 'deleted_at', 'created_at', 'external_system_id', 'external_system_name', '_version', '_id')
    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    id = sgqlc.types.Field(String, graphql_name='id')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    name = sgqlc.types.Field(String, graphql_name='name')

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')

    stop_location_code = sgqlc.types.Field(BigInt, graphql_name='stopLocationCode')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    address3 = sgqlc.types.Field(String, graphql_name='address3')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    location_type = sgqlc.types.Field(String, graphql_name='locationType')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    phone = sgqlc.types.Field(String, graphql_name='phone')

    fax = sgqlc.types.Field(String, graphql_name='fax')

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')

    source_row_id = sgqlc.types.Field(BigInt, graphql_name='sourceRowId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    external_system_id = sgqlc.types.Field(Int, graphql_name='externalSystemId')

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(String, graphql_name='_id')



class StopLocationsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `StopLocation` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(StopLocation))), graphql_name='nodes')
    '''A list of `StopLocation` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('StopLocationsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `StopLocation` and cursor to
    aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `StopLocation` you could get from the
    connection.
    '''



class StopLocationsEdge(sgqlc.types.Type):
    '''A `StopLocation` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(StopLocation), graphql_name='node')
    '''The `StopLocation` at the end of the edge.'''



class StopLocationsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `StopLocationsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('StopLocationsRaw'))), graphql_name='nodes')
    '''A list of `StopLocationsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('StopLocationsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `StopLocationsRaw` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `StopLocationsRaw` you could get from the
    connection.
    '''



class StopLocationsRawsEdge(sgqlc.types.Type):
    '''A `StopLocationsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('StopLocationsRaw'), graphql_name='node')
    '''The `StopLocationsRaw` at the end of the edge.'''



class UpdateAggregateWarehouseUtilByCustomerRawPayload(sgqlc.types.Type):
    '''The output of our update `AggregateWarehouseUtilByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_util_by_customer_raw', 'query', 'aggregate_warehouse_util_by_customer_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_util_by_customer_raw = sgqlc.types.Field('AggregateWarehouseUtilByCustomerRaw', graphql_name='aggregateWarehouseUtilByCustomerRaw')
    '''The `AggregateWarehouseUtilByCustomerRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_util_by_customer_raw_edge = sgqlc.types.Field(AggregateWarehouseUtilByCustomerRawsEdge, graphql_name='aggregateWarehouseUtilByCustomerRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseUtilByCustomerRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseUtilByCustomerRaw`. May be used
    by Relay 1.

    Arguments:

    * `order_by` (`[AggregateWarehouseUtilByCustomerRawsOrderBy!]`):
      The method to use when ordering
      `AggregateWarehouseUtilByCustomerRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateAggregateWarehouseUtilRawPayload(sgqlc.types.Type):
    '''The output of our update `AggregateWarehouseUtilRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_util_raw', 'query', 'aggregate_warehouse_util_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_util_raw = sgqlc.types.Field('AggregateWarehouseUtilRaw', graphql_name='aggregateWarehouseUtilRaw')
    '''The `AggregateWarehouseUtilRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_util_raw_edge = sgqlc.types.Field(AggregateWarehouseUtilRawsEdge, graphql_name='aggregateWarehouseUtilRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseUtilRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseUtilRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[AggregateWarehouseUtilRawsOrderBy!]`): The method
      to use when ordering `AggregateWarehouseUtilRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateAggregateWarehouseVolumeByCustomerRawPayload(sgqlc.types.Type):
    '''The output of our update `AggregateWarehouseVolumeByCustomerRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_volume_by_customer_raw', 'query', 'aggregate_warehouse_volume_by_customer_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_volume_by_customer_raw = sgqlc.types.Field('AggregateWarehouseVolumeByCustomerRaw', graphql_name='aggregateWarehouseVolumeByCustomerRaw')
    '''The `AggregateWarehouseVolumeByCustomerRaw` that was updated by
    this mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_volume_by_customer_raw_edge = sgqlc.types.Field(AggregateWarehouseVolumeByCustomerRawsEdge, graphql_name='aggregateWarehouseVolumeByCustomerRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseVolumeByCustomerRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseVolumeByCustomerRaw`. May be
    used by Relay 1.

    Arguments:

    * `order_by` (`[AggregateWarehouseVolumeByCustomerRawsOrderBy!]`):
      The method to use when ordering
      `AggregateWarehouseVolumeByCustomerRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateAggregateWarehouseVolumeRawPayload(sgqlc.types.Type):
    '''The output of our update `AggregateWarehouseVolumeRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'aggregate_warehouse_volume_raw', 'query', 'aggregate_warehouse_volume_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    aggregate_warehouse_volume_raw = sgqlc.types.Field('AggregateWarehouseVolumeRaw', graphql_name='aggregateWarehouseVolumeRaw')
    '''The `AggregateWarehouseVolumeRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    aggregate_warehouse_volume_raw_edge = sgqlc.types.Field(AggregateWarehouseVolumeRawsEdge, graphql_name='aggregateWarehouseVolumeRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseVolumeRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `AggregateWarehouseVolumeRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[AggregateWarehouseVolumeRawsOrderBy!]`): The
      method to use when ordering `AggregateWarehouseVolumeRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBillingHistoryRawPayload(sgqlc.types.Type):
    '''The output of our update `BillingHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'billing_history_raw', 'query', 'billing_history_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    billing_history_raw = sgqlc.types.Field('BillingHistoryRaw', graphql_name='billingHistoryRaw')
    '''The `BillingHistoryRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    billing_history_raw_edge = sgqlc.types.Field(BillingHistoryRawsEdge, graphql_name='billingHistoryRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BillingHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BillingHistoryRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BillingHistoryRawsOrderBy!]`): The method to use
      when ordering `BillingHistoryRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBlastCellPayload(sgqlc.types.Type):
    '''The output of our update `BlastCell` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell', 'query', 'facility', 'blast_cell_type', 'blast_cell_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''The `BlastCell` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''Reads a single `Facility` that is related to this `BlastCell`.'''

    blast_cell_type = sgqlc.types.Field('BlastCellType', graphql_name='blastCellType')
    '''Reads a single `BlastCellType` that is related to this
    `BlastCell`.
    '''

    blast_cell_edge = sgqlc.types.Field(BlastCellsEdge, graphql_name='blastCellEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCell`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBlastCellTypePayload(sgqlc.types.Type):
    '''The output of our update `BlastCellType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_type', 'query', 'blast_cell_type_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell_type = sgqlc.types.Field('BlastCellType', graphql_name='blastCellType')
    '''The `BlastCellType` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell_type_edge = sgqlc.types.Field(BlastCellTypesEdge, graphql_name='blastCellTypeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellTypesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCellType`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCellTypesOrderBy!]`): The method to use when
      ordering `BlastCellType`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBlastCellWmsPalletLocationPayload(sgqlc.types.Type):
    '''The output of our update `BlastCellWmsPalletLocation` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_wms_pallet_location', 'query', 'blast_cell', 'wms_pallet_location', 'blast_cell_wms_pallet_location_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell_wms_pallet_location = sgqlc.types.Field('BlastCellWmsPalletLocation', graphql_name='blastCellWmsPalletLocation')
    '''The `BlastCellWmsPalletLocation` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this
    `BlastCellWmsPalletLocation`.
    '''

    wms_pallet_location = sgqlc.types.Field('PalletLocationsRaw', graphql_name='wmsPalletLocation')
    '''Reads a single `PalletLocationsRaw` that is related to this
    `BlastCellWmsPalletLocation`.
    '''

    blast_cell_wms_pallet_location_edge = sgqlc.types.Field(BlastCellWmsPalletLocationsEdge, graphql_name='blastCellWmsPalletLocationEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletLocationsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCellWmsPalletLocation`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[BlastCellWmsPalletLocationsOrderBy!]`): The method
      to use when ordering `BlastCellWmsPalletLocation`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBlastCellWmsPalletPayload(sgqlc.types.Type):
    '''The output of our update `BlastCellWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cell_wms_pallet', 'query', 'blast_cell', 'wms_pallet', 'blast_cycle', 'blast_cell_wms_pallet_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cell_wms_pallet = sgqlc.types.Field('BlastCellWmsPallet', graphql_name='blastCellWmsPallet')
    '''The `BlastCellWmsPallet` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this
    `BlastCellWmsPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastCellWmsPallet`.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCellWmsPallet`.
    '''

    blast_cell_wms_pallet_edge = sgqlc.types.Field(BlastCellWmsPalletsEdge, graphql_name='blastCellWmsPalletEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCellWmsPallet`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBlastCycleEventPayload(sgqlc.types.Type):
    '''The output of our update `BlastCycleEvent` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle_event', 'query', 'blast_cycle', 'blast_cycle_event_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cycle_event = sgqlc.types.Field('BlastCycleEvent', graphql_name='blastCycleEvent')
    '''The `BlastCycleEvent` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCycleEvent`.
    '''

    blast_cycle_event_edge = sgqlc.types.Field(BlastCycleEventsEdge, graphql_name='blastCycleEventEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleEventsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCycleEvent`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCycleEventsOrderBy!]`): The method to use
      when ordering `BlastCycleEvent`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBlastCyclePayload(sgqlc.types.Type):
    '''The output of our update `BlastCycle` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle', 'query', 'blast_cell', 'blast_cycle_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''The `BlastCycle` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cell = sgqlc.types.Field('BlastCell', graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this `BlastCycle`.'''

    blast_cycle_edge = sgqlc.types.Field(BlastCyclesEdge, graphql_name='blastCycleEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCyclesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCycle`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCyclesOrderBy!]`): The method to use when
      ordering `BlastCycle`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBlastCycleWmsPalletPayload(sgqlc.types.Type):
    '''The output of our update `BlastCycleWmsPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_cycle_wms_pallet', 'query', 'blast_cycle', 'wms_pallet', 'blast_cycle_wms_pallet_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_cycle_wms_pallet = sgqlc.types.Field('BlastCycleWmsPallet', graphql_name='blastCycleWmsPallet')
    '''The `BlastCycleWmsPallet` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCycleWmsPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastCycleWmsPallet`.
    '''

    blast_cycle_wms_pallet_edge = sgqlc.types.Field(BlastCycleWmsPalletsEdge, graphql_name='blastCycleWmsPalletEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastCycleWmsPallet`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastCycleWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCycleWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBlastPlanPalletPayload(sgqlc.types.Type):
    '''The output of our update `BlastPlanPallet` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_plan_pallet', 'query', 'blast_plan', 'wms_pallet', 'blast_plan_pallet_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_plan_pallet = sgqlc.types.Field('BlastPlanPallet', graphql_name='blastPlanPallet')
    '''The `BlastPlanPallet` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    blast_plan = sgqlc.types.Field('BlastPlan', graphql_name='blastPlan')
    '''Reads a single `BlastPlan` that is related to this
    `BlastPlanPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastPlanPallet`.
    '''

    blast_plan_pallet_edge = sgqlc.types.Field(BlastPlanPalletsEdge, graphql_name='blastPlanPalletEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlanPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastPlanPallet`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastPlanPalletsOrderBy!]`): The method to use
      when ordering `BlastPlanPallet`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBlastPlanPayload(sgqlc.types.Type):
    '''The output of our update `BlastPlan` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'blast_plan', 'query', 'assigned_blast_cell', 'blast_plan_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    blast_plan = sgqlc.types.Field('BlastPlan', graphql_name='blastPlan')
    '''The `BlastPlan` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    assigned_blast_cell = sgqlc.types.Field('BlastCell', graphql_name='assignedBlastCell')
    '''Reads a single `BlastCell` that is related to this `BlastPlan`.'''

    blast_plan_edge = sgqlc.types.Field(BlastPlansEdge, graphql_name='blastPlanEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlansOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BlastPlan`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BlastPlansOrderBy!]`): The method to use when
      ordering `BlastPlan`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBolConstantsRawPayload(sgqlc.types.Type):
    '''The output of our update `BolConstantsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'bol_constants_raw', 'query', 'bol_constants_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    bol_constants_raw = sgqlc.types.Field('BolConstantsRaw', graphql_name='bolConstantsRaw')
    '''The `BolConstantsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    bol_constants_raw_edge = sgqlc.types.Field(BolConstantsRawsEdge, graphql_name='bolConstantsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BolConstantsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BolConstantsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BolConstantsRawsOrderBy!]`): The method to use
      when ordering `BolConstantsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateBrokerOwnersRawPayload(sgqlc.types.Type):
    '''The output of our update `BrokerOwnersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'broker_owners_raw', 'query', 'broker_owners_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    broker_owners_raw = sgqlc.types.Field('BrokerOwnersRaw', graphql_name='brokerOwnersRaw')
    '''The `BrokerOwnersRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    broker_owners_raw_edge = sgqlc.types.Field(BrokerOwnersRawsEdge, graphql_name='brokerOwnersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BrokerOwnersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `BrokerOwnersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[BrokerOwnersRawsOrderBy!]`): The method to use
      when ordering `BrokerOwnersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateCarriersRawPayload(sgqlc.types.Type):
    '''The output of our update `CarriersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'carriers_raw', 'query', 'carriers_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    carriers_raw = sgqlc.types.Field('CarriersRaw', graphql_name='carriersRaw')
    '''The `CarriersRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    carriers_raw_edge = sgqlc.types.Field(CarriersRawsEdge, graphql_name='carriersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CarriersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CarriersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CarriersRawsOrderBy!]`): The method to use when
      ordering `CarriersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateCasePicksRawPayload(sgqlc.types.Type):
    '''The output of our update `CasePicksRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'case_picks_raw', 'query', 'case_picks_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    case_picks_raw = sgqlc.types.Field('CasePicksRaw', graphql_name='casePicksRaw')
    '''The `CasePicksRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    case_picks_raw_edge = sgqlc.types.Field(CasePicksRawsEdge, graphql_name='casePicksRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CasePicksRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CasePicksRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CasePicksRawsOrderBy!]`): The method to use when
      ordering `CasePicksRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateCursorHistoryPayload(sgqlc.types.Type):
    '''The output of our update `CursorHistory` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cursor_history', 'query', 'source_by_source_slug', 'source_channel_by_source_channel_name', 'cursor_history_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    cursor_history = sgqlc.types.Field('CursorHistory', graphql_name='cursorHistory')
    '''The `CursorHistory` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_by_source_slug = sgqlc.types.Field('Source', graphql_name='sourceBySourceSlug')
    '''Reads a single `Source` that is related to this `CursorHistory`.'''

    source_channel_by_source_channel_name = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannelBySourceChannelName')
    '''Reads a single `SourceChannel` that is related to this
    `CursorHistory`.
    '''

    cursor_history_edge = sgqlc.types.Field(CursorHistoriesEdge, graphql_name='cursorHistoryEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CursorHistoriesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CursorHistory`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CursorHistoriesOrderBy!]`): The method to use when
      ordering `CursorHistory`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateCutsRawPayload(sgqlc.types.Type):
    '''The output of our update `CutsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'cuts_raw', 'query', 'cuts_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    cuts_raw = sgqlc.types.Field('CutsRaw', graphql_name='cutsRaw')
    '''The `CutsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    cuts_raw_edge = sgqlc.types.Field(CutsRawsEdge, graphql_name='cutsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CutsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `CutsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[CutsRawsOrderBy!]`): The method to use when
      ordering `CutsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateCycleMetadataPayload(sgqlc.types.Type):
    '''The output of our `updateCycleMetadata` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'big_int', 'query')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    big_int = sgqlc.types.Field(BigInt, graphql_name='bigInt')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''



class UpdateDriversRawPayload(sgqlc.types.Type):
    '''The output of our update `DriversRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'drivers_raw', 'query', 'drivers_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    drivers_raw = sgqlc.types.Field('DriversRaw', graphql_name='driversRaw')
    '''The `DriversRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    drivers_raw_edge = sgqlc.types.Field(DriversRawsEdge, graphql_name='driversRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(DriversRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `DriversRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[DriversRawsOrderBy!]`): The method to use when
      ordering `DriversRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateEdgeNodePayload(sgqlc.types.Type):
    '''The output of our update `EdgeNode` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'edge_node', 'query', 'edge_node_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    edge_node = sgqlc.types.Field('EdgeNode', graphql_name='edgeNode')
    '''The `EdgeNode` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    edge_node_edge = sgqlc.types.Field(EdgeNodesEdge, graphql_name='edgeNodeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `EdgeNode`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[EdgeNodesOrderBy!]`): The method to use when
      ordering `EdgeNode`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateEdgeNodeSourceChannelAccessPayload(sgqlc.types.Type):
    '''The output of our update `EdgeNodeSourceChannelAccess` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'edge_node_source_channel_access', 'query', 'edge_node_client', 'source_channel_by_source_channel_name', 'edge_node_source_channel_access_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    edge_node_source_channel_access = sgqlc.types.Field('EdgeNodeSourceChannelAccess', graphql_name='edgeNodeSourceChannelAccess')
    '''The `EdgeNodeSourceChannelAccess` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    edge_node_client = sgqlc.types.Field('EdgeNode', graphql_name='edgeNodeClient')
    '''Reads a single `EdgeNode` that is related to this
    `EdgeNodeSourceChannelAccess`.
    '''

    source_channel_by_source_channel_name = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannelBySourceChannelName')
    '''Reads a single `SourceChannel` that is related to this
    `EdgeNodeSourceChannelAccess`.
    '''

    edge_node_source_channel_access_edge = sgqlc.types.Field(EdgeNodeSourceChannelAccessesEdge, graphql_name='edgeNodeSourceChannelAccessEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `EdgeNodeSourceChannelAccess`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[EdgeNodeSourceChannelAccessesOrderBy!]`): The
      method to use when ordering `EdgeNodeSourceChannelAccess`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateExpectedInboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our update `ExpectedInboundOrderDetailsRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_inbound_order_details_raw', 'query', 'expected_inbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_inbound_order_details_raw = sgqlc.types.Field('ExpectedInboundOrderDetailsRaw', graphql_name='expectedInboundOrderDetailsRaw')
    '''The `ExpectedInboundOrderDetailsRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_inbound_order_details_raw_edge = sgqlc.types.Field(ExpectedInboundOrderDetailsRawsEdge, graphql_name='expectedInboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedInboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedInboundOrderDetailsRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[ExpectedInboundOrderDetailsRawsOrderBy!]`): The
      method to use when ordering `ExpectedInboundOrderDetailsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateExpectedInboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our update `ExpectedInboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_inbound_orders_raw', 'query', 'expected_inbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_inbound_orders_raw = sgqlc.types.Field('ExpectedInboundOrdersRaw', graphql_name='expectedInboundOrdersRaw')
    '''The `ExpectedInboundOrdersRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_inbound_orders_raw_edge = sgqlc.types.Field(ExpectedInboundOrdersRawsEdge, graphql_name='expectedInboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedInboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedInboundOrdersRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[ExpectedInboundOrdersRawsOrderBy!]`): The method
      to use when ordering `ExpectedInboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateExpectedOutboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our update `ExpectedOutboundOrderDetailsRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_outbound_order_details_raw', 'query', 'expected_outbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_outbound_order_details_raw = sgqlc.types.Field('ExpectedOutboundOrderDetailsRaw', graphql_name='expectedOutboundOrderDetailsRaw')
    '''The `ExpectedOutboundOrderDetailsRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_outbound_order_details_raw_edge = sgqlc.types.Field(ExpectedOutboundOrderDetailsRawsEdge, graphql_name='expectedOutboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedOutboundOrderDetailsRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[ExpectedOutboundOrderDetailsRawsOrderBy!]`): The
      method to use when ordering `ExpectedOutboundOrderDetailsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateExpectedOutboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our update `ExpectedOutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_outbound_orders_raw', 'query', 'expected_outbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_outbound_orders_raw = sgqlc.types.Field('ExpectedOutboundOrdersRaw', graphql_name='expectedOutboundOrdersRaw')
    '''The `ExpectedOutboundOrdersRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_outbound_orders_raw_edge = sgqlc.types.Field(ExpectedOutboundOrdersRawsEdge, graphql_name='expectedOutboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedOutboundOrdersRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[ExpectedOutboundOrdersRawsOrderBy!]`): The method
      to use when ordering `ExpectedOutboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateExpectedPalletsRawPayload(sgqlc.types.Type):
    '''The output of our update `ExpectedPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'expected_pallets_raw', 'query', 'expected_pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    expected_pallets_raw = sgqlc.types.Field('ExpectedPalletsRaw', graphql_name='expectedPalletsRaw')
    '''The `ExpectedPalletsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    expected_pallets_raw_edge = sgqlc.types.Field(ExpectedPalletsRawsEdge, graphql_name='expectedPalletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ExpectedPalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ExpectedPalletsRawsOrderBy!]`): The method to use
      when ordering `ExpectedPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateFacilitiesTestPayload(sgqlc.types.Type):
    '''The output of our update `FacilitiesTest` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facilities_test', 'query', 'facilities_test_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facilities_test = sgqlc.types.Field('FacilitiesTest', graphql_name='facilitiesTest')
    '''The `FacilitiesTest` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facilities_test_edge = sgqlc.types.Field(FacilitiesTestsEdge, graphql_name='facilitiesTestEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilitiesTestsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `FacilitiesTest`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[FacilitiesTestsOrderBy!]`): The method to use when
      ordering `FacilitiesTest`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateFacilityGroupingPayload(sgqlc.types.Type):
    '''The output of our update `FacilityGrouping` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility_grouping', 'query', 'parent', 'facility_grouping_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facility_grouping = sgqlc.types.Field('FacilityGrouping', graphql_name='facilityGrouping')
    '''The `FacilityGrouping` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    parent = sgqlc.types.Field('FacilityGrouping', graphql_name='parent')
    '''Reads a single `FacilityGrouping` that is related to this
    `FacilityGrouping`.
    '''

    facility_grouping_edge = sgqlc.types.Field(FacilityGroupingsEdge, graphql_name='facilityGroupingEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityGroupingsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `FacilityGrouping`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[FacilityGroupingsOrderBy!]`): The method to use
      when ordering `FacilityGrouping`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateFacilityPayload(sgqlc.types.Type):
    '''The output of our update `Facility` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility', 'query', 'facility_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''The `Facility` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facility_edge = sgqlc.types.Field(FacilitiesEdge, graphql_name='facilityEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilitiesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `Facility`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[FacilitiesOrderBy!]`): The method to use when
      ordering `Facility`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateFacilityWorkdayCostCenterPayload(sgqlc.types.Type):
    '''The output of our update `FacilityWorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'facility_workday_cost_center', 'query', 'facility', 'cost_center', 'facility_workday_cost_center_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    facility_workday_cost_center = sgqlc.types.Field('FacilityWorkdayCostCenter', graphql_name='facilityWorkdayCostCenter')
    '''The `FacilityWorkdayCostCenter` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''Reads a single `Facility` that is related to this
    `FacilityWorkdayCostCenter`.
    '''

    cost_center = sgqlc.types.Field('WorkdayCostCenter', graphql_name='costCenter')
    '''Reads a single `WorkdayCostCenter` that is related to this
    `FacilityWorkdayCostCenter`.
    '''

    facility_workday_cost_center_edge = sgqlc.types.Field(FacilityWorkdayCostCentersEdge, graphql_name='facilityWorkdayCostCenterEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `FacilityWorkdayCostCenter`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[FacilityWorkdayCostCentersOrderBy!]`): The method
      to use when ordering `FacilityWorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateHoldCodesRawPayload(sgqlc.types.Type):
    '''The output of our update `HoldCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'hold_codes_raw', 'query', 'hold_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    hold_codes_raw = sgqlc.types.Field('HoldCodesRaw', graphql_name='holdCodesRaw')
    '''The `HoldCodesRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    hold_codes_raw_edge = sgqlc.types.Field(HoldCodesRawsEdge, graphql_name='holdCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(HoldCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `HoldCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[HoldCodesRawsOrderBy!]`): The method to use when
      ordering `HoldCodesRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateHppRawPayload(sgqlc.types.Type):
    '''The output of our update `HppRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'hpp_raw', 'query', 'hpp_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    hpp_raw = sgqlc.types.Field('HppRaw', graphql_name='hppRaw')
    '''The `HppRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    hpp_raw_edge = sgqlc.types.Field(HppRawsEdge, graphql_name='hppRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(HppRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `HppRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[HppRawsOrderBy!]`): The method to use when
      ordering `HppRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInboundCatchWeightRawPayload(sgqlc.types.Type):
    '''The output of our update `InboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_catch_weight_raw', 'query', 'inbound_catch_weight_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_catch_weight_raw = sgqlc.types.Field('InboundCatchWeightRaw', graphql_name='inboundCatchWeightRaw')
    '''The `InboundCatchWeightRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_catch_weight_raw_edge = sgqlc.types.Field(InboundCatchWeightRawsEdge, graphql_name='inboundCatchWeightRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundCatchWeightRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundCatchWeightRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundCatchWeightRawsOrderBy!]`): The method to
      use when ordering `InboundCatchWeightRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInboundLoadsRawPayload(sgqlc.types.Type):
    '''The output of our update `InboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_loads_raw', 'query', 'inbound_loads_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_loads_raw = sgqlc.types.Field('InboundLoadsRaw', graphql_name='inboundLoadsRaw')
    '''The `InboundLoadsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_loads_raw_edge = sgqlc.types.Field(InboundLoadsRawsEdge, graphql_name='inboundLoadsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundLoadsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundLoadsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundLoadsRawsOrderBy!]`): The method to use
      when ordering `InboundLoadsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInboundOrderCommentsRawPayload(sgqlc.types.Type):
    '''The output of our update `InboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_comments_raw', 'query', 'inbound_order_comments_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_comments_raw = sgqlc.types.Field('InboundOrderCommentsRaw', graphql_name='inboundOrderCommentsRaw')
    '''The `InboundOrderCommentsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_comments_raw_edge = sgqlc.types.Field(InboundOrderCommentsRawsEdge, graphql_name='inboundOrderCommentsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderCommentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderCommentsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderCommentsRawsOrderBy!]`): The method to
      use when ordering `InboundOrderCommentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInboundOrderDetailReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our update `InboundOrderDetailReferenceCodesRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_detail_reference_codes_raw', 'query', 'inbound_order_detail_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_detail_reference_codes_raw = sgqlc.types.Field('InboundOrderDetailReferenceCodesRaw', graphql_name='inboundOrderDetailReferenceCodesRaw')
    '''The `InboundOrderDetailReferenceCodesRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_detail_reference_codes_raw_edge = sgqlc.types.Field(InboundOrderDetailReferenceCodesRawsEdge, graphql_name='inboundOrderDetailReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderDetailReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderDetailReferenceCodesRaw`. May be used
    by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderDetailReferenceCodesRawsOrderBy!]`):
      The method to use when ordering
      `InboundOrderDetailReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our update `InboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_details_raw', 'query', 'inbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_details_raw = sgqlc.types.Field('InboundOrderDetailsRaw', graphql_name='inboundOrderDetailsRaw')
    '''The `InboundOrderDetailsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_details_raw_edge = sgqlc.types.Field(InboundOrderDetailsRawsEdge, graphql_name='inboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderDetailsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderDetailsRawsOrderBy!]`): The method to
      use when ordering `InboundOrderDetailsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInboundOrderReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our update `InboundOrderReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_order_reference_codes_raw', 'query', 'inbound_order_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_order_reference_codes_raw = sgqlc.types.Field('InboundOrderReferenceCodesRaw', graphql_name='inboundOrderReferenceCodesRaw')
    '''The `InboundOrderReferenceCodesRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_order_reference_codes_raw_edge = sgqlc.types.Field(InboundOrderReferenceCodesRawsEdge, graphql_name='inboundOrderReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrderReferenceCodesRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[InboundOrderReferenceCodesRawsOrderBy!]`): The
      method to use when ordering `InboundOrderReferenceCodesRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInboundOrdersExecutionRawPayload(sgqlc.types.Type):
    '''The output of our update `InboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_orders_execution_raw', 'query', 'inbound_orders_execution_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_orders_execution_raw = sgqlc.types.Field('InboundOrdersExecutionRaw', graphql_name='inboundOrdersExecutionRaw')
    '''The `InboundOrdersExecutionRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_orders_execution_raw_edge = sgqlc.types.Field(InboundOrdersExecutionRawsEdge, graphql_name='inboundOrdersExecutionRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrdersExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrdersExecutionRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[InboundOrdersExecutionRawsOrderBy!]`): The method
      to use when ordering `InboundOrdersExecutionRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our update `InboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_orders_raw', 'query', 'inbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_orders_raw = sgqlc.types.Field('InboundOrdersRaw', graphql_name='inboundOrdersRaw')
    '''The `InboundOrdersRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_orders_raw_edge = sgqlc.types.Field(InboundOrdersRawsEdge, graphql_name='inboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundOrdersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundOrdersRawsOrderBy!]`): The method to use
      when ordering `InboundOrdersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInboundPalletsRawPayload(sgqlc.types.Type):
    '''The output of our update `InboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_pallets_raw', 'query', 'inbound_pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_pallets_raw = sgqlc.types.Field('InboundPalletsRaw', graphql_name='inboundPalletsRaw')
    '''The `InboundPalletsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_pallets_raw_edge = sgqlc.types.Field(InboundPalletsRawsEdge, graphql_name='inboundPalletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundPalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundPalletsRawsOrderBy!]`): The method to use
      when ordering `InboundPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInboundTruckLogRawPayload(sgqlc.types.Type):
    '''The output of our update `InboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inbound_truck_log_raw', 'query', 'inbound_truck_log_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inbound_truck_log_raw = sgqlc.types.Field('InboundTruckLogRaw', graphql_name='inboundTruckLogRaw')
    '''The `InboundTruckLogRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inbound_truck_log_raw_edge = sgqlc.types.Field(InboundTruckLogRawsEdge, graphql_name='inboundTruckLogRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundTruckLogRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InboundTruckLogRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InboundTruckLogRawsOrderBy!]`): The method to use
      when ordering `InboundTruckLogRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInventoryAdjustmentsRawPayload(sgqlc.types.Type):
    '''The output of our update `InventoryAdjustmentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_adjustments_raw', 'query', 'inventory_adjustments_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inventory_adjustments_raw = sgqlc.types.Field('InventoryAdjustmentsRaw', graphql_name='inventoryAdjustmentsRaw')
    '''The `InventoryAdjustmentsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inventory_adjustments_raw_edge = sgqlc.types.Field(InventoryAdjustmentsRawsEdge, graphql_name='inventoryAdjustmentsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryAdjustmentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InventoryAdjustmentsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InventoryAdjustmentsRawsOrderBy!]`): The method to
      use when ordering `InventoryAdjustmentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInventoryControlRawPayload(sgqlc.types.Type):
    '''The output of our update `InventoryControlRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_control_raw', 'query', 'inventory_control_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inventory_control_raw = sgqlc.types.Field('InventoryControlRaw', graphql_name='inventoryControlRaw')
    '''The `InventoryControlRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inventory_control_raw_edge = sgqlc.types.Field(InventoryControlRawsEdge, graphql_name='inventoryControlRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryControlRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InventoryControlRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InventoryControlRawsOrderBy!]`): The method to use
      when ordering `InventoryControlRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateInventoryHoldHistoryRawPayload(sgqlc.types.Type):
    '''The output of our update `InventoryHoldHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'inventory_hold_history_raw', 'query', 'inventory_hold_history_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    inventory_hold_history_raw = sgqlc.types.Field('InventoryHoldHistoryRaw', graphql_name='inventoryHoldHistoryRaw')
    '''The `InventoryHoldHistoryRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    inventory_hold_history_raw_edge = sgqlc.types.Field(InventoryHoldHistoryRawsEdge, graphql_name='inventoryHoldHistoryRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryHoldHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `InventoryHoldHistoryRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[InventoryHoldHistoryRawsOrderBy!]`): The method to
      use when ordering `InventoryHoldHistoryRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateItemFreezeTimePayload(sgqlc.types.Type):
    '''The output of our update `ItemFreezeTime` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_freeze_time', 'query', 'wms_item', 'for_blast_cell_type', 'item_freeze_time_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    item_freeze_time = sgqlc.types.Field('ItemFreezeTime', graphql_name='itemFreezeTime')
    '''The `ItemFreezeTime` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_item = sgqlc.types.Field('ItemsRaw', graphql_name='wmsItem')
    '''Reads a single `ItemsRaw` that is related to this
    `ItemFreezeTime`.
    '''

    for_blast_cell_type = sgqlc.types.Field('BlastCellType', graphql_name='forBlastCellType')
    '''Reads a single `BlastCellType` that is related to this
    `ItemFreezeTime`.
    '''

    item_freeze_time_edge = sgqlc.types.Field(ItemFreezeTimesEdge, graphql_name='itemFreezeTimeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemFreezeTimesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemFreezeTime`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemFreezeTimesOrderBy!]`): The method to use when
      ordering `ItemFreezeTime`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateItemReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our update `ItemReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_reference_codes_raw', 'query', 'item_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    item_reference_codes_raw = sgqlc.types.Field('ItemReferenceCodesRaw', graphql_name='itemReferenceCodesRaw')
    '''The `ItemReferenceCodesRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    item_reference_codes_raw_edge = sgqlc.types.Field(ItemReferenceCodesRawsEdge, graphql_name='itemReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemReferenceCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `ItemReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateItemShortCategoryNamePayload(sgqlc.types.Type):
    '''The output of our update `ItemShortCategoryName` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'item_short_category_name', 'query', 'wms_item', 'item_short_category_name_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    item_short_category_name = sgqlc.types.Field('ItemShortCategoryName', graphql_name='itemShortCategoryName')
    '''The `ItemShortCategoryName` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_item = sgqlc.types.Field('ItemsRaw', graphql_name='wmsItem')
    '''Reads a single `ItemsRaw` that is related to this
    `ItemShortCategoryName`.
    '''

    item_short_category_name_edge = sgqlc.types.Field(ItemShortCategoryNamesEdge, graphql_name='itemShortCategoryNameEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemShortCategoryNamesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemShortCategoryName`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemShortCategoryNamesOrderBy!]`): The method to
      use when ordering `ItemShortCategoryName`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateItemsRawPayload(sgqlc.types.Type):
    '''The output of our update `ItemsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'items_raw', 'query', 'items_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    items_raw = sgqlc.types.Field('ItemsRaw', graphql_name='itemsRaw')
    '''The `ItemsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    items_raw_edge = sgqlc.types.Field(ItemsRawsEdge, graphql_name='itemsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `ItemsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[ItemsRawsOrderBy!]`): The method to use when
      ordering `ItemsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateLotReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our update `LotReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lot_reference_codes_raw', 'query', 'lot_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    lot_reference_codes_raw = sgqlc.types.Field('LotReferenceCodesRaw', graphql_name='lotReferenceCodesRaw')
    '''The `LotReferenceCodesRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    lot_reference_codes_raw_edge = sgqlc.types.Field(LotReferenceCodesRawsEdge, graphql_name='lotReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `LotReferenceCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[LotReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `LotReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateLotTransactionsRawPayload(sgqlc.types.Type):
    '''The output of our update `LotTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lot_transactions_raw', 'query', 'lot_transactions_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    lot_transactions_raw = sgqlc.types.Field('LotTransactionsRaw', graphql_name='lotTransactionsRaw')
    '''The `LotTransactionsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    lot_transactions_raw_edge = sgqlc.types.Field(LotTransactionsRawsEdge, graphql_name='lotTransactionsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `LotTransactionsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[LotTransactionsRawsOrderBy!]`): The method to use
      when ordering `LotTransactionsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateLotsRawPayload(sgqlc.types.Type):
    '''The output of our update `LotsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'lots_raw', 'query', 'lots_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    lots_raw = sgqlc.types.Field('LotsRaw', graphql_name='lotsRaw')
    '''The `LotsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    lots_raw_edge = sgqlc.types.Field(LotsRawsEdge, graphql_name='lotsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `LotsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[LotsRawsOrderBy!]`): The method to use when
      ordering `LotsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateOutboundCatchWeightRawPayload(sgqlc.types.Type):
    '''The output of our update `OutboundCatchWeightRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_catch_weight_raw', 'query', 'outbound_catch_weight_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_catch_weight_raw = sgqlc.types.Field('OutboundCatchWeightRaw', graphql_name='outboundCatchWeightRaw')
    '''The `OutboundCatchWeightRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_catch_weight_raw_edge = sgqlc.types.Field(OutboundCatchWeightRawsEdge, graphql_name='outboundCatchWeightRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundCatchWeightRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundCatchWeightRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundCatchWeightRawsOrderBy!]`): The method to
      use when ordering `OutboundCatchWeightRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateOutboundLoadsRawPayload(sgqlc.types.Type):
    '''The output of our update `OutboundLoadsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_loads_raw', 'query', 'outbound_loads_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_loads_raw = sgqlc.types.Field('OutboundLoadsRaw', graphql_name='outboundLoadsRaw')
    '''The `OutboundLoadsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_loads_raw_edge = sgqlc.types.Field(OutboundLoadsRawsEdge, graphql_name='outboundLoadsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundLoadsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundLoadsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundLoadsRawsOrderBy!]`): The method to use
      when ordering `OutboundLoadsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateOutboundOrderCommentsRawPayload(sgqlc.types.Type):
    '''The output of our update `OutboundOrderCommentsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_comments_raw', 'query', 'outbound_order_comments_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_comments_raw = sgqlc.types.Field('OutboundOrderCommentsRaw', graphql_name='outboundOrderCommentsRaw')
    '''The `OutboundOrderCommentsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_comments_raw_edge = sgqlc.types.Field(OutboundOrderCommentsRawsEdge, graphql_name='outboundOrderCommentsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderCommentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderCommentsRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[OutboundOrderCommentsRawsOrderBy!]`): The method
      to use when ordering `OutboundOrderCommentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateOutboundOrderDetailsExecutionRawPayload(sgqlc.types.Type):
    '''The output of our update `OutboundOrderDetailsExecutionRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_details_execution_raw', 'query', 'outbound_order_details_execution_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_details_execution_raw = sgqlc.types.Field('OutboundOrderDetailsExecutionRaw', graphql_name='outboundOrderDetailsExecutionRaw')
    '''The `OutboundOrderDetailsExecutionRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_details_execution_raw_edge = sgqlc.types.Field(OutboundOrderDetailsExecutionRawsEdge, graphql_name='outboundOrderDetailsExecutionRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderDetailsExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderDetailsExecutionRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrderDetailsExecutionRawsOrderBy!]`): The
      method to use when ordering `OutboundOrderDetailsExecutionRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateOutboundOrderDetailsRawPayload(sgqlc.types.Type):
    '''The output of our update `OutboundOrderDetailsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_details_raw', 'query', 'outbound_order_details_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_details_raw = sgqlc.types.Field('OutboundOrderDetailsRaw', graphql_name='outboundOrderDetailsRaw')
    '''The `OutboundOrderDetailsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_details_raw_edge = sgqlc.types.Field(OutboundOrderDetailsRawsEdge, graphql_name='outboundOrderDetailsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderDetailsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrderDetailsRawsOrderBy!]`): The method to
      use when ordering `OutboundOrderDetailsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateOutboundOrderReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our update `OutboundOrderReferenceCodesRaw`
    mutation.
    '''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_order_reference_codes_raw', 'query', 'outbound_order_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_order_reference_codes_raw = sgqlc.types.Field('OutboundOrderReferenceCodesRaw', graphql_name='outboundOrderReferenceCodesRaw')
    '''The `OutboundOrderReferenceCodesRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_order_reference_codes_raw_edge = sgqlc.types.Field(OutboundOrderReferenceCodesRawsEdge, graphql_name='outboundOrderReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrderReferenceCodesRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrderReferenceCodesRawsOrderBy!]`): The
      method to use when ordering `OutboundOrderReferenceCodesRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateOutboundOrdersExecutionRawPayload(sgqlc.types.Type):
    '''The output of our update `OutboundOrdersExecutionRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_orders_execution_raw', 'query', 'outbound_orders_execution_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_orders_execution_raw = sgqlc.types.Field('OutboundOrdersExecutionRaw', graphql_name='outboundOrdersExecutionRaw')
    '''The `OutboundOrdersExecutionRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_orders_execution_raw_edge = sgqlc.types.Field(OutboundOrdersExecutionRawsEdge, graphql_name='outboundOrdersExecutionRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrdersExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrdersExecutionRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[OutboundOrdersExecutionRawsOrderBy!]`): The method
      to use when ordering `OutboundOrdersExecutionRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateOutboundOrdersRawPayload(sgqlc.types.Type):
    '''The output of our update `OutboundOrdersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_orders_raw', 'query', 'outbound_orders_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_orders_raw = sgqlc.types.Field('OutboundOrdersRaw', graphql_name='outboundOrdersRaw')
    '''The `OutboundOrdersRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_orders_raw_edge = sgqlc.types.Field(OutboundOrdersRawsEdge, graphql_name='outboundOrdersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundOrdersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundOrdersRawsOrderBy!]`): The method to use
      when ordering `OutboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateOutboundPalletsRawPayload(sgqlc.types.Type):
    '''The output of our update `OutboundPalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_pallets_raw', 'query', 'outbound_pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_pallets_raw = sgqlc.types.Field('OutboundPalletsRaw', graphql_name='outboundPalletsRaw')
    '''The `OutboundPalletsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_pallets_raw_edge = sgqlc.types.Field(OutboundPalletsRawsEdge, graphql_name='outboundPalletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundPalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundPalletsRawsOrderBy!]`): The method to use
      when ordering `OutboundPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateOutboundTruckLogRawPayload(sgqlc.types.Type):
    '''The output of our update `OutboundTruckLogRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'outbound_truck_log_raw', 'query', 'outbound_truck_log_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    outbound_truck_log_raw = sgqlc.types.Field('OutboundTruckLogRaw', graphql_name='outboundTruckLogRaw')
    '''The `OutboundTruckLogRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    outbound_truck_log_raw_edge = sgqlc.types.Field(OutboundTruckLogRawsEdge, graphql_name='outboundTruckLogRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundTruckLogRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `OutboundTruckLogRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[OutboundTruckLogRawsOrderBy!]`): The method to use
      when ordering `OutboundTruckLogRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdatePalletHistoryRawPayload(sgqlc.types.Type):
    '''The output of our update `PalletHistoryRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_history_raw', 'query', 'pallet_history_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_history_raw = sgqlc.types.Field('PalletHistoryRaw', graphql_name='palletHistoryRaw')
    '''The `PalletHistoryRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_history_raw_edge = sgqlc.types.Field(PalletHistoryRawsEdge, graphql_name='palletHistoryRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletHistoryRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletHistoryRawsOrderBy!]`): The method to use
      when ordering `PalletHistoryRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdatePalletLocationsRawPayload(sgqlc.types.Type):
    '''The output of our update `PalletLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_locations_raw', 'query', 'pallet_locations_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_locations_raw = sgqlc.types.Field('PalletLocationsRaw', graphql_name='palletLocationsRaw')
    '''The `PalletLocationsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_locations_raw_edge = sgqlc.types.Field(PalletLocationsRawsEdge, graphql_name='palletLocationsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletLocationsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletLocationsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletLocationsRawsOrderBy!]`): The method to use
      when ordering `PalletLocationsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdatePalletReferenceCodesRawPayload(sgqlc.types.Type):
    '''The output of our update `PalletReferenceCodesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_reference_codes_raw', 'query', 'pallet_reference_codes_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_reference_codes_raw = sgqlc.types.Field('PalletReferenceCodesRaw', graphql_name='palletReferenceCodesRaw')
    '''The `PalletReferenceCodesRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_reference_codes_raw_edge = sgqlc.types.Field(PalletReferenceCodesRawsEdge, graphql_name='palletReferenceCodesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletReferenceCodesRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `PalletReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdatePalletTransactionsRawPayload(sgqlc.types.Type):
    '''The output of our update `PalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallet_transactions_raw', 'query', 'pallet_transactions_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallet_transactions_raw = sgqlc.types.Field('PalletTransactionsRaw', graphql_name='palletTransactionsRaw')
    '''The `PalletTransactionsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallet_transactions_raw_edge = sgqlc.types.Field(PalletTransactionsRawsEdge, graphql_name='palletTransactionsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletTransactionsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletTransactionsRawsOrderBy!]`): The method to
      use when ordering `PalletTransactionsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdatePalletsInBlastCellsPayload(sgqlc.types.Type):
    '''The output of our `updatePalletsInBlastCells` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'big_int', 'query')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    big_int = sgqlc.types.Field(BigInt, graphql_name='bigInt')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''



class UpdatePalletsRawPayload(sgqlc.types.Type):
    '''The output of our update `PalletsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'pallets_raw', 'query', 'pallets_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    pallets_raw = sgqlc.types.Field('PalletsRaw', graphql_name='palletsRaw')
    '''The `PalletsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    pallets_raw_edge = sgqlc.types.Field(PalletsRawsEdge, graphql_name='palletsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `PalletsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[PalletsRawsOrderBy!]`): The method to use when
      ordering `PalletsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateSourceChannelCursorPayload(sgqlc.types.Type):
    '''The output of our update `SourceChannelCursor` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_channel_cursor', 'query', 'source_channel_cursor_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source_channel_cursor = sgqlc.types.Field('SourceChannelCursor', graphql_name='sourceChannelCursor')
    '''The `SourceChannelCursor` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_channel_cursor_edge = sgqlc.types.Field(SourceChannelCursorsEdge, graphql_name='sourceChannelCursorEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelCursorsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `SourceChannelCursor`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourceChannelCursorsOrderBy!]`): The method to use
      when ordering `SourceChannelCursor`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateSourceChannelPayload(sgqlc.types.Type):
    '''The output of our update `SourceChannel` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_channel', 'query', 'source_by_source_slug', 'cursor', 'source_channel_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source_channel = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannel')
    '''The `SourceChannel` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_by_source_slug = sgqlc.types.Field('Source', graphql_name='sourceBySourceSlug')
    '''Reads a single `Source` that is related to this `SourceChannel`.'''

    cursor = sgqlc.types.Field('SourceChannelCursor', graphql_name='cursor')
    '''Reads a single `SourceChannelCursor` that is related to this
    `SourceChannel`.
    '''

    source_channel_edge = sgqlc.types.Field(SourceChannelsEdge, graphql_name='sourceChannelEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `SourceChannel`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourceChannelsOrderBy!]`): The method to use when
      ordering `SourceChannel`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateSourcePayload(sgqlc.types.Type):
    '''The output of our update `Source` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source', 'query', 'source_type', 'source_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source = sgqlc.types.Field('Source', graphql_name='source')
    '''The `Source` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_type = sgqlc.types.Field('SourceType', graphql_name='sourceType')
    '''Reads a single `SourceType` that is related to this `Source`.'''

    source_edge = sgqlc.types.Field(SourcesEdge, graphql_name='sourceEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourcesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `Source`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourcesOrderBy!]`): The method to use when
      ordering `Source`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateSourceTypePayload(sgqlc.types.Type):
    '''The output of our update `SourceType` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_type', 'query', 'source_type_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source_type = sgqlc.types.Field('SourceType', graphql_name='sourceType')
    '''The `SourceType` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_type_edge = sgqlc.types.Field(SourceTypesEdge, graphql_name='sourceTypeEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceTypesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `SourceType`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourceTypesOrderBy!]`): The method to use when
      ordering `SourceType`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateStopLocationsRawPayload(sgqlc.types.Type):
    '''The output of our update `StopLocationsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'stop_locations_raw', 'query', 'stop_locations_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    stop_locations_raw = sgqlc.types.Field('StopLocationsRaw', graphql_name='stopLocationsRaw')
    '''The `StopLocationsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    stop_locations_raw_edge = sgqlc.types.Field(StopLocationsRawsEdge, graphql_name='stopLocationsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(StopLocationsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `StopLocationsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[StopLocationsRawsOrderBy!]`): The method to use
      when ordering `StopLocationsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateWarehouseCustomersConfigRawPayload(sgqlc.types.Type):
    '''The output of our update `WarehouseCustomersConfigRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_customers_config_raw', 'query', 'warehouse_customers_config_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    warehouse_customers_config_raw = sgqlc.types.Field('WarehouseCustomersConfigRaw', graphql_name='warehouseCustomersConfigRaw')
    '''The `WarehouseCustomersConfigRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    warehouse_customers_config_raw_edge = sgqlc.types.Field('WarehouseCustomersConfigRawsEdge', graphql_name='warehouseCustomersConfigRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehouseCustomersConfigRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WarehouseCustomersConfigRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[WarehouseCustomersConfigRawsOrderBy!]`): The
      method to use when ordering `WarehouseCustomersConfigRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateWarehouseCustomersRawPayload(sgqlc.types.Type):
    '''The output of our update `WarehouseCustomersRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_customers_raw', 'query', 'warehouse_customers_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    warehouse_customers_raw = sgqlc.types.Field('WarehouseCustomersRaw', graphql_name='warehouseCustomersRaw')
    '''The `WarehouseCustomersRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    warehouse_customers_raw_edge = sgqlc.types.Field('WarehouseCustomersRawsEdge', graphql_name='warehouseCustomersRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehouseCustomersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WarehouseCustomersRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WarehouseCustomersRawsOrderBy!]`): The method to
      use when ordering `WarehouseCustomersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateWarehousePickActivitiesRawPayload(sgqlc.types.Type):
    '''The output of our update `WarehousePickActivitiesRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'warehouse_pick_activities_raw', 'query', 'warehouse_pick_activities_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    warehouse_pick_activities_raw = sgqlc.types.Field('WarehousePickActivitiesRaw', graphql_name='warehousePickActivitiesRaw')
    '''The `WarehousePickActivitiesRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    warehouse_pick_activities_raw_edge = sgqlc.types.Field('WarehousePickActivitiesRawsEdge', graphql_name='warehousePickActivitiesRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehousePickActivitiesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WarehousePickActivitiesRaw`. May be used by Relay
    1.

    Arguments:

    * `order_by` (`[WarehousePickActivitiesRawsOrderBy!]`): The method
      to use when ordering `WarehousePickActivitiesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateWmsFacilityDefaultsRawPayload(sgqlc.types.Type):
    '''The output of our update `WmsFacilityDefaultsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wms_facility_defaults_raw', 'query', 'wms_facility_defaults_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    wms_facility_defaults_raw = sgqlc.types.Field('WmsFacilityDefaultsRaw', graphql_name='wmsFacilityDefaultsRaw')
    '''The `WmsFacilityDefaultsRaw` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_facility_defaults_raw_edge = sgqlc.types.Field('WmsFacilityDefaultsRawsEdge', graphql_name='wmsFacilityDefaultsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WmsFacilityDefaultsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WmsFacilityDefaultsRaw`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WmsFacilityDefaultsRawsOrderBy!]`): The method to
      use when ordering `WmsFacilityDefaultsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpdateWmsSystemPayload(sgqlc.types.Type):
    '''The output of our update `WmsSystem` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wms_system', 'query', 'wms_system_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    wms_system = sgqlc.types.Field('WmsSystem', graphql_name='wmsSystem')
    '''The `WmsSystem` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wms_system_edge = sgqlc.types.Field('WmsSystemsEdge', graphql_name='wmsSystemEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WmsSystemsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WmsSystem`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WmsSystemsOrderBy!]`): The method to use when
      ordering `WmsSystem`. (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateWoodenPalletTransactionsRawPayload(sgqlc.types.Type):
    '''The output of our update `WoodenPalletTransactionsRaw` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'wooden_pallet_transactions_raw', 'query', 'wooden_pallet_transactions_raw_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    wooden_pallet_transactions_raw = sgqlc.types.Field('WoodenPalletTransactionsRaw', graphql_name='woodenPalletTransactionsRaw')
    '''The `WoodenPalletTransactionsRaw` that was updated by this
    mutation.
    '''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    wooden_pallet_transactions_raw_edge = sgqlc.types.Field('WoodenPalletTransactionsRawsEdge', graphql_name='woodenPalletTransactionsRawEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WoodenPalletTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WoodenPalletTransactionsRaw`. May be used by
    Relay 1.

    Arguments:

    * `order_by` (`[WoodenPalletTransactionsRawsOrderBy!]`): The
      method to use when ordering `WoodenPalletTransactionsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    '''



class UpdateWorkdayCostCenterPayload(sgqlc.types.Type):
    '''The output of our update `WorkdayCostCenter` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'workday_cost_center', 'query', 'workday_cost_center_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    workday_cost_center = sgqlc.types.Field('WorkdayCostCenter', graphql_name='workdayCostCenter')
    '''The `WorkdayCostCenter` that was updated by this mutation.'''

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    workday_cost_center_edge = sgqlc.types.Field('WorkdayCostCentersEdge', graphql_name='workdayCostCenterEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `WorkdayCostCenter`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[WorkdayCostCentersOrderBy!]`): The method to use
      when ordering `WorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class UpsertChannelCursorPayload(sgqlc.types.Type):
    '''The output of our `upsertChannelCursor` mutation.'''
    __schema__ = base
    __field_names__ = ('client_mutation_id', 'source_channel_cursor', 'query', 'source_channel_cursor_edge')
    client_mutation_id = sgqlc.types.Field(String, graphql_name='clientMutationId')
    '''The exact same `clientMutationId` that was provided in the
    mutation input, unchanged and unused. May be used by a client to
    track mutations.
    '''

    source_channel_cursor = sgqlc.types.Field('SourceChannelCursor', graphql_name='sourceChannelCursor')

    query = sgqlc.types.Field('Query', graphql_name='query')
    '''Our root query field type. Allows us to run any query from our
    mutation payload.
    '''

    source_channel_cursor_edge = sgqlc.types.Field(SourceChannelCursorsEdge, graphql_name='sourceChannelCursorEdge', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelCursorsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
))
    )
    '''An edge for our `SourceChannelCursor`. May be used by Relay 1.

    Arguments:

    * `order_by` (`[SourceChannelCursorsOrderBy!]`): The method to use
      when ordering `SourceChannelCursor`. (default:
      `[PRIMARY_KEY_ASC]`)
    '''



class WarehouseCustomer(sgqlc.types.Type):
    __schema__ = base
    __field_names__ = ('id', 'customer_id', 'salesforce_account_name', 'facility_id', 'customer_enterprise_id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'is_active', 'source_row_id', '_id', '_version', 'created_at', 'updated_at', 'deleted_at')
    id = sgqlc.types.Field(String, graphql_name='id')

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')

    salesforce_account_name = sgqlc.types.Field(String, graphql_name='salesforceAccountName')

    facility_id = sgqlc.types.Field(Int, graphql_name='facilityId')

    customer_enterprise_id = sgqlc.types.Field(String, graphql_name='customerEnterpriseId')

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    _id = sgqlc.types.Field(String, graphql_name='_id')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')



class WarehouseCustomersConfigRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `WarehouseCustomersConfigRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomersConfigRaw'))), graphql_name='nodes')
    '''A list of `WarehouseCustomersConfigRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomersConfigRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `WarehouseCustomersConfigRaw`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `WarehouseCustomersConfigRaw` you could get
    from the connection.
    '''



class WarehouseCustomersConfigRawsEdge(sgqlc.types.Type):
    '''A `WarehouseCustomersConfigRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('WarehouseCustomersConfigRaw'), graphql_name='node')
    '''The `WarehouseCustomersConfigRaw` at the end of the edge.'''



class WarehouseCustomersConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `WarehouseCustomer` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(WarehouseCustomer))), graphql_name='nodes')
    '''A list of `WarehouseCustomer` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomersEdge'))), graphql_name='edges')
    '''A list of edges which contains the `WarehouseCustomer` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `WarehouseCustomer` you could get from the
    connection.
    '''



class WarehouseCustomersEdge(sgqlc.types.Type):
    '''A `WarehouseCustomer` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null(WarehouseCustomer), graphql_name='node')
    '''The `WarehouseCustomer` at the end of the edge.'''



class WarehouseCustomersRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `WarehouseCustomersRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomersRaw'))), graphql_name='nodes')
    '''A list of `WarehouseCustomersRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WarehouseCustomersRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `WarehouseCustomersRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `WarehouseCustomersRaw` you could get from the
    connection.
    '''



class WarehouseCustomersRawsEdge(sgqlc.types.Type):
    '''A `WarehouseCustomersRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('WarehouseCustomersRaw'), graphql_name='node')
    '''The `WarehouseCustomersRaw` at the end of the edge.'''



class WarehousePickActivitiesRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `WarehousePickActivitiesRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WarehousePickActivitiesRaw'))), graphql_name='nodes')
    '''A list of `WarehousePickActivitiesRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WarehousePickActivitiesRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `WarehousePickActivitiesRaw`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `WarehousePickActivitiesRaw` you could get from
    the connection.
    '''



class WarehousePickActivitiesRawsEdge(sgqlc.types.Type):
    '''A `WarehousePickActivitiesRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('WarehousePickActivitiesRaw'), graphql_name='node')
    '''The `WarehousePickActivitiesRaw` at the end of the edge.'''



class WmsFacilityDefaultsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `WmsFacilityDefaultsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WmsFacilityDefaultsRaw'))), graphql_name='nodes')
    '''A list of `WmsFacilityDefaultsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WmsFacilityDefaultsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `WmsFacilityDefaultsRaw` and
    cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `WmsFacilityDefaultsRaw` you could get from the
    connection.
    '''



class WmsFacilityDefaultsRawsEdge(sgqlc.types.Type):
    '''A `WmsFacilityDefaultsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('WmsFacilityDefaultsRaw'), graphql_name='node')
    '''The `WmsFacilityDefaultsRaw` at the end of the edge.'''



class WmsSystemsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `WmsSystem` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WmsSystem'))), graphql_name='nodes')
    '''A list of `WmsSystem` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WmsSystemsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `WmsSystem` and cursor to aid
    in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `WmsSystem` you could get from the connection.'''



class WmsSystemsEdge(sgqlc.types.Type):
    '''A `WmsSystem` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('WmsSystem'), graphql_name='node')
    '''The `WmsSystem` at the end of the edge.'''



class WoodenPalletTransactionsRawsConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `WoodenPalletTransactionsRaw` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WoodenPalletTransactionsRaw'))), graphql_name='nodes')
    '''A list of `WoodenPalletTransactionsRaw` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WoodenPalletTransactionsRawsEdge'))), graphql_name='edges')
    '''A list of edges which contains the `WoodenPalletTransactionsRaw`
    and cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `WoodenPalletTransactionsRaw` you could get
    from the connection.
    '''



class WoodenPalletTransactionsRawsEdge(sgqlc.types.Type):
    '''A `WoodenPalletTransactionsRaw` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('WoodenPalletTransactionsRaw'), graphql_name='node')
    '''The `WoodenPalletTransactionsRaw` at the end of the edge.'''



class WorkdayCostCenterFacilityManyToManyConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `Facility` values, with data from
    `FacilityWorkdayCostCenter`.
    '''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Facility'))), graphql_name='nodes')
    '''A list of `Facility` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WorkdayCostCenterFacilityManyToManyEdge'))), graphql_name='edges')
    '''A list of edges which contains the `Facility`, info from the
    `FacilityWorkdayCostCenter`, and the cursor to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `Facility` you could get from the connection.'''



class WorkdayCostCenterFacilityManyToManyEdge(sgqlc.types.Type):
    '''A `Facility` edge in the connection, with data from
    `FacilityWorkdayCostCenter`.
    '''
    __schema__ = base
    __field_names__ = ('cursor', 'node', 'facility_workday_cost_centers')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('Facility'), graphql_name='node')
    '''The `Facility` at the end of the edge.'''

    facility_workday_cost_centers = sgqlc.types.Field(sgqlc.types.non_null(FacilityWorkdayCostCentersConnection), graphql_name='facilityWorkdayCostCenters', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilityWorkdayCostCenterCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityWorkdayCostCenterFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `FacilityWorkdayCostCenter`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilityWorkdayCostCentersOrderBy!]`): The method
      to use when ordering `FacilityWorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilityWorkdayCostCenterCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`FacilityWorkdayCostCenterFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''



class WorkdayCostCentersConnection(sgqlc.types.relay.Connection):
    '''A connection to a list of `WorkdayCostCenter` values.'''
    __schema__ = base
    __field_names__ = ('nodes', 'edges', 'page_info', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WorkdayCostCenter'))), graphql_name='nodes')
    '''A list of `WorkdayCostCenter` objects.'''

    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WorkdayCostCentersEdge'))), graphql_name='edges')
    '''A list of edges which contains the `WorkdayCostCenter` and cursor
    to aid in pagination.
    '''

    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    '''Information to aid in pagination.'''

    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    '''The count of *all* `WorkdayCostCenter` you could get from the
    connection.
    '''



class WorkdayCostCentersEdge(sgqlc.types.Type):
    '''A `WorkdayCostCenter` edge in the connection.'''
    __schema__ = base
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    '''A cursor for use in pagination.'''

    node = sgqlc.types.Field(sgqlc.types.non_null('WorkdayCostCenter'), graphql_name='node')
    '''The `WorkdayCostCenter` at the end of the edge.'''



class AggregateWarehouseUtilByCustomerRaw(sgqlc.types.Type, Node):
    '''Stores a day level snapshot of aggregate pallet information for a
    given customer in the warehouse for capacity and utilization
    metrics
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'snapshot_date', 'total_filled_pallet_locations', 'total_pallets_on_hand', 'parent_aggregate_warehouse_util_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    snapshot_date = sgqlc.types.Field(Date, graphql_name='snapshotDate')
    '''Date for the warehouse utilization snapshot'''

    total_filled_pallet_locations = sgqlc.types.Field(Float, graphql_name='totalFilledPalletLocations')
    '''Total number of pallet locations filled by this customer. (If more
    than one customer has pallets in the same location, a non-integer
    value may be possible)
    '''

    total_pallets_on_hand = sgqlc.types.Field(Int, graphql_name='totalPalletsOnHand')
    '''Total number of pallets with product for the customer in the
    warehouse.
    '''

    parent_aggregate_warehouse_util_id = sgqlc.types.Field(String, graphql_name='parentAggregateWarehouseUtilId')
    '''Identifier of warehouse level utilization record'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''



class AggregateWarehouseUtilRaw(sgqlc.types.Type, Node):
    '''Stores a day level snapshot of aggregate pallet information in the
    warehouse for capacity and utilization metrics
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'snapshot_date', 'total_pallet_locations', 'total_filled_pallet_locations', 'total_pallets_on_hand', 'has_customer_aggregates', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    snapshot_date = sgqlc.types.Field(Date, graphql_name='snapshotDate')
    '''Date for the warehouse utilization snapshot'''

    total_pallet_locations = sgqlc.types.Field(Int, graphql_name='totalPalletLocations')
    '''Total number of pallet locations in the warehouse that allow
    customer product
    '''

    total_filled_pallet_locations = sgqlc.types.Field(Float, graphql_name='totalFilledPalletLocations')
    '''Total number of pallet locations filled. (This is used for the
    Location Occupancy KPI)
    '''

    total_pallets_on_hand = sgqlc.types.Field(Int, graphql_name='totalPalletsOnHand')
    '''Total number of customer pallets in the warehouse.  (This is used
    for Capacity Utilization KPI)
    '''

    has_customer_aggregates = sgqlc.types.Field(Boolean, graphql_name='hasCustomerAggregates')
    '''Flag for whether a customer breakdown exists in
    aggregate_warehouse_util_by_customer
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''



class AggregateWarehouseVolumeByCustomerRaw(sgqlc.types.Type, Node):
    '''Stores day level information for inbound and outbound volume as
    well as case pick data for a customer in a warehouse
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'finished_date', 'inbound_gross_weight', 'inbound_net_weight', 'inbound_case_quantity', 'inbound_pallets', 'inbound_loads', 'outbound_gross_weight', 'outbound_net_weight', 'outbound_case_quantity', 'outbound_pallets', 'outbound_loads', 'number_of_picks', 'number_of_cases_picked', 'parent_aggregate_warehouse_volume_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    finished_date = sgqlc.types.Field(Date, graphql_name='finishedDate')
    '''Date the reported volume was shipped or received'''

    inbound_gross_weight = sgqlc.types.Field(Float, graphql_name='inboundGrossWeight')
    '''Gross weight of the received product (in pounds)'''

    inbound_net_weight = sgqlc.types.Field(Float, graphql_name='inboundNetWeight')
    '''Net weight of the received product (in pounds)'''

    inbound_case_quantity = sgqlc.types.Field(Int, graphql_name='inboundCaseQuantity')
    '''Number of cases of product received'''

    inbound_pallets = sgqlc.types.Field(Int, graphql_name='inboundPallets')
    '''Number of pallets received'''

    inbound_loads = sgqlc.types.Field(Int, graphql_name='inboundLoads')
    '''Number of inbound truck loads completed'''

    outbound_gross_weight = sgqlc.types.Field(Float, graphql_name='outboundGrossWeight')
    '''Gross weight of the shipped product (in pounds)'''

    outbound_net_weight = sgqlc.types.Field(Float, graphql_name='outboundNetWeight')
    '''Net weight of the shipped product (in pounds)'''

    outbound_case_quantity = sgqlc.types.Field(Int, graphql_name='outboundCaseQuantity')
    '''Number of cases shipped'''

    outbound_pallets = sgqlc.types.Field(Int, graphql_name='outboundPallets')
    '''Number of pallets shipped'''

    outbound_loads = sgqlc.types.Field(Int, graphql_name='outboundLoads')
    '''Number of outbound truck loads completed'''

    number_of_picks = sgqlc.types.Field(Int, graphql_name='numberOfPicks')
    '''Number of pick activities'''

    number_of_cases_picked = sgqlc.types.Field(Int, graphql_name='numberOfCasesPicked')
    '''Total number of cases picked during the pick activities'''

    parent_aggregate_warehouse_volume_id = sgqlc.types.Field(String, graphql_name='parentAggregateWarehouseVolumeId')
    '''Identifier of warehouse level volume record'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''



class AggregateWarehouseVolumeRaw(sgqlc.types.Type, Node):
    '''Stores day level information on a facility's inbound and outbound
    volume as well as case pick data
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'finished_date', 'inbound_gross_weight', 'inbound_net_weight', 'inbound_case_quantity', 'inbound_pallets', 'inbound_loads', 'outbound_gross_weight', 'outbound_net_weight', 'outbound_case_quantity', 'outbound_pallets', 'outbound_loads', 'number_of_picks', 'number_of_cases_picked', 'has_customer_aggregates', 'created_at', 'updated_at', 'deleted_at', '_id', '_version')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    finished_date = sgqlc.types.Field(Date, graphql_name='finishedDate')
    '''Date the reported volume was shipped or received'''

    inbound_gross_weight = sgqlc.types.Field(Float, graphql_name='inboundGrossWeight')
    '''Gross weight of the received product (in pounds)'''

    inbound_net_weight = sgqlc.types.Field(Float, graphql_name='inboundNetWeight')
    '''Net weight of the received product (in pounds)'''

    inbound_case_quantity = sgqlc.types.Field(Int, graphql_name='inboundCaseQuantity')
    '''Number of cases of product received'''

    inbound_pallets = sgqlc.types.Field(Int, graphql_name='inboundPallets')
    '''Number of pallets received'''

    inbound_loads = sgqlc.types.Field(Int, graphql_name='inboundLoads')
    '''Number of inbound truck loads completed'''

    outbound_gross_weight = sgqlc.types.Field(Float, graphql_name='outboundGrossWeight')
    '''Gross weight of the shipped product (in pounds)'''

    outbound_net_weight = sgqlc.types.Field(Float, graphql_name='outboundNetWeight')
    '''Net weight of the shipped product (in pounds)'''

    outbound_case_quantity = sgqlc.types.Field(Int, graphql_name='outboundCaseQuantity')
    '''Number of cases shipped'''

    outbound_pallets = sgqlc.types.Field(Int, graphql_name='outboundPallets')
    '''Number of pallets shipped'''

    outbound_loads = sgqlc.types.Field(Int, graphql_name='outboundLoads')
    '''Number of outbound truck loads completed'''

    number_of_picks = sgqlc.types.Field(Int, graphql_name='numberOfPicks')
    '''Number of pick activities'''

    number_of_cases_picked = sgqlc.types.Field(Int, graphql_name='numberOfCasesPicked')
    '''Total number of cases picked during the pick activities'''

    has_customer_aggregates = sgqlc.types.Field(Boolean, graphql_name='hasCustomerAggregates')
    '''Flag for whether a customer breakdown exists in
    aggregate_warehouse_volume_by_customer
    '''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''



class BillingHistoryRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'charge_code', 'item_code', 'lot_code', 'warehouse_order_number', 'line_number', 'invoice', 'invoice_date', 'bill_from_date', 'rate_charged', 'unit_of_measurement', 'billed_quantity', 'billed_weight', 'basis', 'billed_pallet_count', 'billed_cube_count', 'debit_amount', 'credit_amount', 'renewal_period', 'original_amount', 'bill_id', 'billed_by', 'notes', 'customer_code', 'num_days', 'bill_type', 'break_factor', 'line_billed_by', 'posted_by', 'posted_datetime', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived', 'customer_id', 'original_customer', 'last_bill', 'weight_type', 'price_code', 'break_code', 'misc_code', 'ar_batch', 'group_code', 'lot_reference', 'lot_id', 'item_id', 'order_id', 'inbound_outbound_flag', 'product_code', 'owner_customer_code', 'item_category', 'supplier_product_code', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    charge_code = sgqlc.types.Field(String, graphql_name='chargeCode')

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    invoice = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='invoice')

    invoice_date = sgqlc.types.Field(Datetime, graphql_name='invoiceDate')

    bill_from_date = sgqlc.types.Field(Datetime, graphql_name='billFromDate')

    rate_charged = sgqlc.types.Field(Float, graphql_name='rateCharged')

    unit_of_measurement = sgqlc.types.Field(String, graphql_name='unitOfMeasurement')

    billed_quantity = sgqlc.types.Field(Float, graphql_name='billedQuantity')

    billed_weight = sgqlc.types.Field(Float, graphql_name='billedWeight')

    basis = sgqlc.types.Field(Float, graphql_name='basis')

    billed_pallet_count = sgqlc.types.Field(Float, graphql_name='billedPalletCount')

    billed_cube_count = sgqlc.types.Field(Float, graphql_name='billedCubeCount')

    debit_amount = sgqlc.types.Field(Float, graphql_name='debitAmount')

    credit_amount = sgqlc.types.Field(Float, graphql_name='creditAmount')

    renewal_period = sgqlc.types.Field(String, graphql_name='renewalPeriod')

    original_amount = sgqlc.types.Field(String, graphql_name='originalAmount')

    bill_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='billId')

    billed_by = sgqlc.types.Field(String, graphql_name='billedBy')

    notes = sgqlc.types.Field(String, graphql_name='notes')

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    num_days = sgqlc.types.Field(String, graphql_name='numDays')

    bill_type = sgqlc.types.Field(String, graphql_name='billType')

    break_factor = sgqlc.types.Field(String, graphql_name='breakFactor')

    line_billed_by = sgqlc.types.Field(String, graphql_name='lineBilledBy')

    posted_by = sgqlc.types.Field(String, graphql_name='postedBy')

    posted_datetime = sgqlc.types.Field(Datetime, graphql_name='postedDatetime')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    original_customer = sgqlc.types.Field(String, graphql_name='originalCustomer')

    last_bill = sgqlc.types.Field(Date, graphql_name='lastBill')

    weight_type = sgqlc.types.Field(String, graphql_name='weightType')

    price_code = sgqlc.types.Field(String, graphql_name='priceCode')

    break_code = sgqlc.types.Field(String, graphql_name='breakCode')

    misc_code = sgqlc.types.Field(String, graphql_name='miscCode')

    ar_batch = sgqlc.types.Field(String, graphql_name='arBatch')

    group_code = sgqlc.types.Field(String, graphql_name='groupCode')

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    order_id = sgqlc.types.Field(String, graphql_name='orderId')

    inbound_outbound_flag = sgqlc.types.Field(String, graphql_name='inboundOutboundFlag')

    product_code = sgqlc.types.Field(String, graphql_name='productCode')

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    item_category = sgqlc.types.Field(String, graphql_name='itemCategory')

    supplier_product_code = sgqlc.types.Field(String, graphql_name='supplierProductCode')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class BlastCell(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'slug', 'label', 'facility_id', 'created_at', 'updated_at', 'blast_cell_type_id', 'facility', 'blast_cell_type', 'blast_cell_wms_pallet_locations', 'blast_cycles', 'blast_plans_by_assigned_blast_cell_id', 'blast_cell_wms_pallets', 'pallet_locations', 'pallets_raws_by_blast_cell_wms_pallet_blast_cell_id_and_wms_pallet_id', 'blast_cycles_by_blast_cell_wms_pallet_blast_cell_id_and_blast_cycle_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')

    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='label')

    facility_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='facilityId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    blast_cell_type_id = sgqlc.types.Field(String, graphql_name='blastCellTypeId')

    facility = sgqlc.types.Field('Facility', graphql_name='facility')
    '''Reads a single `Facility` that is related to this `BlastCell`.'''

    blast_cell_type = sgqlc.types.Field('BlastCellType', graphql_name='blastCellType')
    '''Reads a single `BlastCellType` that is related to this
    `BlastCell`.
    '''

    blast_cell_wms_pallet_locations = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletLocationsConnection), graphql_name='blastCellWmsPalletLocations', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletLocationsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletLocationCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletLocationFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPalletLocation`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletLocationsOrderBy!]`): The method
      to use when ordering `BlastCellWmsPalletLocation`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletLocationCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletLocationFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    blast_cycles = sgqlc.types.Field(sgqlc.types.non_null(BlastCyclesConnection), graphql_name='blastCycles', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCyclesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCycle`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCyclesOrderBy!]`): The method to use when
      ordering `BlastCycle`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCycleFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_plans_by_assigned_blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(BlastPlansConnection), graphql_name='blastPlansByAssignedBlastCellId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlansOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastPlanCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastPlanFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastPlan`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastPlansOrderBy!]`): The method to use when
      ordering `BlastPlan`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastPlanCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastPlanFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    blast_cell_wms_pallets = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletsConnection), graphql_name='blastCellWmsPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    pallet_locations = sgqlc.types.Field(sgqlc.types.non_null(BlastCellPalletLocationsManyToManyConnection), graphql_name='palletLocations', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletLocationsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(PalletLocationsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletLocationsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `PalletLocationsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletLocationsRawsOrderBy!]`): The method to use
      when ordering `PalletLocationsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`PalletLocationsRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`PalletLocationsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    pallets_raws_by_blast_cell_wms_pallet_blast_cell_id_and_wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(BlastCellPalletsRawsByBlastCellWmsPalletBlastCellIdAndWmsPalletIdManyToManyConnection), graphql_name='palletsRawsByBlastCellWmsPalletBlastCellIdAndWmsPalletId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(PalletsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletsRawsOrderBy!]`): The method to use when
      ordering `PalletsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`PalletsRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`PalletsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cycles_by_blast_cell_wms_pallet_blast_cell_id_and_blast_cycle_id = sgqlc.types.Field(sgqlc.types.non_null(BlastCellBlastCyclesByBlastCellWmsPalletBlastCellIdAndBlastCycleIdManyToManyConnection), graphql_name='blastCyclesByBlastCellWmsPalletBlastCellIdAndBlastCycleId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCyclesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCycle`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCyclesOrderBy!]`): The method to use when
      ordering `BlastCycle`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCycleFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class BlastCellType(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('slug', 'description', 'created_at', 'updated_at', 'blast_cells', 'item_freeze_times_by_for_blast_cell_type_id', 'facilities_by_blast_cell_blast_cell_type_id_and_facility_id', 'items_raws_by_item_freeze_time_for_blast_cell_type_id_and_wms_item_id')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')

    description = sgqlc.types.Field(String, graphql_name='description')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    blast_cells = sgqlc.types.Field(sgqlc.types.non_null(BlastCellsConnection), graphql_name='blastCells', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCell`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCellFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    item_freeze_times_by_for_blast_cell_type_id = sgqlc.types.Field(sgqlc.types.non_null(ItemFreezeTimesConnection), graphql_name='itemFreezeTimesByForBlastCellTypeId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemFreezeTimesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ItemFreezeTimeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemFreezeTimeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `ItemFreezeTime`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemFreezeTimesOrderBy!]`): The method to use when
      ordering `ItemFreezeTime`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`ItemFreezeTimeCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`ItemFreezeTimeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    facilities_by_blast_cell_blast_cell_type_id_and_facility_id = sgqlc.types.Field(sgqlc.types.non_null(BlastCellTypeFacilitiesByBlastCellBlastCellTypeIdAndFacilityIdManyToManyConnection), graphql_name='facilitiesByBlastCellBlastCellTypeIdAndFacilityId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilitiesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilityCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Facility`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilitiesOrderBy!]`): The method to use when
      ordering `Facility`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilityCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`FacilityFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    items_raws_by_item_freeze_time_for_blast_cell_type_id_and_wms_item_id = sgqlc.types.Field(sgqlc.types.non_null(BlastCellTypeItemsRawsByItemFreezeTimeForBlastCellTypeIdAndWmsItemIdManyToManyConnection), graphql_name='itemsRawsByItemFreezeTimeForBlastCellTypeIdAndWmsItemId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ItemsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `ItemsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemsRawsOrderBy!]`): The method to use when
      ordering `ItemsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`ItemsRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`ItemsRawFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''



class BlastCellWmsPallet(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'wms_pallet_id', 'pallet_dropped_datetime', 'pallet_picked_datetime', 'blast_cycle_id', 'created_at', 'updated_at', 'blast_cell', 'wms_pallet', 'blast_cycle')
    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCellId')

    wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsPalletId')

    pallet_dropped_datetime = sgqlc.types.Field(Datetime, graphql_name='palletDroppedDatetime')

    pallet_picked_datetime = sgqlc.types.Field(Datetime, graphql_name='palletPickedDatetime')

    blast_cycle_id = sgqlc.types.Field(Int, graphql_name='blastCycleId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    blast_cell = sgqlc.types.Field(BlastCell, graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this
    `BlastCellWmsPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastCellWmsPallet`.
    '''

    blast_cycle = sgqlc.types.Field('BlastCycle', graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCellWmsPallet`.
    '''



class BlastCellWmsPalletLocation(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'wms_pallet_location_id', 'created_at', 'updated_at', 'blast_cell', 'wms_pallet_location')
    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCellId')

    wms_pallet_location_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsPalletLocationId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    blast_cell = sgqlc.types.Field(BlastCell, graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this
    `BlastCellWmsPalletLocation`.
    '''

    wms_pallet_location = sgqlc.types.Field('PalletLocationsRaw', graphql_name='wmsPalletLocation')
    '''Reads a single `PalletLocationsRaw` that is related to this
    `BlastCellWmsPalletLocation`.
    '''



class BlastCycle(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'blast_cell_id', 'overall_start_time', 'overall_finish_time', 'created_at', 'updated_at', 'current_status', 'event_proposal_id', 'estimated_freezing_hours', 'planned_pallet_freezing_hours', 'ideal_pallet_freezing_hours', 'load_start_time', 'load_finish_time', 'refrigeration_start_time', 'refrigeration_finish_time', 'unload_start_time', 'unload_finish_time', 'blast_cell', 'blast_cycle_wms_pallets', 'blast_cycle_events', 'blast_cell_wms_pallets', 'idle_duration_hours', 'load_duration_hours', 'overall_duration_hours', 'refrigeration_duration_hours', 'unload_duration_hours', 'pallets', 'blast_cells_by_blast_cell_wms_pallet_blast_cycle_id_and_blast_cell_id', 'pallets_raws_by_blast_cell_wms_pallet_blast_cycle_id_and_wms_pallet_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')

    blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCellId')

    overall_start_time = sgqlc.types.Field(Datetime, graphql_name='overallStartTime')

    overall_finish_time = sgqlc.types.Field(Datetime, graphql_name='overallFinishTime')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    current_status = sgqlc.types.Field(String, graphql_name='currentStatus')

    event_proposal_id = sgqlc.types.Field(UUID, graphql_name='eventProposalId')

    estimated_freezing_hours = sgqlc.types.Field(Float, graphql_name='estimatedFreezingHours')

    planned_pallet_freezing_hours = sgqlc.types.Field(Float, graphql_name='plannedPalletFreezingHours')

    ideal_pallet_freezing_hours = sgqlc.types.Field(Float, graphql_name='idealPalletFreezingHours')

    load_start_time = sgqlc.types.Field(Datetime, graphql_name='loadStartTime')

    load_finish_time = sgqlc.types.Field(Datetime, graphql_name='loadFinishTime')

    refrigeration_start_time = sgqlc.types.Field(Datetime, graphql_name='refrigerationStartTime')

    refrigeration_finish_time = sgqlc.types.Field(Datetime, graphql_name='refrigerationFinishTime')

    unload_start_time = sgqlc.types.Field(Datetime, graphql_name='unloadStartTime')

    unload_finish_time = sgqlc.types.Field(Datetime, graphql_name='unloadFinishTime')

    blast_cell = sgqlc.types.Field(BlastCell, graphql_name='blastCell')
    '''Reads a single `BlastCell` that is related to this `BlastCycle`.'''

    blast_cycle_wms_pallets = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleWmsPalletsConnection), graphql_name='blastCycleWmsPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCycleWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCycleWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCycleWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCycleWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cycle_events = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleEventsConnection), graphql_name='blastCycleEvents', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleEventsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleEventCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleEventFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCycleEvent`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCycleEventsOrderBy!]`): The method to use
      when ordering `BlastCycleEvent`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleEventCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BlastCycleEventFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cell_wms_pallets = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletsConnection), graphql_name='blastCellWmsPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    idle_duration_hours = sgqlc.types.Field(Float, graphql_name='idleDurationHours')

    load_duration_hours = sgqlc.types.Field(Float, graphql_name='loadDurationHours')

    overall_duration_hours = sgqlc.types.Field(Float, graphql_name='overallDurationHours')

    refrigeration_duration_hours = sgqlc.types.Field(Float, graphql_name='refrigerationDurationHours')

    unload_duration_hours = sgqlc.types.Field(Float, graphql_name='unloadDurationHours')

    pallets = sgqlc.types.Field(sgqlc.types.non_null(BlastCyclePalletsManyToManyConnection), graphql_name='pallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(PalletsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletsRawsOrderBy!]`): The method to use when
      ordering `PalletsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`PalletsRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`PalletsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cells_by_blast_cell_wms_pallet_blast_cycle_id_and_blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleBlastCellsByBlastCellWmsPalletBlastCycleIdAndBlastCellIdManyToManyConnection), graphql_name='blastCellsByBlastCellWmsPalletBlastCycleIdAndBlastCellId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCell`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCellFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    pallets_raws_by_blast_cell_wms_pallet_blast_cycle_id_and_wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(BlastCyclePalletsRawsByBlastCellWmsPalletBlastCycleIdAndWmsPalletIdManyToManyConnection), graphql_name='palletsRawsByBlastCellWmsPalletBlastCycleIdAndWmsPalletId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(PalletsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletsRawsOrderBy!]`): The method to use when
      ordering `PalletsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`PalletsRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`PalletsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class BlastCycleEvent(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'blast_cycle_id', 'description', 'type', 'event_time', 'blast_cycle')
    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    blast_cycle_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCycleId')

    description = sgqlc.types.Field(String, graphql_name='description')

    type = sgqlc.types.Field(String, graphql_name='type')

    event_time = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='eventTime')

    blast_cycle = sgqlc.types.Field(BlastCycle, graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCycleEvent`.
    '''



class BlastCycleWmsPallet(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'blast_cycle_id', 'wms_pallet_id', 'created_at', 'updated_at', 'blast_cycle', 'wms_pallet')
    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    blast_cycle_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='blastCycleId')

    wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsPalletId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    blast_cycle = sgqlc.types.Field(BlastCycle, graphql_name='blastCycle')
    '''Reads a single `BlastCycle` that is related to this
    `BlastCycleWmsPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastCycleWmsPallet`.
    '''



class BlastPlan(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'assignment_time', 'assigned_by', 'type', 'assigned_blast_cell_id', 'is_committed', 'assigned_blast_cell', 'blast_plan_pallets', 'pallets')
    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    assignment_time = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='assignmentTime')

    assigned_by = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='assignedBy')

    type = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanType), graphql_name='type')

    assigned_blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='assignedBlastCellId')

    is_committed = sgqlc.types.Field(Boolean, graphql_name='isCommitted')

    assigned_blast_cell = sgqlc.types.Field(BlastCell, graphql_name='assignedBlastCell')
    '''Reads a single `BlastCell` that is related to this `BlastPlan`.'''

    blast_plan_pallets = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanPalletsConnection), graphql_name='blastPlanPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlanPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastPlanPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastPlanPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastPlanPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastPlanPalletsOrderBy!]`): The method to use
      when ordering `BlastPlanPallet`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastPlanPalletCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BlastPlanPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    pallets = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanPalletsManyToManyConnection), graphql_name='pallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(PalletsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletsRawsOrderBy!]`): The method to use when
      ordering `PalletsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`PalletsRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`PalletsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class BlastPlanPallet(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'blast_plan_id', 'wms_pallet_id', 'created_at', 'updated_at', 'blast_plan', 'wms_pallet')
    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    blast_plan_id = sgqlc.types.Field(UUID, graphql_name='blastPlanId')

    wms_pallet_id = sgqlc.types.Field(String, graphql_name='wmsPalletId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    blast_plan = sgqlc.types.Field(BlastPlan, graphql_name='blastPlan')
    '''Reads a single `BlastPlan` that is related to this
    `BlastPlanPallet`.
    '''

    wms_pallet = sgqlc.types.Field('PalletsRaw', graphql_name='wmsPallet')
    '''Reads a single `PalletsRaw` that is related to this
    `BlastPlanPallet`.
    '''



class BolConstantsRaw(sgqlc.types.Type, Node):
    '''Stores customer configuration options for generating a Bill of
    Lading (BOL)
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'customer_id', 'chep_pallet_weight', 'cpc_pallet_weight', 'igps_pallet_weight', 'is_print', 'whitewood_pallet_weight', 'customer_address_line1', 'customer_address_line2', 'customer_city_state_zip', 'shipper_name', 'warehouse_address_line1', 'warehouse_address_line2', 'warehouse_address_line3', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    chep_pallet_weight = sgqlc.types.Field(Float, graphql_name='chepPalletWeight')
    '''Weight to use for CHEP Pallets (in pounds)'''

    cpc_pallet_weight = sgqlc.types.Field(Float, graphql_name='cpcPalletWeight')
    '''Weight to use for CPC Pallets (in pounds)'''

    igps_pallet_weight = sgqlc.types.Field(Float, graphql_name='igpsPalletWeight')
    '''Weight to use for IGPS Pallets (in pounds)'''

    is_print = sgqlc.types.Field(Boolean, graphql_name='isPrint')
    '''Flag for whether the BOL can be printed'''

    whitewood_pallet_weight = sgqlc.types.Field(Float, graphql_name='whitewoodPalletWeight')
    '''Weight to use for White Wood Pallets (in pounds)'''

    customer_address_line1 = sgqlc.types.Field(String, graphql_name='customerAddressLine1')
    '''Address 1 line to print on the BOL'''

    customer_address_line2 = sgqlc.types.Field(String, graphql_name='customerAddressLine2')
    '''Address 2 line to print on the BOL'''

    customer_city_state_zip = sgqlc.types.Field(String, graphql_name='customerCityStateZip')
    '''City, State, Zip to print on the BOL'''

    shipper_name = sgqlc.types.Field(String, graphql_name='shipperName')
    '''Shipper Name to print on the BOL'''

    warehouse_address_line1 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine1')
    '''Warehouse address line 1'''

    warehouse_address_line2 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine2')
    '''Warehouse address line 2.  In MRS this stores the warehouse City,
    State and Zip
    '''

    warehouse_address_line3 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine3')
    '''Warehouse address line 3.  In MRS this stores thw warehouse Phone
    Number
    '''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class BrokerOwnersRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'broker_customer_code', 'broker_customer_id', 'owner_code', 'owner_name', 'owner_customer_code', 'owner_customer_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    broker_customer_code = sgqlc.types.Field(String, graphql_name='brokerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    broker_customer_id = sgqlc.types.Field(String, graphql_name='brokerCustomerId')

    owner_code = sgqlc.types.Field(String, graphql_name='ownerCode')

    owner_name = sgqlc.types.Field(String, graphql_name='ownerName')

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class CarriersRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('carrier_code', 'external_system_id', 'external_system_name', 'carrier_name', 'mcn', 'dot', 'contact_first_name', 'contact_last_name', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'country', 'effective_date', 'phone', 'fax', 'email_address', 'warehouse_facility_id', 'source_system_id', 'source_row_id', 'updated_at', 'deleted_at', 'created_at', '_version', '_id', 'id')
    carrier_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='carrierCode')

    external_system_id = sgqlc.types.Field(String, graphql_name='externalSystemId')

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')

    carrier_name = sgqlc.types.Field(String, graphql_name='carrierName')

    mcn = sgqlc.types.Field(Int, graphql_name='mcn')

    dot = sgqlc.types.Field(String, graphql_name='dot')

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    address3 = sgqlc.types.Field(String, graphql_name='address3')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    country = sgqlc.types.Field(String, graphql_name='country')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    phone = sgqlc.types.Field(String, graphql_name='phone')

    fax = sgqlc.types.Field(String, graphql_name='fax')

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class CasePicksRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'customer_code', 'case_pick_date', 'source_row_id', 'id', '_id', 'warehouse_facility_id', 'pallet_code', 'pick_type', 'quantity', 'created_at', 'updated_at', 'deleted_at', '_version', 'is_archived', 'operator_id', 'customer_id')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    customer_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    case_pick_date = sgqlc.types.Field(Datetime, graphql_name='casePickDate')
    '''Timestamp for when the case pick occurred (in facility local time)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    pick_type = sgqlc.types.Field(String, graphql_name='pickType')
    '''Type of case pick.  Possible values include "Case Pick", "Cherry
    Pick", "Voice Pick", "Scanner Pick"
    '''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases picked'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Identifier used by the WMS to signify the operator'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class CursorHistory(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_slug', 'source_channel_name', 'cursor', 'snapshot_time', 'created_at', 'updated_at', 'source_by_source_slug', 'source_channel_by_source_channel_name')
    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    source_slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceSlug')

    source_channel_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceChannelName')

    cursor = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='cursor')

    snapshot_time = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='snapshotTime')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')

    source_by_source_slug = sgqlc.types.Field('Source', graphql_name='sourceBySourceSlug')
    '''Reads a single `Source` that is related to this `CursorHistory`.'''

    source_channel_by_source_channel_name = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannelBySourceChannelName')
    '''Reads a single `SourceChannel` that is related to this
    `CursorHistory`.
    '''



class CutsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'customer_id', 'item_id', 'lot_id', 'pallet_id', 'shipped_date', 'cut_quantity', 'reason', 'cut_description', 'lot_reference', 'wms_last_modified_by', 'wms_last_modified_datetime', '_id', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS identifier for the pallet (references wms.pallets_raw.id)'''

    shipped_date = sgqlc.types.Field(Date, graphql_name='shippedDate')
    '''Date the outbound order was shipped'''

    cut_quantity = sgqlc.types.Field(Int, graphql_name='cutQuantity')
    '''Number of cases cut from the outbound order'''

    reason = sgqlc.types.Field(String, graphql_name='reason')
    '''WMS Code for reason the cut occurred'''

    cut_description = sgqlc.types.Field(String, graphql_name='cutDescription')
    '''Text description for the cut reason'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    wms_last_modified_by = sgqlc.types.Field(String, graphql_name='wmsLastModifiedBy')
    '''WMS user that last modified the cuts record in the source system'''

    wms_last_modified_datetime = sgqlc.types.Field(Datetime, graphql_name='wmsLastModifiedDatetime')
    '''Date and time the WMS userlast modified the cuts record'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''



class DriversRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'name', 'phone_number', 'license_number', 'license_state_of_issue', 'created_at', 'updated_at', 'deleted_at', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')

    name = sgqlc.types.Field(String, graphql_name='name')

    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')

    license_number = sgqlc.types.Field(String, graphql_name='licenseNumber')

    license_state_of_issue = sgqlc.types.Field(String, graphql_name='licenseStateOfIssue')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    _version = sgqlc.types.Field(BigInt, graphql_name='_version')

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')



class EdgeNode(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('client_id', 'description', 'name', 'organization_id', 'created_at', 'updated_at', 'edge_node_source_channel_accesses_by_edge_node_client_id', 'channels')
    client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='clientId')

    description = sgqlc.types.Field(String, graphql_name='description')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    organization_id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='organizationId')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    edge_node_source_channel_accesses_by_edge_node_client_id = sgqlc.types.Field(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesConnection), graphql_name='edgeNodeSourceChannelAccessesByEdgeNodeClientId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(EdgeNodeSourceChannelAccessCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(EdgeNodeSourceChannelAccessFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `EdgeNodeSourceChannelAccess`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[EdgeNodeSourceChannelAccessesOrderBy!]`): The
      method to use when ordering `EdgeNodeSourceChannelAccess`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`EdgeNodeSourceChannelAccessCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`EdgeNodeSourceChannelAccessFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    channels = sgqlc.types.Field(sgqlc.types.non_null(EdgeNodeChannelsManyToManyConnection), graphql_name='channels', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceChannelCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceChannelFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `SourceChannel`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourceChannelsOrderBy!]`): The method to use when
      ordering `SourceChannel`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceChannelCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`SourceChannelFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class EdgeNodeSourceChannelAccess(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('edge_node_client_id', 'source_channel_name', 'action', 'created_at', 'updated_at', 'edge_node_client', 'source_channel_by_source_channel_name')
    edge_node_client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='edgeNodeClientId')

    source_channel_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceChannelName')

    action = sgqlc.types.Field(sgqlc.types.non_null(EnumEdgeNodeSourceChannelAccessAction), graphql_name='action')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    edge_node_client = sgqlc.types.Field(EdgeNode, graphql_name='edgeNodeClient')
    '''Reads a single `EdgeNode` that is related to this
    `EdgeNodeSourceChannelAccess`.
    '''

    source_channel_by_source_channel_name = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannelBySourceChannelName')
    '''Reads a single `SourceChannel` that is related to this
    `EdgeNodeSourceChannelAccess`.
    '''



class ExpectedInboundOrderDetailsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'inbound_order_id', 'item_id', 'lot_id', 'customer_id', 'weight_uom')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lineNumber')
    '''Line number listed in the order for this record'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used by the WMS to track the lot'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Expiration Date for the item or product'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code Date for the item or product'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By Date for the item or product'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Production date for the item or product'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Slaughter date for the item or product'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Shelf life override for the item or product (in days)'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Hold code for the product on the time of receipt'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Customer provided code that places a reservation on the related
    lots/pallets for matching in a later allocation process
    '''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Customer line reference used in EDI transactions to help uniquely
    identify the line item in the customer ERP system
    '''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Country of Origin for the item/product'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets for the line item'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Customer provided notes on the line item'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''(not used)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Secondary customer-provided reference number for the lot'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class ExpectedInboundOrdersRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', '_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'expected_receive_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'inbound_order_id', 'customer_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    expected_receive_datetime = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetime')
    '''Expected Date and Time the order will be received (in facility
    local time)
    '''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class ExpectedOutboundOrderDetailsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'outbound_order_id', 'item_id', 'lot_id', 'customer_id', 'code_date', 'best_by_date', 'requested_room_code', 'customer_lot_reference', 'weight_uom')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used by the WMS to track the lot the customer is
    requesting to fulfill this order detail
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Customer override of line number for this record'''

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')
    '''Customer-specified value for changing the product tie'''

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')
    '''Customer-specified value for changing the product high'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Reference value provided by customer for this order detail'''

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')
    '''Deprecated'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Override number of days of shelf life needed to by the customer'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets for the line item'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')
    '''Not used'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Customer notes on the order detail'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Code provided by the customer to match to product in warehouse
    inventory
    '''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Picking code used for committing inventory against this order
    detail
    '''

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')
    '''Label number'''

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')
    '''Sticker number'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the item or product'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By Date for the item or product'''

    requested_room_code = sgqlc.types.Field(String, graphql_name='requestedRoomCode')

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Secondary customer-provided reference number for the lot'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class ExpectedOutboundOrdersRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', '_id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'requested_pickup_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'outbound_order_id', 'customer_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')
    '''Date and time the customer requests to pick up the product at the
    warehouse
    '''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class ExpectedPalletsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'pallet_code', 'source_row_id', 'id', '_id', 'warehouse_facility_id', 'expected_pallet_count', 'expected_quantity', 'created_at', 'updated_at', 'deleted_at', '_version')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    pallet_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    expected_pallet_count = sgqlc.types.Field(Int, graphql_name='expectedPalletCount')
    '''Number of pallets expected for this pallet record'''

    expected_quantity = sgqlc.types.Field(Int, graphql_name='expectedQuantity')
    '''Number of cases expected for this pallet record'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''



class FacilitiesTest(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'name', 'city', 'state', 'zip', 'timezone', 'created_at', 'updated_at', 'deleted_at', 'address1', 'address2', 'location_id', 'region', 'sub_region', 'effective_date', 'is_lineage_managed_site', 'include_in_cap_util_snapshots')
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    timezone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='timezone')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    location_id = sgqlc.types.Field(String, graphql_name='locationId')

    region = sgqlc.types.Field(String, graphql_name='region')

    sub_region = sgqlc.types.Field(String, graphql_name='subRegion')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    is_lineage_managed_site = sgqlc.types.Field(Boolean, graphql_name='isLineageManagedSite')

    include_in_cap_util_snapshots = sgqlc.types.Field(Boolean, graphql_name='includeInCapUtilSnapshots')



class Facility(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'name', 'city', 'state', 'zip', 'timezone', 'organization_id', 'created_at', 'updated_at', 'deleted_at', 'address1', 'address2', 'weather_location_id', 'location_id', 'wh_id', 'source_system', 'region', 'sub_region', 'company_name', 'gen_manager', 'temperature', 'effective_date', 'is_lineage_managed_site', 'include_ltr_in_bonus', 'include_in_cap_util_snapshots', 'business_unit', 'commodity', 'property_type', 'is_test_facility', 'facility_warehouse_links', 'facility_workday_cost_centers', 'blast_cells', 'cost_centers', 'blast_cell_types_by_blast_cell_facility_id_and_blast_cell_type_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(Int, graphql_name='zip')

    timezone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='timezone')

    organization_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='organizationId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    weather_location_id = sgqlc.types.Field(Int, graphql_name='weatherLocationId')

    location_id = sgqlc.types.Field(String, graphql_name='locationId')

    wh_id = sgqlc.types.Field(String, graphql_name='whId')

    source_system = sgqlc.types.Field(String, graphql_name='sourceSystem')

    region = sgqlc.types.Field(String, graphql_name='region')

    sub_region = sgqlc.types.Field(String, graphql_name='subRegion')

    company_name = sgqlc.types.Field(String, graphql_name='companyName')

    gen_manager = sgqlc.types.Field(String, graphql_name='genManager')

    temperature = sgqlc.types.Field(String, graphql_name='temperature')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    is_lineage_managed_site = sgqlc.types.Field(Boolean, graphql_name='isLineageManagedSite')

    include_ltr_in_bonus = sgqlc.types.Field(Boolean, graphql_name='includeLtrInBonus')

    include_in_cap_util_snapshots = sgqlc.types.Field(Boolean, graphql_name='includeInCapUtilSnapshots')

    business_unit = sgqlc.types.Field(String, graphql_name='businessUnit')

    commodity = sgqlc.types.Field(String, graphql_name='commodity')

    property_type = sgqlc.types.Field(String, graphql_name='propertyType')

    is_test_facility = sgqlc.types.Field(Boolean, graphql_name='isTestFacility')

    facility_warehouse_links = sgqlc.types.Field(sgqlc.types.non_null(FacilityWarehouseLinksConnection), graphql_name='facilityWarehouseLinks', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWarehouseLinksOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(FacilityWarehouseLinkCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityWarehouseLinkFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `FacilityWarehouseLink`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilityWarehouseLinksOrderBy!]`): The method to
      use when ordering `FacilityWarehouseLink`. (default:
      `[NATURAL]`)
    * `condition` (`FacilityWarehouseLinkCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`FacilityWarehouseLinkFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    facility_workday_cost_centers = sgqlc.types.Field(sgqlc.types.non_null(FacilityWorkdayCostCentersConnection), graphql_name='facilityWorkdayCostCenters', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilityWorkdayCostCenterCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityWorkdayCostCenterFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `FacilityWorkdayCostCenter`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilityWorkdayCostCentersOrderBy!]`): The method
      to use when ordering `FacilityWorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilityWorkdayCostCenterCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`FacilityWorkdayCostCenterFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    blast_cells = sgqlc.types.Field(sgqlc.types.non_null(BlastCellsConnection), graphql_name='blastCells', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCell`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCellFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    cost_centers = sgqlc.types.Field(sgqlc.types.non_null(FacilityCostCentersManyToManyConnection), graphql_name='costCenters', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(WorkdayCostCenterCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(WorkdayCostCenterFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `WorkdayCostCenter`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[WorkdayCostCentersOrderBy!]`): The method to use
      when ordering `WorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`WorkdayCostCenterCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`WorkdayCostCenterFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cell_types_by_blast_cell_facility_id_and_blast_cell_type_id = sgqlc.types.Field(sgqlc.types.non_null(FacilityBlastCellTypesByBlastCellFacilityIdAndBlastCellTypeIdManyToManyConnection), graphql_name='blastCellTypesByBlastCellFacilityIdAndBlastCellTypeId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellTypesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellTypeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellTypeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCellType`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellTypesOrderBy!]`): The method to use when
      ordering `BlastCellType`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellTypeCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellTypeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class FacilityGrouping(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'name', 'description', 'path', 'facility_ids', 'parent_id', 'created_at', 'updated_at', 'deleted_at', 'parent', 'child_facility_groupings')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    description = sgqlc.types.Field(String, graphql_name='description')

    path = sgqlc.types.Field(String, graphql_name='path')

    facility_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name='facilityIds')

    parent_id = sgqlc.types.Field(String, graphql_name='parentId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    parent = sgqlc.types.Field('FacilityGrouping', graphql_name='parent')
    '''Reads a single `FacilityGrouping` that is related to this
    `FacilityGrouping`.
    '''

    child_facility_groupings = sgqlc.types.Field(sgqlc.types.non_null(FacilityGroupingsConnection), graphql_name='childFacilityGroupings', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityGroupingsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilityGroupingCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityGroupingFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `FacilityGrouping`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilityGroupingsOrderBy!]`): The method to use
      when ordering `FacilityGrouping`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilityGroupingCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`FacilityGroupingFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class FacilityWorkdayCostCenter(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'facility_id', 'cost_center_id', 'created_at', 'updated_at', 'facility', 'cost_center')
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')

    facility_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='facilityId')

    cost_center_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='costCenterId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')

    facility = sgqlc.types.Field(Facility, graphql_name='facility')
    '''Reads a single `Facility` that is related to this
    `FacilityWorkdayCostCenter`.
    '''

    cost_center = sgqlc.types.Field('WorkdayCostCenter', graphql_name='costCenter')
    '''Reads a single `WorkdayCostCenter` that is related to this
    `FacilityWorkdayCostCenter`.
    '''



class HoldCodesRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'hold_code', 'hold_code_description', 'is_facility_hold_code', '_id', 'source_row_id', '_version', 'updated_at', 'created_at', 'deleted_at', 'customer_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Identifier used by the WMS to signify the type of hold'''

    hold_code_description = sgqlc.types.Field(String, graphql_name='holdCodeDescription')
    '''Description of the hold code'''

    is_facility_hold_code = sgqlc.types.Field(Boolean, graphql_name='isFacilityHoldCode')
    '''Flag for whether the hold code exists for all customers at the
    facility
    '''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class HppRaw(sgqlc.types.Type, Node):
    '''Stores high pressure processing data on pallets'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'customer_id', 'lot_code', 'lot_id', 'pallet_code', 'quantity', 'sort_date', 'transaction_datetime', 'warehouse_license_plate_number', 'lot_reference', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_in_hpp_machine')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS lot code for tracking purposes'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS Lot identifer (references lots_raw.id)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases on the pallet'''

    sort_date = sgqlc.types.Field(Date, graphql_name='sortDate')
    '''Sort date for the high pressure processing event'''

    transaction_datetime = sgqlc.types.Field(Datetime, graphql_name='transactionDatetime')
    '''Timestamp for when the high pressure processing occurred (in
    facility local time)
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Number assigned to pallet for identification purposes'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary lot reference that is customer visible'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_in_hpp_machine = sgqlc.types.Field(Boolean, graphql_name='isInHppMachine')



class InboundCatchWeightRaw(sgqlc.types.Type, Node):
    '''Stores catch weight of inbound orders unprocessed food's (meat)'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_license_plate_number', 'customer_id', 'item_code', 'item_id', 'warehouse_order_number', 'serial_number', 'catch_weight', 'inbound_order_id', 'lot_reference', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the API'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Number assigned to pallet for identification purposes'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Unique identifier for the customer'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Unique value for item'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Unique identifier for item'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    serial_number = sgqlc.types.Field(String, graphql_name='serialNumber')
    '''serial number for item in the case of pallet'''

    catch_weight = sgqlc.types.Field(Float, graphql_name='catchWeight')
    '''Size of food item in case'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Unique identifier for inbound orders'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Unique number for the lot'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if archived or not'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InboundLoadsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'load_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'received_datetime', 'arrival_datetime', 'dock_in_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'appointment_comment', 'purchase_order_number', 'is_archived', 'primary_reference_number', 'customer_id', 'lading_type', 'load_status', 'pallets')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    load_reference_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='loadReferenceNumber')
    '''Reference number used by the WMS to identify the load.  This could
    be the appointment number
    '''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Number used to identify the trailer in the yard'''

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')
    '''Live or Drop flag.  "L" for Live and "D" for Drop'''

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')
    '''Customer-provided reference number for the load'''

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')
    '''Deprecated'''

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')
    '''Carrier identifier for the load.  If the WMS supports a SCAC, that
    is what is populated
    '''

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')
    '''Date and time the load was received into the WMS (in facility
    local time)
    '''

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')
    '''Date and time the truck and trailer arrived at the facility (in
    facility local time)
    '''

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')
    '''Date and time the  trailer was parked at the dock door  (in
    facility local time)
    '''

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')
    '''Date and time the facility started to unload product from the
    trailer  (in facility local time)
    '''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Date and time the facility finished unloading product from the
    trailer  (in facility local time)
    '''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Date and time the driver signed in at the facility  (in facility
    local time)
    '''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Date and time the driver signed out at the facility  (in facility
    local time)
    '''

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')
    '''Date and time the  trailer was moved from the dock door  (in
    facility local time)
    '''

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')
    '''Date and time the load departed the facility (in facility local
    time)
    '''

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')
    '''Date and time the load is expected to be at the warehouse for
    unloading (in facility local time)
    '''

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')
    '''Date and time the load is expected finish unloading at the
    warehouse  (in facility local time)
    '''

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')
    '''Temperature at the nose of the trailer at the start of unloading
    (in Fahrenheit)
    '''

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')
    '''Temperature at the middle of the trailer at the start of unloading
    (in Fahrenheit)
    '''

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')
    '''Temperature at the tail of the trailer at the start of unloading
    (in Fahrenheit)
    '''

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')
    '''Deprecated'''

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')
    '''Flag for whether the load is planned by Lineage'''

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')
    '''Name of the Driver (first and last name)'''

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')
    '''Phone Number for the driver'''

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')
    '''Appointment Identifier from the WMS'''

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')
    '''Date and Time the appointment is confirmed by the facility (in
    facility local time)
    '''

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')
    '''User that last modified the order in the WMS'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')
    '''Dock door that will be used to unload the trailer'''

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')
    '''Date and time of the first known appointment for the load'''

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')
    '''Comment provided by the facility for the appointment'''

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')
    '''Purchase order number tied to the load'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')
    '''Primary reference number tied to the load by the facility'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Type code for how the product is loaded on the truck.'''

    load_status = sgqlc.types.Field(String, graphql_name='loadStatus')

    pallets = sgqlc.types.Field(sgqlc.types.non_null(PalletsRawsConnection), graphql_name='pallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('filter', sgqlc.types.Arg(PalletsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `filter` (`PalletsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class InboundOrderCommentsRaw(sgqlc.types.Type, Node):
    '''Stores comments related to the inbound orders'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'comment', 'inbound_order_id', 'comment_datetime', 'comment_sequence', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment for an order'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''Unique identifier for inbound orders'''

    comment_datetime = sgqlc.types.Field(Datetime, graphql_name='commentDatetime')
    '''Date when comment was recorded'''

    comment_sequence = sgqlc.types.Field(Int, graphql_name='commentSequence')
    '''Sequence to represent identity in series of comment'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class InboundOrderDetailReferenceCodesRaw(sgqlc.types.Type, Node):
    '''Stores references values for an inbound orders detail'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'inbound_order_id', 'warehouse_order_number', 'inbound_order_detail_id', 'item_id', 'item_code', 'import_mark', 'plant_code', 'production_line_hour', 'usda_stamp', 'alternate_lot_number', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbound_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    inbound_order_detail_id = sgqlc.types.Field(String, graphql_name='inboundOrderDetailId')
    '''ODS identifier for the inbound order detail (references
    wms.inbound_order_details_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    import_mark = sgqlc.types.Field(String, graphql_name='importMark')
    '''Import mark'''

    plant_code = sgqlc.types.Field(String, graphql_name='plantCode')
    '''Code/Identifier for the Plant that manufactured the order item'''

    production_line_hour = sgqlc.types.Field(String, graphql_name='productionLineHour')
    '''Production Line/Hour'''

    usda_stamp = sgqlc.types.Field(String, graphql_name='usdaStamp')
    '''USDA Stamp'''

    alternate_lot_number = sgqlc.types.Field(String, graphql_name='alternateLotNumber')
    '''Alternate Lot Number'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class InboundOrderDetailsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_order_number', 'line_number', 'source_row_id', 'item_code', 'lot_code', 'expiration_date', 'code_date', 'best_by_date', 'production_date', 'slaughter_date', 'shelf_life_days', 'hold_code', 'reservation_code', 'customer_line_reference', 'country_of_origin', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'notes', 'customer_line_number', 'warehouse_facility_id', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'customer_lot_reference', 'shelf_life_days_override', 'is_archived', 'inbound_order_id', 'item_id', 'lot_id', 'customer_id', 'weight_uom')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Expiration Date for the item or product'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the item or product'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By Date for the item or product'''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Production date for the item or product'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Slaughter date for the item or product'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Deprecated'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Hold code for the product on the time of receipt'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Reservation code for the product to assign to later outbound order
    requests
    '''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Line reference provided by the customer'''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Country of Origin Code for the product'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets for this line item'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Customer notes on the order detail'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Customer override of line number for this record'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Customer provided lot reference to assign to the product while in
    inventory
    '''

    shelf_life_days_override = sgqlc.types.Field(Int, graphql_name='shelfLifeDaysOverride')
    '''Override number of days of shelf life needed for the product by
    the customer
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InboundOrderReferenceCodesRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('warehouse_order_number', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', '_id', 'id', 'warehouse_facility_id', 'is_archived', 'inbound_order_id')
    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    reference_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='referenceType')
    '''Reference type identifier'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Value for the reference code'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''



class InboundOrdersExecutionRaw(sgqlc.types.Type, Node):
    '''Stores data added by the facility to the inbound order during the
    receving process
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'inbound_order_id', 'warehouse_order_number', 'customer_id', 'customer_code', 'front_temperature', 'middle_temperature', 'back_temperature', 'temperature_uom', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    front_temperature = sgqlc.types.Field(String, graphql_name='frontTemperature')
    '''Temperature from the front of the order in the truck'''

    middle_temperature = sgqlc.types.Field(String, graphql_name='middleTemperature')
    '''Temperature from the middle of the order in the truck'''

    back_temperature = sgqlc.types.Field(String, graphql_name='backTemperature')
    '''Temperature from the back of the order in the truck'''

    temperature_uom = sgqlc.types.Field(String, graphql_name='temperatureUom')
    '''Unit of measure for temperature (fahrenheit or celsius)'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''



class InboundOrdersRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'carrier_code', 'quantity', 'warehouse_gross_weight', 'origin_party_code', 'customer_code', 'is_quick_receive', 'order_confirmation_datetime', 'notes', 'purchase_order_number', 'received_datetime', 'scan_finish_datetime', 'scan_start_datetime', 'supplier_code', 'transportation_method', 'edi_type', 'version_number', 'finish_datetime', 'comments', 'expected_receive_datetime_start', 'expected_receive_datetime_end', 'signin_datetime', 'signout_datetime', 'start_datetime', 'created_at', 'updated_at', 'deleted_at', '_version', 'origin_location_code', 'origin_location_name', 'origin_address_line1', 'origin_address_line2', 'origin_address_line3', 'origin_city', 'origin_state', 'origin_country', 'origin_zip', 'origin_email', 'origin_phone', 'origin_fax', 'weight_uom', 'load_reference_number', '_id', 'id', 'is_canceled', 'transfer_customer_code', 'is_transfer_order', 'is_archived', 'inbound_load_id', 'customer_id', 'transfer_customer_id', 'average_temperature', 'front_temperature', 'middle_temperature', 'back_temperature', 'wms_last_updated_by', 'wms_last_updated_datetime', 'supplier_name')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Carrier identifier for the order.  If the WMS supports a SCAC,
    that is what is populated
    '''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Total number of cases for the order'''

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')
    '''Gross weight of the product in the order (in pounds)'''

    origin_party_code = sgqlc.types.Field(String, graphql_name='originPartyCode')
    '''WMS Code for the inbound consignor'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_quick_receive = sgqlc.types.Field(Boolean, graphql_name='isQuickReceive')
    '''Flag for whether outbound order is automatically created for the
    inbound order
    '''

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')
    '''Date and time the order was confirmed on an appointment (in
    facility local time)
    '''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Notes for the order'''

    purchase_order_number = sgqlc.types.Field(String, graphql_name='purchaseOrderNumber')
    '''Purchase order number for the order'''

    received_datetime = sgqlc.types.Field(Datetime, graphql_name='receivedDatetime')
    '''Date and time the order is received into inventory at the facility
    (in facility local time)
    '''

    scan_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='scanFinishDatetime')
    '''Date and time the first product for this order is scanned coming
    off the trailer (in facility local time)
    '''

    scan_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scanStartDatetime')
    '''Date and time the last product for this order is scanned coming
    off the trailer (in facility local time)
    '''

    supplier_code = sgqlc.types.Field(String, graphql_name='supplierCode')
    '''Inbound supplier number'''

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')
    '''Transportation method for the order'''

    edi_type = sgqlc.types.Field(String, graphql_name='ediType')
    '''Type of EDI'''

    version_number = sgqlc.types.Field(String, graphql_name='versionNumber')
    '''EDI Version number'''

    finish_datetime = sgqlc.types.Field(Datetime, graphql_name='finishDatetime')
    '''Date and time the order was expected at the facility (in facility
    local time)
    '''

    comments = sgqlc.types.Field(String, graphql_name='comments')
    '''Comments for the inbound order'''

    expected_receive_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeStart')
    '''Date and time the order was expected at the facility (in facility
    local time)
    '''

    expected_receive_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedReceiveDatetimeEnd')
    '''Date and time the order was expected to finish unloading at the
    facility (in facility local time)
    '''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Date and time the driver signed in at the facility (in facility
    local time)
    '''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Date and time the driver signed in at the facility (in facility
    local time)
    '''

    start_datetime = sgqlc.types.Field(Datetime, graphql_name='startDatetime')
    '''Date and time the product was unloaded from the trailer (in
    facility local time)
    '''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    origin_location_code = sgqlc.types.Field(String, graphql_name='originLocationCode')
    '''Origin Location code for the order'''

    origin_location_name = sgqlc.types.Field(String, graphql_name='originLocationName')
    '''Origin Location name for the order'''

    origin_address_line1 = sgqlc.types.Field(String, graphql_name='originAddressLine1')
    '''Origin Address line1 for the order'''

    origin_address_line2 = sgqlc.types.Field(String, graphql_name='originAddressLine2')
    '''Origin Address line2 for the order'''

    origin_address_line3 = sgqlc.types.Field(String, graphql_name='originAddressLine3')
    '''Origin Address line3 for the order'''

    origin_city = sgqlc.types.Field(String, graphql_name='originCity')
    '''Origin city for the order'''

    origin_state = sgqlc.types.Field(String, graphql_name='originState')
    '''Origin state for the order'''

    origin_country = sgqlc.types.Field(String, graphql_name='originCountry')
    '''Origin country for the order'''

    origin_zip = sgqlc.types.Field(String, graphql_name='originZip')
    '''Origin zip for the order'''

    origin_email = sgqlc.types.Field(String, graphql_name='originEmail')
    '''Origin email for the order'''

    origin_phone = sgqlc.types.Field(String, graphql_name='originPhone')
    '''Origin phone for the order'''

    origin_fax = sgqlc.types.Field(String, graphql_name='originFax')
    '''Origin fax for the order'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight unit of measure for the order'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Load Reference number for the order'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')
    '''Is canceled for the order'''

    transfer_customer_code = sgqlc.types.Field(String, graphql_name='transferCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')
    '''Is Transfer order for the order'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_load_id = sgqlc.types.Field(String, graphql_name='inboundLoadId')
    '''Inbound Load id for the order'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')
    '''Transfer Customer id for the order'''

    average_temperature = sgqlc.types.Field(String, graphql_name='averageTemperature')
    '''Average measured temperature for the inbound order pallets in the
    truck (in Fahrenheit)
    '''

    front_temperature = sgqlc.types.Field(String, graphql_name='frontTemperature')
    '''Measured temperature at the front of the inbound order pallets in
    the truck (in Fahrenheit)
    '''

    middle_temperature = sgqlc.types.Field(String, graphql_name='middleTemperature')
    '''Measured temperature at the middle of the inbound order pallets in
    the truck (in Fahrenheit)
    '''

    back_temperature = sgqlc.types.Field(String, graphql_name='backTemperature')
    '''Measured temperature at the back of the inbound order pallets in
    the truck (in Fahrenheit)
    '''

    wms_last_updated_by = sgqlc.types.Field(String, graphql_name='wmsLastUpdatedBy')
    '''User that last modified the order in the WMS'''

    wms_last_updated_datetime = sgqlc.types.Field(Datetime, graphql_name='wmsLastUpdatedDatetime')
    '''Date and time the order was last modified in the WMS (as reported
    by the WMS)
    '''

    supplier_name = sgqlc.types.Field(String, graphql_name='supplierName')
    '''Supplier name'''



class InboundPalletsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'customer_code', 'warehouse_pallet_code', 'case_quantity', 'gross_weight', 'net_weight', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'item_code', 'is_archived', 'inbound_order_id', 'item_id', 'customer_id', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.      This is
    used by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.      This is
    used by the ODS to map to the customer enterprise id
    '''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Warehouse Pallet code for the palle'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Case quantity for the palle'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product on the pallet(s) (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product on the pallet(s) (in pounds)'''

    pallet_count = sgqlc.types.Field(Float, graphql_name='palletCount')
    '''Pallet count for the palle'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InboundTruckLogRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'inbound_order_id', 'customer_code', 'customer_id', 'cooler_quantity', 'cooler_shortage_quantity', 'cooler_damaged_quantity', 'cooler_over_quantity', 'cooler_other_quantity', 'cooler_comment', 'freezer_quantity', 'freezer_shortage_quantity', 'freezer_damaged_quantity', 'freezer_over_quantity', 'freezer_other_quantity', 'freezer_comment', 'dry_quantity', 'dry_shortage_quantity', 'dry_damaged_quantity', 'dry_over_quantity', 'dry_other_quantity', 'dry_comment', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Inbound order number used by the warehouse management system to
    identify the order
    '''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    cooler_quantity = sgqlc.types.Field(Int, graphql_name='coolerQuantity')
    '''Cooler quantity for the truck'''

    cooler_shortage_quantity = sgqlc.types.Field(Int, graphql_name='coolerShortageQuantity')
    '''Cooler Shortage quantity for the truck'''

    cooler_damaged_quantity = sgqlc.types.Field(Int, graphql_name='coolerDamagedQuantity')
    '''Cooler Damaged quantity for the truck'''

    cooler_over_quantity = sgqlc.types.Field(Int, graphql_name='coolerOverQuantity')
    '''Cooler Over quantity for the truck'''

    cooler_other_quantity = sgqlc.types.Field(Int, graphql_name='coolerOtherQuantity')
    '''Cooler Other quantity for the truck'''

    cooler_comment = sgqlc.types.Field(String, graphql_name='coolerComment')
    '''Cooler comment for the truck'''

    freezer_quantity = sgqlc.types.Field(Int, graphql_name='freezerQuantity')
    '''Freezer quantity for the truck'''

    freezer_shortage_quantity = sgqlc.types.Field(Int, graphql_name='freezerShortageQuantity')
    '''Freezer Shortage quantity for the truck'''

    freezer_damaged_quantity = sgqlc.types.Field(Int, graphql_name='freezerDamagedQuantity')
    '''Freezer Damaged quantity for the truck'''

    freezer_over_quantity = sgqlc.types.Field(Int, graphql_name='freezerOverQuantity')
    '''Freezer Over quantity for the truck'''

    freezer_other_quantity = sgqlc.types.Field(Int, graphql_name='freezerOtherQuantity')
    '''Freezer Other quantity for the truck'''

    freezer_comment = sgqlc.types.Field(String, graphql_name='freezerComment')
    '''Freezer comment for the truck'''

    dry_quantity = sgqlc.types.Field(Int, graphql_name='dryQuantity')
    '''Dry quantity for the truck'''

    dry_shortage_quantity = sgqlc.types.Field(Int, graphql_name='dryShortageQuantity')
    '''Dry Shortage quantity for the truck'''

    dry_damaged_quantity = sgqlc.types.Field(Int, graphql_name='dryDamagedQuantity')
    '''Dry Damaged quantity for the truck'''

    dry_over_quantity = sgqlc.types.Field(Int, graphql_name='dryOverQuantity')
    '''Dry Over quantity for the truck'''

    dry_other_quantity = sgqlc.types.Field(Int, graphql_name='dryOtherQuantity')
    '''Dry Other quantity for the truck'''

    dry_comment = sgqlc.types.Field(String, graphql_name='dryComment')
    '''Dry comment for the truck'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class InventoryAdjustmentsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'adjustment_number', 'customer_code', 'transaction_type', 'item_code', 'net_pallets', 'adjustment_date', 'adjusted_quantity', 'adjustment_type', 'warehouse_order_number', 'line_number', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'is_archived', 'gross_weight', 'item_id', 'customer_id', 'comment', 'net_weight', 'lot_id', 'adjustment_type_description', 'net_weight_delta', 'gross_weight_delta', 'pallet_count_delta', 'quantity_delta', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Adjustment number for the adjus'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    transaction_type = sgqlc.types.Field(String, graphql_name='transactionType')
    '''Transaction type for the adjus'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    net_pallets = sgqlc.types.Field(Int, graphql_name='netPallets')
    '''Net pallets for the adjus'''

    adjustment_date = sgqlc.types.Field(Datetime, graphql_name='adjustmentDate')
    '''Adjustment date for the adjus'''

    adjusted_quantity = sgqlc.types.Field(Float, graphql_name='adjustedQuantity')
    '''Adjusted quantity for the adjus'''

    adjustment_type = sgqlc.types.Field(String, graphql_name='adjustmentType')
    '''Adjustment type for the adjus'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Warehouse Order number for the adjus'''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product involved in the adjustment (in pounds)'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment comment for the adjus'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product involved in the adjustment (in pounds)'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    adjustment_type_description = sgqlc.types.Field(String, graphql_name='adjustmentTypeDescription')

    net_weight_delta = sgqlc.types.Field(Float, graphql_name='netWeightDelta')

    gross_weight_delta = sgqlc.types.Field(Float, graphql_name='grossWeightDelta')

    pallet_count_delta = sgqlc.types.Field(Int, graphql_name='palletCountDelta')

    quantity_delta = sgqlc.types.Field(Int, graphql_name='quantityDelta')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class InventoryControlRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_code', 'exception_id', 'operator_id', 'problem_time', 'work_type', 'warehouse_order_number', 'line_number', 'problem_description', 'pallet_code', 'assign_location', 'scan_location', 'location_audit', 'product_audit', 'pallet_audit', 'lot_audit', 'is_resolved', 'resolved_time', 'is_working', 'bol_number', 'quantity', 'audit_quantity', 'is_audited', 'created_at', 'updated_at', 'deleted_at', '_version', 'source_row_id', '_id', 'customer_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    exception_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='exceptionId')
    '''Exception id for the contr'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Operator id for the contr'''

    problem_time = sgqlc.types.Field(Datetime, graphql_name='problemTime')
    '''Problem time for the contr'''

    work_type = sgqlc.types.Field(String, graphql_name='workType')
    '''Work type for the contr'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Warehouse Order number for the contr'''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    problem_description = sgqlc.types.Field(String, graphql_name='problemDescription')
    '''Problem description for the contr'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    assign_location = sgqlc.types.Field(String, graphql_name='assignLocation')
    '''Assign location for the contr'''

    scan_location = sgqlc.types.Field(String, graphql_name='scanLocation')
    '''Scan location for the contr'''

    location_audit = sgqlc.types.Field(Boolean, graphql_name='locationAudit')
    '''Location audit for the contr'''

    product_audit = sgqlc.types.Field(Boolean, graphql_name='productAudit')
    '''Product audit for the contr'''

    pallet_audit = sgqlc.types.Field(Boolean, graphql_name='palletAudit')
    '''Pallet audit for the contr'''

    lot_audit = sgqlc.types.Field(Boolean, graphql_name='lotAudit')
    '''Lot audit for the contr'''

    is_resolved = sgqlc.types.Field(Boolean, graphql_name='isResolved')
    '''Is resolved for the contr'''

    resolved_time = sgqlc.types.Field(Datetime, graphql_name='resolvedTime')
    '''Resolved time for the contr'''

    is_working = sgqlc.types.Field(Boolean, graphql_name='isWorking')
    '''Is working for the contr'''

    bol_number = sgqlc.types.Field(String, graphql_name='bolNumber')
    '''Bol number for the contr'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases'''

    audit_quantity = sgqlc.types.Field(Int, graphql_name='auditQuantity')
    '''Audit quantity for the contr'''

    is_audited = sgqlc.types.Field(Boolean, graphql_name='isAudited')
    '''Is audited for the contr'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''



class InventoryHoldHistoryRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'lot_code', 'lot_id', 'customer_code', 'customer_id', 'warehouse_license_plate_number', 'inventory_hold_date', 'inventory_type', 'previous_hold_code', 'changed_hold_code', 'comment', 'updated_by', 'owner_customer_code', 'owner_customer_id', 'quantity', 'committed_quantity', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Warehouse_License_Plate number for the hold_'''

    inventory_hold_date = sgqlc.types.Field(Datetime, graphql_name='inventoryHoldDate')
    '''Inventory Hold date for the hold_'''

    inventory_type = sgqlc.types.Field(String, graphql_name='inventoryType')
    '''Inventory type for the hold_'''

    previous_hold_code = sgqlc.types.Field(String, graphql_name='previousHoldCode')
    '''Previous Hold code for the hold_'''

    changed_hold_code = sgqlc.types.Field(String, graphql_name='changedHoldCode')
    '''Changed Hold code for the hold_'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment comment for the hold_'''

    updated_by = sgqlc.types.Field(String, graphql_name='updatedBy')
    '''Updated by for the hold_'''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')
    '''Owner Customer id for the hold_'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases added or removed from hold'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Committed quantity for the hold_'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class ItemFreezeTime(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'wms_item_id', 'freeze_hours', 'for_blast_cell_type_id', 'created_at', 'updated_at', 'wms_item', 'for_blast_cell_type')
    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    wms_item_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsItemId')

    freeze_hours = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='freezeHours')

    for_blast_cell_type_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='forBlastCellTypeId')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    wms_item = sgqlc.types.Field('ItemsRaw', graphql_name='wmsItem')
    '''Reads a single `ItemsRaw` that is related to this
    `ItemFreezeTime`.
    '''

    for_blast_cell_type = sgqlc.types.Field(BlastCellType, graphql_name='forBlastCellType')
    '''Reads a single `BlastCellType` that is related to this
    `ItemFreezeTime`.
    '''



class ItemReferenceCodesRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('item_code', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', 'id', 'item_id', '_id', 'warehouse_facility_id')
    item_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product'''

    reference_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='referenceType')
    '''Reference type for the refer'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Reference value for the refer'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''



class ItemShortCategoryName(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'wms_item_id', 'label', 'created_at', 'updated_at', 'wms_item')
    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    wms_item_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='wmsItemId')

    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='label')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    wms_item = sgqlc.types.Field('ItemsRaw', graphql_name='wmsItem')
    '''Reads a single `ItemsRaw` that is related to this
    `ItemShortCategoryName`.
    '''



class ItemsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'item_code', 'warehouse_facility_id', 'source_row_id', 'is_active', 'catch_weight_type', 'case_dimensions_uom', 'case_height', 'case_length', 'case_width', 'item_category', 'customer_code', 'description', 'high', 'max_acceptable_temperature', 'temperature_uom', 'is_stackable', 'max_stack_count', 'min_acceptable_temperature', 'net_weight', 'is_odor_sensitive', 'billing_customer_code', 'owner_customer_code', 'receive_on_hold_code', 'rotation_type', 'shelf_life_days', 'package_tare_weight', 'weight_uom', 'ti', 'item_uom', 'created_at', 'updated_at', 'deleted_at', '_version', 'product_code', '_id', 'id', 'is_product', 'room_type', 'freight_type', 'tonnage_group', 'shelf_life_after_delivery_override', 'shelf_life_on_delivery_days', 'is_warehouse_supply', 'quantity_per_pallet', 'customer_id', 'billing_customer_id', 'owner_customer_id', 'best_by_date_type', 'code_date_type', 'case_cube', 'item_category_description', 'is_expiry_date_control', 'is_capture_production_date', 'universal_product_code', 'supplier_product_code', 'item_freeze_times_by_wms_item_id', 'item_short_category_names_by_wms_item_id', 'blast_cell_types_by_item_freeze_time_wms_item_id_and_for_blast_cell_type_id')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    item_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Flag for whether this item master entry is active in the source
    system
    '''

    catch_weight_type = sgqlc.types.Field(String, graphql_name='catchWeightType')
    '''Defines when catch weights apply (Possible values: inbound_only,
    outbound_only, inbound_outbound)
    '''

    case_dimensions_uom = sgqlc.types.Field(String, graphql_name='caseDimensionsUom')
    '''Unit of measure for case measurements used by this item (inches or
    centimeters)
    '''

    case_height = sgqlc.types.Field(Float, graphql_name='caseHeight')
    '''Height of the case'''

    case_length = sgqlc.types.Field(Float, graphql_name='caseLength')
    '''Length of the case'''

    case_width = sgqlc.types.Field(Float, graphql_name='caseWidth')
    '''Width of the case'''

    item_category = sgqlc.types.Field(String, graphql_name='itemCategory')
    '''Item category or product group description'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    description = sgqlc.types.Field(String, graphql_name='description')
    '''Text description of the item as provided by the customer'''

    high = sgqlc.types.Field(Int, graphql_name='high')
    '''How many layers of cases can be put on a typical pallet'''

    max_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='maxAcceptableTemperature')
    '''Maximum temperature for the product before it fails quality
    control
    '''

    temperature_uom = sgqlc.types.Field(String, graphql_name='temperatureUom')
    '''Unit of measure used by this item (fahrenheit or celsius)'''

    is_stackable = sgqlc.types.Field(Boolean, graphql_name='isStackable')
    '''Flag for whether pallets containing this item may be stacked'''

    max_stack_count = sgqlc.types.Field(Int, graphql_name='maxStackCount')
    '''(unused)'''

    min_acceptable_temperature = sgqlc.types.Field(Float, graphql_name='minAcceptableTemperature')
    '''Minimum temperature for the product before it fails quality
    control
    '''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the item (in pounds)'''

    is_odor_sensitive = sgqlc.types.Field(Boolean, graphql_name='isOdorSensitive')
    '''Flag for whether the item is senstive to order when storing in the
    facility
    '''

    billing_customer_code = sgqlc.types.Field(String, graphql_name='billingCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    owner_customer_code = sgqlc.types.Field(String, graphql_name='ownerCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    receive_on_hold_code = sgqlc.types.Field(String, graphql_name='receiveOnHoldCode')
    '''Hold code to automatically apply when a pallet/lot with this item
    enters inventory
    '''

    rotation_type = sgqlc.types.Field(String, graphql_name='rotationType')
    '''Picking Code used by the item while in inventory'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''How many days of shelf life the product has.'''

    package_tare_weight = sgqlc.types.Field(Float, graphql_name='packageTareWeight')
    '''Weight of the case packaging (in the specified weight uom)'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight unit of measure (pounds or kilograms)'''

    ti = sgqlc.types.Field(Int, graphql_name='ti')
    '''How many cases are in a typical layer on a pallet'''

    item_uom = sgqlc.types.Field(String, graphql_name='itemUom')
    '''Packaging unit for the item (ie. Case, Pallet, Box, Barrel, …)'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    product_code = sgqlc.types.Field(String, graphql_name='productCode')
    '''Customer identifiable product code'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    is_product = sgqlc.types.Field(Boolean, graphql_name='isProduct')
    '''Flag for whether the item represents a product-level (higher
    level) entity.  (Product-level items are used only in MRS)
    '''

    room_type = sgqlc.types.Field(String, graphql_name='roomType')
    '''Type of room this product is normally stored in'''

    freight_type = sgqlc.types.Field(String, graphql_name='freightType')
    '''Freight Class (ie. Frozen, Fresh, Ice Cream, Dry, …)'''

    tonnage_group = sgqlc.types.Field(String, graphql_name='tonnageGroup')
    '''Tonnage Group'''

    shelf_life_after_delivery_override = sgqlc.types.Field(Int, graphql_name='shelfLifeAfterDeliveryOverride')
    '''(not used)'''

    shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='shelfLifeOnDeliveryDays')
    '''How many days of shelf life the product needs on delivery'''

    is_warehouse_supply = sgqlc.types.Field(Boolean, graphql_name='isWarehouseSupply')
    '''Flag for whether the product is used by the warehouse in
    operations as opposed to customer product
    '''

    quantity_per_pallet = sgqlc.types.Field(Int, graphql_name='quantityPerPallet')
    '''Count of cases per pallet (should be ti * high)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    billing_customer_id = sgqlc.types.Field(String, graphql_name='billingCustomerId')
    '''ODS identifier for the billing customer (references
    wms.warehouse_customers_raw.id)
    '''

    owner_customer_id = sgqlc.types.Field(String, graphql_name='ownerCustomerId')
    '''ODS identifier for the owner (references
    wms.warehouse_customers_raw.id)
    '''

    best_by_date_type = sgqlc.types.Field(String, graphql_name='bestByDateType')
    '''Flag for how the Best By Date is calculated'''

    code_date_type = sgqlc.types.Field(String, graphql_name='codeDateType')
    '''Flag for how the Code Date is calculated'''

    case_cube = sgqlc.types.Field(Float, graphql_name='caseCube')
    '''Volume of the product'''

    item_category_description = sgqlc.types.Field(String, graphql_name='itemCategoryDescription')
    '''Full description of the item category'''

    is_expiry_date_control = sgqlc.types.Field(Boolean, graphql_name='isExpiryDateControl')

    is_capture_production_date = sgqlc.types.Field(Boolean, graphql_name='isCaptureProductionDate')
    '''Flag to check if production date is captured'''

    universal_product_code = sgqlc.types.Field(String, graphql_name='universalProductCode')
    '''Type of code printed on retail product packaging to aid in
    identifying a particular item
    '''

    supplier_product_code = sgqlc.types.Field(String, graphql_name='supplierProductCode')
    '''Customer identifiable product code that potentially varies by
    supplier
    '''

    item_freeze_times_by_wms_item_id = sgqlc.types.Field(sgqlc.types.non_null(ItemFreezeTimesConnection), graphql_name='itemFreezeTimesByWmsItemId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemFreezeTimesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ItemFreezeTimeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemFreezeTimeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `ItemFreezeTime`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemFreezeTimesOrderBy!]`): The method to use when
      ordering `ItemFreezeTime`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`ItemFreezeTimeCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`ItemFreezeTimeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    item_short_category_names_by_wms_item_id = sgqlc.types.Field(sgqlc.types.non_null(ItemShortCategoryNamesConnection), graphql_name='itemShortCategoryNamesByWmsItemId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemShortCategoryNamesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ItemShortCategoryNameCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemShortCategoryNameFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ItemShortCategoryName`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemShortCategoryNamesOrderBy!]`): The method to
      use when ordering `ItemShortCategoryName`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`ItemShortCategoryNameCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`ItemShortCategoryNameFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cell_types_by_item_freeze_time_wms_item_id_and_for_blast_cell_type_id = sgqlc.types.Field(sgqlc.types.non_null(ItemsRawBlastCellTypesByItemFreezeTimeWmsItemIdAndForBlastCellTypeIdManyToManyConnection), graphql_name='blastCellTypesByItemFreezeTimeWmsItemIdAndForBlastCellTypeId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellTypesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellTypeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellTypeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCellType`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellTypesOrderBy!]`): The method to use when
      ordering `BlastCellType`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellTypeCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellTypeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class LotReferenceCodesRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', 'lot_code', '_id', 'warehouse_facility_id', 'lot_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    reference_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='referenceType')
    '''Reference type for the refer'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Reference value for the refer'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    lot_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''



class LotTransactionsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'lot_code', 'lot_id', 'customer_id', 'outbound_order_id', 'transaction_status', 'transaction_status_description', 'lot_transaction_date', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'source_row_id', 'adjusted_reason', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'adjustment_number', 'item_id', 'line_number', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    transaction_status = sgqlc.types.Field(String, graphql_name='transactionStatus')
    '''Transaction status for the trans'''

    transaction_status_description = sgqlc.types.Field(String, graphql_name='transactionStatusDescription')
    '''Transaction Status description for the trans'''

    lot_transaction_date = sgqlc.types.Field(Datetime, graphql_name='lotTransactionDate')
    '''Lot Transaction date for the trans'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Number of cases involved with the transaction'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Pallet count for the trans'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product involved in the transaction (in
    pounds)
    '''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product involved in the transaction (in pounds)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    adjusted_reason = sgqlc.types.Field(String, graphql_name='adjustedReason')
    '''Adjusted reason for the trans'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Adjustment number for the trans'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class LotsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'lot_code', 'source_row_id', 'item_code', 'weight_uom', 'current_net_weight', 'current_pallet_count', 'warehouse_facility_id', 'production_date', 'best_by_date', 'code_date', 'slaughter_date', 'expiration_date', 'quantity', 'customer_code', 'lot_reference', 'customer_lot_reference', 'current_gross_weight', 'original_pallet_count', 'original_net_weight', 'original_gross_weight', 'original_quantity', 'depleted_date', 'is_depleted', 'reservation_code', 'inventory_status', 'hold_code', 'created_at', 'updated_at', 'deleted_at', '_version', 'committed_pallet_count', 'committed_net_weight', 'committed_gross_weight', 'committed_quantity', '_id', 'id', 'shelf_life_after_delivery_override', 'shelf_life_days_override', 'item_id', 'customer_id', 'receive_date', 'over_quantity', 'short_quantity', 'damaged_quantity', 'over_temperature', 'inbound_order_id')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    lot_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lotCode')
    '''Internal WMS code used to track the lot'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item on the lot'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight unit of measure (pounds or kilograms)'''

    current_net_weight = sgqlc.types.Field(Float, graphql_name='currentNetWeight')
    '''Current net weight of the lot in inventory'''

    current_pallet_count = sgqlc.types.Field(Int, graphql_name='currentPalletCount')
    '''Current count of pallets in the lot'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    production_date = sgqlc.types.Field(Date, graphql_name='productionDate')
    '''Date that the product on the lot was produced'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best by date for the lot'''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the lot'''

    slaughter_date = sgqlc.types.Field(Date, graphql_name='slaughterDate')
    '''Slaughter date for the lot'''

    expiration_date = sgqlc.types.Field(Date, graphql_name='expirationDate')
    '''Expiration date for the lot'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases left on the lot'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Customer-assigned reference for the lot'''

    current_gross_weight = sgqlc.types.Field(Float, graphql_name='currentGrossWeight')
    '''Current gross weight of the lot'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Original pallet count for the lot when it entered inventory'''

    original_net_weight = sgqlc.types.Field(Float, graphql_name='originalNetWeight')
    '''Original net weight for the lot when it entered inventory'''

    original_gross_weight = sgqlc.types.Field(Float, graphql_name='originalGrossWeight')
    '''Original gross weight for the lot when it entered inventory'''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Original case quantityfor the lot when it entered inventory'''

    depleted_date = sgqlc.types.Field(Datetime, graphql_name='depletedDate')
    '''Date that the lot was depleted.  (If this is still on hand, the
    value will be null)
    '''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Flag for whether this lot has been depleted'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Code placed on lot for the customer to reserve for specific
    customers (normally used in grading product)
    '''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Status of the lot (O = On Hand, X = Expected)'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Current hold code on the lot.  If no hold, then null'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Count of pallets committed to an outbound order'''

    committed_net_weight = sgqlc.types.Field(Float, graphql_name='committedNetWeight')
    '''Net weight  committed to an outbound order'''

    committed_gross_weight = sgqlc.types.Field(Float, graphql_name='committedGrossWeight')
    '''Gross weight committed to an outbound order'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Case quantity  committed to an outbound order'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    shelf_life_after_delivery_override = sgqlc.types.Field(Int, graphql_name='shelfLifeAfterDeliveryOverride')
    '''(not used)'''

    shelf_life_days_override = sgqlc.types.Field(Int, graphql_name='shelfLifeDaysOverride')
    '''Override value for shelf life at the lot level'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    receive_date = sgqlc.types.Field(Date, graphql_name='receiveDate')

    over_quantity = sgqlc.types.Field(Int, graphql_name='overQuantity')
    '''Number of cases over what was expected on the inbound order'''

    short_quantity = sgqlc.types.Field(Int, graphql_name='shortQuantity')
    '''Number of cases under what was expected on the inbound order'''

    damaged_quantity = sgqlc.types.Field(Int, graphql_name='damagedQuantity')
    '''Number of cases deemed damage when delived to the warehouse'''

    over_temperature = sgqlc.types.Field(Float, graphql_name='overTemperature')
    '''Temperature of the lot when it enters inventory (in Fahrenheit)'''

    inbound_order_id = sgqlc.types.Field(String, graphql_name='inboundOrderId')
    '''ODS identifier for the inbound order (references
    wms.inbounds_orders_raw.id)
    '''



class OutboundCatchWeightRaw(sgqlc.types.Type, Node):
    '''Stores catch weight of outbound orders unprocessed food's (meat)'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_license_plate_number', 'customer_id', 'item_code', 'item_id', 'warehouse_order_number', 'serial_number', 'catch_weight', 'outbound_order_id', 'lot_reference', 'lot_id', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Number assigned to pallet for identification purposes'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Unique Identifier for the customer'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Unique value for item'''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''Unique identifier for item'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    serial_number = sgqlc.types.Field(String, graphql_name='serialNumber')
    '''Serial number for item in the case of pallet'''

    catch_weight = sgqlc.types.Field(Float, graphql_name='catchWeight')
    '''Size of food item in case'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Unique identifier for outbound orders'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Unique value for the lot'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''Unique identifier for the lot'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to identify the archived or not'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class OutboundLoadsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'load_reference_number', 'trailer_number', 'trailer_load_type', 'customer_load_number', 'actual_carrier_code', 'tender_carrier_code', 'shipped_datetime', 'requested_delivery_date', 'arrival_datetime', 'load_start_datetime', 'load_finish_datetime', 'signin_datetime', 'signout_datetime', 'dock_in_datetime', 'dock_out_datetime', 'departure_datetime', 'expected_ship_datetime_start', 'expected_ship_datetime_end', 'front_temperature', 'middle_temperature', 'back_temperature', 'number_of_stops', 'is_planned_lineage', 'driver_name', 'driver_phone_number', 'appointment_number', 'confirmation_datetime', 'confirmed_by', 'customer_code', 'dock_door_number', 'original_scheduled_datetime', 'scheduled_start_datetime', 'scheduled_end_datetime', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'payment_method_type', '_id', 'id', 'appointment_comment', 'is_archived', 'primary_reference_number', 'customer_id', 'lading_type')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    load_reference_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='loadReferenceNumber')
    '''Load Reference number for the loads'''

    trailer_number = sgqlc.types.Field(String, graphql_name='trailerNumber')
    '''Trailer number for the loads'''

    trailer_load_type = sgqlc.types.Field(String, graphql_name='trailerLoadType')
    '''Trailer Load type for the loads'''

    customer_load_number = sgqlc.types.Field(String, graphql_name='customerLoadNumber')
    '''Customer Load number for the loads'''

    actual_carrier_code = sgqlc.types.Field(String, graphql_name='actualCarrierCode')
    '''Actual Carrier code for the loads'''

    tender_carrier_code = sgqlc.types.Field(String, graphql_name='tenderCarrierCode')
    '''Tender Carrier code for the loads'''

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')
    '''Shipped datetime for the loads'''

    requested_delivery_date = sgqlc.types.Field(Date, graphql_name='requestedDeliveryDate')
    '''Requested Delivery date for the loads'''

    arrival_datetime = sgqlc.types.Field(Datetime, graphql_name='arrivalDatetime')
    '''Arrival datetime for the loads'''

    load_start_datetime = sgqlc.types.Field(Datetime, graphql_name='loadStartDatetime')
    '''Load Start datetime for the loads'''

    load_finish_datetime = sgqlc.types.Field(Datetime, graphql_name='loadFinishDatetime')
    '''Load Finish datetime for the loads'''

    signin_datetime = sgqlc.types.Field(Datetime, graphql_name='signinDatetime')
    '''Signin datetime for the loads'''

    signout_datetime = sgqlc.types.Field(Datetime, graphql_name='signoutDatetime')
    '''Signout datetime for the loads'''

    dock_in_datetime = sgqlc.types.Field(Datetime, graphql_name='dockInDatetime')
    '''Dock In datetime for the loads'''

    dock_out_datetime = sgqlc.types.Field(Datetime, graphql_name='dockOutDatetime')
    '''Dock Out datetime for the loads'''

    departure_datetime = sgqlc.types.Field(Datetime, graphql_name='departureDatetime')
    '''Departure datetime for the loads'''

    expected_ship_datetime_start = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeStart')
    '''Expected_Ship_Datetime start for the loads'''

    expected_ship_datetime_end = sgqlc.types.Field(Datetime, graphql_name='expectedShipDatetimeEnd')
    '''Expected_Ship_Datetime end for the loads'''

    front_temperature = sgqlc.types.Field(Float, graphql_name='frontTemperature')
    '''Temperature at the nose of the trailer at the end of loading  (in
    Fahrenheit)
    '''

    middle_temperature = sgqlc.types.Field(Float, graphql_name='middleTemperature')
    '''Temperature at the middle of the trailer at the end of loading
    (in Fahrenheit)
    '''

    back_temperature = sgqlc.types.Field(Float, graphql_name='backTemperature')
    '''Temperature at the tail of the trailer at the end of loading  (in
    Fahrenheit)
    '''

    number_of_stops = sgqlc.types.Field(Int, graphql_name='numberOfStops')
    '''Number Of stops for the loads'''

    is_planned_lineage = sgqlc.types.Field(Boolean, graphql_name='isPlannedLineage')
    '''Is Planned lineage for the loads'''

    driver_name = sgqlc.types.Field(String, graphql_name='driverName')
    '''Driver name for the loads'''

    driver_phone_number = sgqlc.types.Field(String, graphql_name='driverPhoneNumber')
    '''Driver Phone number for the loads'''

    appointment_number = sgqlc.types.Field(String, graphql_name='appointmentNumber')
    '''Appointment number for the loads'''

    confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='confirmationDatetime')
    '''Confirmation datetime for the loads'''

    confirmed_by = sgqlc.types.Field(String, graphql_name='confirmedBy')
    '''Confirmed by for the loads'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    dock_door_number = sgqlc.types.Field(String, graphql_name='dockDoorNumber')
    '''Dock Door number for the loads'''

    original_scheduled_datetime = sgqlc.types.Field(Datetime, graphql_name='originalScheduledDatetime')
    '''Original Scheduled datetime for the loads'''

    scheduled_start_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledStartDatetime')
    '''Scheduled Start datetime for the loads'''

    scheduled_end_datetime = sgqlc.types.Field(Datetime, graphql_name='scheduledEndDatetime')
    '''Scheduled End datetime for the loads'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')
    '''Payment Method type for the loads'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    appointment_comment = sgqlc.types.Field(String, graphql_name='appointmentComment')
    '''Appointment comment for the loads'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    primary_reference_number = sgqlc.types.Field(String, graphql_name='primaryReferenceNumber')
    '''Primary Reference number for the loads'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Lading type for the loads'''



class OutboundOrderCommentsRaw(sgqlc.types.Type, Node):
    '''Stores comments related to the outbound orders'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'warehouse_order_number', 'comment', 'comment_datetime', 'comment_type', 'comment_sequence', 'is_archived', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Unique identifier for outbound orders'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Number used by WMS to signify order .'''

    comment = sgqlc.types.Field(String, graphql_name='comment')
    '''Comment for an order'''

    comment_datetime = sgqlc.types.Field(Datetime, graphql_name='commentDatetime')
    '''Date when comment was recorded (in facility local time)'''

    comment_type = sgqlc.types.Field(String, graphql_name='commentType')
    '''Comment type identifier. Valid values are S – Shipping
    Instructions (dates, backorders, etc.),D – Delivery instructions
    (CFA, phone, etc.),B – BOL comments,M – Miscellaneous, I – Ship To
    Address, W – Warehouse (Default)
    '''

    comment_sequence = sgqlc.types.Field(Int, graphql_name='commentSequence')
    '''Sequence to represent identity in series of comment'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class OutboundOrderDetailsExecutionRaw(sgqlc.types.Type, Node):
    '''Stores data added by the facility while executing the shipping
    process for the order detail
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'outbound_order_id', 'warehouse_order_number', 'expected_outbound_order_detail_id', 'line_number', 'customer_id', 'customer_code', 'planned_quantity', 'picked_quantity', 'unallocated_planned_quantity', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    expected_outbound_order_detail_id = sgqlc.types.Field(String, graphql_name='expectedOutboundOrderDetailId')
    '''ODS identifier for the expected outbound order detail (references
    wms.expected_outbound_order_details_raw.id)
    '''

    line_number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    planned_quantity = sgqlc.types.Field(Float, graphql_name='plannedQuantity')
    '''Number of cases planned for the order detail'''

    picked_quantity = sgqlc.types.Field(Float, graphql_name='pickedQuantity')
    '''Number of cases currently picked for the order detail'''

    unallocated_planned_quantity = sgqlc.types.Field(Float, graphql_name='unallocatedPlannedQuantity')
    '''Number of planned cases that have not been allocated yet'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class OutboundOrderDetailsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'line_number', 'item_code', 'lot_code', 'source_row_id', 'customer_line_number', 'ti_override', 'high_override', 'customer_line_reference', 'shelf_life_date', 'shelf_life_days', 'quantity', 'pallet_count', 'gross_weight', 'net_weight', 'position_in_truck', 'notes', 'reservation_code', 'pick_code', 'label_number', 'sticker_number', 'customer_code', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'lot_reference', 'required_shelf_life_on_delivery_days', 'is_archived', 'outbound_order_id', 'item_id', 'lot_id', 'customer_id', 'code_date', 'best_by_date', 'expiration_date', 'production_date', 'customer_lot_reference', 'weight_uom')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lineNumber')
    '''Line item number listed in the order for this record'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the order line
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot that fulfilled this
    outbound order detail
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    customer_line_number = sgqlc.types.Field(String, graphql_name='customerLineNumber')
    '''Customer override of line number for this record'''

    ti_override = sgqlc.types.Field(Int, graphql_name='tiOverride')
    '''Ti override for the order'''

    high_override = sgqlc.types.Field(Int, graphql_name='highOverride')
    '''High override for the order'''

    customer_line_reference = sgqlc.types.Field(String, graphql_name='customerLineReference')
    '''Customer Line reference for the order'''

    shelf_life_date = sgqlc.types.Field(Date, graphql_name='shelfLifeDate')
    '''Shelf Life date for the order'''

    shelf_life_days = sgqlc.types.Field(Int, graphql_name='shelfLifeDays')
    '''Shelf Life days for the order'''

    quantity = sgqlc.types.Field(Float, graphql_name='quantity')
    '''Number of cases for the line item'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Pallet count for the order'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the line item (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the line item (in pounds)'''

    position_in_truck = sgqlc.types.Field(String, graphql_name='positionInTruck')
    '''Position In truck for the order'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Notes notes for the order'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Reservation code for the order'''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''Pick code for the order'''

    label_number = sgqlc.types.Field(String, graphql_name='labelNumber')
    '''Label number for the order'''

    sticker_number = sgqlc.types.Field(String, graphql_name='stickerNumber')
    '''Sticker number for the order'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    lot_reference = sgqlc.types.Field(String, graphql_name='lotReference')
    '''Primary customer-provided reference number for the lot'''

    required_shelf_life_on_delivery_days = sgqlc.types.Field(Int, graphql_name='requiredShelfLifeOnDeliveryDays')
    '''Required_Shelf_Life_On_Delivery days for the order'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    code_date = sgqlc.types.Field(Date, graphql_name='codeDate')
    '''Code date for the order'''

    best_by_date = sgqlc.types.Field(Date, graphql_name='bestByDate')
    '''Best By date for the order'''

    expiration_date = sgqlc.types.Field(Datetime, graphql_name='expirationDate')
    '''Expiration_date of outbound order'''

    production_date = sgqlc.types.Field(Datetime, graphql_name='productionDate')
    '''production_date of outbound order'''

    customer_lot_reference = sgqlc.types.Field(String, graphql_name='customerLotReference')
    '''Secondary customer-provided reference number for the lot'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class OutboundOrderReferenceCodesRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('warehouse_order_number', 'reference_type', 'reference_value', 'created_at', 'updated_at', 'deleted_at', 'source_system_id', 'source_row_id', '_version', '_id', 'id', 'warehouse_facility_id', 'is_archived', 'outbound_order_id')
    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    reference_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='referenceType')
    '''Reference type for the order'''

    reference_value = sgqlc.types.Field(String, graphql_name='referenceValue')
    '''Reference value for the order'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''



class OutboundOrdersExecutionRaw(sgqlc.types.Type, Node):
    '''Stores data added by the facility during the shipping process'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'outbound_order_id', 'customer_id', 'customer_code', 'middle_temperature', 'front_temperature', 'back_temperature', 'average_temperature', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_archived')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Order identifier'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''Foreign Key for Order'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''Foreign Key for Customer Code'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Customer Code'''

    middle_temperature = sgqlc.types.Field(Int, graphql_name='middleTemperature')
    '''Middle temperature'''

    front_temperature = sgqlc.types.Field(Int, graphql_name='frontTemperature')
    '''front Temperature'''

    back_temperature = sgqlc.types.Field(Int, graphql_name='backTemperature')
    '''back Temperature'''

    average_temperature = sgqlc.types.Field(String, graphql_name='averageTemperature')
    '''This is the average outbound truck temperature.'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is from archived or not'''



class OutboundOrdersRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'source_row_id', 'customer_code', 'comments', 'notes', 'requested_delivery_datetime', 'actual_delivery_datetime', 'pallet_exchange_type', 'payment_method_type', 'sales_order_number', 'shipped_datetime', 'transportation_method', 'lading_type', 'quantity', 'warehouse_gross_weight', 'weight_uom', 'requested_pallet_platform_type', 'stop_sequence_number', 'carrier_code', 'stop_location_code', 'created_at', 'updated_at', 'deleted_at', '_version', 'order_confirmation_datetime', 'destination_location_code', 'destination_location_name', 'destination_address_line1', 'destination_address_line2', 'destination_address_line3', 'destination_city', 'destination_state', 'destination_country', 'destination_zip', 'destination_email', 'destination_phone', 'destination_fax', 'requested_pickup_datetime', '_id', 'id', 'load_reference_number', 'is_canceled', 'transfer_customer_code', 'is_transfer_order', 'is_archived', 'outbound_load_id', 'customer_id', 'transfer_customer_id')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    comments = sgqlc.types.Field(String, graphql_name='comments')
    '''Comments comments for the order'''

    notes = sgqlc.types.Field(String, graphql_name='notes')
    '''Notes notes for the order'''

    requested_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedDeliveryDatetime')
    '''Requested Delivery datetime for the order'''

    actual_delivery_datetime = sgqlc.types.Field(Datetime, graphql_name='actualDeliveryDatetime')
    '''Actual Delivery datetime for the order'''

    pallet_exchange_type = sgqlc.types.Field(String, graphql_name='palletExchangeType')
    '''Pallet Exchange type for the order'''

    payment_method_type = sgqlc.types.Field(String, graphql_name='paymentMethodType')
    '''Payment Method type for the order'''

    sales_order_number = sgqlc.types.Field(String, graphql_name='salesOrderNumber')
    '''Sales Order number for the order'''

    shipped_datetime = sgqlc.types.Field(Datetime, graphql_name='shippedDatetime')
    '''Shipped datetime for the order'''

    transportation_method = sgqlc.types.Field(String, graphql_name='transportationMethod')
    '''Transportation method for the order'''

    lading_type = sgqlc.types.Field(String, graphql_name='ladingType')
    '''Lading type for the order'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Total number of cases for the order'''

    warehouse_gross_weight = sgqlc.types.Field(Float, graphql_name='warehouseGrossWeight')
    '''Warehouse Gross weight for the order'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''Weight uom for the order'''

    requested_pallet_platform_type = sgqlc.types.Field(String, graphql_name='requestedPalletPlatformType')
    '''Requested_Pallet_Platform type for the order'''

    stop_sequence_number = sgqlc.types.Field(Int, graphql_name='stopSequenceNumber')
    '''Stop Sequence number for the order'''

    carrier_code = sgqlc.types.Field(String, graphql_name='carrierCode')
    '''Carrier code for the order'''

    stop_location_code = sgqlc.types.Field(String, graphql_name='stopLocationCode')
    '''Stop Location code for the order'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    order_confirmation_datetime = sgqlc.types.Field(Datetime, graphql_name='orderConfirmationDatetime')
    '''Order Confirmation datetime for the order'''

    destination_location_code = sgqlc.types.Field(String, graphql_name='destinationLocationCode')
    '''Destination Location code for the order'''

    destination_location_name = sgqlc.types.Field(String, graphql_name='destinationLocationName')
    '''Destination Location name for the order'''

    destination_address_line1 = sgqlc.types.Field(String, graphql_name='destinationAddressLine1')
    '''Destination Address line1 for the order'''

    destination_address_line2 = sgqlc.types.Field(String, graphql_name='destinationAddressLine2')
    '''Destination Address line2 for the order'''

    destination_address_line3 = sgqlc.types.Field(String, graphql_name='destinationAddressLine3')
    '''Destination Address line3 for the order'''

    destination_city = sgqlc.types.Field(String, graphql_name='destinationCity')
    '''Destination city for the order'''

    destination_state = sgqlc.types.Field(String, graphql_name='destinationState')
    '''Destination state for the order'''

    destination_country = sgqlc.types.Field(String, graphql_name='destinationCountry')
    '''Destination country for the order'''

    destination_zip = sgqlc.types.Field(String, graphql_name='destinationZip')
    '''Destination zip for the order'''

    destination_email = sgqlc.types.Field(String, graphql_name='destinationEmail')
    '''Destination email for the order'''

    destination_phone = sgqlc.types.Field(String, graphql_name='destinationPhone')
    '''Destination phone for the order'''

    destination_fax = sgqlc.types.Field(String, graphql_name='destinationFax')
    '''Destination fax for the order'''

    requested_pickup_datetime = sgqlc.types.Field(Datetime, graphql_name='requestedPickupDatetime')
    '''Requested Pickup datetime for the order'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    load_reference_number = sgqlc.types.Field(String, graphql_name='loadReferenceNumber')
    '''Load Reference number for the order'''

    is_canceled = sgqlc.types.Field(Boolean, graphql_name='isCanceled')
    '''Is canceled for the order'''

    transfer_customer_code = sgqlc.types.Field(String, graphql_name='transferCustomerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_transfer_order = sgqlc.types.Field(Boolean, graphql_name='isTransferOrder')
    '''Is Transfer order for the order'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_load_id = sgqlc.types.Field(String, graphql_name='outboundLoadId')
    '''Outbound Load id for the order'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    transfer_customer_id = sgqlc.types.Field(String, graphql_name='transferCustomerId')
    '''Transfer Customer id for the order'''



class OutboundPalletsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'customer_code', 'outbound_pallet_code', 'warehouse_pallet_code', 'case_quantity', 'gross_weight', 'net_weight', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'item_code', 'is_archived', 'outbound_order_id', 'item_id', 'customer_id', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(Int, graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    outbound_pallet_code = sgqlc.types.Field(String, graphql_name='outboundPalletCode')
    '''Outbound Pallet code for the palle'''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Warehouse Pallet code for the palle'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Case quantity for the palle'''

    gross_weight = sgqlc.types.Field(Float, graphql_name='grossWeight')
    '''Gross weight of the product on the pallet(s) (in pounds)'''

    net_weight = sgqlc.types.Field(Float, graphql_name='netWeight')
    '''Net weight of the product on the pallet(s) (in pounds)'''

    pallet_count = sgqlc.types.Field(Float, graphql_name='palletCount')
    '''Pallet count for the palle'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''True if corresponding record in source system has been removed due
    to archiving procedures
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class OutboundTruckLogRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_order_number', 'outbound_order_id', 'customer_code', 'customer_id', 'cooler_quantity', 'cooler_warehouse_cut_quantity', 'cooler_not_enough_quantity', 'cooler_qa_hold_quantity', 'cooler_other_quantity', 'cooler_comment', 'freezer_quantity', 'freezer_warehouse_cut_quantity', 'freezer_not_enough_quantity', 'freezer_qa_hold_quantity', 'freezer_other_quantity', 'freezer_comment', 'dry_quantity', 'dry_warehouse_cut_quantity', 'dry_not_enough_quantity', 'dry_qa_hold_quantity', 'dry_other_quantity', 'dry_comment', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    cooler_quantity = sgqlc.types.Field(Int, graphql_name='coolerQuantity')
    '''Cooler quantity for the truck'''

    cooler_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='coolerWarehouseCutQuantity')
    '''Cooler_Warehouse_Cut quantity for the truck'''

    cooler_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='coolerNotEnoughQuantity')
    '''Cooler_Not_Enough quantity for the truck'''

    cooler_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='coolerQaHoldQuantity')
    '''Cooler_Qa_Hold quantity for the truck'''

    cooler_other_quantity = sgqlc.types.Field(Int, graphql_name='coolerOtherQuantity')
    '''Cooler Other quantity for the truck'''

    cooler_comment = sgqlc.types.Field(String, graphql_name='coolerComment')
    '''Cooler comment for the truck'''

    freezer_quantity = sgqlc.types.Field(Int, graphql_name='freezerQuantity')
    '''Freezer quantity for the truck'''

    freezer_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='freezerWarehouseCutQuantity')
    '''Freezer_Warehouse_Cut quantity for the truck'''

    freezer_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='freezerNotEnoughQuantity')
    '''Freezer_Not_Enough quantity for the truck'''

    freezer_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='freezerQaHoldQuantity')
    '''Freezer_Qa_Hold quantity for the truck'''

    freezer_other_quantity = sgqlc.types.Field(Int, graphql_name='freezerOtherQuantity')
    '''Freezer Other quantity for the truck'''

    freezer_comment = sgqlc.types.Field(String, graphql_name='freezerComment')
    '''Freezer comment for the truck'''

    dry_quantity = sgqlc.types.Field(Int, graphql_name='dryQuantity')
    '''Dry quantity for the truck'''

    dry_warehouse_cut_quantity = sgqlc.types.Field(Int, graphql_name='dryWarehouseCutQuantity')
    '''Dry_Warehouse_Cut quantity for the truck'''

    dry_not_enough_quantity = sgqlc.types.Field(Int, graphql_name='dryNotEnoughQuantity')
    '''Dry_Not_Enough quantity for the truck'''

    dry_qa_hold_quantity = sgqlc.types.Field(Int, graphql_name='dryQaHoldQuantity')
    '''Dry_Qa_Hold quantity for the truck'''

    dry_other_quantity = sgqlc.types.Field(Int, graphql_name='dryOtherQuantity')
    '''Dry Other quantity for the truck'''

    dry_comment = sgqlc.types.Field(String, graphql_name='dryComment')
    '''Dry comment for the truck'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class PalletHistoryRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'source_row_id', 'pallet_code', 'customer_code', 'from_location_code', 'to_location_code', 'transaction_date', 'is_hand_keyed_pallet_number', 'is_hand_keyed_location', 'operator_id', 'quantity', 'work_type', 'created_at', 'updated_at', 'deleted_at', '_id', '_version', 'customer_id', 'pallet_id', 'weight_delta', 'tran_type', 'work_order_number', 'final_pallet_code', 'item_id', 'is_archived', 'current_net_weight', 'weight_uom')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    from_location_code = sgqlc.types.Field(String, graphql_name='fromLocationCode')
    '''From Location code for the histo'''

    to_location_code = sgqlc.types.Field(String, graphql_name='toLocationCode')
    '''To Location code for the histo'''

    transaction_date = sgqlc.types.Field(Datetime, graphql_name='transactionDate')
    '''Transaction date for the histo'''

    is_hand_keyed_pallet_number = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedPalletNumber')
    '''Is_Hand_Keyed_Pallet number for the histo'''

    is_hand_keyed_location = sgqlc.types.Field(Boolean, graphql_name='isHandKeyedLocation')
    '''Is_Hand_Keyed location for the histo'''

    operator_id = sgqlc.types.Field(String, graphql_name='operatorId')
    '''Operator id for the histo'''

    quantity = sgqlc.types.Field(Int, graphql_name='quantity')
    '''Number of cases'''

    work_type = sgqlc.types.Field(String, graphql_name='workType')
    '''Work type for the histo'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''Pallet id for the history ('''

    weight_delta = sgqlc.types.Field(Float, graphql_name='weightDelta')

    tran_type = sgqlc.types.Field(String, graphql_name='tranType')

    work_order_number = sgqlc.types.Field(String, graphql_name='workOrderNumber')

    final_pallet_code = sgqlc.types.Field(String, graphql_name='finalPalletCode')

    item_id = sgqlc.types.Field(String, graphql_name='itemId')

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')

    current_net_weight = sgqlc.types.Field(Float, graphql_name='currentNetWeight')

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''



class PalletLocationsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'source_row_id', 'name', 'aisle', 'bay', 'is_pick_area', 'room', 'zone', 'room_type', 'weight_capacity', 'height', 'length', 'depth', 'capacity', 'location_reported_pallets', 'max_pallets', 'created_at', 'updated_at', 'deleted_at', '_version', '_id', 'id', 'location_status', 'is_active', 'is_pallet_storage', 'reporting_room', 'current_pallets', 'weight_uom', 'blast_cell_wms_pallet_locations_by_wms_pallet_location_id', 'blast_cells')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    '''Name name for the locat'''

    aisle = sgqlc.types.Field(String, graphql_name='aisle')
    '''Aisle aisle for the locat'''

    bay = sgqlc.types.Field(String, graphql_name='bay')
    '''Bay bay for the locat'''

    is_pick_area = sgqlc.types.Field(Boolean, graphql_name='isPickArea')
    '''Is Pick area for the locat'''

    room = sgqlc.types.Field(String, graphql_name='room')
    '''Room room for the locat'''

    zone = sgqlc.types.Field(String, graphql_name='zone')
    '''Zone zone for the locat'''

    room_type = sgqlc.types.Field(String, graphql_name='roomType')
    '''Room type for the locat'''

    weight_capacity = sgqlc.types.Field(Float, graphql_name='weightCapacity')
    '''Weight capacity for the locat'''

    height = sgqlc.types.Field(Float, graphql_name='height')
    '''Height height for the locat'''

    length = sgqlc.types.Field(Float, graphql_name='length')
    '''Length length for the locat'''

    depth = sgqlc.types.Field(Float, graphql_name='depth')
    '''Depth depth for the locat'''

    capacity = sgqlc.types.Field(Float, graphql_name='capacity')
    '''Capacity capacity for the locat'''

    location_reported_pallets = sgqlc.types.Field(Float, graphql_name='locationReportedPallets')
    '''Location Reported pallets for the locat'''

    max_pallets = sgqlc.types.Field(Float, graphql_name='maxPallets')
    '''Max pallets for the locat'''

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    location_status = sgqlc.types.Field(String, graphql_name='locationStatus')
    '''Location status for the locat'''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Is active for the locat'''

    is_pallet_storage = sgqlc.types.Field(Boolean, graphql_name='isPalletStorage')
    '''Is Pallet storage for the locat'''

    reporting_room = sgqlc.types.Field(String, graphql_name='reportingRoom')
    '''Reporting room for the locat'''

    current_pallets = sgqlc.types.Field(Float, graphql_name='currentPallets')
    '''Current pallets for the locat'''

    weight_uom = sgqlc.types.Field(String, graphql_name='weightUom')
    '''unit of measurement for weight'''

    blast_cell_wms_pallet_locations_by_wms_pallet_location_id = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletLocationsConnection), graphql_name='blastCellWmsPalletLocationsByWmsPalletLocationId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletLocationsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletLocationCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletLocationFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPalletLocation`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletLocationsOrderBy!]`): The method
      to use when ordering `BlastCellWmsPalletLocation`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletLocationCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletLocationFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    blast_cells = sgqlc.types.Field(sgqlc.types.non_null(PalletLocationsRawBlastCellsManyToManyConnection), graphql_name='blastCells', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCell`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCellFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''



class PalletReferenceCodesRaw(sgqlc.types.Type, Node):
    '''Stores extra reference values for a pallet'''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'pallet_id', 'is_depleted', 'purchase_order_number_at_receipt', 'plant_code', 'import_mark', 'production_line_hour', 'usda_stamp', 'country_of_origin', 'inception_date', 'container_number', 'alternate_lot_number', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS identifier for the pallet (references wms.pallets_raw.id)'''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''Flag for whether the pallet has been depleted or shipped from the
    warehouse
    '''

    purchase_order_number_at_receipt = sgqlc.types.Field(String, graphql_name='purchaseOrderNumberAtReceipt')
    '''Purchase order number at time of receipt'''

    plant_code = sgqlc.types.Field(String, graphql_name='plantCode')
    '''Code/Identifier for the Plant that manufactured the pallet's
    product
    '''

    import_mark = sgqlc.types.Field(String, graphql_name='importMark')
    '''Import mark'''

    production_line_hour = sgqlc.types.Field(String, graphql_name='productionLineHour')
    '''Production Line/Hour'''

    usda_stamp = sgqlc.types.Field(String, graphql_name='usdaStamp')
    '''USDA Stamp'''

    country_of_origin = sgqlc.types.Field(String, graphql_name='countryOfOrigin')
    '''Country of origin'''

    inception_date = sgqlc.types.Field(String, graphql_name='inceptionDate')
    '''Inception Date'''

    container_number = sgqlc.types.Field(String, graphql_name='containerNumber')
    '''Container number'''

    alternate_lot_number = sgqlc.types.Field(String, graphql_name='alternateLotNumber')
    '''Alternate Lot Number'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class PalletTransactionsRaw(sgqlc.types.Type, Node):
    '''Stores transactions that occur against a pallet from expected
    receipt all the way to depletion from the warehouse
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'pallet_id', 'warehouse_pallet_code', 'pallet_transaction_datetime', 'lot_id', 'customer_id', 'customer_code', 'transaction_status', 'transaction_status_description', 'outbound_order_id', 'outbound_warehouse_order_number', 'outbound_order_line_number', 'inventory_adjustment_id', 'adjustment_number', 'pick_code', 'pick_code_description', 'pick_type', 'pick_type_description', 'net_pallet_change', 'net_case_quantity_change', 'reservation_code', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS Pallet identifier (references wms.pallets_raw.id)'''

    warehouse_pallet_code = sgqlc.types.Field(String, graphql_name='warehousePalletCode')
    '''Internal WMS pallet code for tracking purposes'''

    pallet_transaction_datetime = sgqlc.types.Field(Datetime, graphql_name='palletTransactionDatetime')
    '''Date and time associated with the transaction'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS Lot identifier (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    transaction_status = sgqlc.types.Field(String, graphql_name='transactionStatus')
    '''Defines the type of transaction'''

    transaction_status_description = sgqlc.types.Field(String, graphql_name='transactionStatusDescription')
    '''Description of the transaction'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''If the transaction is for committed or shipped product, the ODS
    identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    outbound_warehouse_order_number = sgqlc.types.Field(String, graphql_name='outboundWarehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    outbound_order_line_number = sgqlc.types.Field(String, graphql_name='outboundOrderLineNumber')
    '''If the transaction is for committed or shipped product, the line
    number for the outbound order
    '''

    inventory_adjustment_id = sgqlc.types.Field(String, graphql_name='inventoryAdjustmentId')
    '''If the transaction is an adjustment, the ODS identifier for the
    adjustment (references wms.inventory_adjustments_raw.id)
    '''

    adjustment_number = sgqlc.types.Field(String, graphql_name='adjustmentNumber')
    '''Adjustment number used by the warehouse management system to
    identify the adjustment
    '''

    pick_code = sgqlc.types.Field(String, graphql_name='pickCode')
    '''If fulfilling an outbound order, how the product was committed
    from the available inventory (ie.  FIFO, LIFO, etc)
    '''

    pick_code_description = sgqlc.types.Field(String, graphql_name='pickCodeDescription')
    '''Text description of the pick code'''

    pick_type = sgqlc.types.Field(String, graphql_name='pickType')
    '''If fulfilling an outbound order, how product was picked off the
    pallets (Full Pallet, Cherry Pick, Partial Pallet, etc)
    '''

    pick_type_description = sgqlc.types.Field(String, graphql_name='pickTypeDescription')
    '''Description of the pick type'''

    net_pallet_change = sgqlc.types.Field(Int, graphql_name='netPalletChange')
    '''Signifies the number of pallets involved with this transaction'''

    net_case_quantity_change = sgqlc.types.Field(Int, graphql_name='netCaseQuantityChange')
    '''Number of cases involved with this transaction'''

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')
    '''Lot quality code provided by the customer'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class PalletsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'pallet_code', 'warehouse_facility_id', 'inventory_status', 'original_quantity', 'original_pallet_count', 'is_blast', 'blast_in_datetime', 'blast_out_datetime', 'is_hpp', 'customer_code', 'lot_code', 'warehouse_license_plate_number', 'customer_license_plate_number', 'is_depleted', 'depleted_date', 'current_quantity', 'current_pallet_count', 'warehouse_location_code', 'hold_code', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'pallet_received_date', 'committed_quantity', 'committed_pallet_count', '_id', 'id', 'item_code', 'lot_id', 'customer_id', 'pallet_location_id', 'item_id', 'hpp_in_datetime', 'hpp_out_datetime', 'is_in_assigned_location', 'reservation_code', 'blast_cycle_wms_pallets_by_wms_pallet_id', 'blast_plan_pallets_by_wms_pallet_id', 'blast_cell_wms_pallets_by_wms_pallet_id', 'blast_cycles', 'blast_plans', 'blast_cells_by_blast_cell_wms_pallet_wms_pallet_id_and_blast_cell_id', 'blast_cycles_by_blast_cell_wms_pallet_wms_pallet_id_and_blast_cycle_id')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    pallet_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    inventory_status = sgqlc.types.Field(String, graphql_name='inventoryStatus')
    '''Status of whether the pallet was ever in inventory (O = On Hand, X
    = Expected)
    '''

    original_quantity = sgqlc.types.Field(Int, graphql_name='originalQuantity')
    '''Number of cases on the pallet when entered into inventory'''

    original_pallet_count = sgqlc.types.Field(Int, graphql_name='originalPalletCount')
    '''Number of pallets represented by this record.  (In Lot Tracking
    facilities, pallets are tracked in groups instead of individually)
    '''

    is_blast = sgqlc.types.Field(Boolean, graphql_name='isBlast')
    '''True if pallet entered a blast freezer'''

    blast_in_datetime = sgqlc.types.Field(Datetime, graphql_name='blastInDatetime')
    '''Date and time the pallet entered the blast freezer (in facility
    local time)
    '''

    blast_out_datetime = sgqlc.types.Field(Datetime, graphql_name='blastOutDatetime')
    '''Date and time the pallet exited the blast freezer (in facility
    local time)
    '''

    is_hpp = sgqlc.types.Field(Boolean, graphql_name='isHpp')
    '''True if pallet holds product that underwent high pressure
    processing
    '''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    lot_code = sgqlc.types.Field(String, graphql_name='lotCode')
    '''Internal WMS code used to track the lot for the pallet'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Primary reference number tied to the physical pallet in the
    warehouse
    '''

    customer_license_plate_number = sgqlc.types.Field(String, graphql_name='customerLicensePlateNumber')
    '''Customer reference number tied to the physical pallet'''

    is_depleted = sgqlc.types.Field(Boolean, graphql_name='isDepleted')
    '''True, if the pallet and its contents have left the warehouse'''

    depleted_date = sgqlc.types.Field(Date, graphql_name='depletedDate')
    '''Date that the pallet left the warehouse'''

    current_quantity = sgqlc.types.Field(Int, graphql_name='currentQuantity')
    '''Number of cases currently on the pallet'''

    current_pallet_count = sgqlc.types.Field(Int, graphql_name='currentPalletCount')
    '''Number of pallets still in inventory'''

    warehouse_location_code = sgqlc.types.Field(String, graphql_name='warehouseLocationCode')
    '''Internal WMS code for the location of the pallet in the warehouse'''

    hold_code = sgqlc.types.Field(String, graphql_name='holdCode')
    '''Hold code assigned to the pallet.  If the pallet is not on hold,
    this field is null
    '''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    pallet_received_date = sgqlc.types.Field(Datetime, graphql_name='palletReceivedDate')
    '''Date the pallet was received into the warehouse for storage'''

    committed_quantity = sgqlc.types.Field(Int, graphql_name='committedQuantity')
    '''Number of cases committed to an outbound order that has not yet
    shipped
    '''

    committed_pallet_count = sgqlc.types.Field(Int, graphql_name='committedPalletCount')
    '''Number of pallets committed to an outbound order that has not yet
    shipped
    '''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    item_code = sgqlc.types.Field(String, graphql_name='itemCode')
    '''Internal WMS code used by the WMS to track the item or product on
    the pallet
    '''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS identifier for the lot (references wms.lots_raw.id)'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS identifier for the customer (references
    wms.warehouse_customers_raw.id)
    '''

    pallet_location_id = sgqlc.types.Field(String, graphql_name='palletLocationId')
    '''ODS identifier for the warehouse pallet location (references
    wms.pallet_locations_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    hpp_in_datetime = sgqlc.types.Field(Datetime, graphql_name='hppInDatetime')
    '''Date and time the pallet entered high pressure processing (in
    facility local time)
    '''

    hpp_out_datetime = sgqlc.types.Field(Datetime, graphql_name='hppOutDatetime')
    '''Date and time the pallet exited high pressure processing (in
    facility local time)
    '''

    is_in_assigned_location = sgqlc.types.Field(Boolean, graphql_name='isInAssignedLocation')

    reservation_code = sgqlc.types.Field(String, graphql_name='reservationCode')

    blast_cycle_wms_pallets_by_wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(BlastCycleWmsPalletsConnection), graphql_name='blastCycleWmsPalletsByWmsPalletId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCycleWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCycleWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCycleWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCycleWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_plan_pallets_by_wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(BlastPlanPalletsConnection), graphql_name='blastPlanPalletsByWmsPalletId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlanPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastPlanPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastPlanPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastPlanPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastPlanPalletsOrderBy!]`): The method to use
      when ordering `BlastPlanPallet`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastPlanPalletCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BlastPlanPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cell_wms_pallets_by_wms_pallet_id = sgqlc.types.Field(sgqlc.types.non_null(BlastCellWmsPalletsConnection), graphql_name='blastCellWmsPalletsByWmsPalletId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cycles = sgqlc.types.Field(sgqlc.types.non_null(PalletsRawBlastCyclesManyToManyConnection), graphql_name='blastCycles', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCyclesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCycle`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCyclesOrderBy!]`): The method to use when
      ordering `BlastCycle`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCycleFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_plans = sgqlc.types.Field(sgqlc.types.non_null(PalletsRawBlastPlansManyToManyConnection), graphql_name='blastPlans', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlansOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastPlanCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastPlanFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastPlan`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastPlansOrderBy!]`): The method to use when
      ordering `BlastPlan`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastPlanCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastPlanFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    blast_cells_by_blast_cell_wms_pallet_wms_pallet_id_and_blast_cell_id = sgqlc.types.Field(sgqlc.types.non_null(PalletsRawBlastCellsByBlastCellWmsPalletWmsPalletIdAndBlastCellIdManyToManyConnection), graphql_name='blastCellsByBlastCellWmsPalletWmsPalletIdAndBlastCellId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCell`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCellFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    blast_cycles_by_blast_cell_wms_pallet_wms_pallet_id_and_blast_cycle_id = sgqlc.types.Field(sgqlc.types.non_null(PalletsRawBlastCyclesByBlastCellWmsPalletWmsPalletIdAndBlastCycleIdManyToManyConnection), graphql_name='blastCyclesByBlastCellWmsPalletWmsPalletIdAndBlastCycleId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCyclesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCycle`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCyclesOrderBy!]`): The method to use when
      ordering `BlastCycle`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCycleFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class Query(sgqlc.types.Type, Node):
    '''The root query type which gives access points into the data
    universe.
    '''
    __schema__ = base
    __field_names__ = ('query', 'node', 'cost_center_company_lookups', 'customer_facility_links', 'customer_hierarchies', 'customer_hierarchy_maps', 'facilities', 'facilities_tests', 'facility_groupings', 'facility_warehouse_links', 'facility_workday_cost_centers', 'pallet_location_zones', 'workday_cost_centers', 'aggregate_warehouse_util_by_customer_raws', 'aggregate_warehouse_util_raws', 'aggregate_warehouse_volume_by_customer_raws', 'aggregate_warehouse_volume_raws', 'billing_histories', 'billing_history_raws', 'bol_constants_raws', 'broker_owners_raws', 'carriers', 'carriers_raws', 'case_picks_raws', 'cuts_raws', 'drivers', 'drivers_masters', 'drivers_raws', 'expected_inbound_order_details', 'expected_inbound_order_details_raws', 'expected_inbound_orders_raws', 'expected_outbound_order_details', 'expected_outbound_order_details_raws', 'expected_outbound_orders', 'expected_outbound_orders_raws', 'expected_pallets_raws', 'hold_codes', 'hold_codes_per_customers', 'hold_codes_raws', 'hpp_raws', 'inbound_catch_weight_raws', 'inbound_loads', 'inbound_loads_raws', 'inbound_order_comments_raws', 'inbound_order_detail_reference_codes_raws', 'inbound_order_details', 'inbound_order_details_raws', 'inbound_order_reference_codes', 'inbound_order_reference_codes_raws', 'inbound_orders', 'inbound_orders_execution_raws', 'inbound_orders_raws', 'inbound_pallets_raws', 'inbound_truck_log_raws', 'inventory_adjustments', 'inventory_adjustments_raws', 'inventory_controls', 'inventory_control_raws', 'inventory_hold_history_raws', 'item_reference_codes', 'item_reference_codes_raws', 'items', 'items_raws', 'lot_reference_codes', 'lot_reference_codes_raws', 'lot_transactions_raws', 'lots', 'lots_raws', 'outbound_catch_weight_raws', 'outbound_loads', 'outbound_loads_raws', 'outbound_order_comments_raws', 'outbound_order_details', 'outbound_order_details_execution_raws', 'outbound_order_details_raws', 'outbound_order_reference_codes', 'outbound_order_reference_codes_raws', 'outbound_orders', 'outbound_orders_execution_raws', 'outbound_orders_raws', 'outbound_pallets_raws', 'outbound_truck_log_raws', 'pallet_histories', 'pallet_history_raws', 'pallet_locations', 'pallet_locations_raws', 'pallet_reference_codes_raws', 'pallet_transactions_raws', 'pallets', 'pallets_by_load_dates', 'pallets_raws', 'stop_locations', 'stop_locations_raws', 'warehouse_customers', 'warehouse_customers_config_raws', 'warehouse_customers_raws', 'warehouse_pick_activities_raws', 'wms_facility_defaults_raws', 'wms_systems', 'wooden_pallet_transactions_raws', 'blast_cell_types', 'blast_cell_wms_pallet_locations', 'blast_cell_wms_pallets', 'blast_cells', 'blast_cycle_events', 'blast_cycle_wms_pallets', 'blast_cycles', 'blast_plan_pallets', 'blast_plans', 'item_freeze_times', 'item_short_category_names', 'recent_inbound_loads', 'cursor_histories', 'source_channel_cursors', 'edge_node_source_channel_accesses', 'edge_nodes', 'source_channels', 'source_types', 'sources', 'facility', 'facilities_test', 'facility_grouping', 'facility_workday_cost_center', 'workday_cost_center', 'aggregate_warehouse_util_by_customer_raw', 'aggregate_warehouse_util_raw', 'aggregate_warehouse_volume_by_customer_raw', 'aggregate_warehouse_volume_raw', 'billing_history_raw', 'bol_constants_raw', 'broker_owners_raw', 'carriers_raw', 'case_picks_raw', 'cuts_raw', 'drivers_raw', 'expected_inbound_order_details_raw', 'expected_inbound_orders_raw', 'expected_outbound_order_details_raw', 'expected_outbound_orders_raw', 'expected_pallets_raw', 'hold_codes_raw', 'hpp_raw', 'inbound_catch_weight_raw', 'inbound_loads_raw', 'inbound_order_comments_raw', 'inbound_order_detail_reference_codes_raw', 'inbound_order_details_raw', 'inbound_order_reference_codes_raw', 'inbound_orders_execution_raw', 'inbound_orders_raw', 'inbound_pallets_raw', 'inbound_truck_log_raw', 'inventory_adjustments_raw', 'inventory_control_raw', 'inventory_hold_history_raw', 'item_reference_codes_raw', 'items_raw', 'lot_reference_codes_raw', 'lot_transactions_raw', 'lots_raw', 'outbound_catch_weight_raw', 'outbound_loads_raw', 'outbound_order_comments_raw', 'outbound_order_details_execution_raw', 'outbound_order_details_raw', 'outbound_order_reference_codes_raw', 'outbound_orders_execution_raw', 'outbound_orders_raw', 'outbound_pallets_raw', 'outbound_truck_log_raw', 'pallet_history_raw', 'pallet_locations_raw', 'pallet_reference_codes_raw', 'pallet_transactions_raw', 'pallets_raw', 'stop_locations_raw', 'warehouse_customers_config_raw', 'warehouse_customers_raw', 'warehouse_pick_activities_raw', 'wms_facility_defaults_raw', 'wms_system', 'wooden_pallet_transactions_raw', 'blast_cell_type', 'blast_cell_wms_pallet_location', 'blast_cell_wms_pallet', 'blast_cell_wms_pallet_by_blast_cell_id_and_wms_pallet_id', 'blast_cell', 'blast_cycle_event', 'blast_cycle_wms_pallet', 'blast_cycle', 'blast_plan_pallet', 'blast_plan', 'item_freeze_time', 'item_short_category_name', 'cursor_history', 'source_channel_cursor', 'edge_node_source_channel_access', 'edge_node', 'source_channel', 'source_type', 'source', 'choose_timestamp_by_precedence', 'get_sfdc_source_system_id', 'get_sfdc_source_system_id_test', 'make_inbound_order_id', 'make_item_id', 'make_load_id', 'make_lot_id', 'make_outbound_order_id', 'make_warehouse_customer_id', 'current_cell_cycles', 'facility_blast_cycle_stats', 'facility_by_node_id', 'facilities_test_by_node_id', 'facility_grouping_by_node_id', 'facility_workday_cost_center_by_node_id', 'workday_cost_center_by_node_id', 'aggregate_warehouse_util_by_customer_raw_by_node_id', 'aggregate_warehouse_util_raw_by_node_id', 'aggregate_warehouse_volume_by_customer_raw_by_node_id', 'aggregate_warehouse_volume_raw_by_node_id', 'billing_history_raw_by_node_id', 'bol_constants_raw_by_node_id', 'broker_owners_raw_by_node_id', 'carriers_raw_by_node_id', 'case_picks_raw_by_node_id', 'cuts_raw_by_node_id', 'drivers_raw_by_node_id', 'expected_inbound_order_details_raw_by_node_id', 'expected_inbound_orders_raw_by_node_id', 'expected_outbound_order_details_raw_by_node_id', 'expected_outbound_orders_raw_by_node_id', 'expected_pallets_raw_by_node_id', 'hold_codes_raw_by_node_id', 'hpp_raw_by_node_id', 'inbound_catch_weight_raw_by_node_id', 'inbound_loads_raw_by_node_id', 'inbound_order_comments_raw_by_node_id', 'inbound_order_detail_reference_codes_raw_by_node_id', 'inbound_order_details_raw_by_node_id', 'inbound_order_reference_codes_raw_by_node_id', 'inbound_orders_execution_raw_by_node_id', 'inbound_orders_raw_by_node_id', 'inbound_pallets_raw_by_node_id', 'inbound_truck_log_raw_by_node_id', 'inventory_adjustments_raw_by_node_id', 'inventory_control_raw_by_node_id', 'inventory_hold_history_raw_by_node_id', 'item_reference_codes_raw_by_node_id', 'items_raw_by_node_id', 'lot_reference_codes_raw_by_node_id', 'lot_transactions_raw_by_node_id', 'lots_raw_by_node_id', 'outbound_catch_weight_raw_by_node_id', 'outbound_loads_raw_by_node_id', 'outbound_order_comments_raw_by_node_id', 'outbound_order_details_execution_raw_by_node_id', 'outbound_order_details_raw_by_node_id', 'outbound_order_reference_codes_raw_by_node_id', 'outbound_orders_execution_raw_by_node_id', 'outbound_orders_raw_by_node_id', 'outbound_pallets_raw_by_node_id', 'outbound_truck_log_raw_by_node_id', 'pallet_history_raw_by_node_id', 'pallet_locations_raw_by_node_id', 'pallet_reference_codes_raw_by_node_id', 'pallet_transactions_raw_by_node_id', 'pallets_raw_by_node_id', 'stop_locations_raw_by_node_id', 'warehouse_customers_config_raw_by_node_id', 'warehouse_customers_raw_by_node_id', 'warehouse_pick_activities_raw_by_node_id', 'wms_facility_defaults_raw_by_node_id', 'wms_system_by_node_id', 'wooden_pallet_transactions_raw_by_node_id', 'blast_cell_type_by_node_id', 'blast_cell_wms_pallet_location_by_node_id', 'blast_cell_wms_pallet_by_node_id', 'blast_cell_by_node_id', 'blast_cycle_event_by_node_id', 'blast_cycle_wms_pallet_by_node_id', 'blast_cycle_by_node_id', 'blast_plan_pallet_by_node_id', 'blast_plan_by_node_id', 'item_freeze_time_by_node_id', 'item_short_category_name_by_node_id', 'cursor_history_by_node_id', 'source_channel_cursor_by_node_id', 'edge_node_source_channel_access_by_node_id', 'edge_node_by_node_id', 'source_channel_by_node_id', 'source_type_by_node_id', 'source_by_node_id')
    query = sgqlc.types.Field(sgqlc.types.non_null('Query'), graphql_name='query')
    '''Exposes the root query type nested one level down. This is helpful
    for Relay 1 which can only query top level fields if they are in a
    particular form.
    '''

    node = sgqlc.types.Field(Node, graphql_name='node', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Fetches an object given its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID`.
    '''

    cost_center_company_lookups = sgqlc.types.Field(CostCenterCompanyLookupsConnection, graphql_name='costCenterCompanyLookups', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CostCenterCompanyLookupsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(CostCenterCompanyLookupCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CostCenterCompanyLookupFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `CostCenterCompanyLookup`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CostCenterCompanyLookupsOrderBy!]`): The method to
      use when ordering `CostCenterCompanyLookup`. (default:
      `[NATURAL]`)
    * `condition` (`CostCenterCompanyLookupCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`CostCenterCompanyLookupFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    customer_facility_links = sgqlc.types.Field(CustomerFacilityLinksConnection, graphql_name='customerFacilityLinks', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CustomerFacilityLinksOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(CustomerFacilityLinkCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CustomerFacilityLinkFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `CustomerFacilityLink`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CustomerFacilityLinksOrderBy!]`): The method to
      use when ordering `CustomerFacilityLink`. (default: `[NATURAL]`)
    * `condition` (`CustomerFacilityLinkCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`CustomerFacilityLinkFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    customer_hierarchies = sgqlc.types.Field(CustomerHierarchiesConnection, graphql_name='customerHierarchies', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CustomerHierarchiesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(CustomerHierarchyCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CustomerHierarchyFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `CustomerHierarchy`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CustomerHierarchiesOrderBy!]`): The method to use
      when ordering `CustomerHierarchy`. (default: `[NATURAL]`)
    * `condition` (`CustomerHierarchyCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`CustomerHierarchyFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    customer_hierarchy_maps = sgqlc.types.Field(CustomerHierarchyMapsConnection, graphql_name='customerHierarchyMaps', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CustomerHierarchyMapsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(CustomerHierarchyMapCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CustomerHierarchyMapFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `CustomerHierarchyMap`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CustomerHierarchyMapsOrderBy!]`): The method to
      use when ordering `CustomerHierarchyMap`. (default: `[NATURAL]`)
    * `condition` (`CustomerHierarchyMapCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`CustomerHierarchyMapFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    facilities = sgqlc.types.Field(FacilitiesConnection, graphql_name='facilities', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilitiesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilityCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Facility`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilitiesOrderBy!]`): The method to use when
      ordering `Facility`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilityCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`FacilityFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    facilities_tests = sgqlc.types.Field(FacilitiesTestsConnection, graphql_name='facilitiesTests', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilitiesTestsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilitiesTestCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilitiesTestFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `FacilitiesTest`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilitiesTestsOrderBy!]`): The method to use when
      ordering `FacilitiesTest`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilitiesTestCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`FacilitiesTestFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    facility_groupings = sgqlc.types.Field(FacilityGroupingsConnection, graphql_name='facilityGroupings', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityGroupingsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilityGroupingCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityGroupingFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `FacilityGrouping`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilityGroupingsOrderBy!]`): The method to use
      when ordering `FacilityGrouping`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilityGroupingCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`FacilityGroupingFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    facility_warehouse_links = sgqlc.types.Field(FacilityWarehouseLinksConnection, graphql_name='facilityWarehouseLinks', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWarehouseLinksOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(FacilityWarehouseLinkCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityWarehouseLinkFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `FacilityWarehouseLink`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilityWarehouseLinksOrderBy!]`): The method to
      use when ordering `FacilityWarehouseLink`. (default:
      `[NATURAL]`)
    * `condition` (`FacilityWarehouseLinkCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`FacilityWarehouseLinkFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    facility_workday_cost_centers = sgqlc.types.Field(FacilityWorkdayCostCentersConnection, graphql_name='facilityWorkdayCostCenters', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilityWorkdayCostCenterCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityWorkdayCostCenterFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `FacilityWorkdayCostCenter`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilityWorkdayCostCentersOrderBy!]`): The method
      to use when ordering `FacilityWorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilityWorkdayCostCenterCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`FacilityWorkdayCostCenterFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    pallet_location_zones = sgqlc.types.Field(PalletLocationZonesConnection, graphql_name='palletLocationZones', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletLocationZonesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(PalletLocationZoneCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletLocationZoneFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `PalletLocationZone`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletLocationZonesOrderBy!]`): The method to use
      when ordering `PalletLocationZone`. (default: `[NATURAL]`)
    * `condition` (`PalletLocationZoneCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`PalletLocationZoneFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    workday_cost_centers = sgqlc.types.Field(WorkdayCostCentersConnection, graphql_name='workdayCostCenters', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(WorkdayCostCenterCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(WorkdayCostCenterFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `WorkdayCostCenter`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[WorkdayCostCentersOrderBy!]`): The method to use
      when ordering `WorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`WorkdayCostCenterCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`WorkdayCostCenterFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    aggregate_warehouse_util_by_customer_raws = sgqlc.types.Field(AggregateWarehouseUtilByCustomerRawsConnection, graphql_name='aggregateWarehouseUtilByCustomerRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseUtilByCustomerRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(AggregateWarehouseUtilByCustomerRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(AggregateWarehouseUtilByCustomerRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `AggregateWarehouseUtilByCustomerRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[AggregateWarehouseUtilByCustomerRawsOrderBy!]`):
      The method to use when ordering
      `AggregateWarehouseUtilByCustomerRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`AggregateWarehouseUtilByCustomerRawCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`AggregateWarehouseUtilByCustomerRawFilter`): A filter
      to be used in determining which values should be returned by the
      collection.
    '''

    aggregate_warehouse_util_raws = sgqlc.types.Field(AggregateWarehouseUtilRawsConnection, graphql_name='aggregateWarehouseUtilRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseUtilRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(AggregateWarehouseUtilRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(AggregateWarehouseUtilRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `AggregateWarehouseUtilRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[AggregateWarehouseUtilRawsOrderBy!]`): The method
      to use when ordering `AggregateWarehouseUtilRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`AggregateWarehouseUtilRawCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`AggregateWarehouseUtilRawFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    aggregate_warehouse_volume_by_customer_raws = sgqlc.types.Field(AggregateWarehouseVolumeByCustomerRawsConnection, graphql_name='aggregateWarehouseVolumeByCustomerRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseVolumeByCustomerRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(AggregateWarehouseVolumeByCustomerRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(AggregateWarehouseVolumeByCustomerRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `AggregateWarehouseVolumeByCustomerRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[AggregateWarehouseVolumeByCustomerRawsOrderBy!]`):
      The method to use when ordering
      `AggregateWarehouseVolumeByCustomerRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`AggregateWarehouseVolumeByCustomerRawCondition`):
      A condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`AggregateWarehouseVolumeByCustomerRawFilter`): A
      filter to be used in determining which values should be returned
      by the collection.
    '''

    aggregate_warehouse_volume_raws = sgqlc.types.Field(AggregateWarehouseVolumeRawsConnection, graphql_name='aggregateWarehouseVolumeRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(AggregateWarehouseVolumeRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(AggregateWarehouseVolumeRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(AggregateWarehouseVolumeRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `AggregateWarehouseVolumeRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[AggregateWarehouseVolumeRawsOrderBy!]`): The
      method to use when ordering `AggregateWarehouseVolumeRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`AggregateWarehouseVolumeRawCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`AggregateWarehouseVolumeRawFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    billing_histories = sgqlc.types.Field(BillingHistoriesConnection, graphql_name='billingHistories', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BillingHistoriesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(BillingHistoryCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BillingHistoryFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BillingHistory`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BillingHistoriesOrderBy!]`): The method to use
      when ordering `BillingHistory`. (default: `[NATURAL]`)
    * `condition` (`BillingHistoryCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BillingHistoryFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    billing_history_raws = sgqlc.types.Field(BillingHistoryRawsConnection, graphql_name='billingHistoryRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BillingHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BillingHistoryRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BillingHistoryRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BillingHistoryRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BillingHistoryRawsOrderBy!]`): The method to use
      when ordering `BillingHistoryRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BillingHistoryRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BillingHistoryRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    bol_constants_raws = sgqlc.types.Field(BolConstantsRawsConnection, graphql_name='bolConstantsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BolConstantsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BolConstantsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BolConstantsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BolConstantsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BolConstantsRawsOrderBy!]`): The method to use
      when ordering `BolConstantsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BolConstantsRawCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BolConstantsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    broker_owners_raws = sgqlc.types.Field(BrokerOwnersRawsConnection, graphql_name='brokerOwnersRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BrokerOwnersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BrokerOwnersRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BrokerOwnersRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BrokerOwnersRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BrokerOwnersRawsOrderBy!]`): The method to use
      when ordering `BrokerOwnersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BrokerOwnersRawCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BrokerOwnersRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    carriers = sgqlc.types.Field(CarriersConnection, graphql_name='carriers', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CarriersOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(CarrierCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CarrierFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Carrier`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CarriersOrderBy!]`): The method to use when
      ordering `Carrier`. (default: `[NATURAL]`)
    * `condition` (`CarrierCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`CarrierFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    carriers_raws = sgqlc.types.Field(CarriersRawsConnection, graphql_name='carriersRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CarriersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(CarriersRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CarriersRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `CarriersRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CarriersRawsOrderBy!]`): The method to use when
      ordering `CarriersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`CarriersRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`CarriersRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    case_picks_raws = sgqlc.types.Field(CasePicksRawsConnection, graphql_name='casePicksRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CasePicksRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(CasePicksRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CasePicksRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `CasePicksRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CasePicksRawsOrderBy!]`): The method to use when
      ordering `CasePicksRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`CasePicksRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`CasePicksRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    cuts_raws = sgqlc.types.Field(CutsRawsConnection, graphql_name='cutsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CutsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(CutsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CutsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `CutsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CutsRawsOrderBy!]`): The method to use when
      ordering `CutsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`CutsRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`CutsRawFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    drivers = sgqlc.types.Field(DriversConnection, graphql_name='drivers', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(DriversOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(DriverCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(DriverFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Driver`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[DriversOrderBy!]`): The method to use when
      ordering `Driver`. (default: `[NATURAL]`)
    * `condition` (`DriverCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`DriverFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    drivers_masters = sgqlc.types.Field(DriversMastersConnection, graphql_name='driversMasters', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(DriversMastersOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(DriversMasterCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(DriversMasterFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `DriversMaster`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[DriversMastersOrderBy!]`): The method to use when
      ordering `DriversMaster`. (default: `[NATURAL]`)
    * `condition` (`DriversMasterCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`DriversMasterFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    drivers_raws = sgqlc.types.Field(DriversRawsConnection, graphql_name='driversRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(DriversRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(DriversRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(DriversRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `DriversRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[DriversRawsOrderBy!]`): The method to use when
      ordering `DriversRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`DriversRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`DriversRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    expected_inbound_order_details = sgqlc.types.Field(ExpectedInboundOrderDetailsConnection, graphql_name='expectedInboundOrderDetails', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedInboundOrderDetailsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(ExpectedInboundOrderDetailCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ExpectedInboundOrderDetailFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ExpectedInboundOrderDetail`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ExpectedInboundOrderDetailsOrderBy!]`): The method
      to use when ordering `ExpectedInboundOrderDetail`. (default:
      `[NATURAL]`)
    * `condition` (`ExpectedInboundOrderDetailCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`ExpectedInboundOrderDetailFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    expected_inbound_order_details_raws = sgqlc.types.Field(ExpectedInboundOrderDetailsRawsConnection, graphql_name='expectedInboundOrderDetailsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedInboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ExpectedInboundOrderDetailsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ExpectedInboundOrderDetailsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ExpectedInboundOrderDetailsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ExpectedInboundOrderDetailsRawsOrderBy!]`): The
      method to use when ordering `ExpectedInboundOrderDetailsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`ExpectedInboundOrderDetailsRawCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`ExpectedInboundOrderDetailsRawFilter`): A filter to
      be used in determining which values should be returned by the
      collection.
    '''

    expected_inbound_orders_raws = sgqlc.types.Field(ExpectedInboundOrdersRawsConnection, graphql_name='expectedInboundOrdersRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedInboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ExpectedInboundOrdersRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ExpectedInboundOrdersRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ExpectedInboundOrdersRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ExpectedInboundOrdersRawsOrderBy!]`): The method
      to use when ordering `ExpectedInboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`ExpectedInboundOrdersRawCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`ExpectedInboundOrdersRawFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    expected_outbound_order_details = sgqlc.types.Field(ExpectedOutboundOrderDetailsConnection, graphql_name='expectedOutboundOrderDetails', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrderDetailsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(ExpectedOutboundOrderDetailCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ExpectedOutboundOrderDetailFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ExpectedOutboundOrderDetail`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ExpectedOutboundOrderDetailsOrderBy!]`): The
      method to use when ordering `ExpectedOutboundOrderDetail`.
      (default: `[NATURAL]`)
    * `condition` (`ExpectedOutboundOrderDetailCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`ExpectedOutboundOrderDetailFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    expected_outbound_order_details_raws = sgqlc.types.Field(ExpectedOutboundOrderDetailsRawsConnection, graphql_name='expectedOutboundOrderDetailsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ExpectedOutboundOrderDetailsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ExpectedOutboundOrderDetailsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ExpectedOutboundOrderDetailsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ExpectedOutboundOrderDetailsRawsOrderBy!]`): The
      method to use when ordering `ExpectedOutboundOrderDetailsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`ExpectedOutboundOrderDetailsRawCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`ExpectedOutboundOrderDetailsRawFilter`): A filter to
      be used in determining which values should be returned by the
      collection.
    '''

    expected_outbound_orders = sgqlc.types.Field(ExpectedOutboundOrdersConnection, graphql_name='expectedOutboundOrders', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrdersOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(ExpectedOutboundOrderCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ExpectedOutboundOrderFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ExpectedOutboundOrder`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ExpectedOutboundOrdersOrderBy!]`): The method to
      use when ordering `ExpectedOutboundOrder`. (default:
      `[NATURAL]`)
    * `condition` (`ExpectedOutboundOrderCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`ExpectedOutboundOrderFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    expected_outbound_orders_raws = sgqlc.types.Field(ExpectedOutboundOrdersRawsConnection, graphql_name='expectedOutboundOrdersRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedOutboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ExpectedOutboundOrdersRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ExpectedOutboundOrdersRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ExpectedOutboundOrdersRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ExpectedOutboundOrdersRawsOrderBy!]`): The method
      to use when ordering `ExpectedOutboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`ExpectedOutboundOrdersRawCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`ExpectedOutboundOrdersRawFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    expected_pallets_raws = sgqlc.types.Field(ExpectedPalletsRawsConnection, graphql_name='expectedPalletsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ExpectedPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ExpectedPalletsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ExpectedPalletsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ExpectedPalletsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ExpectedPalletsRawsOrderBy!]`): The method to use
      when ordering `ExpectedPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`ExpectedPalletsRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`ExpectedPalletsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    hold_codes = sgqlc.types.Field(HoldCodesConnection, graphql_name='holdCodes', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(HoldCodesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(HoldCodeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(HoldCodeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `HoldCode`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[HoldCodesOrderBy!]`): The method to use when
      ordering `HoldCode`. (default: `[NATURAL]`)
    * `condition` (`HoldCodeCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`HoldCodeFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    hold_codes_per_customers = sgqlc.types.Field(HoldCodesPerCustomersConnection, graphql_name='holdCodesPerCustomers', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(HoldCodesPerCustomersOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(HoldCodesPerCustomerCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(HoldCodesPerCustomerFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `HoldCodesPerCustomer`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[HoldCodesPerCustomersOrderBy!]`): The method to
      use when ordering `HoldCodesPerCustomer`. (default: `[NATURAL]`)
    * `condition` (`HoldCodesPerCustomerCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`HoldCodesPerCustomerFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    hold_codes_raws = sgqlc.types.Field(HoldCodesRawsConnection, graphql_name='holdCodesRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(HoldCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(HoldCodesRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(HoldCodesRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `HoldCodesRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[HoldCodesRawsOrderBy!]`): The method to use when
      ordering `HoldCodesRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`HoldCodesRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`HoldCodesRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    hpp_raws = sgqlc.types.Field(HppRawsConnection, graphql_name='hppRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(HppRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(HppRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(HppRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `HppRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[HppRawsOrderBy!]`): The method to use when
      ordering `HppRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`HppRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`HppRawFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    inbound_catch_weight_raws = sgqlc.types.Field(InboundCatchWeightRawsConnection, graphql_name='inboundCatchWeightRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundCatchWeightRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InboundCatchWeightRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundCatchWeightRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InboundCatchWeightRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundCatchWeightRawsOrderBy!]`): The method to
      use when ordering `InboundCatchWeightRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`InboundCatchWeightRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`InboundCatchWeightRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inbound_loads = sgqlc.types.Field(InboundLoadsConnection, graphql_name='inboundLoads', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundLoadsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(InboundLoadCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundLoadFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `InboundLoad`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundLoadsOrderBy!]`): The method to use when
      ordering `InboundLoad`. (default: `[NATURAL]`)
    * `condition` (`InboundLoadCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`InboundLoadFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inbound_loads_raws = sgqlc.types.Field(InboundLoadsRawsConnection, graphql_name='inboundLoadsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundLoadsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InboundLoadsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundLoadsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `InboundLoadsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundLoadsRawsOrderBy!]`): The method to use
      when ordering `InboundLoadsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`InboundLoadsRawCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`InboundLoadsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inbound_order_comments_raws = sgqlc.types.Field(InboundOrderCommentsRawsConnection, graphql_name='inboundOrderCommentsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderCommentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InboundOrderCommentsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundOrderCommentsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InboundOrderCommentsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundOrderCommentsRawsOrderBy!]`): The method to
      use when ordering `InboundOrderCommentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`InboundOrderCommentsRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`InboundOrderCommentsRawFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    inbound_order_detail_reference_codes_raws = sgqlc.types.Field(InboundOrderDetailReferenceCodesRawsConnection, graphql_name='inboundOrderDetailReferenceCodesRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderDetailReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InboundOrderDetailReferenceCodesRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundOrderDetailReferenceCodesRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InboundOrderDetailReferenceCodesRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundOrderDetailReferenceCodesRawsOrderBy!]`):
      The method to use when ordering
      `InboundOrderDetailReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`InboundOrderDetailReferenceCodesRawCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`InboundOrderDetailReferenceCodesRawFilter`): A filter
      to be used in determining which values should be returned by the
      collection.
    '''

    inbound_order_details = sgqlc.types.Field(InboundOrderDetailsConnection, graphql_name='inboundOrderDetails', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderDetailsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(InboundOrderDetailCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundOrderDetailFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InboundOrderDetail`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundOrderDetailsOrderBy!]`): The method to use
      when ordering `InboundOrderDetail`. (default: `[NATURAL]`)
    * `condition` (`InboundOrderDetailCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`InboundOrderDetailFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inbound_order_details_raws = sgqlc.types.Field(InboundOrderDetailsRawsConnection, graphql_name='inboundOrderDetailsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InboundOrderDetailsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundOrderDetailsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InboundOrderDetailsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundOrderDetailsRawsOrderBy!]`): The method to
      use when ordering `InboundOrderDetailsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`InboundOrderDetailsRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`InboundOrderDetailsRawFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    inbound_order_reference_codes = sgqlc.types.Field(InboundOrderReferenceCodesConnection, graphql_name='inboundOrderReferenceCodes', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderReferenceCodesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(InboundOrderReferenceCodeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundOrderReferenceCodeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InboundOrderReferenceCode`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundOrderReferenceCodesOrderBy!]`): The method
      to use when ordering `InboundOrderReferenceCode`. (default:
      `[NATURAL]`)
    * `condition` (`InboundOrderReferenceCodeCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`InboundOrderReferenceCodeFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    inbound_order_reference_codes_raws = sgqlc.types.Field(InboundOrderReferenceCodesRawsConnection, graphql_name='inboundOrderReferenceCodesRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrderReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InboundOrderReferenceCodesRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundOrderReferenceCodesRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InboundOrderReferenceCodesRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundOrderReferenceCodesRawsOrderBy!]`): The
      method to use when ordering `InboundOrderReferenceCodesRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`InboundOrderReferenceCodesRawCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`InboundOrderReferenceCodesRawFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    inbound_orders = sgqlc.types.Field(InboundOrdersConnection, graphql_name='inboundOrders', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrdersOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(InboundOrderCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundOrderFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `InboundOrder`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundOrdersOrderBy!]`): The method to use when
      ordering `InboundOrder`. (default: `[NATURAL]`)
    * `condition` (`InboundOrderCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`InboundOrderFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inbound_orders_execution_raws = sgqlc.types.Field(InboundOrdersExecutionRawsConnection, graphql_name='inboundOrdersExecutionRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrdersExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InboundOrdersExecutionRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundOrdersExecutionRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InboundOrdersExecutionRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundOrdersExecutionRawsOrderBy!]`): The method
      to use when ordering `InboundOrdersExecutionRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`InboundOrdersExecutionRawCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`InboundOrdersExecutionRawFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    inbound_orders_raws = sgqlc.types.Field(InboundOrdersRawsConnection, graphql_name='inboundOrdersRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InboundOrdersRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundOrdersRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `InboundOrdersRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundOrdersRawsOrderBy!]`): The method to use
      when ordering `InboundOrdersRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`InboundOrdersRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`InboundOrdersRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inbound_pallets_raws = sgqlc.types.Field(InboundPalletsRawsConnection, graphql_name='inboundPalletsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InboundPalletsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundPalletsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `InboundPalletsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundPalletsRawsOrderBy!]`): The method to use
      when ordering `InboundPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`InboundPalletsRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`InboundPalletsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inbound_truck_log_raws = sgqlc.types.Field(InboundTruckLogRawsConnection, graphql_name='inboundTruckLogRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InboundTruckLogRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InboundTruckLogRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InboundTruckLogRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InboundTruckLogRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InboundTruckLogRawsOrderBy!]`): The method to use
      when ordering `InboundTruckLogRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`InboundTruckLogRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`InboundTruckLogRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inventory_adjustments = sgqlc.types.Field(InventoryAdjustmentsConnection, graphql_name='inventoryAdjustments', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryAdjustmentsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(InventoryAdjustmentCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InventoryAdjustmentFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InventoryAdjustment`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InventoryAdjustmentsOrderBy!]`): The method to use
      when ordering `InventoryAdjustment`. (default: `[NATURAL]`)
    * `condition` (`InventoryAdjustmentCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`InventoryAdjustmentFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inventory_adjustments_raws = sgqlc.types.Field(InventoryAdjustmentsRawsConnection, graphql_name='inventoryAdjustmentsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryAdjustmentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InventoryAdjustmentsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InventoryAdjustmentsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InventoryAdjustmentsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InventoryAdjustmentsRawsOrderBy!]`): The method to
      use when ordering `InventoryAdjustmentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`InventoryAdjustmentsRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`InventoryAdjustmentsRawFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    inventory_controls = sgqlc.types.Field(InventoryControlsConnection, graphql_name='inventoryControls', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryControlsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(InventoryControlCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InventoryControlFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `InventoryControl`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InventoryControlsOrderBy!]`): The method to use
      when ordering `InventoryControl`. (default: `[NATURAL]`)
    * `condition` (`InventoryControlCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`InventoryControlFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inventory_control_raws = sgqlc.types.Field(InventoryControlRawsConnection, graphql_name='inventoryControlRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryControlRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InventoryControlRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InventoryControlRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InventoryControlRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InventoryControlRawsOrderBy!]`): The method to use
      when ordering `InventoryControlRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`InventoryControlRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`InventoryControlRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    inventory_hold_history_raws = sgqlc.types.Field(InventoryHoldHistoryRawsConnection, graphql_name='inventoryHoldHistoryRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(InventoryHoldHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(InventoryHoldHistoryRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(InventoryHoldHistoryRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `InventoryHoldHistoryRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[InventoryHoldHistoryRawsOrderBy!]`): The method to
      use when ordering `InventoryHoldHistoryRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`InventoryHoldHistoryRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`InventoryHoldHistoryRawFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    item_reference_codes = sgqlc.types.Field(ItemReferenceCodesConnection, graphql_name='itemReferenceCodes', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemReferenceCodesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(ItemReferenceCodeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemReferenceCodeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `ItemReferenceCode`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemReferenceCodesOrderBy!]`): The method to use
      when ordering `ItemReferenceCode`. (default: `[NATURAL]`)
    * `condition` (`ItemReferenceCodeCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`ItemReferenceCodeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    item_reference_codes_raws = sgqlc.types.Field(ItemReferenceCodesRawsConnection, graphql_name='itemReferenceCodesRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ItemReferenceCodesRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemReferenceCodesRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ItemReferenceCodesRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `ItemReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`ItemReferenceCodesRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`ItemReferenceCodesRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    items = sgqlc.types.Field(ItemsConnection, graphql_name='items', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(ItemCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Item`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemsOrderBy!]`): The method to use when ordering
      `Item`. (default: `[NATURAL]`)
    * `condition` (`ItemCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`ItemFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    items_raws = sgqlc.types.Field(ItemsRawsConnection, graphql_name='itemsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ItemsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `ItemsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemsRawsOrderBy!]`): The method to use when
      ordering `ItemsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`ItemsRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`ItemsRawFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    lot_reference_codes = sgqlc.types.Field(LotReferenceCodesConnection, graphql_name='lotReferenceCodes', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotReferenceCodesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(LotReferenceCodeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(LotReferenceCodeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `LotReferenceCode`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[LotReferenceCodesOrderBy!]`): The method to use
      when ordering `LotReferenceCode`. (default: `[NATURAL]`)
    * `condition` (`LotReferenceCodeCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`LotReferenceCodeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    lot_reference_codes_raws = sgqlc.types.Field(LotReferenceCodesRawsConnection, graphql_name='lotReferenceCodesRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(LotReferenceCodesRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(LotReferenceCodesRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `LotReferenceCodesRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[LotReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `LotReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`LotReferenceCodesRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`LotReferenceCodesRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    lot_transactions_raws = sgqlc.types.Field(LotTransactionsRawsConnection, graphql_name='lotTransactionsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(LotTransactionsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(LotTransactionsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `LotTransactionsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[LotTransactionsRawsOrderBy!]`): The method to use
      when ordering `LotTransactionsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`LotTransactionsRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`LotTransactionsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    lots = sgqlc.types.Field(LotsConnection, graphql_name='lots', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(LotCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(LotFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Lot`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[LotsOrderBy!]`): The method to use when ordering
      `Lot`. (default: `[NATURAL]`)
    * `condition` (`LotCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`LotFilter`): A filter to be used in determining which
      values should be returned by the collection.
    '''

    lots_raws = sgqlc.types.Field(LotsRawsConnection, graphql_name='lotsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(LotsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(LotsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(LotsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `LotsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[LotsRawsOrderBy!]`): The method to use when
      ordering `LotsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`LotsRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`LotsRawFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    outbound_catch_weight_raws = sgqlc.types.Field(OutboundCatchWeightRawsConnection, graphql_name='outboundCatchWeightRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundCatchWeightRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(OutboundCatchWeightRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundCatchWeightRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `OutboundCatchWeightRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundCatchWeightRawsOrderBy!]`): The method to
      use when ordering `OutboundCatchWeightRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`OutboundCatchWeightRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`OutboundCatchWeightRawFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    outbound_loads = sgqlc.types.Field(OutboundLoadsConnection, graphql_name='outboundLoads', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundLoadsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(OutboundLoadCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundLoadFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `OutboundLoad`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundLoadsOrderBy!]`): The method to use when
      ordering `OutboundLoad`. (default: `[NATURAL]`)
    * `condition` (`OutboundLoadCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`OutboundLoadFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    outbound_loads_raws = sgqlc.types.Field(OutboundLoadsRawsConnection, graphql_name='outboundLoadsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundLoadsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(OutboundLoadsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundLoadsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `OutboundLoadsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundLoadsRawsOrderBy!]`): The method to use
      when ordering `OutboundLoadsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`OutboundLoadsRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`OutboundLoadsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    outbound_order_comments_raws = sgqlc.types.Field(OutboundOrderCommentsRawsConnection, graphql_name='outboundOrderCommentsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderCommentsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(OutboundOrderCommentsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundOrderCommentsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `OutboundOrderCommentsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundOrderCommentsRawsOrderBy!]`): The method
      to use when ordering `OutboundOrderCommentsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`OutboundOrderCommentsRawCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`OutboundOrderCommentsRawFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    outbound_order_details = sgqlc.types.Field(OutboundOrderDetailsConnection, graphql_name='outboundOrderDetails', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderDetailsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(OutboundOrderDetailCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundOrderDetailFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `OutboundOrderDetail`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundOrderDetailsOrderBy!]`): The method to use
      when ordering `OutboundOrderDetail`. (default: `[NATURAL]`)
    * `condition` (`OutboundOrderDetailCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`OutboundOrderDetailFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    outbound_order_details_execution_raws = sgqlc.types.Field(OutboundOrderDetailsExecutionRawsConnection, graphql_name='outboundOrderDetailsExecutionRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderDetailsExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(OutboundOrderDetailsExecutionRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundOrderDetailsExecutionRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `OutboundOrderDetailsExecutionRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundOrderDetailsExecutionRawsOrderBy!]`): The
      method to use when ordering `OutboundOrderDetailsExecutionRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`OutboundOrderDetailsExecutionRawCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`OutboundOrderDetailsExecutionRawFilter`): A filter to
      be used in determining which values should be returned by the
      collection.
    '''

    outbound_order_details_raws = sgqlc.types.Field(OutboundOrderDetailsRawsConnection, graphql_name='outboundOrderDetailsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderDetailsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(OutboundOrderDetailsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundOrderDetailsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `OutboundOrderDetailsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundOrderDetailsRawsOrderBy!]`): The method to
      use when ordering `OutboundOrderDetailsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`OutboundOrderDetailsRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`OutboundOrderDetailsRawFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    outbound_order_reference_codes = sgqlc.types.Field(OutboundOrderReferenceCodesConnection, graphql_name='outboundOrderReferenceCodes', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderReferenceCodesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(OutboundOrderReferenceCodeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundOrderReferenceCodeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `OutboundOrderReferenceCode`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundOrderReferenceCodesOrderBy!]`): The method
      to use when ordering `OutboundOrderReferenceCode`. (default:
      `[NATURAL]`)
    * `condition` (`OutboundOrderReferenceCodeCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`OutboundOrderReferenceCodeFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    outbound_order_reference_codes_raws = sgqlc.types.Field(OutboundOrderReferenceCodesRawsConnection, graphql_name='outboundOrderReferenceCodesRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrderReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(OutboundOrderReferenceCodesRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundOrderReferenceCodesRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `OutboundOrderReferenceCodesRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundOrderReferenceCodesRawsOrderBy!]`): The
      method to use when ordering `OutboundOrderReferenceCodesRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`OutboundOrderReferenceCodesRawCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`OutboundOrderReferenceCodesRawFilter`): A filter to
      be used in determining which values should be returned by the
      collection.
    '''

    outbound_orders = sgqlc.types.Field(OutboundOrdersConnection, graphql_name='outboundOrders', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrdersOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(OutboundOrderCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundOrderFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `OutboundOrder`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundOrdersOrderBy!]`): The method to use when
      ordering `OutboundOrder`. (default: `[NATURAL]`)
    * `condition` (`OutboundOrderCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`OutboundOrderFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    outbound_orders_execution_raws = sgqlc.types.Field(OutboundOrdersExecutionRawsConnection, graphql_name='outboundOrdersExecutionRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrdersExecutionRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(OutboundOrdersExecutionRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundOrdersExecutionRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `OutboundOrdersExecutionRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundOrdersExecutionRawsOrderBy!]`): The method
      to use when ordering `OutboundOrdersExecutionRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`OutboundOrdersExecutionRawCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`OutboundOrdersExecutionRawFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    outbound_orders_raws = sgqlc.types.Field(OutboundOrdersRawsConnection, graphql_name='outboundOrdersRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundOrdersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(OutboundOrdersRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundOrdersRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `OutboundOrdersRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundOrdersRawsOrderBy!]`): The method to use
      when ordering `OutboundOrdersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`OutboundOrdersRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`OutboundOrdersRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    outbound_pallets_raws = sgqlc.types.Field(OutboundPalletsRawsConnection, graphql_name='outboundPalletsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundPalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(OutboundPalletsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundPalletsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `OutboundPalletsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundPalletsRawsOrderBy!]`): The method to use
      when ordering `OutboundPalletsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`OutboundPalletsRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`OutboundPalletsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    outbound_truck_log_raws = sgqlc.types.Field(OutboundTruckLogRawsConnection, graphql_name='outboundTruckLogRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OutboundTruckLogRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(OutboundTruckLogRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(OutboundTruckLogRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `OutboundTruckLogRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[OutboundTruckLogRawsOrderBy!]`): The method to use
      when ordering `OutboundTruckLogRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`OutboundTruckLogRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`OutboundTruckLogRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    pallet_histories = sgqlc.types.Field(PalletHistoriesConnection, graphql_name='palletHistories', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletHistoriesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(PalletHistoryCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletHistoryFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletHistory`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletHistoriesOrderBy!]`): The method to use when
      ordering `PalletHistory`. (default: `[NATURAL]`)
    * `condition` (`PalletHistoryCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`PalletHistoryFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    pallet_history_raws = sgqlc.types.Field(PalletHistoryRawsConnection, graphql_name='palletHistoryRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletHistoryRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(PalletHistoryRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletHistoryRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletHistoryRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletHistoryRawsOrderBy!]`): The method to use
      when ordering `PalletHistoryRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`PalletHistoryRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`PalletHistoryRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    pallet_locations = sgqlc.types.Field(PalletLocationsConnection, graphql_name='palletLocations', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletLocationsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(PalletLocationCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletLocationFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletLocation`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletLocationsOrderBy!]`): The method to use when
      ordering `PalletLocation`. (default: `[NATURAL]`)
    * `condition` (`PalletLocationCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`PalletLocationFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    pallet_locations_raws = sgqlc.types.Field(PalletLocationsRawsConnection, graphql_name='palletLocationsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletLocationsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(PalletLocationsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletLocationsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `PalletLocationsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletLocationsRawsOrderBy!]`): The method to use
      when ordering `PalletLocationsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`PalletLocationsRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`PalletLocationsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    pallet_reference_codes_raws = sgqlc.types.Field(PalletReferenceCodesRawsConnection, graphql_name='palletReferenceCodesRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletReferenceCodesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(PalletReferenceCodesRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletReferenceCodesRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `PalletReferenceCodesRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletReferenceCodesRawsOrderBy!]`): The method to
      use when ordering `PalletReferenceCodesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`PalletReferenceCodesRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`PalletReferenceCodesRawFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    pallet_transactions_raws = sgqlc.types.Field(PalletTransactionsRawsConnection, graphql_name='palletTransactionsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(PalletTransactionsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletTransactionsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `PalletTransactionsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletTransactionsRawsOrderBy!]`): The method to
      use when ordering `PalletTransactionsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`PalletTransactionsRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`PalletTransactionsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    pallets = sgqlc.types.Field(PalletsConnection, graphql_name='pallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(PalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Pallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletsOrderBy!]`): The method to use when
      ordering `Pallet`. (default: `[NATURAL]`)
    * `condition` (`PalletCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`PalletFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    pallets_by_load_dates = sgqlc.types.Field(PalletsByLoadDatesConnection, graphql_name='palletsByLoadDates', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletsByLoadDatesOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(PalletsByLoadDateCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletsByLoadDateFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletsByLoadDate`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletsByLoadDatesOrderBy!]`): The method to use
      when ordering `PalletsByLoadDate`. (default: `[NATURAL]`)
    * `condition` (`PalletsByLoadDateCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`PalletsByLoadDateFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    pallets_raws = sgqlc.types.Field(PalletsRawsConnection, graphql_name='palletsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PalletsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(PalletsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(PalletsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `PalletsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[PalletsRawsOrderBy!]`): The method to use when
      ordering `PalletsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`PalletsRawCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`PalletsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    stop_locations = sgqlc.types.Field(StopLocationsConnection, graphql_name='stopLocations', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(StopLocationsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(StopLocationCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(StopLocationFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `StopLocation`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[StopLocationsOrderBy!]`): The method to use when
      ordering `StopLocation`. (default: `[NATURAL]`)
    * `condition` (`StopLocationCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`StopLocationFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    stop_locations_raws = sgqlc.types.Field(StopLocationsRawsConnection, graphql_name='stopLocationsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(StopLocationsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(StopLocationsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(StopLocationsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `StopLocationsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[StopLocationsRawsOrderBy!]`): The method to use
      when ordering `StopLocationsRaw`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`StopLocationsRawCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`StopLocationsRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    warehouse_customers = sgqlc.types.Field(WarehouseCustomersConnection, graphql_name='warehouseCustomers', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehouseCustomersOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(WarehouseCustomerCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(WarehouseCustomerFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `WarehouseCustomer`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[WarehouseCustomersOrderBy!]`): The method to use
      when ordering `WarehouseCustomer`. (default: `[NATURAL]`)
    * `condition` (`WarehouseCustomerCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`WarehouseCustomerFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    warehouse_customers_config_raws = sgqlc.types.Field(WarehouseCustomersConfigRawsConnection, graphql_name='warehouseCustomersConfigRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehouseCustomersConfigRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(WarehouseCustomersConfigRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(WarehouseCustomersConfigRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `WarehouseCustomersConfigRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[WarehouseCustomersConfigRawsOrderBy!]`): The
      method to use when ordering `WarehouseCustomersConfigRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`WarehouseCustomersConfigRawCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`WarehouseCustomersConfigRawFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    warehouse_customers_raws = sgqlc.types.Field(WarehouseCustomersRawsConnection, graphql_name='warehouseCustomersRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehouseCustomersRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(WarehouseCustomersRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(WarehouseCustomersRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `WarehouseCustomersRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[WarehouseCustomersRawsOrderBy!]`): The method to
      use when ordering `WarehouseCustomersRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`WarehouseCustomersRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`WarehouseCustomersRawFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    warehouse_pick_activities_raws = sgqlc.types.Field(WarehousePickActivitiesRawsConnection, graphql_name='warehousePickActivitiesRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WarehousePickActivitiesRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(WarehousePickActivitiesRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(WarehousePickActivitiesRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `WarehousePickActivitiesRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[WarehousePickActivitiesRawsOrderBy!]`): The method
      to use when ordering `WarehousePickActivitiesRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`WarehousePickActivitiesRawCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`WarehousePickActivitiesRawFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    wms_facility_defaults_raws = sgqlc.types.Field(WmsFacilityDefaultsRawsConnection, graphql_name='wmsFacilityDefaultsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WmsFacilityDefaultsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(WmsFacilityDefaultsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(WmsFacilityDefaultsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `WmsFacilityDefaultsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[WmsFacilityDefaultsRawsOrderBy!]`): The method to
      use when ordering `WmsFacilityDefaultsRaw`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`WmsFacilityDefaultsRawCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`WmsFacilityDefaultsRawFilter`): A filter to be used
      in determining which values should be returned by the
      collection.
    '''

    wms_systems = sgqlc.types.Field(WmsSystemsConnection, graphql_name='wmsSystems', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WmsSystemsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(WmsSystemCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(WmsSystemFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `WmsSystem`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[WmsSystemsOrderBy!]`): The method to use when
      ordering `WmsSystem`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`WmsSystemCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`WmsSystemFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    wooden_pallet_transactions_raws = sgqlc.types.Field(WoodenPalletTransactionsRawsConnection, graphql_name='woodenPalletTransactionsRaws', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(WoodenPalletTransactionsRawsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(WoodenPalletTransactionsRawCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(WoodenPalletTransactionsRawFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `WoodenPalletTransactionsRaw`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[WoodenPalletTransactionsRawsOrderBy!]`): The
      method to use when ordering `WoodenPalletTransactionsRaw`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`WoodenPalletTransactionsRawCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`WoodenPalletTransactionsRawFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    blast_cell_types = sgqlc.types.Field(BlastCellTypesConnection, graphql_name='blastCellTypes', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellTypesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellTypeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellTypeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCellType`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellTypesOrderBy!]`): The method to use when
      ordering `BlastCellType`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellTypeCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellTypeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cell_wms_pallet_locations = sgqlc.types.Field(BlastCellWmsPalletLocationsConnection, graphql_name='blastCellWmsPalletLocations', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletLocationsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletLocationCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletLocationFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPalletLocation`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletLocationsOrderBy!]`): The method
      to use when ordering `BlastCellWmsPalletLocation`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletLocationCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletLocationFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    blast_cell_wms_pallets = sgqlc.types.Field(BlastCellWmsPalletsConnection, graphql_name='blastCellWmsPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCellWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCellWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCellWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cells = sgqlc.types.Field(BlastCellsConnection, graphql_name='blastCells', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCellsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCellCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCellFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCell`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCellsOrderBy!]`): The method to use when
      ordering `BlastCell`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCellCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCellFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    blast_cycle_events = sgqlc.types.Field(BlastCycleEventsConnection, graphql_name='blastCycleEvents', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleEventsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleEventCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleEventFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCycleEvent`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCycleEventsOrderBy!]`): The method to use
      when ordering `BlastCycleEvent`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleEventCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BlastCycleEventFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cycle_wms_pallets = sgqlc.types.Field(BlastCycleWmsPalletsConnection, graphql_name='blastCycleWmsPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCycleWmsPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleWmsPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleWmsPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `BlastCycleWmsPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCycleWmsPalletsOrderBy!]`): The method to use
      when ordering `BlastCycleWmsPallet`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleWmsPalletCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`BlastCycleWmsPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_cycles = sgqlc.types.Field(BlastCyclesConnection, graphql_name='blastCycles', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastCyclesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastCycleCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCycle`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastCyclesOrderBy!]`): The method to use when
      ordering `BlastCycle`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastCycleCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastCycleFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_plan_pallets = sgqlc.types.Field(BlastPlanPalletsConnection, graphql_name='blastPlanPallets', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlanPalletsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastPlanPalletCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastPlanPalletFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastPlanPallet`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastPlanPalletsOrderBy!]`): The method to use
      when ordering `BlastPlanPallet`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastPlanPalletCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`BlastPlanPalletFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    blast_plans = sgqlc.types.Field(BlastPlansConnection, graphql_name='blastPlans', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BlastPlansOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(BlastPlanCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(BlastPlanFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastPlan`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[BlastPlansOrderBy!]`): The method to use when
      ordering `BlastPlan`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`BlastPlanCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`BlastPlanFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    item_freeze_times = sgqlc.types.Field(ItemFreezeTimesConnection, graphql_name='itemFreezeTimes', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemFreezeTimesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ItemFreezeTimeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemFreezeTimeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `ItemFreezeTime`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemFreezeTimesOrderBy!]`): The method to use when
      ordering `ItemFreezeTime`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`ItemFreezeTimeCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`ItemFreezeTimeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    item_short_category_names = sgqlc.types.Field(ItemShortCategoryNamesConnection, graphql_name='itemShortCategoryNames', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ItemShortCategoryNamesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(ItemShortCategoryNameCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(ItemShortCategoryNameFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `ItemShortCategoryName`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[ItemShortCategoryNamesOrderBy!]`): The method to
      use when ordering `ItemShortCategoryName`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`ItemShortCategoryNameCondition`): A condition to
      be used in determining which values should be returned by the
      collection.
    * `filter` (`ItemShortCategoryNameFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    recent_inbound_loads = sgqlc.types.Field(RecentInboundLoadsConnection, graphql_name='recentInboundLoads', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(RecentInboundLoadsOrderBy)), graphql_name='orderBy', default=['NATURAL'])),
        ('condition', sgqlc.types.Arg(RecentInboundLoadCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(RecentInboundLoadFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `RecentInboundLoad`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[RecentInboundLoadsOrderBy!]`): The method to use
      when ordering `RecentInboundLoad`. (default: `[NATURAL]`)
    * `condition` (`RecentInboundLoadCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`RecentInboundLoadFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    cursor_histories = sgqlc.types.Field(CursorHistoriesConnection, graphql_name='cursorHistories', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CursorHistoriesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(CursorHistoryCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CursorHistoryFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `CursorHistory`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CursorHistoriesOrderBy!]`): The method to use when
      ordering `CursorHistory`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`CursorHistoryCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`CursorHistoryFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    source_channel_cursors = sgqlc.types.Field(SourceChannelCursorsConnection, graphql_name='sourceChannelCursors', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelCursorsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceChannelCursorCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceChannelCursorFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `SourceChannelCursor`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourceChannelCursorsOrderBy!]`): The method to use
      when ordering `SourceChannelCursor`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceChannelCursorCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`SourceChannelCursorFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    edge_node_source_channel_accesses = sgqlc.types.Field(EdgeNodeSourceChannelAccessesConnection, graphql_name='edgeNodeSourceChannelAccesses', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(EdgeNodeSourceChannelAccessCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(EdgeNodeSourceChannelAccessFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `EdgeNodeSourceChannelAccess`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[EdgeNodeSourceChannelAccessesOrderBy!]`): The
      method to use when ordering `EdgeNodeSourceChannelAccess`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`EdgeNodeSourceChannelAccessCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`EdgeNodeSourceChannelAccessFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    edge_nodes = sgqlc.types.Field(EdgeNodesConnection, graphql_name='edgeNodes', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(EdgeNodeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(EdgeNodeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `EdgeNode`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[EdgeNodesOrderBy!]`): The method to use when
      ordering `EdgeNode`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`EdgeNodeCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`EdgeNodeFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    source_channels = sgqlc.types.Field(SourceChannelsConnection, graphql_name='sourceChannels', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceChannelCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceChannelFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `SourceChannel`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourceChannelsOrderBy!]`): The method to use when
      ordering `SourceChannel`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceChannelCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`SourceChannelFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    source_types = sgqlc.types.Field(SourceTypesConnection, graphql_name='sourceTypes', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceTypesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceTypeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceTypeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `SourceType`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourceTypesOrderBy!]`): The method to use when
      ordering `SourceType`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceTypeCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`SourceTypeFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    sources = sgqlc.types.Field(SourcesConnection, graphql_name='sources', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourcesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Source`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourcesOrderBy!]`): The method to use when
      ordering `Source`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`SourceFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    facility = sgqlc.types.Field(Facility, graphql_name='facility', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`Int!`)None
    '''

    facilities_test = sgqlc.types.Field(FacilitiesTest, graphql_name='facilitiesTest', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`Int!`)None
    '''

    facility_grouping = sgqlc.types.Field(FacilityGrouping, graphql_name='facilityGrouping', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    facility_workday_cost_center = sgqlc.types.Field(FacilityWorkdayCostCenter, graphql_name='facilityWorkdayCostCenter', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`Int!`)None
    '''

    workday_cost_center = sgqlc.types.Field('WorkdayCostCenter', graphql_name='workdayCostCenter', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    aggregate_warehouse_util_by_customer_raw = sgqlc.types.Field(AggregateWarehouseUtilByCustomerRaw, graphql_name='aggregateWarehouseUtilByCustomerRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    aggregate_warehouse_util_raw = sgqlc.types.Field(AggregateWarehouseUtilRaw, graphql_name='aggregateWarehouseUtilRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    aggregate_warehouse_volume_by_customer_raw = sgqlc.types.Field(AggregateWarehouseVolumeByCustomerRaw, graphql_name='aggregateWarehouseVolumeByCustomerRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    aggregate_warehouse_volume_raw = sgqlc.types.Field(AggregateWarehouseVolumeRaw, graphql_name='aggregateWarehouseVolumeRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    billing_history_raw = sgqlc.types.Field(BillingHistoryRaw, graphql_name='billingHistoryRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    bol_constants_raw = sgqlc.types.Field(BolConstantsRaw, graphql_name='bolConstantsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    broker_owners_raw = sgqlc.types.Field(BrokerOwnersRaw, graphql_name='brokerOwnersRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    carriers_raw = sgqlc.types.Field(CarriersRaw, graphql_name='carriersRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    case_picks_raw = sgqlc.types.Field(CasePicksRaw, graphql_name='casePicksRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    cuts_raw = sgqlc.types.Field(CutsRaw, graphql_name='cutsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    drivers_raw = sgqlc.types.Field(DriversRaw, graphql_name='driversRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    expected_inbound_order_details_raw = sgqlc.types.Field(ExpectedInboundOrderDetailsRaw, graphql_name='expectedInboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    expected_inbound_orders_raw = sgqlc.types.Field(ExpectedInboundOrdersRaw, graphql_name='expectedInboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    expected_outbound_order_details_raw = sgqlc.types.Field(ExpectedOutboundOrderDetailsRaw, graphql_name='expectedOutboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    expected_outbound_orders_raw = sgqlc.types.Field(ExpectedOutboundOrdersRaw, graphql_name='expectedOutboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    expected_pallets_raw = sgqlc.types.Field(ExpectedPalletsRaw, graphql_name='expectedPalletsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    hold_codes_raw = sgqlc.types.Field(HoldCodesRaw, graphql_name='holdCodesRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    hpp_raw = sgqlc.types.Field(HppRaw, graphql_name='hppRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inbound_catch_weight_raw = sgqlc.types.Field(InboundCatchWeightRaw, graphql_name='inboundCatchWeightRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inbound_loads_raw = sgqlc.types.Field(InboundLoadsRaw, graphql_name='inboundLoadsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inbound_order_comments_raw = sgqlc.types.Field(InboundOrderCommentsRaw, graphql_name='inboundOrderCommentsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inbound_order_detail_reference_codes_raw = sgqlc.types.Field(InboundOrderDetailReferenceCodesRaw, graphql_name='inboundOrderDetailReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inbound_order_details_raw = sgqlc.types.Field(InboundOrderDetailsRaw, graphql_name='inboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inbound_order_reference_codes_raw = sgqlc.types.Field(InboundOrderReferenceCodesRaw, graphql_name='inboundOrderReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inbound_orders_execution_raw = sgqlc.types.Field(InboundOrdersExecutionRaw, graphql_name='inboundOrdersExecutionRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inbound_orders_raw = sgqlc.types.Field(InboundOrdersRaw, graphql_name='inboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inbound_pallets_raw = sgqlc.types.Field(InboundPalletsRaw, graphql_name='inboundPalletsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inbound_truck_log_raw = sgqlc.types.Field(InboundTruckLogRaw, graphql_name='inboundTruckLogRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inventory_adjustments_raw = sgqlc.types.Field(InventoryAdjustmentsRaw, graphql_name='inventoryAdjustmentsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inventory_control_raw = sgqlc.types.Field(InventoryControlRaw, graphql_name='inventoryControlRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    inventory_hold_history_raw = sgqlc.types.Field(InventoryHoldHistoryRaw, graphql_name='inventoryHoldHistoryRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    item_reference_codes_raw = sgqlc.types.Field(ItemReferenceCodesRaw, graphql_name='itemReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    items_raw = sgqlc.types.Field(ItemsRaw, graphql_name='itemsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    lot_reference_codes_raw = sgqlc.types.Field(LotReferenceCodesRaw, graphql_name='lotReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    lot_transactions_raw = sgqlc.types.Field(LotTransactionsRaw, graphql_name='lotTransactionsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    lots_raw = sgqlc.types.Field(LotsRaw, graphql_name='lotsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    outbound_catch_weight_raw = sgqlc.types.Field(OutboundCatchWeightRaw, graphql_name='outboundCatchWeightRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    outbound_loads_raw = sgqlc.types.Field(OutboundLoadsRaw, graphql_name='outboundLoadsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    outbound_order_comments_raw = sgqlc.types.Field(OutboundOrderCommentsRaw, graphql_name='outboundOrderCommentsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    outbound_order_details_execution_raw = sgqlc.types.Field(OutboundOrderDetailsExecutionRaw, graphql_name='outboundOrderDetailsExecutionRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    outbound_order_details_raw = sgqlc.types.Field(OutboundOrderDetailsRaw, graphql_name='outboundOrderDetailsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    outbound_order_reference_codes_raw = sgqlc.types.Field(OutboundOrderReferenceCodesRaw, graphql_name='outboundOrderReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    outbound_orders_execution_raw = sgqlc.types.Field(OutboundOrdersExecutionRaw, graphql_name='outboundOrdersExecutionRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    outbound_orders_raw = sgqlc.types.Field(OutboundOrdersRaw, graphql_name='outboundOrdersRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    outbound_pallets_raw = sgqlc.types.Field(OutboundPalletsRaw, graphql_name='outboundPalletsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    outbound_truck_log_raw = sgqlc.types.Field(OutboundTruckLogRaw, graphql_name='outboundTruckLogRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    pallet_history_raw = sgqlc.types.Field(PalletHistoryRaw, graphql_name='palletHistoryRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    pallet_locations_raw = sgqlc.types.Field(PalletLocationsRaw, graphql_name='palletLocationsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    pallet_reference_codes_raw = sgqlc.types.Field(PalletReferenceCodesRaw, graphql_name='palletReferenceCodesRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    pallet_transactions_raw = sgqlc.types.Field(PalletTransactionsRaw, graphql_name='palletTransactionsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    pallets_raw = sgqlc.types.Field(PalletsRaw, graphql_name='palletsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    stop_locations_raw = sgqlc.types.Field('StopLocationsRaw', graphql_name='stopLocationsRaw', args=sgqlc.types.ArgDict((
        ('source_system_id', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='sourceSystemId', default=None)),
        ('name', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='name', default=None)),
))
    )
    '''Arguments:

    * `source_system_id` (`Int!`)None
    * `name` (`String!`)None
    '''

    warehouse_customers_config_raw = sgqlc.types.Field('WarehouseCustomersConfigRaw', graphql_name='warehouseCustomersConfigRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    warehouse_customers_raw = sgqlc.types.Field('WarehouseCustomersRaw', graphql_name='warehouseCustomersRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    warehouse_pick_activities_raw = sgqlc.types.Field('WarehousePickActivitiesRaw', graphql_name='warehousePickActivitiesRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    wms_facility_defaults_raw = sgqlc.types.Field('WmsFacilityDefaultsRaw', graphql_name='wmsFacilityDefaultsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    wms_system = sgqlc.types.Field('WmsSystem', graphql_name='wmsSystem', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`Int!`)None
    '''

    wooden_pallet_transactions_raw = sgqlc.types.Field('WoodenPalletTransactionsRaw', graphql_name='woodenPalletTransactionsRaw', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`String!`)None
    '''

    blast_cell_type = sgqlc.types.Field(BlastCellType, graphql_name='blastCellType', args=sgqlc.types.ArgDict((
        ('slug', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='slug', default=None)),
))
    )
    '''Arguments:

    * `slug` (`String!`)None
    '''

    blast_cell_wms_pallet_location = sgqlc.types.Field(BlastCellWmsPalletLocation, graphql_name='blastCellWmsPalletLocation', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(UUID), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`UUID!`)None
    '''

    blast_cell_wms_pallet = sgqlc.types.Field(BlastCellWmsPallet, graphql_name='blastCellWmsPallet', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(UUID), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`UUID!`)None
    '''

    blast_cell_wms_pallet_by_blast_cell_id_and_wms_pallet_id = sgqlc.types.Field(BlastCellWmsPallet, graphql_name='blastCellWmsPalletByBlastCellIdAndWmsPalletId', args=sgqlc.types.ArgDict((
        ('blast_cell_id', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='blastCellId', default=None)),
        ('wms_pallet_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='wmsPalletId', default=None)),
))
    )
    '''Arguments:

    * `blast_cell_id` (`Int!`)None
    * `wms_pallet_id` (`String!`)None
    '''

    blast_cell = sgqlc.types.Field(BlastCell, graphql_name='blastCell', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`Int!`)None
    '''

    blast_cycle_event = sgqlc.types.Field(BlastCycleEvent, graphql_name='blastCycleEvent', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(UUID), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`UUID!`)None
    '''

    blast_cycle_wms_pallet = sgqlc.types.Field(BlastCycleWmsPallet, graphql_name='blastCycleWmsPallet', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(UUID), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`UUID!`)None
    '''

    blast_cycle = sgqlc.types.Field(BlastCycle, graphql_name='blastCycle', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`Int!`)None
    '''

    blast_plan_pallet = sgqlc.types.Field(BlastPlanPallet, graphql_name='blastPlanPallet', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(UUID), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`UUID!`)None
    '''

    blast_plan = sgqlc.types.Field(BlastPlan, graphql_name='blastPlan', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(UUID), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`UUID!`)None
    '''

    item_freeze_time = sgqlc.types.Field(ItemFreezeTime, graphql_name='itemFreezeTime', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(UUID), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`UUID!`)None
    '''

    item_short_category_name = sgqlc.types.Field(ItemShortCategoryName, graphql_name='itemShortCategoryName', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(UUID), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`UUID!`)None
    '''

    cursor_history = sgqlc.types.Field(CursorHistory, graphql_name='cursorHistory', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(UUID), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`UUID!`)None
    '''

    source_channel_cursor = sgqlc.types.Field('SourceChannelCursor', graphql_name='sourceChannelCursor', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(UUID), graphql_name='id', default=None)),
))
    )
    '''Arguments:

    * `id` (`UUID!`)None
    '''

    edge_node_source_channel_access = sgqlc.types.Field(EdgeNodeSourceChannelAccess, graphql_name='edgeNodeSourceChannelAccess', args=sgqlc.types.ArgDict((
        ('edge_node_client_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='edgeNodeClientId', default=None)),
        ('source_channel_name', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='sourceChannelName', default=None)),
        ('action', sgqlc.types.Arg(sgqlc.types.non_null(EnumEdgeNodeSourceChannelAccessAction), graphql_name='action', default=None)),
))
    )
    '''Arguments:

    * `edge_node_client_id` (`String!`)None
    * `source_channel_name` (`String!`)None
    * `action` (`EnumEdgeNodeSourceChannelAccessAction!`)None
    '''

    edge_node = sgqlc.types.Field(EdgeNode, graphql_name='edgeNode', args=sgqlc.types.ArgDict((
        ('client_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='clientId', default=None)),
))
    )
    '''Arguments:

    * `client_id` (`String!`)None
    '''

    source_channel = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannel', args=sgqlc.types.ArgDict((
        ('name', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='name', default=None)),
))
    )
    '''Arguments:

    * `name` (`String!`)None
    '''

    source_type = sgqlc.types.Field('SourceType', graphql_name='sourceType', args=sgqlc.types.ArgDict((
        ('slug', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='slug', default=None)),
))
    )
    '''Arguments:

    * `slug` (`String!`)None
    '''

    source = sgqlc.types.Field('Source', graphql_name='source', args=sgqlc.types.ArgDict((
        ('slug', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='slug', default=None)),
))
    )
    '''Arguments:

    * `slug` (`String!`)None
    '''

    choose_timestamp_by_precedence = sgqlc.types.Field(Datetime, graphql_name='chooseTimestampByPrecedence', args=sgqlc.types.ArgDict((
        ('first_date', sgqlc.types.Arg(Datetime, graphql_name='firstDate', default=None)),
        ('second_date', sgqlc.types.Arg(Datetime, graphql_name='secondDate', default=None)),
))
    )
    '''Arguments:

    * `first_date` (`Datetime`)None
    * `second_date` (`Datetime`)None
    '''

    get_sfdc_source_system_id = sgqlc.types.Field(String, graphql_name='getSfdcSourceSystemId', args=sgqlc.types.ArgDict((
        ('wms_system_id', sgqlc.types.Arg(Int, graphql_name='wmsSystemId', default=None)),
        ('warehouse_facility_id', sgqlc.types.Arg(String, graphql_name='warehouseFacilityId', default=None)),
))
    )
    '''Arguments:

    * `wms_system_id` (`Int`)None
    * `warehouse_facility_id` (`String`)None
    '''

    get_sfdc_source_system_id_test = sgqlc.types.Field(String, graphql_name='getSfdcSourceSystemIdTest', args=sgqlc.types.ArgDict((
        ('wms_system_id', sgqlc.types.Arg(Int, graphql_name='wmsSystemId', default=None)),
        ('warehouse_facility_id', sgqlc.types.Arg(String, graphql_name='warehouseFacilityId', default=None)),
))
    )
    '''Arguments:

    * `wms_system_id` (`Int`)None
    * `warehouse_facility_id` (`String`)None
    '''

    make_inbound_order_id = sgqlc.types.Field(String, graphql_name='makeInboundOrderId', args=sgqlc.types.ArgDict((
        ('source_system_id', sgqlc.types.Arg(Int, graphql_name='sourceSystemId', default=None)),
        ('warehouse_facility_id', sgqlc.types.Arg(String, graphql_name='warehouseFacilityId', default=None)),
        ('warehouse_order_number', sgqlc.types.Arg(String, graphql_name='warehouseOrderNumber', default=None)),
))
    )
    '''Arguments:

    * `source_system_id` (`Int`)None
    * `warehouse_facility_id` (`String`)None
    * `warehouse_order_number` (`String`)None
    '''

    make_item_id = sgqlc.types.Field(String, graphql_name='makeItemId', args=sgqlc.types.ArgDict((
        ('source_system_id', sgqlc.types.Arg(Int, graphql_name='sourceSystemId', default=None)),
        ('warehouse_facility_id', sgqlc.types.Arg(String, graphql_name='warehouseFacilityId', default=None)),
        ('item_code', sgqlc.types.Arg(String, graphql_name='itemCode', default=None)),
))
    )
    '''Arguments:

    * `source_system_id` (`Int`)None
    * `warehouse_facility_id` (`String`)None
    * `item_code` (`String`)None
    '''

    make_load_id = sgqlc.types.Field(String, graphql_name='makeLoadId', args=sgqlc.types.ArgDict((
        ('source_system_id', sgqlc.types.Arg(Int, graphql_name='sourceSystemId', default=None)),
        ('warehouse_facility_id', sgqlc.types.Arg(String, graphql_name='warehouseFacilityId', default=None)),
        ('load_reference_number', sgqlc.types.Arg(String, graphql_name='loadReferenceNumber', default=None)),
))
    )
    '''Arguments:

    * `source_system_id` (`Int`)None
    * `warehouse_facility_id` (`String`)None
    * `load_reference_number` (`String`)None
    '''

    make_lot_id = sgqlc.types.Field(String, graphql_name='makeLotId', args=sgqlc.types.ArgDict((
        ('source_system_id', sgqlc.types.Arg(Int, graphql_name='sourceSystemId', default=None)),
        ('warehouse_facility_id', sgqlc.types.Arg(String, graphql_name='warehouseFacilityId', default=None)),
        ('lot_code', sgqlc.types.Arg(String, graphql_name='lotCode', default=None)),
))
    )
    '''Arguments:

    * `source_system_id` (`Int`)None
    * `warehouse_facility_id` (`String`)None
    * `lot_code` (`String`)None
    '''

    make_outbound_order_id = sgqlc.types.Field(String, graphql_name='makeOutboundOrderId', args=sgqlc.types.ArgDict((
        ('source_system_id', sgqlc.types.Arg(Int, graphql_name='sourceSystemId', default=None)),
        ('warehouse_facility_id', sgqlc.types.Arg(String, graphql_name='warehouseFacilityId', default=None)),
        ('warehouse_order_number', sgqlc.types.Arg(String, graphql_name='warehouseOrderNumber', default=None)),
))
    )
    '''Arguments:

    * `source_system_id` (`Int`)None
    * `warehouse_facility_id` (`String`)None
    * `warehouse_order_number` (`String`)None
    '''

    make_warehouse_customer_id = sgqlc.types.Field(String, graphql_name='makeWarehouseCustomerId', args=sgqlc.types.ArgDict((
        ('source_system_id', sgqlc.types.Arg(Int, graphql_name='sourceSystemId', default=None)),
        ('warehouse_facility_id', sgqlc.types.Arg(String, graphql_name='warehouseFacilityId', default=None)),
        ('customer_code', sgqlc.types.Arg(String, graphql_name='customerCode', default=None)),
        ('customer_enterprise_id', sgqlc.types.Arg(String, graphql_name='customerEnterpriseId', default=None)),
))
    )
    '''Arguments:

    * `source_system_id` (`Int`)None
    * `warehouse_facility_id` (`String`)None
    * `customer_code` (`String`)None
    * `customer_enterprise_id` (`String`)None
    '''

    current_cell_cycles = sgqlc.types.Field(BlastCyclesConnection, graphql_name='currentCellCycles', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('filter', sgqlc.types.Arg(BlastCycleFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `BlastCycle`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `filter` (`BlastCycleFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    facility_blast_cycle_stats = sgqlc.types.Field(FacilityCycleStatsConnection, graphql_name='facilityBlastCycleStats', args=sgqlc.types.ArgDict((
        ('facilityid', sgqlc.types.Arg(Int, graphql_name='facilityid', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('filter', sgqlc.types.Arg(FacilityCycleStatFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `FacilityCycleStat`.

    Arguments:

    * `facilityid` (`Int`)None
    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `filter` (`FacilityCycleStatFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    facility_by_node_id = sgqlc.types.Field(Facility, graphql_name='facilityByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `Facility` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `Facility`.
    '''

    facilities_test_by_node_id = sgqlc.types.Field(FacilitiesTest, graphql_name='facilitiesTestByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `FacilitiesTest` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `FacilitiesTest`.
    '''

    facility_grouping_by_node_id = sgqlc.types.Field(FacilityGrouping, graphql_name='facilityGroupingByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `FacilityGrouping` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `FacilityGrouping`.
    '''

    facility_workday_cost_center_by_node_id = sgqlc.types.Field(FacilityWorkdayCostCenter, graphql_name='facilityWorkdayCostCenterByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `FacilityWorkdayCostCenter` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `FacilityWorkdayCostCenter`.
    '''

    workday_cost_center_by_node_id = sgqlc.types.Field('WorkdayCostCenter', graphql_name='workdayCostCenterByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `WorkdayCostCenter` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `WorkdayCostCenter`.
    '''

    aggregate_warehouse_util_by_customer_raw_by_node_id = sgqlc.types.Field(AggregateWarehouseUtilByCustomerRaw, graphql_name='aggregateWarehouseUtilByCustomerRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `AggregateWarehouseUtilByCustomerRaw` using its
    globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `AggregateWarehouseUtilByCustomerRaw`.
    '''

    aggregate_warehouse_util_raw_by_node_id = sgqlc.types.Field(AggregateWarehouseUtilRaw, graphql_name='aggregateWarehouseUtilRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `AggregateWarehouseUtilRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `AggregateWarehouseUtilRaw`.
    '''

    aggregate_warehouse_volume_by_customer_raw_by_node_id = sgqlc.types.Field(AggregateWarehouseVolumeByCustomerRaw, graphql_name='aggregateWarehouseVolumeByCustomerRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `AggregateWarehouseVolumeByCustomerRaw` using its
    globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `AggregateWarehouseVolumeByCustomerRaw`.
    '''

    aggregate_warehouse_volume_raw_by_node_id = sgqlc.types.Field(AggregateWarehouseVolumeRaw, graphql_name='aggregateWarehouseVolumeRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `AggregateWarehouseVolumeRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `AggregateWarehouseVolumeRaw`.
    '''

    billing_history_raw_by_node_id = sgqlc.types.Field(BillingHistoryRaw, graphql_name='billingHistoryRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BillingHistoryRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BillingHistoryRaw`.
    '''

    bol_constants_raw_by_node_id = sgqlc.types.Field(BolConstantsRaw, graphql_name='bolConstantsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BolConstantsRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BolConstantsRaw`.
    '''

    broker_owners_raw_by_node_id = sgqlc.types.Field(BrokerOwnersRaw, graphql_name='brokerOwnersRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BrokerOwnersRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BrokerOwnersRaw`.
    '''

    carriers_raw_by_node_id = sgqlc.types.Field(CarriersRaw, graphql_name='carriersRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `CarriersRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `CarriersRaw`.
    '''

    case_picks_raw_by_node_id = sgqlc.types.Field(CasePicksRaw, graphql_name='casePicksRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `CasePicksRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `CasePicksRaw`.
    '''

    cuts_raw_by_node_id = sgqlc.types.Field(CutsRaw, graphql_name='cutsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `CutsRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `CutsRaw`.
    '''

    drivers_raw_by_node_id = sgqlc.types.Field(DriversRaw, graphql_name='driversRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `DriversRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `DriversRaw`.
    '''

    expected_inbound_order_details_raw_by_node_id = sgqlc.types.Field(ExpectedInboundOrderDetailsRaw, graphql_name='expectedInboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `ExpectedInboundOrderDetailsRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `ExpectedInboundOrderDetailsRaw`.
    '''

    expected_inbound_orders_raw_by_node_id = sgqlc.types.Field(ExpectedInboundOrdersRaw, graphql_name='expectedInboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `ExpectedInboundOrdersRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `ExpectedInboundOrdersRaw`.
    '''

    expected_outbound_order_details_raw_by_node_id = sgqlc.types.Field(ExpectedOutboundOrderDetailsRaw, graphql_name='expectedOutboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `ExpectedOutboundOrderDetailsRaw` using its
    globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `ExpectedOutboundOrderDetailsRaw`.
    '''

    expected_outbound_orders_raw_by_node_id = sgqlc.types.Field(ExpectedOutboundOrdersRaw, graphql_name='expectedOutboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `ExpectedOutboundOrdersRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `ExpectedOutboundOrdersRaw`.
    '''

    expected_pallets_raw_by_node_id = sgqlc.types.Field(ExpectedPalletsRaw, graphql_name='expectedPalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `ExpectedPalletsRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `ExpectedPalletsRaw`.
    '''

    hold_codes_raw_by_node_id = sgqlc.types.Field(HoldCodesRaw, graphql_name='holdCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `HoldCodesRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `HoldCodesRaw`.
    '''

    hpp_raw_by_node_id = sgqlc.types.Field(HppRaw, graphql_name='hppRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `HppRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `HppRaw`.
    '''

    inbound_catch_weight_raw_by_node_id = sgqlc.types.Field(InboundCatchWeightRaw, graphql_name='inboundCatchWeightRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InboundCatchWeightRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InboundCatchWeightRaw`.
    '''

    inbound_loads_raw_by_node_id = sgqlc.types.Field(InboundLoadsRaw, graphql_name='inboundLoadsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InboundLoadsRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InboundLoadsRaw`.
    '''

    inbound_order_comments_raw_by_node_id = sgqlc.types.Field(InboundOrderCommentsRaw, graphql_name='inboundOrderCommentsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InboundOrderCommentsRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InboundOrderCommentsRaw`.
    '''

    inbound_order_detail_reference_codes_raw_by_node_id = sgqlc.types.Field(InboundOrderDetailReferenceCodesRaw, graphql_name='inboundOrderDetailReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InboundOrderDetailReferenceCodesRaw` using its
    globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InboundOrderDetailReferenceCodesRaw`.
    '''

    inbound_order_details_raw_by_node_id = sgqlc.types.Field(InboundOrderDetailsRaw, graphql_name='inboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InboundOrderDetailsRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InboundOrderDetailsRaw`.
    '''

    inbound_order_reference_codes_raw_by_node_id = sgqlc.types.Field(InboundOrderReferenceCodesRaw, graphql_name='inboundOrderReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InboundOrderReferenceCodesRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InboundOrderReferenceCodesRaw`.
    '''

    inbound_orders_execution_raw_by_node_id = sgqlc.types.Field(InboundOrdersExecutionRaw, graphql_name='inboundOrdersExecutionRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InboundOrdersExecutionRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InboundOrdersExecutionRaw`.
    '''

    inbound_orders_raw_by_node_id = sgqlc.types.Field(InboundOrdersRaw, graphql_name='inboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InboundOrdersRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InboundOrdersRaw`.
    '''

    inbound_pallets_raw_by_node_id = sgqlc.types.Field(InboundPalletsRaw, graphql_name='inboundPalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InboundPalletsRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InboundPalletsRaw`.
    '''

    inbound_truck_log_raw_by_node_id = sgqlc.types.Field(InboundTruckLogRaw, graphql_name='inboundTruckLogRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InboundTruckLogRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InboundTruckLogRaw`.
    '''

    inventory_adjustments_raw_by_node_id = sgqlc.types.Field(InventoryAdjustmentsRaw, graphql_name='inventoryAdjustmentsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InventoryAdjustmentsRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InventoryAdjustmentsRaw`.
    '''

    inventory_control_raw_by_node_id = sgqlc.types.Field(InventoryControlRaw, graphql_name='inventoryControlRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InventoryControlRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InventoryControlRaw`.
    '''

    inventory_hold_history_raw_by_node_id = sgqlc.types.Field(InventoryHoldHistoryRaw, graphql_name='inventoryHoldHistoryRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `InventoryHoldHistoryRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `InventoryHoldHistoryRaw`.
    '''

    item_reference_codes_raw_by_node_id = sgqlc.types.Field(ItemReferenceCodesRaw, graphql_name='itemReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `ItemReferenceCodesRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `ItemReferenceCodesRaw`.
    '''

    items_raw_by_node_id = sgqlc.types.Field(ItemsRaw, graphql_name='itemsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `ItemsRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `ItemsRaw`.
    '''

    lot_reference_codes_raw_by_node_id = sgqlc.types.Field(LotReferenceCodesRaw, graphql_name='lotReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `LotReferenceCodesRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `LotReferenceCodesRaw`.
    '''

    lot_transactions_raw_by_node_id = sgqlc.types.Field(LotTransactionsRaw, graphql_name='lotTransactionsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `LotTransactionsRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `LotTransactionsRaw`.
    '''

    lots_raw_by_node_id = sgqlc.types.Field(LotsRaw, graphql_name='lotsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `LotsRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `LotsRaw`.
    '''

    outbound_catch_weight_raw_by_node_id = sgqlc.types.Field(OutboundCatchWeightRaw, graphql_name='outboundCatchWeightRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `OutboundCatchWeightRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `OutboundCatchWeightRaw`.
    '''

    outbound_loads_raw_by_node_id = sgqlc.types.Field(OutboundLoadsRaw, graphql_name='outboundLoadsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `OutboundLoadsRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `OutboundLoadsRaw`.
    '''

    outbound_order_comments_raw_by_node_id = sgqlc.types.Field(OutboundOrderCommentsRaw, graphql_name='outboundOrderCommentsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `OutboundOrderCommentsRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `OutboundOrderCommentsRaw`.
    '''

    outbound_order_details_execution_raw_by_node_id = sgqlc.types.Field(OutboundOrderDetailsExecutionRaw, graphql_name='outboundOrderDetailsExecutionRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `OutboundOrderDetailsExecutionRaw` using its
    globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `OutboundOrderDetailsExecutionRaw`.
    '''

    outbound_order_details_raw_by_node_id = sgqlc.types.Field(OutboundOrderDetailsRaw, graphql_name='outboundOrderDetailsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `OutboundOrderDetailsRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `OutboundOrderDetailsRaw`.
    '''

    outbound_order_reference_codes_raw_by_node_id = sgqlc.types.Field(OutboundOrderReferenceCodesRaw, graphql_name='outboundOrderReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `OutboundOrderReferenceCodesRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `OutboundOrderReferenceCodesRaw`.
    '''

    outbound_orders_execution_raw_by_node_id = sgqlc.types.Field(OutboundOrdersExecutionRaw, graphql_name='outboundOrdersExecutionRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `OutboundOrdersExecutionRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `OutboundOrdersExecutionRaw`.
    '''

    outbound_orders_raw_by_node_id = sgqlc.types.Field(OutboundOrdersRaw, graphql_name='outboundOrdersRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `OutboundOrdersRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `OutboundOrdersRaw`.
    '''

    outbound_pallets_raw_by_node_id = sgqlc.types.Field(OutboundPalletsRaw, graphql_name='outboundPalletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `OutboundPalletsRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `OutboundPalletsRaw`.
    '''

    outbound_truck_log_raw_by_node_id = sgqlc.types.Field(OutboundTruckLogRaw, graphql_name='outboundTruckLogRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `OutboundTruckLogRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `OutboundTruckLogRaw`.
    '''

    pallet_history_raw_by_node_id = sgqlc.types.Field(PalletHistoryRaw, graphql_name='palletHistoryRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `PalletHistoryRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `PalletHistoryRaw`.
    '''

    pallet_locations_raw_by_node_id = sgqlc.types.Field(PalletLocationsRaw, graphql_name='palletLocationsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `PalletLocationsRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `PalletLocationsRaw`.
    '''

    pallet_reference_codes_raw_by_node_id = sgqlc.types.Field(PalletReferenceCodesRaw, graphql_name='palletReferenceCodesRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `PalletReferenceCodesRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `PalletReferenceCodesRaw`.
    '''

    pallet_transactions_raw_by_node_id = sgqlc.types.Field(PalletTransactionsRaw, graphql_name='palletTransactionsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `PalletTransactionsRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `PalletTransactionsRaw`.
    '''

    pallets_raw_by_node_id = sgqlc.types.Field(PalletsRaw, graphql_name='palletsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `PalletsRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `PalletsRaw`.
    '''

    stop_locations_raw_by_node_id = sgqlc.types.Field('StopLocationsRaw', graphql_name='stopLocationsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `StopLocationsRaw` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `StopLocationsRaw`.
    '''

    warehouse_customers_config_raw_by_node_id = sgqlc.types.Field('WarehouseCustomersConfigRaw', graphql_name='warehouseCustomersConfigRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `WarehouseCustomersConfigRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `WarehouseCustomersConfigRaw`.
    '''

    warehouse_customers_raw_by_node_id = sgqlc.types.Field('WarehouseCustomersRaw', graphql_name='warehouseCustomersRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `WarehouseCustomersRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `WarehouseCustomersRaw`.
    '''

    warehouse_pick_activities_raw_by_node_id = sgqlc.types.Field('WarehousePickActivitiesRaw', graphql_name='warehousePickActivitiesRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `WarehousePickActivitiesRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `WarehousePickActivitiesRaw`.
    '''

    wms_facility_defaults_raw_by_node_id = sgqlc.types.Field('WmsFacilityDefaultsRaw', graphql_name='wmsFacilityDefaultsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `WmsFacilityDefaultsRaw` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `WmsFacilityDefaultsRaw`.
    '''

    wms_system_by_node_id = sgqlc.types.Field('WmsSystem', graphql_name='wmsSystemByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `WmsSystem` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `WmsSystem`.
    '''

    wooden_pallet_transactions_raw_by_node_id = sgqlc.types.Field('WoodenPalletTransactionsRaw', graphql_name='woodenPalletTransactionsRawByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `WoodenPalletTransactionsRaw` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `WoodenPalletTransactionsRaw`.
    '''

    blast_cell_type_by_node_id = sgqlc.types.Field(BlastCellType, graphql_name='blastCellTypeByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BlastCellType` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BlastCellType`.
    '''

    blast_cell_wms_pallet_location_by_node_id = sgqlc.types.Field(BlastCellWmsPalletLocation, graphql_name='blastCellWmsPalletLocationByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BlastCellWmsPalletLocation` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BlastCellWmsPalletLocation`.
    '''

    blast_cell_wms_pallet_by_node_id = sgqlc.types.Field(BlastCellWmsPallet, graphql_name='blastCellWmsPalletByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BlastCellWmsPallet` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BlastCellWmsPallet`.
    '''

    blast_cell_by_node_id = sgqlc.types.Field(BlastCell, graphql_name='blastCellByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BlastCell` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BlastCell`.
    '''

    blast_cycle_event_by_node_id = sgqlc.types.Field(BlastCycleEvent, graphql_name='blastCycleEventByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BlastCycleEvent` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BlastCycleEvent`.
    '''

    blast_cycle_wms_pallet_by_node_id = sgqlc.types.Field(BlastCycleWmsPallet, graphql_name='blastCycleWmsPalletByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BlastCycleWmsPallet` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BlastCycleWmsPallet`.
    '''

    blast_cycle_by_node_id = sgqlc.types.Field(BlastCycle, graphql_name='blastCycleByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BlastCycle` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BlastCycle`.
    '''

    blast_plan_pallet_by_node_id = sgqlc.types.Field(BlastPlanPallet, graphql_name='blastPlanPalletByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BlastPlanPallet` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BlastPlanPallet`.
    '''

    blast_plan_by_node_id = sgqlc.types.Field(BlastPlan, graphql_name='blastPlanByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `BlastPlan` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `BlastPlan`.
    '''

    item_freeze_time_by_node_id = sgqlc.types.Field(ItemFreezeTime, graphql_name='itemFreezeTimeByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `ItemFreezeTime` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `ItemFreezeTime`.
    '''

    item_short_category_name_by_node_id = sgqlc.types.Field(ItemShortCategoryName, graphql_name='itemShortCategoryNameByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `ItemShortCategoryName` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `ItemShortCategoryName`.
    '''

    cursor_history_by_node_id = sgqlc.types.Field(CursorHistory, graphql_name='cursorHistoryByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `CursorHistory` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `CursorHistory`.
    '''

    source_channel_cursor_by_node_id = sgqlc.types.Field('SourceChannelCursor', graphql_name='sourceChannelCursorByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `SourceChannelCursor` using its globally unique
    `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `SourceChannelCursor`.
    '''

    edge_node_source_channel_access_by_node_id = sgqlc.types.Field(EdgeNodeSourceChannelAccess, graphql_name='edgeNodeSourceChannelAccessByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `EdgeNodeSourceChannelAccess` using its globally
    unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `EdgeNodeSourceChannelAccess`.
    '''

    edge_node_by_node_id = sgqlc.types.Field(EdgeNode, graphql_name='edgeNodeByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `EdgeNode` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `EdgeNode`.
    '''

    source_channel_by_node_id = sgqlc.types.Field('SourceChannel', graphql_name='sourceChannelByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `SourceChannel` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `SourceChannel`.
    '''

    source_type_by_node_id = sgqlc.types.Field('SourceType', graphql_name='sourceTypeByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `SourceType` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `SourceType`.
    '''

    source_by_node_id = sgqlc.types.Field('Source', graphql_name='sourceByNodeId', args=sgqlc.types.ArgDict((
        ('node_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='nodeId', default=None)),
))
    )
    '''Reads a single `Source` using its globally unique `ID`.

    Arguments:

    * `node_id` (`ID!`): The globally unique `ID` to be used in
      selecting a single `Source`.
    '''



class Source(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('slug', 'source_type_id', 'name', 'created_at', 'updated_at', 'asset_id', 'source_type', 'source_channels_by_source_slug', 'cursor_histories_by_source_slug', 'source_channel_cursors_by_source_channel_source_slug_and_cursor_id', 'source_channels_by_cursor_history_source_slug_and_source_channel_name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')

    source_type_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceTypeId')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    asset_id = sgqlc.types.Field(UUID, graphql_name='assetId')

    source_type = sgqlc.types.Field('SourceType', graphql_name='sourceType')
    '''Reads a single `SourceType` that is related to this `Source`.'''

    source_channels_by_source_slug = sgqlc.types.Field(sgqlc.types.non_null(SourceChannelsConnection), graphql_name='sourceChannelsBySourceSlug', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceChannelCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceChannelFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `SourceChannel`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourceChannelsOrderBy!]`): The method to use when
      ordering `SourceChannel`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceChannelCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`SourceChannelFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    cursor_histories_by_source_slug = sgqlc.types.Field(sgqlc.types.non_null(CursorHistoriesConnection), graphql_name='cursorHistoriesBySourceSlug', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CursorHistoriesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(CursorHistoryCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CursorHistoryFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `CursorHistory`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CursorHistoriesOrderBy!]`): The method to use when
      ordering `CursorHistory`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`CursorHistoryCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`CursorHistoryFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    source_channel_cursors_by_source_channel_source_slug_and_cursor_id = sgqlc.types.Field(sgqlc.types.non_null(SourceSourceChannelCursorsBySourceChannelSourceSlugAndCursorIdManyToManyConnection), graphql_name='sourceChannelCursorsBySourceChannelSourceSlugAndCursorId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelCursorsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceChannelCursorCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceChannelCursorFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `SourceChannelCursor`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourceChannelCursorsOrderBy!]`): The method to use
      when ordering `SourceChannelCursor`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceChannelCursorCondition`): A condition to be
      used in determining which values should be returned by the
      collection.
    * `filter` (`SourceChannelCursorFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    source_channels_by_cursor_history_source_slug_and_source_channel_name = sgqlc.types.Field(sgqlc.types.non_null(SourceSourceChannelsByCursorHistorySourceSlugAndSourceChannelNameManyToManyConnection), graphql_name='sourceChannelsByCursorHistorySourceSlugAndSourceChannelName', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceChannelCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceChannelFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `SourceChannel`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourceChannelsOrderBy!]`): The method to use when
      ordering `SourceChannel`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceChannelCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`SourceChannelFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''



class SourceChannel(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('name', 'description', 'created_at', 'updated_at', 'source_slug', 'cursor_id', 'source_by_source_slug', 'cursor', 'edge_node_source_channel_accesses_by_source_channel_name', 'cursor_histories_by_source_channel_name', 'edge_nodes_by_edge_node_source_channel_access_source_channel_name_and_edge_node_client_id', 'sources_by_cursor_history_source_channel_name_and_source_slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    description = sgqlc.types.Field(String, graphql_name='description')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    source_slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceSlug')

    cursor_id = sgqlc.types.Field(UUID, graphql_name='cursorId')

    source_by_source_slug = sgqlc.types.Field(Source, graphql_name='sourceBySourceSlug')
    '''Reads a single `Source` that is related to this `SourceChannel`.'''

    cursor = sgqlc.types.Field('SourceChannelCursor', graphql_name='cursor')
    '''Reads a single `SourceChannelCursor` that is related to this
    `SourceChannel`.
    '''

    edge_node_source_channel_accesses_by_source_channel_name = sgqlc.types.Field(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesConnection), graphql_name='edgeNodeSourceChannelAccessesBySourceChannelName', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodeSourceChannelAccessesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(EdgeNodeSourceChannelAccessCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(EdgeNodeSourceChannelAccessFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `EdgeNodeSourceChannelAccess`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[EdgeNodeSourceChannelAccessesOrderBy!]`): The
      method to use when ordering `EdgeNodeSourceChannelAccess`.
      (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`EdgeNodeSourceChannelAccessCondition`): A
      condition to be used in determining which values should be
      returned by the collection.
    * `filter` (`EdgeNodeSourceChannelAccessFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    cursor_histories_by_source_channel_name = sgqlc.types.Field(sgqlc.types.non_null(CursorHistoriesConnection), graphql_name='cursorHistoriesBySourceChannelName', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CursorHistoriesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(CursorHistoryCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(CursorHistoryFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `CursorHistory`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[CursorHistoriesOrderBy!]`): The method to use when
      ordering `CursorHistory`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`CursorHistoryCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`CursorHistoryFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    edge_nodes_by_edge_node_source_channel_access_source_channel_name_and_edge_node_client_id = sgqlc.types.Field(sgqlc.types.non_null(SourceChannelEdgeNodesByEdgeNodeSourceChannelAccessSourceChannelNameAndEdgeNodeClientIdManyToManyConnection), graphql_name='edgeNodesByEdgeNodeSourceChannelAccessSourceChannelNameAndEdgeNodeClientId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EdgeNodesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(EdgeNodeCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(EdgeNodeFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `EdgeNode`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[EdgeNodesOrderBy!]`): The method to use when
      ordering `EdgeNode`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`EdgeNodeCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`EdgeNodeFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''

    sources_by_cursor_history_source_channel_name_and_source_slug = sgqlc.types.Field(sgqlc.types.non_null(SourceChannelSourcesByCursorHistorySourceChannelNameAndSourceSlugManyToManyConnection), graphql_name='sourcesByCursorHistorySourceChannelNameAndSourceSlug', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourcesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Source`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourcesOrderBy!]`): The method to use when
      ordering `Source`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`SourceFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''



class SourceChannelCursor(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'reflow_cursor', 'channel_cursor', 'headers', 'created_at', 'updated_at', 'reflow_metadata', 'source_channels', 'sources_by_source_channel_cursor_id_and_source_slug')
    id = sgqlc.types.Field(sgqlc.types.non_null(UUID), graphql_name='id')

    reflow_cursor = sgqlc.types.Field(BigInt, graphql_name='reflowCursor')

    channel_cursor = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='channelCursor')

    headers = sgqlc.types.Field(JSON, graphql_name='headers')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')

    reflow_metadata = sgqlc.types.Field(JSON, graphql_name='reflowMetadata')

    source_channels = sgqlc.types.Field(sgqlc.types.non_null(SourceChannelsConnection), graphql_name='sourceChannels', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourceChannelsOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceChannelCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceChannelFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `SourceChannel`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourceChannelsOrderBy!]`): The method to use when
      ordering `SourceChannel`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceChannelCondition`): A condition to be used
      in determining which values should be returned by the
      collection.
    * `filter` (`SourceChannelFilter`): A filter to be used in
      determining which values should be returned by the collection.
    '''

    sources_by_source_channel_cursor_id_and_source_slug = sgqlc.types.Field(sgqlc.types.non_null(SourceChannelCursorSourcesBySourceChannelCursorIdAndSourceSlugManyToManyConnection), graphql_name='sourcesBySourceChannelCursorIdAndSourceSlug', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourcesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Source`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourcesOrderBy!]`): The method to use when
      ordering `Source`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`SourceFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''



class SourceType(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('slug', 'name', 'created_at', 'updated_at', 'sources')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    sources = sgqlc.types.Field(sgqlc.types.non_null(SourcesConnection), graphql_name='sources', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(SourcesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(SourceCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(SourceFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Source`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[SourcesOrderBy!]`): The method to use when
      ordering `Source`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`SourceCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`SourceFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''



class StopLocationsRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'name', 'contact_first_name', 'contact_last_name', 'stop_location_code', 'address1', 'address2', 'address3', 'city', 'state', 'zip', 'location_type', 'effective_date', 'phone', 'fax', 'email_address', 'source_row_id', 'warehouse_facility_id', 'updated_at', 'deleted_at', 'created_at', 'external_system_id', 'external_system_name', '_version', '_id', 'id')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')

    contact_first_name = sgqlc.types.Field(String, graphql_name='contactFirstName')

    contact_last_name = sgqlc.types.Field(String, graphql_name='contactLastName')

    stop_location_code = sgqlc.types.Field(BigInt, graphql_name='stopLocationCode')

    address1 = sgqlc.types.Field(String, graphql_name='address1')

    address2 = sgqlc.types.Field(String, graphql_name='address2')

    address3 = sgqlc.types.Field(String, graphql_name='address3')

    city = sgqlc.types.Field(String, graphql_name='city')

    state = sgqlc.types.Field(String, graphql_name='state')

    zip = sgqlc.types.Field(String, graphql_name='zip')

    location_type = sgqlc.types.Field(String, graphql_name='locationType')

    effective_date = sgqlc.types.Field(Datetime, graphql_name='effectiveDate')

    phone = sgqlc.types.Field(String, graphql_name='phone')

    fax = sgqlc.types.Field(String, graphql_name='fax')

    email_address = sgqlc.types.Field(String, graphql_name='emailAddress')

    source_row_id = sgqlc.types.Field(BigInt, graphql_name='sourceRowId')

    warehouse_facility_id = sgqlc.types.Field(String, graphql_name='warehouseFacilityId')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    external_system_id = sgqlc.types.Field(Int, graphql_name='externalSystemId')

    external_system_name = sgqlc.types.Field(String, graphql_name='externalSystemName')

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')



class WarehouseCustomersConfigRaw(sgqlc.types.Type, Node):
    '''Stores WMS specific flags for a customer to be used in operational
    reporting
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'customer_id', 'customer_code', 'is_bulk_crossdock', 'is_bol_expiration_date_visible', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Unique code for the customer .'''

    is_bulk_crossdock = sgqlc.types.Field(Boolean, graphql_name='isBulkCrossdock')
    '''Flag for whether the customer uses bulk cross docking'''

    is_bol_expiration_date_visible = sgqlc.types.Field(Boolean, graphql_name='isBolExpirationDateVisible')
    '''Flag for whether expiration date is visible on the customer bill
    of lading
    '''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class WarehouseCustomersRaw(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('source_system_id', 'warehouse_facility_id', 'customer_code', 'is_active', 'source_row_id', 'created_at', 'updated_at', 'deleted_at', '_version', 'customer_address', 'customer_state', 'customer_billing_contact_name', 'billing_address', 'customer_zip', 'billing_city', 'billing_state', 'billing_zip', 'customer_name', 'customer_city', 'customer_country', 'billing_country', 'phone_number1', 'phone_type1', 'phone_number2', 'phone_type2', 'email', '_id', 'id', 'is_broker', 'customer_address1', 'customer_address2', 'uses_metric_reporting', 'billing_work_phone', 'billing_fax')
    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    customer_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customerCode')
    '''Identifier used by the WMS to signify the customer.  This is used
    by the ODS to map to the customer enterprise id
    '''

    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    '''Is active for the customer'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    customer_address = sgqlc.types.Field(String, graphql_name='customerAddress')
    '''Customer address for the customer'''

    customer_state = sgqlc.types.Field(String, graphql_name='customerState')
    '''Customer state for the customer'''

    customer_billing_contact_name = sgqlc.types.Field(String, graphql_name='customerBillingContactName')
    '''Customer Billing Contact name for the customer'''

    billing_address = sgqlc.types.Field(String, graphql_name='billingAddress')
    '''Billing address for the customer'''

    customer_zip = sgqlc.types.Field(String, graphql_name='customerZip')
    '''Customer zip for the customer'''

    billing_city = sgqlc.types.Field(String, graphql_name='billingCity')
    '''Billing city for the customer'''

    billing_state = sgqlc.types.Field(String, graphql_name='billingState')
    '''Billing state for the customer'''

    billing_zip = sgqlc.types.Field(String, graphql_name='billingZip')
    '''Billing zip for the customer'''

    customer_name = sgqlc.types.Field(String, graphql_name='customerName')
    '''Customer name for the customer'''

    customer_city = sgqlc.types.Field(String, graphql_name='customerCity')
    '''Customer city for the customer'''

    customer_country = sgqlc.types.Field(String, graphql_name='customerCountry')
    '''Customer country for the customer'''

    billing_country = sgqlc.types.Field(String, graphql_name='billingCountry')
    '''Billing country for the customer'''

    phone_number1 = sgqlc.types.Field(String, graphql_name='phoneNumber1')
    '''Phone Number 1 for the customer'''

    phone_type1 = sgqlc.types.Field(String, graphql_name='phoneType1')
    '''Phone Type 1 for the customer'''

    phone_number2 = sgqlc.types.Field(String, graphql_name='phoneNumber2')
    '''Phone Number 2 for the customer'''

    phone_type2 = sgqlc.types.Field(String, graphql_name='phoneType2')
    '''Phone Type 2 for the customer'''

    email = sgqlc.types.Field(String, graphql_name='email')
    '''Email email for the customer'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    is_broker = sgqlc.types.Field(Boolean, graphql_name='isBroker')
    '''Is broker for the customer'''

    customer_address1 = sgqlc.types.Field(String, graphql_name='customerAddress1')
    '''Customer address1 for the customer'''

    customer_address2 = sgqlc.types.Field(String, graphql_name='customerAddress2')
    '''Customer address2 for the customer'''

    uses_metric_reporting = sgqlc.types.Field(Boolean, graphql_name='usesMetricReporting')

    billing_work_phone = sgqlc.types.Field(String, graphql_name='billingWorkPhone')
    '''Information related to the billing work phone'''

    billing_fax = sgqlc.types.Field(String, graphql_name='billingFax')
    '''Information related to billing fax number'''



class WarehousePickActivitiesRaw(sgqlc.types.Type, Node):
    '''Stores future pick activities for pallets to support fulfilling
    outbound orders
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'activity_type', 'pallet_id', 'ship_datetime', 'case_quantity', 'pallet_count', 'customer_id', 'outbound_order_id', 'warehouse_order_number', 'line_number', 'lot_id', 'pallet_code', 'warehouse_license_plate_number', 'pallet_location_name', 'pallet_location_id', 'item_id', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    activity_type = sgqlc.types.Field(String, graphql_name='activityType')
    '''Decription of the pick activity'''

    pallet_id = sgqlc.types.Field(String, graphql_name='palletId')
    '''ODS pallet identifier (references pallets_raw.id)'''

    ship_datetime = sgqlc.types.Field(Datetime, graphql_name='shipDatetime')
    '''Scheduled Ship Date for the outbound order'''

    case_quantity = sgqlc.types.Field(Int, graphql_name='caseQuantity')
    '''Number of cases on the pallet'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets'''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS identifier for the outbound order (references
    wms.outbounds_orders_raw.id)
    '''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    line_number = sgqlc.types.Field(String, graphql_name='lineNumber')
    '''Related line number on the outbound order'''

    lot_id = sgqlc.types.Field(String, graphql_name='lotId')
    '''ODS Lot identifer (references lots_raw.id)'''

    pallet_code = sgqlc.types.Field(String, graphql_name='palletCode')
    '''Internal WMS pallet code for tracking purposes'''

    warehouse_license_plate_number = sgqlc.types.Field(String, graphql_name='warehouseLicensePlateNumber')
    '''Registration number assigned to pallet for identification purposes'''

    pallet_location_name = sgqlc.types.Field(String, graphql_name='palletLocationName')
    '''WMS name for the pallet location'''

    pallet_location_id = sgqlc.types.Field(String, graphql_name='palletLocationId')
    '''ODS identifier for the warehouse pallet location (references
    wms.pallet_locations_raw.id)
    '''

    item_id = sgqlc.types.Field(String, graphql_name='itemId')
    '''ODS identifier for the item on the pallet (references
    wms.items_raw.id)
    '''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''



class WmsFacilityDefaultsRaw(sgqlc.types.Type, Node):
    '''WMS information as stored by the WMS itself. This should only be
    used for WMS-specific reporting. All other cases should use
    enterprise level facility information from lineagebase.facilities
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'warehouse_facility_name', 'warehouse_address_line1', 'warehouse_address_line2', 'warehouse_city', 'warehouse_state', 'warehouse_zip_code', 'warehouse_telephone_number', 'warehouse_fax_number', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'warehouse_facility_legal_name', 'warehouse_address_line3', 'is_bol_expiration_date_visible')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    warehouse_facility_name = sgqlc.types.Field(String, graphql_name='warehouseFacilityName')
    '''Name provided to WMS .'''

    warehouse_address_line1 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine1')
    '''Address Line 1 for the WMS'''

    warehouse_address_line2 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine2')
    '''Address Line 2 for the WMS'''

    warehouse_city = sgqlc.types.Field(String, graphql_name='warehouseCity')
    '''City of WMS'''

    warehouse_state = sgqlc.types.Field(String, graphql_name='warehouseState')
    '''State of WMS'''

    warehouse_zip_code = sgqlc.types.Field(String, graphql_name='warehouseZipCode')
    '''Zip Code of WMS'''

    warehouse_telephone_number = sgqlc.types.Field(String, graphql_name='warehouseTelephoneNumber')
    '''Telephone Number of WMS'''

    warehouse_fax_number = sgqlc.types.Field(String, graphql_name='warehouseFaxNumber')
    '''FAX Number of WMS'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    warehouse_facility_legal_name = sgqlc.types.Field(String, graphql_name='warehouseFacilityLegalName')
    '''Legal name given to warehouse'''

    warehouse_address_line3 = sgqlc.types.Field(String, graphql_name='warehouseAddressLine3')
    '''Extra information of address are accumulated in
    warehouse_address_line3
    '''

    is_bol_expiration_date_visible = sgqlc.types.Field(Boolean, graphql_name='isBolExpirationDateVisible')
    '''Flag to verify if BOL Expiration Date is Visible for particular
    facility
    '''



class WmsSystem(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'name', 'created_at', 'updated_at', 'slug')
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')

    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='updatedAt')

    slug = sgqlc.types.Field(String, graphql_name='slug')



class WoodenPalletTransactionsRaw(sgqlc.types.Type, Node):
    '''Store the various accounting transactions used to monitor wooden
    pallet usage
    '''
    __schema__ = base
    __field_names__ = ('id', 'source_system_id', 'warehouse_facility_id', 'transaction_type', 'transaction_description', 'customer_code', 'customer_id', 'warehouse_order_number', 'outbound_order_id', 'pallet_type', 'pallet_description', 'transaction_date', 'pallet_count', 'created_at', 'updated_at', 'deleted_at', 'source_row_id', '_version', '_id', 'is_order_based', 'is_archived')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    '''Unique identifier used as the upsert id from the ETL pipeline'''

    source_system_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sourceSystemId')
    '''Source System Identifier (references etl_manager.sources)'''

    warehouse_facility_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='warehouseFacilityId')
    '''Identifier used by the WMS to signify the facility.  This is used
    by the ODS to map enterprise level identifiers
    '''

    transaction_type = sgqlc.types.Field(String, graphql_name='transactionType')
    '''WMS code used for the transaction'''

    transaction_description = sgqlc.types.Field(String, graphql_name='transactionDescription')
    '''Description of the transaction'''

    customer_code = sgqlc.types.Field(String, graphql_name='customerCode')
    '''Code used by the WMS to signify the customer.  This is used by the
    ODS to map to the customer enterprise id
    '''

    customer_id = sgqlc.types.Field(String, graphql_name='customerId')
    '''ODS Customer identifier (references warehouse_customers_raw.id)'''

    warehouse_order_number = sgqlc.types.Field(String, graphql_name='warehouseOrderNumber')
    '''Outbound order number used by the warehouse management system to
    identify the order
    '''

    outbound_order_id = sgqlc.types.Field(String, graphql_name='outboundOrderId')
    '''ODS outbound order id for the pallet transaction (references
    outbound_orders_raw.id)
    '''

    pallet_type = sgqlc.types.Field(String, graphql_name='palletType')
    '''WMS pallet type code to signify the type or manufacturer of the
    pallet
    '''

    pallet_description = sgqlc.types.Field(String, graphql_name='palletDescription')
    '''Description of the pallet type'''

    transaction_date = sgqlc.types.Field(Date, graphql_name='transactionDate')
    '''Date the pallet transaction occurred'''

    pallet_count = sgqlc.types.Field(Int, graphql_name='palletCount')
    '''Number of pallets involved in the transaction'''

    created_at = sgqlc.types.Field(sgqlc.types.non_null(Datetime), graphql_name='createdAt')
    '''ODS record creation timestamp (timezone aware)'''

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')
    '''ODS record last modified timestamp (timezone aware)'''

    deleted_at = sgqlc.types.Field(Datetime, graphql_name='deletedAt')
    '''ODS record soft delete timestamp (timezone aware)'''

    source_row_id = sgqlc.types.Field(Int, graphql_name='sourceRowId')
    '''Row identifier in the source system table (if applicable)'''

    _version = sgqlc.types.Field(sgqlc.types.non_null(BigInt), graphql_name='_version')
    '''Record version number (if needed)'''

    _id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='_id')
    '''Identifier used to soft delete records'''

    is_order_based = sgqlc.types.Field(Boolean, graphql_name='isOrderBased')
    '''Flag for whether record is from the order or a pallet transaction'''

    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    '''Flag to check if record is archived or not'''



class WorkdayCostCenter(sgqlc.types.Type, Node):
    __schema__ = base
    __field_names__ = ('id', 'name', 'created_at', 'updated_at', 'dayforce_active_start', 'go_live_date', 'total_pallet_positions', 'tir_go_live_date', 'turnover_go_live_date', 'facility_workday_cost_centers_by_cost_center_id', 'facility')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')

    name = sgqlc.types.Field(String, graphql_name='name')

    created_at = sgqlc.types.Field(Datetime, graphql_name='createdAt')

    updated_at = sgqlc.types.Field(Datetime, graphql_name='updatedAt')

    dayforce_active_start = sgqlc.types.Field(Date, graphql_name='dayforceActiveStart')

    go_live_date = sgqlc.types.Field(Date, graphql_name='goLiveDate')

    total_pallet_positions = sgqlc.types.Field(Int, graphql_name='totalPalletPositions')

    tir_go_live_date = sgqlc.types.Field(Date, graphql_name='tirGoLiveDate')

    turnover_go_live_date = sgqlc.types.Field(Date, graphql_name='turnoverGoLiveDate')

    facility_workday_cost_centers_by_cost_center_id = sgqlc.types.Field(sgqlc.types.non_null(FacilityWorkdayCostCentersConnection), graphql_name='facilityWorkdayCostCentersByCostCenterId', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilityWorkdayCostCentersOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilityWorkdayCostCenterCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityWorkdayCostCenterFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of
    `FacilityWorkdayCostCenter`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilityWorkdayCostCentersOrderBy!]`): The method
      to use when ordering `FacilityWorkdayCostCenter`. (default:
      `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilityWorkdayCostCenterCondition`): A condition
      to be used in determining which values should be returned by the
      collection.
    * `filter` (`FacilityWorkdayCostCenterFilter`): A filter to be
      used in determining which values should be returned by the
      collection.
    '''

    facility = sgqlc.types.Field(sgqlc.types.non_null(WorkdayCostCenterFacilityManyToManyConnection), graphql_name='facility', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('offset', sgqlc.types.Arg(Int, graphql_name='offset', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order_by', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FacilitiesOrderBy)), graphql_name='orderBy', default=['PRIMARY_KEY_ASC'])),
        ('condition', sgqlc.types.Arg(FacilityCondition, graphql_name='condition', default=None)),
        ('filter', sgqlc.types.Arg(FacilityFilter, graphql_name='filter', default=None)),
))
    )
    '''Reads and enables pagination through a set of `Facility`.

    Arguments:

    * `first` (`Int`): Only read the first `n` values of the set.
    * `last` (`Int`): Only read the last `n` values of the set.
    * `offset` (`Int`): Skip the first `n` values from our `after`
      cursor, an alternative to cursor based pagination. May not be
      used with `last`.
    * `before` (`Cursor`): Read all values in the set before (above)
      this cursor.
    * `after` (`Cursor`): Read all values in the set after (below)
      this cursor.
    * `order_by` (`[FacilitiesOrderBy!]`): The method to use when
      ordering `Facility`. (default: `[PRIMARY_KEY_ASC]`)
    * `condition` (`FacilityCondition`): A condition to be used in
      determining which values should be returned by the collection.
    * `filter` (`FacilityFilter`): A filter to be used in determining
      which values should be returned by the collection.
    '''




########################################################################
# Unions
########################################################################

########################################################################
# Schema Entry Points
########################################################################
base.query_type = Query
base.mutation_type = Mutation
base.subscription_type = None

