{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 This software development kit (SDK) gives you quick access to the set of Contxt API's from https://ndustrial.io , both programatically and on the command line. Install \u00b6 Before proceeding, you must have Python 3.7+ installed. Library \u00b6 To install and use this SDK as a library, just use pip : python3 -m pip install --upgrade contxt-sdk CLI \u00b6 If you only need the CLI, the above method will work fine. However, we recommend using pipx 1 : # Setup pipx (once only) python3 -m pip install --user pipx python3 -m pipx ensurepath # Install pipx install contxt-sdk # Upgrade pipx upgrade contxt-sdk Run the following to ensure the installation was successful: $ contxt --version contxt, version 2.1.4 Why pipx? See here \u21a9","title":"Overview"},{"location":"#overview","text":"This software development kit (SDK) gives you quick access to the set of Contxt API's from https://ndustrial.io , both programatically and on the command line.","title":"Overview"},{"location":"#install","text":"Before proceeding, you must have Python 3.7+ installed.","title":"Install"},{"location":"#library","text":"To install and use this SDK as a library, just use pip : python3 -m pip install --upgrade contxt-sdk","title":"Library"},{"location":"#cli","text":"If you only need the CLI, the above method will work fine. However, we recommend using pipx 1 : # Setup pipx (once only) python3 -m pip install --user pipx python3 -m pipx ensurepath # Install pipx install contxt-sdk # Upgrade pipx upgrade contxt-sdk Run the following to ensure the installation was successful: $ contxt --version contxt, version 2.1.4 Why pipx? See here \u21a9","title":"CLI"},{"location":"cli/","text":"Quickstart \u00b6 Login \u00b6 To access any Contxt API, first login with your Contxt credentials: contxt auth login This will open a browser window, ask you to login (if not already), and confirm a code. If this succeeds, you should see something like Your device is now connected. Usage \u00b6 The CLI's general usage pattern is: contxt [entity] [action] For example, to get all orgs : contxt orgs get See all supported commands here .","title":"Quickstart"},{"location":"cli/#quickstart","text":"","title":"Quickstart"},{"location":"cli/#login","text":"To access any Contxt API, first login with your Contxt credentials: contxt auth login This will open a browser window, ask you to login (if not already), and confirm a code. If this succeeds, you should see something like Your device is now connected.","title":"Login"},{"location":"cli/#usage","text":"The CLI's general usage pattern is: contxt [entity] [action] For example, to get all orgs : contxt orgs get See all supported commands here .","title":"Usage"},{"location":"cli/commands/","text":"contxt \u00b6 Contxt CLI Usage: contxt [OPTIONS] COMMAND [ARGS]... Options: --env [production|staging] Environment for all API's -v, --version Show the version and exit. assets \u00b6 Assets. Usage: contxt assets [OPTIONS] COMMAND [ARGS]... get \u00b6 Get assets Usage: contxt assets get [OPTIONS] TYPE Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by types \u00b6 Get asset types Usage: contxt assets types [OPTIONS] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by auth \u00b6 Authenticate with Contxt. Usage: contxt auth [OPTIONS] COMMAND [ARGS]... login \u00b6 Login to Contxt. Usage: contxt auth login [OPTIONS] logout \u00b6 Logout of Contxt. Usage: contxt auth logout [OPTIONS] token \u00b6 Fetch an access token for an API. Usage: contxt auth token [OPTIONS] AUDIENCE clusters \u00b6 Clusters Usage: contxt clusters [OPTIONS] COMMAND [ARGS]... get \u00b6 Get clusters Usage: contxt clusters get [OPTIONS] [CLUSTER_SLUG] Options: --org TEXT Org slug [required] --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by login \u00b6 Get clusters Usage: contxt clusters login [OPTIONS] HOST Options: --org TEXT Org slug [required] register \u00b6 Usage: contxt clusters register [OPTIONS] HOST Options: --org TEXT Org slug [required] --description TEXT Information about what this cluster is for and what environment it belongs to [required] --infrastructure-id TEXT The ID of the infrastructure registered in our system. Ask ndustrial.io DevOps what this value should be [required] --region TEXT The AWS region where this cluster is deployed [required] --slug TEXT The slugified name you would like to use for this cluster. You will need to reference this in other commands so it's ideal to make this value easy to remember [required] ems \u00b6 Energy Management System. Usage: contxt ems [OPTIONS] COMMAND [ARGS]... bills \u00b6 Get utility bills Usage: contxt ems bills [OPTIONS] FACILITY_ID Options: --start [%Y-%m-%d] Start date --end [%Y-%m-%d] End date --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by export \u00b6 Export data for facilities Usage: contxt ems export [OPTIONS] [FACILITY_IDS]... Options: --include TEXT Data to export --start [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Start time --end [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] End time --output DIRECTORY Path for output main-data \u00b6 Get main service data Usage: contxt ems main-data [OPTIONS] FACILITY_ID Options: --resource-type RESOURCETYPE Resource type --start [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Start time --end [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] End time mains \u00b6 Get main services Usage: contxt ems mains [OPTIONS] FACILITY_ID Options: --resource-type RESOURCETYPE Resource type --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by spend \u00b6 Get utility spend Usage: contxt ems spend [OPTIONS] FACILITY_ID Options: --resource-type RESOURCETYPE Resource type --start [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Start time --end [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] End time --interval [daily|monthly] Time interval usage \u00b6 Get utility usage Usage: contxt ems usage [OPTIONS] FACILITY_ID Options: --resource-type RESOURCETYPE Resource type --start [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Start time --end [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] End time --interval [daily|monthly] Time interval facilities \u00b6 Facilities. Usage: contxt facilities [OPTIONS] COMMAND [ARGS]... create \u00b6 Create facilities Usage: contxt facilities create [OPTIONS] ORG_ID Options: --input FILENAME CSV of facilities to create [required] get \u00b6 Get facilities Usage: contxt facilities get [OPTIONS] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by iot \u00b6 Internet-of-Things. Usage: contxt iot [OPTIONS] COMMAND [ARGS]... data \u00b6 IoT Field Data Usage: contxt iot data [OPTIONS] COMMAND [ARGS]... delete \u00b6 Delete a data point Usage: contxt iot data delete [OPTIONS] Options: --output-id INTEGER Output ID to delete from [required] --field-human-name TEXT The field to delete from. Ex: power.demand, power.usage [required] --interval [0|60|900|3600] Time interval [required] --time [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] The timestamp of the datapoint. Ex: 2020-07-21T05:31:00Z [required] get \u00b6 Get field data Usage: contxt iot data get [OPTIONS] FEED_ID Options: --start [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Start time --end [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] End time --interval [0|60|900|3600] Time interval --output FILE Path for output feeds \u00b6 Get feeds Usage: contxt iot feeds [OPTIONS] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by --facility_id INTEGER Filter on Facility ID fields \u00b6 IoT Fields Usage: contxt iot fields [OPTIONS] COMMAND [ARGS]... create \u00b6 Create (provision) fields Usage: contxt iot fields create [OPTIONS] FEED_KEY Options: --input FILENAME CSV of fields to create [required] delete \u00b6 Delete (unprovision) fields Usage: contxt iot fields delete [OPTIONS] [FIELD_ID]... get \u00b6 Get fields Usage: contxt iot fields get [OPTIONS] FEED_KEY Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by unprovisioned \u00b6 Get unprovisioned fields Usage: contxt iot fields unprovisioned [OPTIONS] FEED_KEY Options: --output FILENAME Path for output groupings \u00b6 IoT Field Groupings Usage: contxt iot groupings [OPTIONS] COMMAND [ARGS]... add-field \u00b6 Add field to grouping Usage: contxt iot groupings add-field [OPTIONS] GROUPING_ID FIELD_ID create \u00b6 Create a new grouping Usage: contxt iot groupings create [OPTIONS] FACILITY_ID Options: --label TEXT [required] --description TEXT [required] --is-public BOOLEAN [required] --field-category-id TEXT [required] get \u00b6 Get field groupings Usage: contxt iot groupings get [OPTIONS] FACILITY_ID Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by orgs \u00b6 Organizations. Usage: contxt orgs [OPTIONS] COMMAND [ARGS]... get \u00b6 Get organizations Usage: contxt orgs get [OPTIONS] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by projects \u00b6 Projects. Usage: contxt projects [OPTIONS] COMMAND [ARGS]... get \u00b6 Get project(s) Usage: contxt projects get [OPTIONS] [ID] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by get-edge-nodes \u00b6 Get edge nodes for a project Usage: contxt projects get-edge-nodes [OPTIONS] ORG_ID PROJECT_ID Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by get-services \u00b6 Get services for a project Usage: contxt projects get-services [OPTIONS] ID Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by services \u00b6 Services. Usage: contxt services [OPTIONS] COMMAND [ARGS]... get \u00b6 Get service(s) Usage: contxt services get [OPTIONS] [ID] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"Commands"},{"location":"cli/commands/#contxt","text":"Contxt CLI Usage: contxt [OPTIONS] COMMAND [ARGS]... Options: --env [production|staging] Environment for all API's -v, --version Show the version and exit.","title":"contxt"},{"location":"cli/commands/#assets","text":"Assets. Usage: contxt assets [OPTIONS] COMMAND [ARGS]...","title":"assets"},{"location":"cli/commands/#get","text":"Get assets Usage: contxt assets get [OPTIONS] TYPE Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"get"},{"location":"cli/commands/#types","text":"Get asset types Usage: contxt assets types [OPTIONS] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"types"},{"location":"cli/commands/#auth","text":"Authenticate with Contxt. Usage: contxt auth [OPTIONS] COMMAND [ARGS]...","title":"auth"},{"location":"cli/commands/#login","text":"Login to Contxt. Usage: contxt auth login [OPTIONS]","title":"login"},{"location":"cli/commands/#logout","text":"Logout of Contxt. Usage: contxt auth logout [OPTIONS]","title":"logout"},{"location":"cli/commands/#token","text":"Fetch an access token for an API. Usage: contxt auth token [OPTIONS] AUDIENCE","title":"token"},{"location":"cli/commands/#clusters","text":"Clusters Usage: contxt clusters [OPTIONS] COMMAND [ARGS]...","title":"clusters"},{"location":"cli/commands/#get_1","text":"Get clusters Usage: contxt clusters get [OPTIONS] [CLUSTER_SLUG] Options: --org TEXT Org slug [required] --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"get"},{"location":"cli/commands/#login_1","text":"Get clusters Usage: contxt clusters login [OPTIONS] HOST Options: --org TEXT Org slug [required]","title":"login"},{"location":"cli/commands/#register","text":"Usage: contxt clusters register [OPTIONS] HOST Options: --org TEXT Org slug [required] --description TEXT Information about what this cluster is for and what environment it belongs to [required] --infrastructure-id TEXT The ID of the infrastructure registered in our system. Ask ndustrial.io DevOps what this value should be [required] --region TEXT The AWS region where this cluster is deployed [required] --slug TEXT The slugified name you would like to use for this cluster. You will need to reference this in other commands so it's ideal to make this value easy to remember [required]","title":"register"},{"location":"cli/commands/#ems","text":"Energy Management System. Usage: contxt ems [OPTIONS] COMMAND [ARGS]...","title":"ems"},{"location":"cli/commands/#bills","text":"Get utility bills Usage: contxt ems bills [OPTIONS] FACILITY_ID Options: --start [%Y-%m-%d] Start date --end [%Y-%m-%d] End date --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"bills"},{"location":"cli/commands/#export","text":"Export data for facilities Usage: contxt ems export [OPTIONS] [FACILITY_IDS]... Options: --include TEXT Data to export --start [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Start time --end [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] End time --output DIRECTORY Path for output","title":"export"},{"location":"cli/commands/#main-data","text":"Get main service data Usage: contxt ems main-data [OPTIONS] FACILITY_ID Options: --resource-type RESOURCETYPE Resource type --start [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Start time --end [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] End time","title":"main-data"},{"location":"cli/commands/#mains","text":"Get main services Usage: contxt ems mains [OPTIONS] FACILITY_ID Options: --resource-type RESOURCETYPE Resource type --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"mains"},{"location":"cli/commands/#spend","text":"Get utility spend Usage: contxt ems spend [OPTIONS] FACILITY_ID Options: --resource-type RESOURCETYPE Resource type --start [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Start time --end [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] End time --interval [daily|monthly] Time interval","title":"spend"},{"location":"cli/commands/#usage","text":"Get utility usage Usage: contxt ems usage [OPTIONS] FACILITY_ID Options: --resource-type RESOURCETYPE Resource type --start [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Start time --end [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] End time --interval [daily|monthly] Time interval","title":"usage"},{"location":"cli/commands/#facilities","text":"Facilities. Usage: contxt facilities [OPTIONS] COMMAND [ARGS]...","title":"facilities"},{"location":"cli/commands/#create","text":"Create facilities Usage: contxt facilities create [OPTIONS] ORG_ID Options: --input FILENAME CSV of facilities to create [required]","title":"create"},{"location":"cli/commands/#get_2","text":"Get facilities Usage: contxt facilities get [OPTIONS] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"get"},{"location":"cli/commands/#iot","text":"Internet-of-Things. Usage: contxt iot [OPTIONS] COMMAND [ARGS]...","title":"iot"},{"location":"cli/commands/#data","text":"IoT Field Data Usage: contxt iot data [OPTIONS] COMMAND [ARGS]...","title":"data"},{"location":"cli/commands/#delete","text":"Delete a data point Usage: contxt iot data delete [OPTIONS] Options: --output-id INTEGER Output ID to delete from [required] --field-human-name TEXT The field to delete from. Ex: power.demand, power.usage [required] --interval [0|60|900|3600] Time interval [required] --time [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] The timestamp of the datapoint. Ex: 2020-07-21T05:31:00Z [required]","title":"delete"},{"location":"cli/commands/#get_3","text":"Get field data Usage: contxt iot data get [OPTIONS] FEED_ID Options: --start [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Start time --end [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] End time --interval [0|60|900|3600] Time interval --output FILE Path for output","title":"get"},{"location":"cli/commands/#feeds","text":"Get feeds Usage: contxt iot feeds [OPTIONS] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by --facility_id INTEGER Filter on Facility ID","title":"feeds"},{"location":"cli/commands/#fields","text":"IoT Fields Usage: contxt iot fields [OPTIONS] COMMAND [ARGS]...","title":"fields"},{"location":"cli/commands/#create_1","text":"Create (provision) fields Usage: contxt iot fields create [OPTIONS] FEED_KEY Options: --input FILENAME CSV of fields to create [required]","title":"create"},{"location":"cli/commands/#delete_1","text":"Delete (unprovision) fields Usage: contxt iot fields delete [OPTIONS] [FIELD_ID]...","title":"delete"},{"location":"cli/commands/#get_4","text":"Get fields Usage: contxt iot fields get [OPTIONS] FEED_KEY Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"get"},{"location":"cli/commands/#unprovisioned","text":"Get unprovisioned fields Usage: contxt iot fields unprovisioned [OPTIONS] FEED_KEY Options: --output FILENAME Path for output","title":"unprovisioned"},{"location":"cli/commands/#groupings","text":"IoT Field Groupings Usage: contxt iot groupings [OPTIONS] COMMAND [ARGS]...","title":"groupings"},{"location":"cli/commands/#add-field","text":"Add field to grouping Usage: contxt iot groupings add-field [OPTIONS] GROUPING_ID FIELD_ID","title":"add-field"},{"location":"cli/commands/#create_2","text":"Create a new grouping Usage: contxt iot groupings create [OPTIONS] FACILITY_ID Options: --label TEXT [required] --description TEXT [required] --is-public BOOLEAN [required] --field-category-id TEXT [required]","title":"create"},{"location":"cli/commands/#get_5","text":"Get field groupings Usage: contxt iot groupings get [OPTIONS] FACILITY_ID Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"get"},{"location":"cli/commands/#orgs","text":"Organizations. Usage: contxt orgs [OPTIONS] COMMAND [ARGS]...","title":"orgs"},{"location":"cli/commands/#get_6","text":"Get organizations Usage: contxt orgs get [OPTIONS] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"get"},{"location":"cli/commands/#projects","text":"Projects. Usage: contxt projects [OPTIONS] COMMAND [ARGS]...","title":"projects"},{"location":"cli/commands/#get_7","text":"Get project(s) Usage: contxt projects get [OPTIONS] [ID] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"get"},{"location":"cli/commands/#get-edge-nodes","text":"Get edge nodes for a project Usage: contxt projects get-edge-nodes [OPTIONS] ORG_ID PROJECT_ID Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"get-edge-nodes"},{"location":"cli/commands/#get-services","text":"Get services for a project Usage: contxt projects get-services [OPTIONS] ID Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"get-services"},{"location":"cli/commands/#services","text":"Services. Usage: contxt services [OPTIONS] COMMAND [ARGS]...","title":"services"},{"location":"cli/commands/#get_8","text":"Get service(s) Usage: contxt services get [OPTIONS] [ID] Options: --fields TEXT Comma-delimited list of fields to return --sort TEXT Field to sort by","title":"get"},{"location":"sdk/worker/","text":"Worker \u00b6 We define a worker to be a machine client that operates on a schedule. This client also has associated scopes and roles to restrict how it can communicate with a Contxt API. Machine Client \u00b6 Within Contxt, a machine client is identified by a unique client id and secret pair. These credentials are generated for you when creating a service in Contxt. For more detailed information about this authentication flow, see here . Base Worker Class \u00b6 Our SDK provides a BaseWorker class to help abstract the authentication process between a machine client and a Contxt API. Upon instantation, the class will look for your machine credientials in the environment variables CLIENT_ID and CLIENT_SECRET , and then store this pair as the attribute auth . Next, your worker's business logic is defined in the do_work() method. If we need to make requests to a Contxt API here, we simply inject our credentials when instantiating the service class (i.e. FacilitiesService(self.auth) ). Now, that class handles generating, sending, and refreshing your JWT to authenticate requests to that API. For a more concrete example: from contxt.services.facilities import FacilitiesService from contxt.workers import BaseWorker class ExampleWorker(BaseWorker): def __init__(self): super().__init__() self.facilities_service = FacilitiesService(self.auth) def do_work(self): facilities = self.facilities_service.get_facilities() print(facilities) if __name__ == \"__main__\": worker = ExampleWorker() worker.do_work()","title":"Worker"},{"location":"sdk/worker/#worker","text":"We define a worker to be a machine client that operates on a schedule. This client also has associated scopes and roles to restrict how it can communicate with a Contxt API.","title":"Worker"},{"location":"sdk/worker/#machine-client","text":"Within Contxt, a machine client is identified by a unique client id and secret pair. These credentials are generated for you when creating a service in Contxt. For more detailed information about this authentication flow, see here .","title":"Machine Client"},{"location":"sdk/worker/#base-worker-class","text":"Our SDK provides a BaseWorker class to help abstract the authentication process between a machine client and a Contxt API. Upon instantation, the class will look for your machine credientials in the environment variables CLIENT_ID and CLIENT_SECRET , and then store this pair as the attribute auth . Next, your worker's business logic is defined in the do_work() method. If we need to make requests to a Contxt API here, we simply inject our credentials when instantiating the service class (i.e. FacilitiesService(self.auth) ). Now, that class handles generating, sending, and refreshing your JWT to authenticate requests to that API. For a more concrete example: from contxt.services.facilities import FacilitiesService from contxt.workers import BaseWorker class ExampleWorker(BaseWorker): def __init__(self): super().__init__() self.facilities_service = FacilitiesService(self.auth) def do_work(self): facilities = self.facilities_service.get_facilities() print(facilities) if __name__ == \"__main__\": worker = ExampleWorker() worker.do_work()","title":"Base Worker Class"}]}